{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/docs/index.html","text":"","title":"Blue Brain Nexus"},{"location":"/docs/index.html#blue-brain-nexus","text":"Blue Brain Nexus is an ecosystem that allows you to organize and better leverage your data through the use of a Knowledge Graph. In addition to the products listed here, you’ll find a rich ecosystem of libraries and tools.","title":"Blue Brain Nexus"},{"location":"/docs/index.html#products","text":"The Blue Brain Nexus ecosystem encompasses a broad range of capabilities that are brought to you across three complementary products and a suite of utilities.","title":"Products"},{"location":"/docs/index.html#nexus-fusion","text":"Enabling Collaborative Data and Knowledge Discovery\nFusion is our extensible web application. It hosts different apps to accommodate various use cases. It comes by default with Studios (where you work with data), Admin (for managing the Nexus instance), and will soon support Workflows to organise your data activities. It runs on top of the Delta web services, and integrates neatly with our Forge python framework.\nRead more about Fusion","title":"Nexus Fusion"},{"location":"/docs/index.html#nexus-forge","text":"Building and Using Knowledge Graphs Made Easy\nNexus Forge is a domain-agnostic, generic and extensible Python framework enabling non-expert users to create and manage knowledge graphs.\nRead more about Forge","title":"Nexus Forge"},{"location":"/docs/index.html#nexus-delta","text":"Managing the Data and Knowledge Graph Lifecycle\nA scalable and secure service to store and leverage all your data, neatly organised in a Knowledge Graph. It offers an API to perform all your data management operations, this way it can easily integrate with your software stack. Its advanced indexing capabilities automatically build views from your metadata.\nRead more about Delta","title":"Nexus Delta"},{"location":"/docs/index.html#utilities","text":"The Nexus ecosystem leverages a set of smaller open-source utilities.\nDiscover the utilities","title":"Utilities"},{"location":"/docs/index.html#quick-start-guide","text":"Do you know know what a knowledge graph is? Or want to deepen your understanding? Follow our introduction.\nWant to get started with Nexus right away? We provide a tutorial that uses our sandbox environment to let you try the functionalities.\nReady to deploy your own instance of Nexus? Follow our guide.","title":"Quick Start Guide"},{"location":"/docs/index.html#roadmap","text":"Curious about our upcoming features? Read our open Roadmap to find out more.","title":"Roadmap"},{"location":"/docs/getting-started/index.html","text":"","title":"Getting Started"},{"location":"/docs/getting-started/index.html#getting-started","text":"The Nexus ecosystem is a data catalog with several technologies and techniques used to get insight and explore the data within the ecosystem.\nOne of the powerful ways to query data is through the Knowledge Graph built in Nexus. For that reason we encourage you to get familiar with these concepts reading Understanding Knowledge Graphs.\nThe next steps would be to either try Nexus using the Sandbox deployment or run Nexus locally.","title":"Getting Started"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html","text":"","title":"Understanding Knowledge Graphs"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#understanding-knowledge-graphs","text":"This section will help you understand knowledge graphs and related standards and technologies.","title":"Understanding Knowledge Graphs"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#what-is-a-knowledge-graph-","text":"A knowledge graph is a graph structure that links entities together. The links between the entities contain knowledge, based on how they connect to each other. For example, an apple can be connected to a tree (to show that it grows on trees) or in another case connected to a pie recipe (to show that it is part of a recipe). It is a formalized knowledge that enables programmatical reasoning about concepts in the world around us.\nIn this introduction to knowledge graphs the authors conclude that there is no clear definition of what a knowledge graph is. The term itself was coined in 2012 by Google as they introduced their Knowledge Graph as a mean of finding more relevant related search results by linking connected data on the web. As an idea, knowledge graphs are similar to semantic networks which date back to the 60’s and 70’s. The difference mainly lies in the size of the network, with knowledge graphs being larger. Knowledge graphs are also often generated in a rather manual way (data ingestion, data cleaning) instead of being generated and governed by a set of strict logical rules.\nFor a further introduction to knowledge graphs the “What is a knowledge graph” video from the CS520 Stanford course is a good resource.","title":"What is a knowledge graph?"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#the-graph-structure","text":"A knowledge graph consists of entities (nodes) that are connected to each other with relations (edges).\nThe entity is an object with properties that describe it. For example, a person, a company, an event, a thing… These properties can be called the entity’s “metadata”.\nThe relation describes how entities are connected. For example, being member of, visiting a place, belonging to a country…\nIt’s worth noting that having this graph data structure makes it easy to add new data into an existing graph by connecting new entities and new relations.","title":"The graph structure"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#describing-knowledge-in-a-graph","text":"After deciding what concept or idea that we wish to model in a knowledge graph, we need to collect the metadata that describes our entities. In order to make our data interoperable with other data and to allow us to import data from existing sources we should use a shared language when describing entities and relations. This is achieved using an ontology.\nThe ontology is a kind of dictionary containing types that can be used to describe entities. The metadata is created by picking a type from the ontology that matches what you wish to describe and defining the properties of the chosen type. E.g. a person can be described by a Person type. The name of the person can be encoded in a givenName property. This results in a set of data that can be processed both by humans and computers (as it is structured).\nFor example, in the image below, you can see that the entity Toy Story with a property Release date that has the value March 29th, 1995 and the Director property with the value John Lasseter.","title":"Describing knowledge in a graph"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#inferring-new-data-from-existing-relationships","text":"Since the entities are encoded using well-defined ontologies it allows us to draw conclusions based on the data we have and create new inferred data. This is done by giving the knowledge graph to an inference engine that can apply a set of logical rules to the data to derive new information. For example, if we have a knowledge graph containing persons and their birth year we could create an inference engine with rules that determine whether a person is a child or a retired person.\nIn the second example below, we have Toy Story, it has characters (using the relation called Character) and we have asserted the cast of characters. Having defined this, we can now define a rule that instructs the inference engine to create new relations Voice Cast whenever we find the Cast of a Character. This enables us to query the graph and directly get Toy Story’s voices cast without having to navigate through its Cast first.\nIn reality inferring knowledge is a complex topic. This video lecture shows some real-world examples of algorithms and rules for inference engines. E.g. reasoning about a persons creditworthiness based on what their home address is or trying to spot fake papers that have been submitted to a journal.","title":"Inferring new data from existing relationships"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#growing-a-knowledge-graph","text":"A graph is a flexible data structure, and an ontology can evolve as new data comes in. As a result, data can continually be added to help serve new use cases.\nThe illustration below shows how the initial graph representing Toy Story can be augmented to capture many other related domains such as:\nToy Story’s similar movies (e.g. Cars) Cities and associations related to motion picture production (e.g. Motion Picture Association of America) Places and people connected to animation movies (e.g. Steve Jobs)","title":"Growing a knowledge graph"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#encoding-knowledge-graphs-rdf-json-ld-and-other-standards","text":"","title":"Encoding knowledge graphs: RDF, JSON-LD, and other standards"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#rdf","text":"How do you encode knowledge graphs in a way that is interoperable with other applications and can be integrated with other data sources? You use some common formalism, a language, to describe your entities and relationships. For knowledge graphs this format is RDF. RDF (Resource Description Framework) is a data format where every piece of knowledge can be broken down into a structure (subject, predicate and object) called triple.\nRDF-formatted data can be queried using a query language such as SPARQL. This allows us to create applications that can process knowledge graphs, for example, to infer new data or get answers to questions we may have for the data that is stored in the knowledge graph.","title":"RDF"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#json-ld","text":"RDF is however only a part of what we need in order to encode a graph. We also need an implementation, a “concrete RDF syntax” that shows how to write down an RDF-formatted graph in a format that can be shared e.g. between applications. One syntax that can be used is JSON-LD. It stands for JSON for Linking Data.\nWe start by looking at a simple JSON example:\n[\n  \t{\n            \"title\":\"Floating island\",\n            \"author\":\"Unknown\"\n  \t},\n  \t{\n            \"title\":\"Apple balloon\",\n            \"author\":\"Grant Achatz\"\n  \t},\n  \t{\n            \"title\":\"Opera\",\n            \"author\":\"Cyriaque Gavillon\"\n  \t}\n\n  ]\nAfter reading the above JSON we can ask ourselves what this data describes? If we don’t recognise the names we may think these perhaps are titles of books or movies. There is clearly a lack of context resulting in an ambiguity. JSON-LD allows to solve the ambiguity problem by enabling a semantic-preserving data encoding. This is achieved by adding an @context object where every key is associated with an identifier.\nIf we extend the JSON example with the payload below, then both a machine and a human can look up the context to find out that the JSON refers to recipes. I.e. Floating island, Apple balloon and Opera.\n[\n  \t{\n            \"@context\":\"https://json-ld.org/contexts/recipe.jsonld\",\n            \"title\":\"Floating island\",\n            \"author\":\"Unknown\"\n  \t},\n  \t{\n            \"@context\":\"https://json-ld.org/contexts/recipe.jsonld\",\n            \"title\":\"Apple balloon\",\n            \"author\":\"Grant Achatz\"\n  \t},\n  \t{\n            \"@context\":\"https://json-ld.org/contexts/recipe.jsonld\",\n            \"title\":\"Opera\",\n            \"author\":\"Cyriaque Gavillon\"\n  \t }\n\n  ]\nIn the JSON-LD playground you can try examples of JSON-LD.","title":"JSON-LD"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#using-schema-org-as-a-common-vocabulary","text":"Having defined a grammar (RDF) and a concrete syntax (JSON-LD) to encode knowledge graphs, there is one more thing to add in order to achieve interoperability with other knowledge graphs. We need a common vocabulary that defines which properties an entity should have - an ontology.\nOne such ontology that is commonly used is the Schema.org vocabulary. You can look up how different concepts are described by searching for them on the schema.org web page. For example, a video game entity is described by properties such as cheatCode or gamePlatform.","title":"Using Schema.org as a common vocabulary"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#reasoning-with-owl","text":"If you wish to reason about knowledge that is stored in a knowledge graph it is useful to have a language that can express properties and relations for the entities in the ontology (the dictionary) that your knowledge graph consists of. OWL (Web Ontology Language) is such a language. It is built on top of RDF (which can be seen as the grammar for OWL) and it is different from JSON-LD, since JSON-LD merely describes the syntax we use to encode our knowledge graph.\nWith OWL you can form axioms and expressions for the entities in your ontology. For example, expressing that a woman is a subclass of a person:\nSubClassOf( :Woman :Person )","title":"Reasoning with OWL"},{"location":"/docs/getting-started/understanding-knowledge-graphs.html#references-and-resources-","text":"The sections below contain references and resources that can be used to learn more about knowledge graphs.\nIntroduction: What Is a Knowledge Graph? in Knowledge Graphs: Methodology, Tools and Selected Use Cases Author: Fensel, Dieter et al Published: Springer International Publishing, 2020 DOI: 10.1007/978-3-030-37439-6_1 What are some knowledge graph inference algorithms? Published: 23.04.2020, Youtube.com What is the role of knowledge graphs in machine learning? - Challenges for explainable AI Published: 20.05.2020, Youtube.com Programming the Semantic Web Author: Segaran, Toby et al Published: O’Reilly Media, Inc., 2009 ISBN: 9780596153816 What is a knowledge graph? Published: 23.04.2020, Youtube.com RDF 1.1 primer Author: W3C Working Group Editors: Schreiber, G., Raimond, Y Published: 24.06.2014 JSON-LD 1.1 Editors: Kellogg G., Champin P-A., Longley D. Published: 16.07.2020 JSON LD - curated resources This is probably one of the best resources to start with if you are interested in JSON-LD. OWL 2 Web Ontology Language Document Overview (Second Edition) Author: W3C Working Group Published: 11.12.2012 Linked Data Patterns Authors: Leigh Dodds, Ian Davis Published: 31.05.2012 Validating RDF Data Authors: Jose Emilio labra Gayo, Eric Prud’hommeaux, Iovka Boneva, Dimitris Kontokostas Published: 2012","title":"References and resources:"},{"location":"/docs/getting-started/try-nexus.html","text":"","title":"Try Nexus"},{"location":"/docs/getting-started/try-nexus.html#try-nexus","text":"In this tutorial, you will use the core features of the Nexus ecosystem through our sandbox. This requires minimal technical knowledge but the ability to install a Python library and run a jupyter notebook.\nIn the first step, you’ll learn:\nto login into our Nexus Sandbox, create an organization and project, get your personal token.\nIn the second step, you’ll learn:\ninstall Nexus Forge, configure a Knowledge Graph forge, transform data, load the transformed data into the project, search for data using a SPARQL query.\nIn the third step, you’ll learn:\ncreate a Studio in Nexus Fusion, visualize and filter loaded data.\nFinally, check our Learn More section for more advanced tutorials based on the same datasets.","title":"Try Nexus"},{"location":"/docs/getting-started/try-nexus.html#configuring-your-project-in-nexus-fusion","text":"The Nexus Sandbox is a deployment of Nexus Delta and Fusion publicly available to anybody.\nNexus Fusion is the web interface that you will use in order to interact with Nexus Delta (the web services that manages the underlying knowledge graph).\nPlease bear in mind that the data stored in the Nexus Sandbox is being purged at regular intervals. We recommend you do not store any sensitive data in this environment since it is accessible to many other users.\nThe first step is to login, by clicking in the upper right corner of the screen. You can login with your Github credentials.\nOnce logged in, you can navigate to the Admin interface through the left navigation sidebar, in order to create the correct organizations and projects for your data to live.\nFor this tutorial, you can use an existing organization called nexustutorial (by clicking on the so-named organization), or you can create your own organization (by clicking the Create Organization button at the top).\nIn an organization, you will find the list of existing projects, and you can create your own. Projects (as well as organizations) support permissions, which means that you cannot edit any organizations or projects.\nFor this tutorial, you will need to create your own project.\nChoose a name and a description for your project. For more information about advanced settings, see here.\nOnce the project is created, you’ll land on the project view. There is no resources at first. Wait for it.\nYou will quickly see that the project has finished indexing (top right corner).\nWhich means that the system has created default indices and storage for you.\nWe’re all set! We now have a project to host our ressources and datasets. Let’s move on to the second part of this turotial.","title":"Configuring your Project in Nexus Fusion"},{"location":"/docs/getting-started/try-nexus.html#working-with-data-in-nexus-forge","text":"We’ll load the MovieLens dataset into the created project within Nexus Delta using the python framework Nexus Forge.\nA jupyter notebook is available for this part of the tutorial and can be spawn easily using Google Colab, binder, or locally:\nGoogle Colab binder Github\nFor local execution, Nexus Forge can be installed using these instructions. Make sure that the jupyter notebook|lab is launched in the same virtual environment where Nexus Forge is installed. Alternatively, set up a specialized kernel.\nIf you want to try some other examples of Nexus Forge, you can use these notebooks.\nThe next step is to use this query to create a Studio view in Nexus Fusion.","title":"Working with Data in Nexus Forge"},{"location":"/docs/getting-started/try-nexus.html#exploring-the-graph-in-nexus-fusion","text":"Login the Sandbox and navigate your your previously created project.\nClick on the Manage Studios for this project button on the top right corner of the project.\nStudios are listed here. Click on Create Studio.\nGive a name to your Studio and click Save.\nHere’s your empty Studio. Click the button to Add Workspace.\nGive a name to your Workspace and click Save.\nYou now have one Workspace configured. Click the button to Add Dashboard.\nIn order to query the graph in a Studio Dashboard, a small modification of the previous query is necessary. You can find more information about it in the Studio docs.\nPREFIX vocab: <https://sandbox.bluebrainnexus.io/v1/vocabs/>\nPREFIX nxv: <https://bluebrain.github.io/nexus/vocabulary/>\nSELECT DISTINCT ?self ?title\nWHERE {\n?id nxv:self ?self ;\n    nxv:deprecated false ;\n    vocab:title ?title ;\n    ^vocab:movieId / vocab:tag \"thought-provoking\" .\n}\nLIMIT 20\nChoose a name for your Dashboard, copy the query. Click Save.\nAnd there are the results:\nGood job! You just finished the introductory course to Nexus using our Sandbox. You can now install Nexus locally or continue with the tutorials below.","title":"Exploring the Graph in Nexus Fusion"},{"location":"/docs/getting-started/try-nexus.html#learn-more","text":"","title":"Learn More"},{"location":"/docs/getting-started/try-nexus.html#querying-knowledge-graph-using-sparql","text":"This tutorial introduces the basics of SPARQL, a query language for querying RDF based knowledge graph. It also demonstrates how to query a Nexus SparqlView.\nYou’ll build queries to explore and navigate a knowledge graph using SPARQL and Nexus.\nYou’ll learn:\nthe basics of the SPARQL query language, how to connect to and query a SparqlView in Nexus.\nYou’ll need Python 3.5 or higher with support for Jupyter notebook.\nThis tutorial code is available on:\nGithub Google Colab","title":"Querying knowledge graph using SPARQL"},{"location":"/docs/getting-started/try-nexus.html#querying-a-knowledge-graph-using-elasticsearch","text":"The goal of this notebook is to learn how to connect to an Elasticsearch view and run queries against it.\nIt is not a tutorial about the Elasticsearch DSL language for which many well written learning resources are available.\nYou’ll build a simple python client to connect to a Nexus ElasticSearchView and query a knowledge graph using Elasticsearch DSL.\nYou’ll learn how to connect to and query a ElasticSearchView in Nexus.\nYou’ll need Python 3.5 or higher with support for Jupyter notebook.\nThe tutorial code is available on:\nGithub Google Colab","title":"Querying a Knowledge Graph using Elasticsearch"},{"location":"/docs/getting-started/try-nexus.html#linking-data-on-the-web","text":"In this tutorial, we demonstrate how to consume structured data published on the web according to the Linked data principles to extend and enrich a knowledge graph.\nYou’ll build a simple pipeline to query entities managed within Blue Brain Nexus, connect them with entities available on the web as structured data and extend and enrich their metadata.\nYou’ll learn:\nan understanding of linked data principles, how to query data stored in a Nexus SparqlView, how to query structured data on the web, how to extend the metadata of entities managed within Blue Brain Nexus with external structured data on the web: we target Wikidata as an example, how to update entities within Blue Brain Nexus using the SDK and enrich their metadata.\nYou’ll need Python 3.5 or higher with support for Jupyter notebook.\nThis tutorial code is available on:\nGithub Google Colab","title":"Linking data on the web"},{"location":"/docs/getting-started/running-nexus.html","text":"","title":"Running Nexus"},{"location":"/docs/getting-started/running-nexus.html#running-nexus","text":"If you wish to quickly try out Nexus, we provide a public sandbox. For a more in-depth test-drive of Nexus on your machine, we recommend the Docker Swarm approach. For a production deployment on your in-house or cloud infrastructure, please refer to our deployment guide.","title":"Running Nexus"},{"location":"/docs/getting-started/running-nexus.html#using-the-public-sandbox","text":"A public instance of Nexus is running at https://sandbox.bluebrainnexus.io/web. You can log in with a GitHub account. It’s provided for evaluation purposes only, without any guarantees.\nThe API root is https://sandbox.bluebrainnexus.io/v1.\nNote Do not ingest any proprietary or sensitive data. The environment will be wiped regularly, your data and credentials can disappear anytime.","title":"Using the public sandbox"},{"location":"/docs/getting-started/running-nexus.html#run-nexus-locally-with-docker","text":"","title":"Run Nexus locally with Docker"},{"location":"/docs/getting-started/running-nexus.html#requirements","text":"","title":"Requirements"},{"location":"/docs/getting-started/running-nexus.html#docker","text":"Regardless of your OS, make sure to run a recent version of Docker (community edition). This was tested with versions 18.03.1 and above. You might need to get installation packages directly from the official Docker website if the one provided by your system package manager is outdated.\nCommand :\ndocker --version\nExample :\n$ docker version\nDocker version 18.09.1, build 4c52b90","title":"Docker"},{"location":"/docs/getting-started/running-nexus.html#memory-and-cpu-limits","text":"On macOS and Windows, Docker effectively runs containers inside a VM created by the system hypervisor. Nexus requires at least 2 CPUs and 8 GiB of memory in total. You can increase the limits in Docker settings in the menu Preferences > Advanced.\nFor a proper evaluation using Docker Swarm or Minikube/Kubernetes, at least 16GiB of RAM is needed to run the provided templates. Feel free to tweak memory limits in order to fit your hardware constraints. At the cost of a slower startup and a decreased overall performance, you should be able to go as low as:\nService Memory [MiB] Cassandra 512 Elasticsearch 512 Blazegraph 1024 Delta 1024","title":"Memory and CPU limits"},{"location":"/docs/getting-started/running-nexus.html#recommended-docker-swarm","text":"Docker Swarm is the native orchestrator shipped with Docker. It provides a more robust way to run Nexus.\nIf you’ve never used Docker Swarm or Docker Stacks before, you first need to create a swarm cluster on your local machine:\nCommand :\ndocker swarm init\nExample :\n$ docker swarm init\nSwarm initialized: current node (***) is now a manager.\n \nTo add a worker to this swarm, run the following command:\n \n    docker swarm join --token {token} 128.178.97.243:2377\n \nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.","title":"Recommended: Docker Swarm"},{"location":"/docs/getting-started/running-nexus.html#deployment","text":"Download the Docker Compose template into a directory of your choice, for instance ~/docker/nexus/.\nDownload the http proxy configuration to the same directory.","title":"Deployment"},{"location":"/docs/getting-started/running-nexus.html#starting-nexus","text":"Create a nexus deployment with Docker Stacks:\nCommand :\ndocker stack deploy nexus --compose-file=docker-compose.yaml\nExample :\n$ cd ~/docker/nexus\n$ docker stack deploy nexus --compose-file=docker-compose.yaml\nCreating network nexus_default\nCreating service nexus_iam\nCreating service nexus_admin\nCreating service nexus_elasticsearch\nCreating service nexus_cassandra\nCreating service nexus_blazegraph\nCreating service nexus_router\nCreating service nexus_kg\nWait one or two minutes and you should be able to access Nexus locally, on the port 80:\nCommand :\ncurl http://localhost/kg\nExample :\n$ curl http://localhost/version\n{\"name\":\"kg\",\"version\":\"1.1.0\"}","title":"Starting Nexus"},{"location":"/docs/getting-started/running-nexus.html#administration","text":"To list running services or access logs, please refer to the official Docker documentation.\nAlternatively you can deploy Swarmpit which provides a comprehensive UI to manage your Docker Swarm cluster.","title":"Administration"},{"location":"/docs/getting-started/running-nexus.html#stopping-nexus","text":"You can stop and delete the entire deployment with:\nCommand :\ndocker stack rm nexus\nExample :\n$ docker stack rm nexus\nRemoving service nexus_admin\nRemoving service nexus_blazegraph\nRemoving service nexus_cassandra\nRemoving service nexus_elasticsearch\nRemoving service nexus_iam\nRemoving service nexus_kg\nRemoving service nexus_router\nRemoving network nexus_default\nNote As no data is persisted outside the containers, everything will be lost once you remove the Nexus deployment. If you’d like help with creating persistent volumes, feel free to contact us on our Gitter channel.","title":"Stopping Nexus"},{"location":"/docs/getting-started/running-nexus.html#endpoints","text":"The provided reverse proxy (the nginx image) exposes several endpoints:\nroot: Nexus web interface v1: API root delta: Delta service descriptor elasticsearch: Elasticsearch endpoint blazegraph: Blazegraph web interface\nIf you’d like to customize the listening port or remove unnecessary endpoints, you can simply modify the nginx.conf file.","title":"Endpoints"},{"location":"/docs/getting-started/running-nexus.html#run-nexus-locally-with-minikube","text":"Minikube is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a VM on your machine for users looking to try out Kubernetes or develop with it day-to-day.\nNote This section makes use of static assets hosted on this website; to remove the clutter please export the base of the documentation to $MINI env var: export MINI=\"https://bluebrainnexus.io/docs/getting-started/running-nexus/minikube\"\nNote This page presents the necessary commands to deploy Nexus with Minikube but also examples the show the expected output. Some of the examples on this page make use of curl and jq for formatting the json output when interacting with the services. Please install these command line tools if you’d like to run the commands in the examples. They should be available through your usual package manager (Chocolatey, Homebrew, APT, YUM/DNF, …)","title":"Run Nexus locally with Minikube"},{"location":"/docs/getting-started/running-nexus.html#minikube-set-up","text":"","title":"Minikube set-up"},{"location":"/docs/getting-started/running-nexus.html#installation","text":"Follow the installation instructions from the official Kubernetes documentation.","title":"Installation"},{"location":"/docs/getting-started/running-nexus.html#run-minikube","text":"To start Minikube run (notice the cpu and memory flags, the setup requires a minimum of --cpus=2 --memory=8196):\nminikube start --cpus 6 --memory 10240 --vm-driver=$DRIVER\nFor better performance we recommended to select the $DRIVER corresponding to your OS native hypervisor, namely hyperkit on macOS, hyperv on Windows and kvm2 on Linux.\nIf the installation is successful you can run the following command to open the Kubernetes Dashboard:\nminikube dashboard\nTo stop Minikube run:\nminikube stop\nNote After stopping minikube the vm still exists on the system; starting minikube again will preserve the deployed services. To permanently remove minikube vm run: minikube delete","title":"Run Minikube"},{"location":"/docs/getting-started/running-nexus.html#enable-the-ingress-addon","text":"Minikube comes with a collection of addons like the Kubernetes Dashboard but not all are enabled by default. An important one is the ingress addon which enables routing http traffic from the host into the cluster.\nTo make sure the ingress addon is enabled run:\nCommand :\nminikube addons enable ingress\nExample :\n$ minikube addons enable ingress\ningress was successfully enabled\n$\nTo get the external IP of the cluster (to be used later in accessing services) run:\nCommand: :\nminikube ip\nExample: :\n$ minikube ip\n192.168.64.3\n$","title":"Enable the ingress addon"},{"location":"/docs/getting-started/running-nexus.html#setup-a-separate-namespace","text":"Kubernetes namespaces are logical groupings of resources which allow segregating various deployments in “virtual clusters”.\nThe default installation of Minikube creates three namespaces: kube-system, kube-public and default. This example uses a separate namespace to group Nexus specific resources.\nGet the list of available namespaces:\nCommand :\nkubectl get namespaces\nExample :\n$ kubectl get namespaces\nNAME          STATUS    AGE\ndefault       Active    1h\nkube-public   Active    1h\nkube-system   Active    1h\n$\nCreate the nexus namespace:\nCommand :\nkubectl apply -f $MINI/namespace.yaml\nExample :\n$ kubectl apply -f $MINI/namespace.yaml\nnamespace/nexus created\n$ kubectl get namespaces\nNAME          STATUS    AGE\ndefault       Active    1h\nkube-public   Active    1h\nkube-system   Active    1h\nnexus         Active    1m\n$\nDefault the kubectl to the nexus namespace:\nCommand :\nkubectl config set-context minikube --namespace=nexus\nExample :\n$ kubectl config set-context minikube --namespace=nexus\nContext \"minikube\" modified.\n$\nNote Every time Minikube is stopped and started again, the context and its configuration is lost. Remember to run the following commands every time you start minikube: kubectl config use-context minikube && kubectl config set-context minikube --namespace=nexus","title":"Setup a separate namespace"},{"location":"/docs/getting-started/running-nexus.html#deploy-dependent-services","text":"Nexus uses numerous off the shelf services that need to be set up as a prerequisite. Run the following command to save the IP address of the minikube cluster in an environment variable:\nCommand :\nexport NEXUS=$(minikube ip)\nExample :\n$ export NEXUS=$(minikube ip)\n$ echo $NEXUS\n192.168.64.3\n$","title":"Deploy dependent services"},{"location":"/docs/getting-started/running-nexus.html#deploy-cassandra","text":"Command :\nkubectl apply -f $MINI/cassandra.yaml && \\\n  kubectl wait pod cassandra-0 --for condition=ready --timeout=180s\nExample :\n$ kubectl apply -f $MINI/cassandra.yaml\nservice/cassandra created\nstatefulset.apps/cassandra created\n$ kubectl exec -it cassandra-0 -- nodetool status\nDatacenter: datacenter1\n=======================\nStatus=Up/Down\n|/ State=Normal/Leaving/Joining/Moving\n--  Address     Load       Tokens       Owns (effective)  Host ID                               Rack\nUN  172.17.0.4  103.71 KiB  256          100.0%            80c0bdfa-1f5e-41aa-8a7e-f0dea7fe7ef0  rack1\n$","title":"Deploy Cassandra"},{"location":"/docs/getting-started/running-nexus.html#deploy-elasticsearch","text":"Command :\nkubectl apply -f $MINI/elasticsearch.yaml && \\\n  kubectl wait pod elasticsearch-0 --for condition=ready --timeout=180s\nExample :\n$ kubectl apply -f $MINI/elasticsearch.yaml\nservice/elasticsearch created\nservice/elasticsearch-discovery created\nstatefulset.apps/elasticsearch created\n$ kubectl wait pod elasticsearch-0 --for condition=ready --timeout=60s\npod/elasticsearch-0 condition met\n$ curl \"http://$NEXUS/elasticsearch\"\n{\n  \"name\" : \"0LfjOb2\",\n  \"cluster_name\" : \"es-cluster\",\n  \"cluster_uuid\" : \"ZZF9_hFgTm2wQYYBKQ9dRg\",\n  \"version\" : {\n    \"number\" : \"6.4.3\",\n    \"build_flavor\" : \"default\",\n    \"build_type\" : \"tar\",\n    \"build_hash\" : \"fe40335\",\n    \"build_date\" : \"2018-10-30T23:17:19.084789Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"7.4.0\",\n    \"minimum_wire_compatibility_version\" : \"5.6.0\",\n    \"minimum_index_compatibility_version\" : \"5.0.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n$","title":"Deploy Elasticsearch"},{"location":"/docs/getting-started/running-nexus.html#deploy-blazegraph","text":"Command :\nkubectl apply -f $MINI/blazegraph.yaml && \\\n  kubectl wait pod blazegraph-0 --for condition=ready --timeout=180s\nExample :\n$ kubectl apply -f $MINI/blazegraph.yaml\nservice/blazegraph created\nstatefulset.apps/blazegraph created\npersistentvolumeclaim/storage-blazegraph created\ningress.extensions/blazegraph created\n$ kubectl wait pod blazegraph-0 --for condition=ready --timeout=180s\npod/blazegraph-0 condition met\n$ curl -s -H\"Accept: application/json\" \"http://$NEXUS/blazegraph/namespace?describe-each-named-graph=false\" | head -4\n  {\n    \"head\" : {\n      \"vars\" : [ \"subject\", \"predicate\", \"object\", \"context\" ]\n    },\n$","title":"Deploy BlazeGraph"},{"location":"/docs/getting-started/running-nexus.html#deploy-nexus-services","text":"Before configuring the services a configuration map must first be created that keeps track of the “public” ip address of the minikube cluster. The following command will replace the {NEXUS} token in the config.yaml file with the value stored in the $NEXUS variable set above.\nCommand :\ncurl -s $MINI/config.yaml | sed \"s/{NEXUS}/$NEXUS/g\" | kubectl apply -f -\nExample :\n$ curl -s $MINI/config.yaml | sed \"s/{NEXUS}/$NEXUS/g\" | kubectl apply -f -\nconfigmap/config created\n$ kubectl get configmap/config -o yaml | grep public.ip:\n  public.ip: 192.168.64.4\n$","title":"Deploy Nexus Services"},{"location":"/docs/getting-started/running-nexus.html#deploy-delta","text":"Delta is the service providing the Nexus REST API.\nCommand :\nkubectl apply -f $MINI/kg.yaml && \\\n  kubectl wait pod kg-0 --for condition=ready --timeout=180s\nExample :\n$ kubectl apply -f $MINI/kg.yaml\nservice/kg created\nservice/kg-hd created\nstatefulset.apps/kg created\npersistentvolumeclaim/storage-kg created\ningress.extensions/kg created\ningress.extensions/kg-direct created\n$ kubectl wait pod kg-0 --for condition=ready --timeout=180s\npod/kg-0 condition met\n$ curl -s \"http://$NEXUS/version\" | jq\n{\n  \"delta\": \"1.4.0\",\n  \"storage\": \"1.4.0\",\n  \"elasticsearch\": \"7.4.0\",\n  \"blazegraph\": \"2.1.5\"\n}\n$ curl -s \"http://$NEXUS/v1/resources/org/proj\" | jq # the 404 error is expected\n{\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/error.json\",\n  \"@type\": \"ProjectNotFound\",\n  \"label\": \"org/proj\",\n  \"reason\": \"Project 'org/proj' not found.\"\n}\n$","title":"Deploy Delta"},{"location":"/docs/getting-started/running-nexus.html#deploy-the-web-interface","text":"The Nexus web application provides an interface to perform basic tasks on organizations and projects and query the system resources through Elasticsearch and SPARQL queries.\nCommand :\nkubectl apply -f $MINI/web.yaml && \\\n  kubectl wait pod nexus-web-0 --for condition=ready --timeout=180s\nExample :\n$ kubectl apply -f $MINI/web.yaml\nservice/nexus-web created\nstatefulset.apps/nexus-web created\ningress.extensions/nexus-web created\n$ kubectl wait pod nexus-web-0 --for condition=ready --timeout=180s\npod/nexus-web-0 condition met\n$\nYou can now access the web interface at http://$NEXUS, $NEXUS being the public IP of your Minikube cluster, as seen above.","title":"Deploy the web interface"},{"location":"/docs/getting-started/running-nexus.html#on-premise-cloud-deployment","text":"There are several things to consider when preparing to deploy Nexus “on premise” because the setup depends a lot on the various usage profiles, but the most important categories would be:\nAvailability Latency & throughput Capacity Efficient use of hardware resources Backup and restore Monitoring & alerting\nEach of the Nexus services and “off the shelf” products can be deployed as a single instance or as a cluster (with one exception at this point being BlazeGraph which doesn’t come with a clustering option). The advantages for deploying clusters are generally higher availability, capacity and throughput at the cost of higher latency, consistency and having to potentially deal with network instability.\nThe decision to go with single node deployments or clustered deployments can be revisited later on and mixed setups (some services single node while others clustered) are also possible.\nThe Nexus distribution is made up of docker images which can be run on any host operating system and each of the “off the shelf” products also offer docker as a deployment option. We would generally recommend using a container orchestration solution like Kubernetes, OpenShift or Docker Swarm as they offer good management capabilities, discovery, load balancing and self-healing. They also accommodate changes in hardware allocations for the deployments, changes that can occur due to evolving usage patterns, software updates etc. Currently the biggest Nexus deployment is at EPFL within OpenShift.","title":"On premise / cloud deployment"},{"location":"/docs/getting-started/running-nexus.html#choice-of-hardware","text":"Depending on the target throughput, usage profiles and data volume the hardware specification can vary greatly; please take a look at the benchmarks section to get an idea of what you should expect in terms of throughput with various hardware configurations. When the usage profiles are unknown a couple of rules of thumb should narrow the scope:\nNexus uses a collection of data stores (Cassandra, ElasticSearch, BlazeGraph) which depend performance wise to the underlying disk access, so: prefer local storage over network storage for lower latency when doing IO, prefer SSD over HDDs because random access speed is more important than sequential access, one exception is the file storage (file resources which are stored as binary blobs on the filesystem) where the network disks should not be a cause for concern, nor random access speed; this assumes that accessing attachments is not the at the top in the usage profile All of Nexus services and most of the “off the shelf” products are built to run on top of the JVM which usually require more memory over computing power. A rough ratio of 2 CPU cores per 8GB of RAM is probably a good one (this of course depends on the CPU specification). Due to the design for scalability of Nexus services and “off the shelf” products the network is a very important characteristic of the deployment as frequent dropped packets or network partitions can seriously affect the availability of the system. Clustered / distributed systems generally use some form of consensus which is significantly affected by the reliability of the network. If the reliability of the network is a concern within the target deployment then vertical scalability is desirable over horizontal scalability: fewer host nodes with better specifications is better over more commodity hardware host nodes.","title":"Choice of hardware"},{"location":"/docs/getting-started/running-nexus.html#cassandra","text":"Nexus uses Cassandra as its primary store as it scales well in terms of reads with the number of nodes in the cluster. It offers data replication out of the box, which allows the system to continue to be available in case of node failures or network partitions.\nSince this is the primary store it is the most important system to be backed up. All of the data that Nexus uses in other stores can be recomputed from the one stored in Cassandra as the other stores are used as mere indexing systems.\nPlease have a look at the Planning and Testing section in the DataStax documentation as it contains recommendations in terms of hardware and capacity.\nAs described in the architecture section the generally adopted persistence model is an EventSourced model in which the data store is used as an append only store. This has implications to the total amount of disk used by the primary store.\nA formula for computing the required disk space:\ntotal = (resource_size + nexus_metadata_size) * count * number_updates * replication_factor * 2 (compaction requirement)\nThe nexus_metadata_size varies depending on many things, but it’s generally less than or equal to the resource_size.\nAn example, assuming:\n10KB per resource 1.000.000 distinct resources 10 updates per resource replication factor of 3\n… the total required disk size would be:\n(10KB + 10KB) * 1.000.000 * 10 * 3 * 2 = 1.000.000.000KB ~= 955GB\nThe resulting size represents the total disk space of the cluster; a 5 node cluster with the data volume in the example above would have to be configured with 200GB disks per node.","title":"Cassandra"},{"location":"/docs/getting-started/running-nexus.html#elasticsearch","text":"Nexus uses ElasticSearch to host several system indices and user defined ones. It offers sharding and replication out of the box. Deciding whether this system requires backup depends on the tolerated time for a restore. Nexus can be instructed to rebuild all indices using the data from the primary store, but being an incremental indexing process it can take longer than restoring from a backup. Since it can be configured to host a number of replicas for each shard it can tolerate a number of node failures.\nThe ElasticSearch setup documentation contains the necessary information on how to install and configure it, but recommendations on sizing the nodes and cluster are scarce because it depends on usage.\nA formula for computing the required disk space:\ntotal = (resource_size * count * documents + lucene_index) * replication_factor\n… where the lucene_index while it can vary should be less than twice the size of the original documents.\nAn example, assuming:\n10KB per resource 1.000.000 distinct resources 3 documents per resource (the number of documents depends on the configured views in the system) 2 additional shard replicas (replication factor of 3)\n… the total required disk size would be:\n(10KB * 1.000.000 * 3 + 2 * (10KB * 1.000.000 * 3)) * 3 = 270.000.000KB ~= 260GB\nThe resulting size represents the total disk space of the data nodes in the cluster; a 5 data node cluster with the data volume in the example above would have to be configured with 60GB disks per node.","title":"ElasticSearch"},{"location":"/docs/getting-started/running-nexus.html#blazegraph","text":"Nexus uses BlazeGraph as an RDF (triple) store to provide a advanced querying capabilities on the hosted data. This store is treated as a specialized index on the data so as with Kafka and ElasticSearch in case of failures, the system can be fully restored from the primary store. While the technology is advertised to support High Availability and Scaleout deployment configurations, we have yet to be able to setup a deployment in this fashion.\nWe currently recommend deploying BlazeGraph using the prepackaged tar.gz distribution available to download from sourceforge.\nNote We’re looking at alternative technologies and possible application level (within Nexus) sharding and replicas.\nThe Hardware Configuration section in the documentation gives a couple of hints about the requirements to operate BlazeGraph and there are additional sections for optimizations in terms of Performance, IO and Query.\nBlazeGraph stores data in an append only journal which means updates will use additional disk space.\nA formula for computing the required disk space:\ntotal = (resource_triples + nexus_triples) * count * number_updates * triple_size + lucene_index\n… where the lucene_index while it can vary should be less than twice the size of the original documents.\nAn example, assuming:\n100 triples (rough estimate for a 10KB json-ld resource representation) 20 additional nexus triples on average 1.000.000 distinct resources 10 updates per resource 200 bytes triple size (using quads mode)\n… the total required disk size would be:\n(100 + 20) * 1.000.000 * 10 * 200 / 1024 * 3 ~= 700.000.000KB ~= 670GB\nCompactions can be applied to the journal using the CompactJournalUtility to reduce the disk usage, but it takes quite a bit a time and requires taking the software offline during the process.","title":"BlazeGraph"},{"location":"/docs/releases/index.html","text":"","title":"Releases"},{"location":"/docs/releases/index.html#releases","text":"This section of the documentation lists the significant BlueBrain Nexus releases across all services and web applications.\nThe latest stable release is v1.4.0 released on 14.08.2020.","title":"Releases"},{"location":"/docs/releases/index.html#v1-4-0-14-08-2020-","text":"The release is backwards compatible with v1.x.y releases in terms of API. If you’re upgrading from v1.3.x please visit the migration instructions.\nSummary of the significant changes:\nMerged iam, admin and kg services into a single service, called delta; Listings API now shows - besides resources metadata - the following predicates, when present: sko:prefLabel, schema:name, rdfs:label; Nexus Web has evolved into Nexus Fusion, supporting multiple subapps and making the different sections clear for our users; Greatly improved design for the way Nexus Fusion manages plugins; Introduction of Nexus Forge in the ecosystem. Nexus Forge is currently at version 0.3.3.\nA detailed list of changes included in the release can be found in the release notes.","title":"v1.4.0 (14.08.2020)"},{"location":"/docs/releases/index.html#v1-3-0-25-02-2020-","text":"The release is backwards compatible with v1.x.y releases in terms of API. If you’re upgrading from v1.2.x please visit the migration instructions.\nSummary of the significant changes:\nIntroduced a new type of view (_CompositeView_, currently as a Beta feature) that expands on the indexing capabilities of the system through the ability to consume multiple sources (multiple projects in the same Nexus deployment and projects in different Nexus deployments); Added the ability to generate tabular views on the data available to a specific project (using any SparqlView defined in the project - default SparqlView or AggregateSparqlViews) by means of Studios and Dashboards in Nexus Web; Allow querying SparqlViews using the GET http method; Exposed a new view subresource .../offset that presents the current view offset, or collection of offsets in case of CompositeViews. The offset has the same value used with Server Sent Events as means of keeping track of the current event replay progress. Deleting this resource with instruct the system to rebuild the indices of the selected view; Ordering results when doing listings can now be controlled with the repeated sort query param that accepts ElasticSearch document field names (...?sort=_createdAt&sort=-_createdBy). The ordering defaults to ascending, but can be switched for descending by prefixing the - character to the field name. New ElasticSearch indices are automatically configured to perform word split and properly handle UUIDs. The new configuration yields better full text search results. Nexus Web - Adds the ability to have persistent customisable queries and data visualizations for your data via the new Studios feature\nA detailed list of changes included in the release can be found in the release notes.","title":"v1.3.0 (25.02.2020)"},{"location":"/docs/releases/index.html#v1-2-1-07-10-2019-","text":"This is a bugfix release, addressing two specific issues:\nFix FileAttributesUpdated event deserialization which was causing indexing problems for situations where the deployment included a remote storage service to handle files. Removed kamon-akka-remote dependency which was causing problems in clustered deployments due to binary compatibility issues.","title":"v1.2.1 (07.10.2019)"},{"location":"/docs/releases/index.html#v1-2-0-04-10-2019-","text":"The release adds two major features:\nendpoint to fetch the original payload of a resource. ability to retrieve multiple resources in one request as an archive.\nThe API is backwards compatible with v1.1.\nSummary of the significant changes:\nStorage service related updates:\nUpdated async computation of to return not only the digest information but all the attributes (bytes, digest, mediaType and location).\nKG updates:\nAdded archives resources. Added /source sub-resource. Fixed issue with resource retrieval when linked context changes. Updated DigestViewCoordinator to AttributesViewCoordinator. This async process now updates all the FileAttributes.\nDependency updates:\nSHACL validator, akka-http, cats, cats-effects amongst others","title":"v1.2.0 (04.10.2019)"},{"location":"/docs/releases/index.html#v1-1-2-24-09-2019-","text":"The release addresses bug fixing and is backwards compatible with v1.0 in terms of API. If you’re upgrading from v1.0 please visit the migration instructions.\nSummary of the significant changes:\nStorage service related updates:\nAdded async computation of the file digest. Before an action gets executed against the storage, checks that the resource created is valid (is not deprecated, has the correct revision, etc…)\nKG Fixes:\nWhen project is not present in the cache but it is present in the underlying admin service, adds it directly to the cache (before the cache was populated from the SSE, which can be very slow). ProjectViewCoordinator and DigestViewCoordinator actors now create child actors (better management of actors lifecycle). Prevented from creating unnecessary indices/namespaces.\nFixed library dependency issues:\nCorrected Iri to Akka.Uri conversion Corrected pct encoding (Iri.asString and Iri.asUri) Bumped akka and kamon dependencies, amongst others","title":"v1.1.2 (24.09.2019)"},{"location":"/docs/releases/index.html#v1-1-1-24-07-2019-","text":"The release addresses bug fixing and is backwards compatible with v1.0 in terms of API. If you’re upgrading from v1.0 please visit the migration instructions.\nSummary of the significant changes:\nMigration script correctly updates views with the expected defaults Migration script jumps over event deserialization errors Metric tag value fix for elasticsearch indexer Kamon disabled by default Kamon agent is loaded as a JVM argument Updated library dependencies","title":"v1.1.1 (24.07.2019)"},{"location":"/docs/releases/index.html#v1-1-19-07-2019-","text":"The release is backwards compatible with v1.0 in terms of API. If you’re upgrading from v1.0 please visit the migration instructions.\nSummary of the significant changes:\nExposed the service event logs over a stable API via Server Sent Events. Introduced configurable storage backends for files with local, remote and S3 implementations. ElasticSearchView | AggregateElasticSearchView have been promoted to stable. Introduced a new SPARQL view, AggregateSparqlView, that dispatches SPARQL queries to the appropriate namespaces and aggregates the results. ElasticSearchView and SparqlView support additional configuration options: resourceSchemas, resourceTypes, resourceTag, includeDeprecated, includeMetadata. API improvements: Support for additional filtering criteria when listing resources via query params: rev, deprecated, createdBy, updatedBy. The organization and project segments when exercising the API now accept their unique ids (UUID). Content negotiation for resources, supporting: dot, ntriples, json-ld expanded and compacted formats. Ability to resolve resource ids via configured project resolvers. Pagination of resources over 10,000 using the ’‘_next’’ link in the listing response. Resource metadata includes ’‘_incoming’‘ and ’‘_outgoing’’ links and the API now includes their respective endpoints. View indexing progress as a ‘‘statistics’’ sub-resource of each view. Nexus Web improvements: Better OpenIdConnect integration, ability to authenticate to multiple configured realms. Ability to discriminate between Nexus specific resources and user managed resources. Display the current ACLs and their source for the logged in user. Ability to query user defined views. Display the indexing progress for the active view. Exposed view indexing progress metrics for Prometheus. Bumped ElasticSearch compatibility to 7.x.\nA detailed list of changes included in the release can be found in the release notes.","title":"v1.1 (19.07.2019)"},{"location":"/docs/releases/index.html#v1-0-25-01-2019-","text":"This is the first major release of Blue Brain Nexus after almost two years of development.\nAlso referred to as “Nexus V1”, this initial release is our first big milestone in our quest to build a Knowledge Graph platform uniquely combining flexible graph database, powerful search engine and scalable data store to enable:\nEasy unification and integration of fragmented and disparate data from heterogeneous domains to break data and metadata silos Better data governance with the ability to specify and enforce organization’s best practices for data collection, storage and description through high quality metadata Data lineage and provenance recording and description FAIR (Findable, Accessible, Interoperable, Re-usable) data and metadata management\nA detailed list of changes included in the release can be found in the release notes.","title":"v1.0 (25.01.2019)"},{"location":"/docs/releases/v1.4-release-notes.html","text":"","title":"v1.4 Release Notes"},{"location":"/docs/releases/v1.4-release-notes.html#v1-4-release-notes","text":"This release marks an expansion to the Nexus Ecosystem which now comprises 3 key products:\nNexus Fusion (v1.4) to enable collaborative data and knowledge discovery, Nexus Forge (v0.3.3) to ease building and using Knowledge Graphs, Nexus Delta (v1.4) to manage the data and Knowledge Graph lifecycle.\nFor the detailed list of updates in this release, see the list of pull requests since 1.3.0.","title":"v1.4 Release Notes"},{"location":"/docs/releases/v1.4-release-notes.html#nexus-forge","text":"The latest release of Nexus Forge (v0.3.3), the python framework to make building and using knowledge graphs easier, adds incremental features across its core and specializations modules.\nThe detailed release note of Nexus Forge 0.3.3 is available here.","title":"Nexus Forge"},{"location":"/docs/releases/v1.4-release-notes.html#nexus-delta","text":"The goal of this release is to improve performance and shrink the service footprint when deploying the Nexus ecosystem. This is an incremental software release that adds several improvements across the board. The API is backwards compatible to v1.3 (and the rest of the v1.x releases, i.e. v1.2, v1.1 and v1.0) but requires rebuilding all indices and performing schema migrations. Please visit the migration instructions for the exact steps necessary to upgrade from the previous release.","title":"Nexus Delta"},{"location":"/docs/releases/v1.4-release-notes.html#services-merge","text":"Up until 1.3, Nexus backend was splitted into 3 services:\niam: dealing with identity and access management. admin: dealing with organizations and project management. kg: dealing with resources and their lifecycle.\nIn 1.4 we have merged the 3 services together. Combining the 3 services into one has the following benefits:\nEasier to deploy, test and monitor. Decrease latency since the services do not have to interact with each other. The degree to which this aspect improves depends on the quality of the network where the service are running.","title":"Services merge"},{"location":"/docs/releases/v1.4-release-notes.html#listing-results","text":"Listing API responses return, along with the resource metadata, the following predicates: sko:prefLabel, schema:name and rdfs:label when they are present in the resource payload.\nGET /v1/resources/{org_label}/{project_label}\nAn example response:\n{\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n      \"@type\": \"http://example.com/Custom\",\n      \"prefLabel\": \"my prefered label\",\n      \"name\": \"my schema name\",\n      \"label\": \"my schema label\",\n      \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-17T15:02:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ]\n}","title":"Listing results"},{"location":"/docs/releases/v1.4-release-notes.html#nexus-fusion","text":"With the addition of new features in our Nexus Web application, and in anticipation of some exciting future developments, we evolved Nexus Web into Nexus Fusion.\nNexus Fusion now supports multiple subapps and clearly defined spaces for different uses:\nAdmin: the place where you can manage organizations, projects, and resources, visualize permissions, and access the different query editor. You can also manage create new studios in your project. Studios: access studios available to you and create new and configure existing studios. Studios let you organize resources present in your knowledges graphs (or projects) into tables, and navigate individual resources.\nWe’ve made big improvements to the way Plugins work accross all resources:\nConfigure your resource-plugin mappings for your instance, so that users get a consistent experience visualizing resources; Some default plugins are available out-of-the-box, such as the Admin plugin.","title":"Nexus Fusion"},{"location":"/docs/releases/v1.3-to-v1.4-migration.html","text":"","title":"v1.3 To v1.4 Migration"},{"location":"/docs/releases/v1.3-to-v1.4-migration.html#v1-3-to-v1-4-migration","text":"As part of the v1.4 release, cassandra schema has changed due to a dependency update. Additionally, the 3 existing keyspaces (iam, admin and kg) must be merged into a single keyspace (delta).","title":"v1.3 To v1.4 Migration"},{"location":"/docs/releases/v1.3-to-v1.4-migration.html#steps","text":"The migration steps are as follows:\nStop the 3 services: iam, admin and kg. Backup the cassandra store. Delete all ElasticSearch indices: curl -XDELETE 'http://{elasticsearch_host}/kg_*'\n Delete all BlazeGraph namespaces: for i in `curl -s 'http://{blazegraph_host}/blazegraph/namespace?describe-each-named-graph=false' | grep sparqlEndpoint | grep -o --color \"rdf:resource=\\\"[^\\\"]*\" | sed 's/rdf:resource=\"//' | sed 's#/sparql$##' | grep -v kb | grep -v LBS`\n   do curl -X DELETE \"$i\"\ndone\n Make sure to allocate enough space to Cassandra, at least twice the space used by the keyspaces iam, admin and kg. The data migration involves copying the messages tables. Create the delta keyspace and tables: CREATE KEYSPACE IF NOT EXISTS delta WITH replication = {'class': 'NetworkTopologyStrategy', '<your_dc_name>' : 3 };\n\nCREATE KEYSPACE IF NOT EXISTS delta_snapshot WITH replication = {'class': 'NetworkTopologyStrategy', '<your_dc_name>' : 3 }; \n\nCREATE TABLE IF NOT EXISTS delta.messages (\n  persistence_id text,\n  partition_nr bigint,\n  sequence_nr bigint,\n  timestamp timeuuid,\n  timebucket text,\n  writer_uuid text,\n  ser_id int,\n  ser_manifest text,\n  event_manifest text,\n  event blob,\n  meta_ser_id int,\n  meta_ser_manifest text,\n  meta blob,\n  tags set<text>,\n  PRIMARY KEY ((persistence_id, partition_nr), sequence_nr, timestamp))\n  WITH gc_grace_seconds =864000\n  AND compaction = {\n    'class' : 'SizeTieredCompactionStrategy',\n    'enabled' : true,\n    'tombstone_compaction_interval' : 86400,\n    'tombstone_threshold' : 0.2,\n    'unchecked_tombstone_compaction' : false,\n    'bucket_high' : 1.5,\n    'bucket_low' : 0.5,\n    'max_threshold' : 32,\n    'min_threshold' : 4,\n    'min_sstable_size' : 50\n    };\n\nCREATE TABLE IF NOT EXISTS delta.tag_views (\n  tag_name text,\n  persistence_id text,\n  sequence_nr bigint,\n  timebucket bigint,\n  timestamp timeuuid,\n  tag_pid_sequence_nr bigint,\n  writer_uuid text,\n  ser_id int,\n  ser_manifest text,\n  event_manifest text,\n  event blob,\n  meta_ser_id int,\n  meta_ser_manifest text,\n  meta blob,\n  PRIMARY KEY ((tag_name, timebucket), timestamp, persistence_id, tag_pid_sequence_nr))\n  WITH gc_grace_seconds =864000\n  AND compaction = {\n    'class' : 'SizeTieredCompactionStrategy',\n    'enabled' : true,\n    'tombstone_compaction_interval' : 86400,\n    'tombstone_threshold' : 0.2,\n    'unchecked_tombstone_compaction' : false,\n    'bucket_high' : 1.5,\n    'bucket_low' : 0.5,\n    'max_threshold' : 32,\n    'min_threshold' : 4,\n    'min_sstable_size' : 50\n    };\n\nCREATE TABLE IF NOT EXISTS delta.tag_write_progress(\n  persistence_id text,\n  tag text,\n  sequence_nr bigint,\n  tag_pid_sequence_nr bigint,\n  offset timeuuid,\n  PRIMARY KEY (persistence_id, tag));\n\nCREATE TABLE IF NOT EXISTS delta.tag_scanning(\n  persistence_id text,\n  sequence_nr bigint,\n  PRIMARY KEY (persistence_id));\n\nCREATE TABLE IF NOT EXISTS delta.metadata(\n  persistence_id text PRIMARY KEY,\n  deleted_to bigint,\n  properties map<text,text>);\n\nCREATE TABLE IF NOT EXISTS delta.all_persistence_ids(\n  persistence_id text PRIMARY KEY);\n\nCREATE TABLE IF NOT EXISTS delta.projections_progress (\n    projection_id text PRIMARY KEY,\n    progress text\n) WITH bloom_filter_fp_chance = 0.01\n    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}\n    AND comment = ''\n    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}\n    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}\n    AND crc_check_chance = 1.0\n    AND dclocal_read_repair_chance = 0.1\n    AND default_time_to_live = 0\n    AND gc_grace_seconds = 864000\n    AND max_index_interval = 2048\n    AND memtable_flush_period_in_ms = 0\n    AND min_index_interval = 128\n    AND read_repair_chance = 0.0\n    AND speculative_retry = '99PERCENTILE';\n\nCREATE TABLE IF NOT EXISTS delta.projections_failures (\n    projection_id text,\n    offset text,\n    persistence_id text,\n    sequence_nr bigint,\n    value text,\n    PRIMARY KEY (projection_id, offset, persistence_id, sequence_nr)\n) WITH CLUSTERING ORDER BY (offset ASC, persistence_id ASC, sequence_nr ASC)\n    AND bloom_filter_fp_chance = 0.01\n    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}\n    AND comment = ''\n    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}\n    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}\n    AND crc_check_chance = 1.0\n    AND dclocal_read_repair_chance = 0.1\n    AND default_time_to_live = 0\n    AND gc_grace_seconds = 864000\n    AND max_index_interval = 2048\n    AND memtable_flush_period_in_ms = 0\n    AND min_index_interval = 128\n    AND read_repair_chance = 0.0\n    AND speculative_retry = '99PERCENTILE';\n\nCREATE TABLE IF NOT EXISTS delta_snapshot.snapshots (\n  persistence_id text,\n  sequence_nr bigint,\n  timestamp bigint,\n  ser_id int,\n  ser_manifest text,\n  snapshot_data blob,\n  snapshot blob,\n  meta_ser_id int,\n  meta_ser_manifest text,\n  meta blob,\n  PRIMARY KEY (persistence_id, sequence_nr))\n  WITH CLUSTERING ORDER BY (sequence_nr DESC) AND gc_grace_seconds =864000\n  AND compaction = {\n    'class' : 'SizeTieredCompactionStrategy',\n    'enabled' : true,\n    'tombstone_compaction_interval' : 86400,\n    'tombstone_threshold' : 0.2,\n    'unchecked_tombstone_compaction' : false,\n    'bucket_high' : 1.5,\n    'bucket_low' : 0.5,\n    'max_threshold' : 32,\n    'min_threshold' : 4,\n    'min_sstable_size' : 50\n    };\n Check and update the necessary configuration environment variables/JVM properties according to configuration migration guide Deploy the new service images (tag 1.4) for delta and run it with the MIGRATE_V13_TO_V14=true and REPAIR_FROM_MESSAGES=true environment variables. This will instruct the service to copy all the messages table from iam, admin and kg into the delta keyspace. Afterwards the tag_views table and their related tables will be properly initialized. When populating the tag_views table consider increasing the batch_size_fail_threshold_in_kb in your cassandra.yaml configuration file if you see TagWriter error messages. Decreasing the value of the JVM property akka.persistence.cassandra.events-by-tag.max-message-batch-size and akka.persistence.cassandra.journal.max-message-batch-size to 1 can also help mitigate the issue. Once the service is up and running, and you have verified the resources are accessible, you can proceed to delete the previous keyspaces: DROP KEYSPACE iam;\nDROP KEYSPACE admin;\nDROP KEYSPACE kg;","title":"Steps"},{"location":"/docs/releases/v1.3-to-v1.4-migration.html#configuration","text":"This section provides a table with the equivalences in terms of configuration environment variables from 1.3 (and older versions) to 1.4. Only the most relevant environment configuration properties are described\nThere are 2 ways to inject your own configuration: - Using JVM properties as arguments when running the service: -D{property}. For example: -Dapp.instance.interface=\"127.0.0.1\". - Setting FORCE_CONFIG_ style environment variables. In order to enable this style of configuration the JVM property -Dconfig.override_with_env_vars=true needs to be set. For example: CONFIG_FORCE_app_instance_interface=\"127.0.0.1\".\nNote that there has been one important change which cannot be mapped using the following table: the service account token.\nIn 1.4 release, the IAM_SA_TOKEN is not used. Instead, the JVM properties app.service-account-caller.realm, app.service-account-caller.subject and app.service-account-caller.groups should be set matching the identity of the service account. If these properties are not present, the service account identity will be set to anonymous.\nDescription Env. variable 1.3 property 1.4 Env. variable override 1.4 Default timeout for Actors interaction DEFAULT_ASK_TIMEOUT app.default-ask-timeout CONFIG_FORCE_app_default__ask__timeout The service binding interface BIND_INTERFACE app.instance.interface CONFIG_FORCE_app_instance_interface The service binding port BIND_PORT app.http.port CONFIG_FORCE_app_http_port The service Uri Path prefix HTTP_PREFIX app.http.prefix CONFIG_FORCE_app_http_prefix The service publicly exposed Uri PUBLIC_URI app.http.public-uri CONFIG_FORCE_app_http_public__uri The service account realm (when different than anonymous) app.service-account-caller.realm CONFIG_FORCE_app_service__account__caller_realm The service account subject (when different than anonymous) app.service-account-caller.subject CONFIG_FORCE_app_service__account__caller_subject The service account groups (when desired). Array field app.service-account-caller.groups CONFIG_FORCE_app_service__account__caller_groups The cassandra contact point (1) CASSANDRA_CONTACT_POINT1 datastax-java-driver.basic.contact-points.1 The cassandra contact point (2) CASSANDRA_CONTACT_POINT2 datastax-java-driver.basic.contact-points.2 The cassandra contact point (3) CASSANDRA_CONTACT_POINT3 datastax-java-driver.basic.contact-points.3 The cassandra username CASSANDRA_USERNAME datastax-java-driver.advanced.auth-provider.username CONFIG_FORCE_datastax__java__driver_advanced_auth__provider_username The cassandra password CASSANDRA_PASSWORD datastax-java-driver.advanced.auth-provider.password CONFIG_FORCE_datastax__java__driver_advanced_auth__provider_password The time after which actors without interaction are shutdown PASSIVATION_TIMEOUT app.cluster.passivation-timeout CONFIG_FORCE_app_cluster_passivation__timeout The Caches (Akka Distributed Data) request timeout REPLICATION_TIMEOUT app.cluster.replication-timeout CONFIG_FORCE_app_cluster_replication__timeout The number of cluster shards SHARDS app.cluster.shards CONFIG_FORCE_app_cluster_shards The seeds to use for joining a cluster SEED_NODES app.cluster.seeds CONFIG_FORCE_app_cluster_seeds The default page size when paginating on listings PAGINATION_DEFAULT_SIZE app.pagination.default-size CONFIG_FORCE_app_pagination_default__size The maximum page size allowed when paginating on listings PAGINATION_MAX_SIZE app.pagination.size-limit CONFIG_FORCE_app_pagination_size__limit The default indexing number of events taken per batch INDEXING_BATCH app.indexing.batch CONFIG_FORCE_app_indexing_batch The default indexing amount of time to wait for the bach events INDEXING_BATCH_TIMEOUT app.indexing.batch-timeout CONFIG_FORCE_app_indexing_batch__timeout The default indexing retry strategy INDEXING_RETRY_STRATEGY app.indexing.retry.strategy CONFIG_FORCE_app_indexing_retry_strategy The default indexing first retry delay INDEXING_RETRY_INITIAL_DELAY app.indexing.retry.initial-delay CONFIG_FORCE_app_indexing_retry_initial__delay The default indexing maximum retry delay INDEXING_RETRY_MAX_DELAY app.indexing.retry.max-delay CONFIG_FORCE_app_indexing_retry_max__delay The default indexing maximum number of retries INDEXING_RETRY_MAX_RETRIES app.indexing.retry.max-retries CONFIG_FORCE_app_indexing_retry_max__retries The default number of events after which the indexing progress is persisted INDEXING_PROGRESS_EVENTS app.indexing.progress.persist-after-processed CONFIG_FORCE_app_indexing_progress_persist__after__processed The default amount of time after which the indexing progress is persisted INDEXING_PROGRESS_TIME app.indexing.progress.max-time-window CONFIG_FORCE_app_indexing_progress_max__time__window Default number of shards for aggregates AGGREGATE_SHARDS app.aggregate.shards CONFIG_FORCE_app_aggregate_shards The amount of time ACLs are kept in memory after being accessed ACLS_AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT app.acls.aggregate.passivation.lapsed-since-last-interaction CONFIG_FORCE_app_acls_aggregate_passivation_lapsed__since__last__interaction The amount of time permissions are kept in memory after being accessed PERMISSIONS_AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT app.permissions.aggregate.passivation.lapsed-since-last-interaction CONFIG_FORCE_app_permissions_aggregate_passivation_lapsed__since__last__interaction The amount of time Realms are kept in memory after being accessed REALMS_AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT app.realms.aggregate.passivation.lapsed-since-last-interaction CONFIG_FORCE_app_realms_aggregate_passivation_lapsed__since__last__interaction The amount of time Groups are kept in memory after being accessed GROUPS_CACHE_LAST_INTERACTION_STOP_TIMEOUT app.groups.invalidation.lapsed-since-last-interaction CONFIG_FORCE_app_groups_invalidation_lapsed__since__last__interaction The amount of time Organizations are kept in memory after being accessed AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT app.organizations.aggregate.passivation.lapsed-since-last-interaction CONFIG_FORCE_app_organizations_aggregate_passivation_lapsed__since__last__interaction The amount of time Projects are kept in memory after being accessed AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT app.projects.aggregate.passivation.lapsed-since-last-interaction CONFIG_FORCE_app_organizations_aggregate_passivation_lapsed__since__last__interaction The path where the DiskStorage reads/writes files VOLUME_PATH app.storage.disk.volume CONFIG_FORCE_app_storage_disk_volume The maximum allowed upload size (in bytes) for DiskStorage DISK_MAX_FILE_SIZE app.storage.disk.max-file-size CONFIG_FORCE_app_storage_disk_max__file__size The default RemoteDiskStorage endpoint REMOTE_DISK_DEFAULT_ENDPOINT app.storage.remote-disk.default-endpoint CONFIG_FORCE_app_storage_remote__disk_default__endpoint The default RemoteDiskStorage Uri Path prefix REMOTE_DISK_DEFAULT_ENDPOINT_PREFIX app.storage.remote-disk.default-endpoint-prefix CONFIG_FORCE_app_storage_remote__disk_default__endpoint__prefix The default RemoteDiskStorage Bearer Token REMOTE_DISK_DEFAULT_CREDENTIALS app.storage.remote-disk.default-credentials CONFIG_FORCE_app_storage_remote__disk_default__credentials The maximum allowed upload size (in bytes) for RemoteDiskStorage REMOTE_DISK_MAX_FILE_SIZE app.storage.remote-disk.max-file-size CONFIG_FORCE_app_storage_remote__disk_max__file__size The maximum allowed upload size (in bytes) for S3Storage S3_MAX_FILE_SIZE app.storage.amazon.max-file-size CONFIG_FORCE_app_storage_amazon_max__file__size The Blazegraph endpoint SPARQL_BASE_URI app.sparql.base CONFIG_FORCE_app_sparql_base The Blazegraph query retry strategy QUERYING_SPARQL_RETRY_STRATEGY app.sparql.query.retry.strategy CONFIG_FORCE_app_sparql_query_retry_strategy The Blazegraph query first retry delay QUERYING_SPARQL_RETRY_INITIAL_DELAY app.sparql.query.retry.initial-delay CONFIG_FORCE_app_sparql_query_retry_initial__delay The Blazegraph query maximum retry delay QUERYING_SPARQL_RETRY_MAX_DELAY app.sparql.query.retry.max-delay CONFIG_FORCE_app_sparql_query_retry_max__delay The Blazegraph query maximum number of retries QUERYING_SPARQL_RETRY_MAX_RETRIES app.sparql.query.retry.max-retries CONFIG_FORCE_app_sparql_query_retry_max__retries The ElasticSearch endpoint ELASTIC_SEARCH_BASE_URI app.elastic-search.base CONFIG_FORCE_app_elastic__search_base The ElasticSearch query retry strategy QUERYING_ELASTIC_SEARCH_RETRY_STRATEGY app.elastic-search.query.retry.strategy CONFIG_FORCE_app_elastic__search_query_retry_strategy The ElasticSearch query first retry delay QUERYING_ELASTIC_SEARCH_RETRY_INITIAL_DELAY app.elastic-search.query.retry.initial-delay CONFIG_FORCE_app_elastic__search_query_retry_initial__delay The ElasticSearch query maximum retry delay QUERYING_ELASTIC_SEARCH_RETRY_MAX_DELAY app.elastic-search.query.retry.max-delay CONFIG_FORCE_app_elastic__search_query_retry_max__delay The ElasticSearch query maximum number of retries QUERYING_ELASTIC_SEARCH_RETRY_MAX_RETRIES app.elastic-search.query.retry.max-retries CONFIG_FORCE_app_elastic__search_query_retry_max__retries The CompositeView allowed maximum number of sources COMPOSITE_MAX_SOURCES app.composite.max-sources CONFIG_FORCE_app_composite_max__sources The CompositeView allowed maximum number of projections COMPOSITE_MAX_PROJECTIONS app.composite.max-projections CONFIG_FORCE_app_composite_max__projections The CompositeView allowed minimum rebuild interval time COMPOSITE_MIN_REBUILD_INTERVAL app.composite.min-interval-rebuild CONFIG_FORCE_app_composite_min__interval__rebuild The CompositeView password used to encrypt token COMPOSITE_TOKEN_PASSWORD app.composite.password CONFIG_FORCE_app_composite_password The CompositeView salt used to encrypt token COMPOSITE_TOKEN_SALT app.composite.salt CONFIG_FORCE_app_composite_salt The amount of time Archives are kept in memory after being accessed ARCHIVES_CACHE_INVALIDATE_AFTER app.archives.cache-invalidate-after CONFIG_FORCE_app_archives_cache__invalidate__after The maximum number of resources allowed on an Archive ARCHIVES_MAX_RESOURCES app.archives.max-resources CONFIG_FORCE_app_archives_max__resources The maximum allowed service payload size (except for files) AKKA_HTTP_SERVER_MAX_CONTENT_LENGTH akka.http.server.parsing.max-content-length CONFIG_FORCE_akka_http_server_parsing_max__content__length The maximum allowed client payload size (used for storages) AKKA_HTTP_CLIENT_MAX_CONTENT_LENGTH akka.http.client.parsing.max-content-length CONFIG_FORCE_akka_http_client_parsing_max__content__length The maximum allowed number of connections AKKA_HTTP_MAX_CONNECTIONS akka.http.host-connection-pool.max-connections CONFIG_FORCE_akka_http_host__connection__pool_max__connections The maximum allowed concurrently opened requests AKKA_HTTP_MAX_OPEN_REQUESTS akka.http.host-connection-pool.max-open-requests CONFIG_FORCE_akka_http_host__connection__pool_max__open__requests The log level for Akka logs AKKA_LOG_LEVEL akka.loglevel CONFIG_FORCE_akka_loglevel","title":"Configuration"},{"location":"/docs/releases/v1.3-release-notes.html","text":"","title":"v1.3 Release Notes"},{"location":"/docs/releases/v1.3-release-notes.html#v1-3-release-notes","text":"This is an incremental software release that adds several improvements across the board. The API is backwards compatible to v1.2 (and the rest of the v1.x releases, i.e. v1.1 and v1.0) but requires rebuilding all indices. Please visit the migration instructions for the exact steps necessary to upgrade from the previous release.","title":"v1.3 Release Notes"},{"location":"/docs/releases/v1.3-release-notes.html#highlights","text":"The goal of this release is to expand on the benefits of using a fully managed data and knowledge graph system with new capabilities around data search, transformation and exchange.","title":"Highlights"},{"location":"/docs/releases/v1.3-release-notes.html#studio","text":"TODO: Fix the links to the appropiate section inside the studio page.\nStudio (a new feature in Nexus Web) allows users to define a user interface to browse and view the data in Nexus’ knowledge graph. Multiple Workspaces can be created within a Studio allowing for arbitrary grouping of datasets to be shown. A Workspace can be configured with multiple Dashboards, each presenting data of possibly different types (and shapes within the graph).\nEach row in a Dashboard corresponds to a resource in the system, but the values shown can be collected from related resources. A very simple example of that would be showing a listing of Person names and the name of the Organizations that they are affiliated to (following schema:affiliation) where each Person and Organization are managed as independent resources in the system:\n+--------+               +--------------+\n    | Person +-------------->+ Organization |\n    +--------+  affiliation  +--------------+\n     |                         |\n     +->name                   +->name\nSelecting an entry in a Dashboard will open a detailed view of the corresponding resource that can be fully customized by means of plugins.\nPlease head over to the Studio section of the documentation for more information.","title":"Studio"},{"location":"/docs/releases/v1.3-release-notes.html#graph-view","text":"In order to improve the user understanding of the linked entities of the knowledge graph, we have added Graph View. It presents the outgoing entities linked and enable users to graphically navigate to them.","title":"Graph View"},{"location":"/docs/releases/v1.3-release-notes.html#data-aggregation-transformation-and-projection","text":"One of the most important features of Nexus is to bridge the gap between the management of data and its consumption while not sacrificing on security. It does that by supporting customizable managed indices of the data (represented by View resources).\nPrior to this release, two main type of indices were made available ( ElasticSearchView and SparqlView) and their Aggregated* variants (for querying multiple indices at the same time). They enable fantastic search capabilities on the managed data. But while these types of indices are very powerful on their own, we found that bringing them closer together can raise the bar even further by taking advantage of their best use: an RDF graph is very powerful for data integration and exploration, while ElasticSearch is very powerful for full text and faceted search.\nThis release introduces a new type of managed index (represented by CompositeView resources) that allows the use of these indices together at their best. It allows integrating data from multiple sources (projects) in a single RDF graph to perform queries that generate documents to be stored in one or many ElasticSearch indices. The approach is extremely flexible as it allows the use of semantic web technologies to integrate, transform and filter data (via queries) to produce arbitrary document structures in ElasticSearch. (Sparql CONSTRUCT) queries can span across graphs of multiple resources removing the coupling on the data shapes for management vs search.\nAdditionally, the new views support sources of different (remote) Nexus projects introducing the first of many federation features. This first iteration allows collecting data from different Nexus deployments to produce local indices that enable fast local searches. For the best search user experience, data needs to be pre-indexed such that responses are delivered with minimal latency (distributed joins are significantly slower that local ones). The incremental indexing approach promoted by the system allows for near instant data synchronization between the sources and the local indices.\nFor more details on CompositeViews, please read below.","title":"Data Aggregation, Transformation and Projection"},{"location":"/docs/releases/v1.3-release-notes.html#details","text":"","title":"Details"},{"location":"/docs/releases/v1.3-release-notes.html#compositeviews","text":"CompositeViews are yet another type of view introduced (currently in Beta) to enable new indexing capabilities:\nability to collect data to be indexed from multiple sources (current project, other projects, remote Nexus deployments); ability to apply transformations to the indexed data by means of SPARQL CONSTRUCT queries that are executed on the entire RDF graph generated from all data sources; ability to project data to multiple indices; ability to query multiple projections of the same type; ability to query the entire RDF graph generated from all data sources.\nThe name stems from its unique characteristic of aggregating data from multiple sources and managing multiple projections.\nA CompositeView can define several sources of data of different types:\nProjectEventStream: the event log of the project where the CompositeView is defined CrossProjectEventStream: the event log of an arbitrary project within the same Nexus deployment RemoteProjectEventStream: the event log of an arbitrary project within a different Nexus deployment\nThe sources are consumed as a collection of event streams, either from the primary store or via Server Sent Events in the case of the RemoteProjectEventStream. Each event is either exchanged with the resource for which it was emitted or dropped (if the filters defined in the originating source exclude it). The resource is then transformed into an RDF graph and stored in a temporary namespace of BlazeGraph.\nProjections are then executed by querying the temporary namespace via the SPARQL CONSTRUCT queries defined as part of their configuration. These queries allow constructing an arbitrary RDF graph by traversing the temporary one starting from the IRI node representing the originating resource id (the system recognizes the {resource_id} token in the provided query and replaces it with the corresponding value).\nCompositeViews allow defining multiple projections; the current supported types are:\nElasticSearchProjection: data is projected as documents in an ElasticSearch index SparqlProjection: data is projected as an RDF named graph in a BlazeGraph namespace\nProjections include filtering configuration to allow resources of different types or constrained by different schemas to be indexed separately. An obvious use case is to index resources of different shapes in different ElasticSearch indices with appropriate mapping definitions for each variation.\nThe complete configuration options can be found in the api reference.","title":"CompositeViews"},{"location":"/docs/releases/v1.3-release-notes.html#view-offsets","text":"Views now expose offset as a sub-resource allowing the retrieval of the last consumed event id. The event id values are the same as the ones presented via Server Sent Events.\nGET /v1/views/{org_label}/{project_label}/{view_id}/offset\nAn example response:\n{\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/offset.json\",\n  \"@type\": \"TimeBasedOffset\",\n  \"instant\": \"2020-02-14T09:31:41.400Z\",\n  \"value\": \"ceaf0580-4f0c-11ea-98d9-dff6b2cf55b4\"\n}\nDeleting the offset sub-resource instructs the system to rebuild the corresponding index by restarting the event replay and indexing process.\nDELETE /v1/views/{org_label}/{project_label}/{view_id}/offset\nThe system acknowledges the command by providing a NoOffset response:\n{\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/offset.json\",\n  \"@type\": \"NoOffset\"\n}\nIn the case of CompositeViews where the entire process handles multiple offsets at the same time (a product of sources and projections) dedicated endpoints have been added to select a specific offset or perform a listing:\n/v1/views/{org_label}/{project_label}/{view_id}/sources/{source_id}/offset\n/v1/views/{org_label}/{project_label}/{view_id}/sources/_/offset\n/v1/views/{org_label}/{project_label}/{view_id}/projections/{projection_id}/offset\n/v1/views/{org_label}/{project_label}/{view_id}/projections/_/offset\nThese endpoints also accept deletion instructing the system to restart only a part of the process. For example, executing a deletion on the following endpoint will cause the system to only rebuild the projections without having to restart the collection of resources in the temporary RDF graph:\nDELETE /v1/views/{org_label}/{project_label}/{view_id}/projections/_/offset","title":"View Offsets"},{"location":"/docs/releases/v1.3-release-notes.html#javascript-python-sdks-and-the-cli","text":"The JavaScript SDK has been updated to support the new APIs exposed in this release, maintaining feature parity.\nThe Python SDK and Nexus CLI have not yet been updated, as we’re working on redesigning these components to provide a better user experience. Since the release is fully backwards compatible with the previous releases, the Python SDK and Nexus CLI can be used just as before, but they don’t support the newly added APIs.\nWe will announce their release at a later date.","title":"JavaScript, Python SDKs and the CLI"},{"location":"/docs/releases/v1.3-release-notes.html#other-changes","text":"The SparqlViews can now also be queried using the GET HTTP method by providing the query string in the query parameter:\nGET /v1/views/{org_label}/{project_label}/{view_id}/sparql?query={query}\nSorting of results can be controlled now via the repeatable sort query parameter. The parameter accepts an ElasticSearch document field name to be used for sorting the result set ascending. The order can be reversed by prefixing the field name with a - character. The sort parameter can be repeated multiple times to specify multiple fields to be used for sorting. For example, the following call will return all resources in the specified project ordered by the user that made the last change in each resource and then by last updated time descending (more recent updates first).\nGET /v1/resources/{org_label}/{project_label}?sort=_updatedBy&sort=-_updatedAt\nNew ElasticSearch indices are automatically configured to perform word split and properly handle UUIDs. The new index configuration yields better full text search results.\nAdditional reported issues were fixed.","title":"Other Changes"},{"location":"/docs/releases/v1.2-to-v1.3-migration.html","text":"","title":"v1.2 To v1.3 Migration"},{"location":"/docs/releases/v1.2-to-v1.3-migration.html#v1-2-to-v1-3-migration","text":"As part of the v1.3 release CompositeViews were introduced requiring a change in the data model used to record the indexing progress of a View. The change is not backwards compatible, it requires dropping two Cassandra tables and a rebuilding all indices. Additionally, in order to benefit from the new ElasticSearch index configuration, a migration of the default ElasticSearchView of each project is required.\nThe migration steps are as follows:\nStop the 3 services: iam, admin and kg. Backup the cassandra store. Delete all ElasticSearch indices: curl -XDELETE 'http://{elasticsearch_host}/kg_*'\n Delete all BlazeGraph namespaces: for i in `curl -s 'http://{blazegraph_host}/blazegraph/namespace?describe-each-named-graph=false' | grep sparqlEndpoint | grep -o --color \"rdf:resource=\\\"[^\\\"]*\" | sed 's/rdf:resource=\"//' | sed 's#/sparql$##' | grep -v kb | grep -v LBS`\n   do curl -X DELETE \"$i\"\ndone\n Drop the kg.projections_progress and the kg.projections_failures tables: drop table kg.projections_progress;\ndrop table kg.projections_failures;\n Deploy the new service images (tag 1.3) for iam and admin. Deploy the new kg (tag 1.3) image with the MIGRATE_V12_TO_V13=true environment variable. This will instruct the service to automatically migrate the default views. The service can be restarted without the migration environment variable after the following message is presented in the log: Finished migrating views mappings.\nOnce the services are restarted with the new images all ElasticSearch and BlazeGraph indices will be rebuilt automatically. The progress for each view can be tracked either in Nexus Web or using the statistics endpoint for each view:\nGET /v1/views/{org_label}/{project_label}/{view_id}/statistics","title":"v1.2 To v1.3 Migration"},{"location":"/docs/releases/v1.2-release-notes.html","text":"","title":"v1.2 Release Notes"},{"location":"/docs/releases/v1.2-release-notes.html#v1-2-release-notes","text":"This is an incremental software release that adds several improvements across the board. The API is backwards compatible to v1.1 and no migrations are required.","title":"v1.2 Release Notes"},{"location":"/docs/releases/v1.2-release-notes.html#highlights","text":"The goal of this release is to extend the way in which resources can be fetched, allowing multiple resources to be downloaded at once.","title":"Highlights"},{"location":"/docs/releases/v1.2-release-notes.html#source","text":"Previously a resource could be retrieved as Json-LD (compacted or expanded), DOT and n-triples format. In this release the sub-resource /source is introduced.\nThis endpoint allows clients to retrieve the original payload posted for that resource. The following resource types support this feature:\nresources: /v1/resources/{org}/{project}/_/{id}/source schemas: /v1/schemas/{org}/{project}/{id}/source views: /v1/views/{org}/{project}/{id}/source resolvers: /v1/resolvers/{org}/{project}/{id}/source storages: /v1/storages/{org}/{project}/{id}/source","title":"Source"},{"location":"/docs/releases/v1.2-release-notes.html#archives","text":"A new resource type has been introduced on the top level API (archives).\nAn archive is a collection of resources stored inside an archive file. The archiving format chosen for this purpose is tar (or tarball).\nIn other words, an archive resource allows a client to select multiple resources and download them all at once in a tar file.\nExample:\nThis example selects the resource with id https://nexus.example.com/myid1 and https://nexus.example.com/myid2 from the current project (myorg/myproj). It also selects the file with id https://nexus.example.com/file1 from the project myorg/my-other-project. For the file, the location in the resulting tar file it is explicitly specified (as other/path/file.png). As a result, a file output.tar will be created on the current directory. This file, once unpacked, contains the 3 selected resources.\ncurl -L -s -H \"Authorization: Bearer $TOKEN\" \"http://localhost/v1/archives/myorg/myproj\" \\\n  -H \"Content-Type: application/json\" -H \"Accept: */*\" \\\n  -d '{\n     \"resources\" : [\n         {\n             \"@type\": \"Resource\",\n             \"resourceId\": \"https://nexus.example.com/myid1\"\n         },\n         {\n             \"@type\": \"Resource\",\n             \"resourceId\": \"https://nexus.example.com/myid2\",\n             \"originalSource\": false\n         },\n         {\n             \"@type\": \"File\",\n             \"resourceId\": \"https://nexus.example.com/file1\",\n             \"project\": \"myorg/my-other-project\",\n             \"path\": \"other/path/file.png\"\n         }       \n     ]\n  }' -o output.tar\nFurther information related to archives can be found here","title":"Archives"},{"location":"/docs/releases/v1.2-release-notes.html#async-file-attributes","text":"The previous release added an asynchronous process that checks for un-computed digests on file resources and performs the computation asynchronously.\nIn this release we extend that computation to not only update the digest but also the size (bytes) of the file. This process fixes some edge cases, where the size of an archive file was not accurate when linking resources using a RemoteDiskStorage.","title":"Async. file attributes"},{"location":"/docs/releases/v1.2-release-notes.html#other-changes","text":"The underlying SHACL validator has been updated to 1.3.0. This version contains some performance optimizations. Other Bug Fixes.","title":"Other changes"},{"location":"/docs/releases/v1.1-release-notes.html","text":"","title":"v1.1 Release Notes"},{"location":"/docs/releases/v1.1-release-notes.html#v1-1-release-notes","text":"This is an incremental software release that adds several improvements across the board. The API is backwards compatible to v1.0 but the cassandra store and indices require a migration due to changes in the underlying event model and resource representation. If you are updating from v1.0 please follow the migration instructions.","title":"v1.1 Release Notes"},{"location":"/docs/releases/v1.1-release-notes.html#highlights","text":"The goal of this release is to expose the event log through an API and to provide a configurable storage where to save files. These two key features enables users to\nBuild custom applications based on Nexus event log . Save files in different storage backends (S3, POSIX compatible, local File System).","title":"Highlights"},{"location":"/docs/releases/v1.1-release-notes.html#service-event-logs","text":"Services now expose new API endpoints to replay their global event log or the virtual event logs specific to certain resource types or scope (organization, project). This new API allows building applications that integrate with Nexus to provide custom functionality for the data stored in the system. It allows applications to listen to events as they are emitted and react accordingly.\nAn example application would be a custom index for data within a project where as new resources or updates are recorded in Nexus, the application is notified and updates the appropriate index.\nThe implementation follows the Server Sent Events specification and gives clients the responsibility of maintaining a cursor while replaying an event log. The event log is exposed over HTTP in a JSON-LD event representation.\nThe new endpoints require proof of identity by passing within the Authorization header a ‘‘Bearer’’ token. An Anonymous identity is assumed if the client does not pass a token.\nExample:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \"http://localhost/v1/resources/myorg/myproj/events\"\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Updated\",\"_resourceId\":\"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\"_source\":{\"@context\":{\"@base\":\"http://localhost/v1/resources/myorg/myproj/_/\",\"@vocab\":\"http://schema.org/\"},\"@id\":\"7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\"@type\":\"Person\",\"age\":34,\"name\":\"John Doe\"},\"_types\":[\"http://schema.org/Person\"],\"_projectUuid\":\"fadc3e6c-fca0-45d8-b65c-a984a012c689\",\"_organizationUuid\":\"d363ee88-5426-420a-8078-f8e9d9652fe9\",\"_rev\":2,\"_instant\":\"2019-07-24T10:58:03.830114Z\",\"_subject\":\"http://localhost/v1/anonymous\"}\nevent:Updated\nid:e8fac660-ae01-11e9-b31a-71e2858070d7\n\ndata:\n\n^C","title":"Service event logs"},{"location":"/docs/releases/v1.1-release-notes.html#full-service-event-logs","text":"Designed primarily for applications that aim to be extensions to Nexus, the following service specific endpoints have been added. It is assumed that these endpoints would not be consumed by browsers or command line clients, but rather stateful applications that run within the same network. If that not the case, the deployment requires a proxy that does URL rewriting to avoid the path collision.\nhttp(s)://{kg_service_address}/v1/events; exposes the entire event log of the KG service; requires events/read permission on /. http(s)://{admin_service_address}/v1/events; exposes the entire event log of the Admin service; requires events/read permission on /. http(s)://{iam_service_address}/v1/events; exposes the entire event log of the KG service; requires events/read permission on /. http(s)://{nexus_address}/v1/events; exposes the entire event log of the KG service; requires events/read permission on /.","title":"Full service event logs"},{"location":"/docs/releases/v1.1-release-notes.html#resource-specific-event-logs","text":"Designed primarily for applications that target a single resource type or a specific scope, the following endpoints have been added:\nhttp(s)://{nexus_address}/v1/permissions/events; exposes the event log for permissions; requires permissions/read permission on /. http(s)://{nexus_address}/v1/realms/events; exposes the event log for realms; requires realms/read permission on /. http(s)://{nexus_address}/v1/acls/events; exposes the event log for access control lists; requires acls/read permission on /. http(s)://{nexus_address}/v1/orgs/events; exposes the event log for organizations; requires organizations/read permission on /. http(s)://{nexus_address}/v1/projects/events; exposes the event log for projects; requires projects/read permission on /. http(s)://{nexus_address}/v1/resources/{org}/events; exposes the event log for all resources in the selected organization; requires resources/read permission on /{org}. http(s)://{nexus_address}/v1/resources/{org}/{project}/events; exposes the event log for all resources in the selected project; requires resources/read permission on /{org}/{project}.","title":"Resource specific event logs"},{"location":"/docs/releases/v1.1-release-notes.html#configurable-storage-backends","text":"Prior to this release the KG service used an implicit storage medium, a filesystem directory (either local or mounted) accessible by the service. We’ve noticed, however, both internally and through questions raised by organizations using Nexus that certain usecases require a higher degree of control on how data is stored and managed by the system.\nAn example of that is registering fairly large files into Nexus; performing a file upload just for the purpose of recording the file location and checksum is not efficient, especially in cases where the existing files are present on the same storage medium as the one mounted for use by Nexus.\nTo address this issue the new release introduces a new resource type specific to KG that controls the configuration of storage mediums in Nexus on a project basis. The new resource type is called Storage with three sub-types: DiskStorage, RemoteDiskStorage, S3Storage and uses the /v1/storage resource type specific endpoint.\nEach project can be configured with multiple storage resources. Creating a storage resource requires storages/write permission on the target project or inherited from the parent organization or /.\nSee the storages API for more information.\nAdditionally, a new file operation has been introduced that allows registering an existing file (already present on that storage) into the system just by specifying its name, path, mediaType and optionally a storage identifier to be used:\ncurl -s -XPUT \"http://localhost/v1/files/myorg/myproj/myfile.png?storage=mystorage\" -d \\\n'{\n    \"filename\": \"myfile.png\",\n    \"path\": \"relative/path/to/myfile.png\",\n    \"mediaType\": \"image/png\"\n}'","title":"Configurable storage backends"},{"location":"/docs/releases/v1.1-release-notes.html#diskstorage","text":"When new projects are being created, a new DiskStorage resource is automatically created for that project and set as default, thus preserving the previous behaviour. Additionally new configuration options have been implemented:\ndefault: boolean, mandatory, whether the storage resource is the default one for a project volume: string, mandatory, the root filesystem directory where Nexus can store files for this project maxFileSize: int, optional, the maximum file size (in bytes) allowed for clients to upload readPermission: string, optional, defaults to resources/read, the permission required for downloading files from this storage medium writePermission: string, optional, defaults to files/write, the permission required for uploading files to this storage medium\nArbitrary permissions can be used as values for readPermission and writePermission as long as they are defined in the global permission collection (/v1/permissions).","title":"DiskStorage"},{"location":"/docs/releases/v1.1-release-notes.html#remotediskstorage","text":"This storage type relies on a remote HTTP service that exposes basic file operations of an underlying POSIX file-system. In terms of deployment configuration it allows separating the Nexus and the storage mediums in different networks and possibly physical locations. An example usecase is running a distributed network storage (such as Ceph, Gluster, GPFS, Lustre, …) that can’t or shouldn’t be mounted directly on the system where Nexus runs.\nThe following configuration options are available for this storage type:\ndefault: boolean, mandatory, whether the storage resource is the default one for a project endpoint: string, optional, the base address of the remote disk storage integration service, defaults to the value set in the environment variables of KG credentials: string, optional, the oauth2 bearer token to be used for authenticating to the remote disk storage integration service, defaults to the value set in the environment variables of KG folder: string, mandatory, the name of the folder where files are to be stored for this project maxFileSize: int, optional, the maximum file size (in bytes) allowed for clients to upload readPermission: string, optional, defaults to resources/read, the permission required for downloading files from this storage medium writePermission: string, optional, defaults to files/write, the permission required for uploading files to this storage medium","title":"RemoteDiskStorage"},{"location":"/docs/releases/v1.1-release-notes.html#s3storage","text":"This storage type (S3Storage) allows the use S3 compatible object storage as a backend.\nThe following configuration options are available for this storage type:\ndefault: boolean, mandatory, whether the storage resource is the default one for a project bucket: string, mandatory, the name of the s3 bucket where files are to be stored endpoint: string, optional, the s3 storage endpoint, defaulting to s3.amazonaws.com accessKey: string, optional, the access key to be used for authenticating to the service secretKey: string, optional, the secret key to be used for authenticating to the service, defaults to the value set in the environment variables of KG maxFileSize: int, optional, the maximum file size (in bytes) allowed for clients to upload readPermission: string, optional, defaults to resources/read, the permission required for downloading files from this storage medium writePermission: string, optional, defaults to files/write, the permission required for uploading files to this storage medium","title":"S3Storage"},{"location":"/docs/releases/v1.1-release-notes.html#stable-elasticsearch-views","text":"Both ElasticSearchView and AggregateElasticSearchView have been promoted from alpha to stable. Creation or update no longer require the use of the Alpha type to be provided.\nNew configuration options have been introduced for ElasticSearchView: resourceTypes and includeDeprecated. These options allow a finer grain filtering of the resources considered for indexing by the view.","title":"Stable ElasticSearch views"},{"location":"/docs/releases/v1.1-release-notes.html#configurable-sparqlview","text":"The SparqlView has been promoted from alpha to stable. Creation or update no longer require the use of the Alpha type to be provided.\nConfiguration options have been introduced such that it is consistent with the ElasticSearchView:\nresourceSchemas: array of ids, optional, defaults to empty, configures the view to consider for indexing only the resources constrained by any of the specified schemas; an empty array implies all resources. resourceTypes: array of ids, optional, defaults to empty, configures the view to consider for indexing only the the resources that have at least one of the specified types at the revision selected by the tag option; if a tag is not specified, the latest revision is assumed. tag: string, optional, selects only the resources that are tagged with the provided value; the tagged revision is considered for indexing. includeMetadata: boolean, optional, defaults to false, configures the view to index resources without injecting the resource metadata in the resource graph. includeDeprecated: boolean, optional, defaults to true, configures the view to include or exclude the deprecated resources.","title":"Configurable SparqlView"},{"location":"/docs/releases/v1.1-release-notes.html#aggregatesparqlview","text":"A new view type has been introduced (AggregateSparqlView), the dual of AggregateElasticSearchView that allows for query time aggregation of results. The configuration is mostly identical to the AggregateElasticSearchView which is merely a set of SparqlView references:\n{\n  \"@id\": \"{someid}\",\n  \"@type\": [ \"View\", \"AggregateSparqlView\"],\n  \"views\": [\n    {\n        \"project\": \"{project}\",\n        \"viewId\": \"{viewId}\"\n    },\n    ...\n  ]\n}\nNote: this is not implemented in terms of SPARQL Federation but just simple result aggregation. The query sent to this view is dispatched to all BlazeGraph namespaces and the results are aggregated without preserving the view order. The implication is that triples in one namespace cannot be filtered using predicates from another namespace, furthermore, path traversals cannot be performed between the selected namespaces.\nAs with the AggregateElasticSearchView since the subject that creates an aggregate view may be different than the subject that queries the view, before dispatching the query the target namespaces are filtered based on the permissions of the caller for each individual view. This behaviour is completely transparent to the client.","title":"AggregateSparqlView"},{"location":"/docs/releases/v1.1-release-notes.html#index-progress","text":"Indexing in Nexus is asynchronous, meaning once a resource is created or modified the change is not immediately visible in the respective indices (maintained by the views). The reason for this asynchrony is to break the coupling between the stores (Cassandra, ElasticSearch, BlazeGraph) during a client request. This provides many benefits:\nreduces the latency of write operations requests succeed regardless of the availability of the secondary stores transient failures while indexing can be retried indices can be rebuilt at will (through project, view updates or by resetting the indexing progress and restarting the service) no synchronization is needed between view management and resource write operations\nUnfortunately the index progress for each view was not made available to clients which meant users had no way of knowing if their queries hit an index while it was rebuilt or stale.\nAll views have now been updated to expose a statistics sub-resource that provides information on the state of indexing:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \"http://localhost/v1/views/myorg/myproj/nxv:defaultElasticSearchIndex/statistics\" | jq\n{\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/view.json\",\n  \"delayInSeconds\": 0,\n  \"discardedEvents\": 0,\n  \"evaluatedEvents\": 585721,\n  \"lastEventDateTime\": \"2019-08-06T08:47:20.958Z\",\n  \"lastProcessedEventDateTime\": \"2019-08-06T08:47:20.545Z\",\n  \"processedEvents\": 585721,\n  \"remainingEvents\": 1,\n  \"totalEvents\": 585722\n}\n… where:\ntotalEvents: total number of events in the project processedEvents: number of events that have been considered by the view remainingEvents: number of events that remain to be considered by the view discardedEvents: number of events that have been discarded (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the view) evaluatedEvents: number of events that have been used to update an index lastEventDateTime: timestamp of the last event in the project lastProcessedEventDateTime: timestamp of the last event processed by the view delayInSeconds: number of seconds between the last processed event timestamp and the last known event timestamp\nAdditionally the service maintains and exposes counters and gauges for monitoring with Prometheus such that data ingestion and indexing velocity and global event counts can be monitored.\nFor example, the query:\nkg_indexer_gauge{project=\"myorg/myproj\"}\n… yields:\nElement\tValue\nkg_indexer_gauge{instance=\"localhost:9095\",job=\"kg\",organization=\"myorg\",project=\"myorg/myproj\",type=\"elasticsearch\",viewId=\"https://bluebrain.github.io/nexus/vocabulary/defaultElasticSearchIndex\"}\t585721\nkg_indexer_gauge{instance=\"localhost:9095\",job=\"kg\",organization=\"myorg\",project=\"myorg/myproj\",type=\"eventCount\"}\t585722\nkg_indexer_gauge{instance=\"localhost:9095\",job=\"kg\",organization=\"myorg\",project=\"myorg/myproj\",type=\"sparql\",viewId=\"https://bluebrain.github.io/nexus/vocabulary/defaultSparqlIndex\"}\t585617","title":"Index progress"},{"location":"/docs/releases/v1.1-release-notes.html#other-api-improvements","text":"The release contains numerous improvements to the API, the most significant being the following.","title":"Other API Improvements"},{"location":"/docs/releases/v1.1-release-notes.html#resource-content-negotiation","text":"Added DOT, n-triples formats and compacted/expanded variants for json-ld. The selection of the format is done via the Accept header value and in case of application/ld+json the query param format with compacted or expanded values.\nDOT representation is requested using the text/vnd.graphviz value for the Accept header:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \\\n-H \"Accept: text/vnd.graphviz\" \\\n\"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\"\n\ndigraph {\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/outgoing\" [label = \"https://bluebrain.github.io/nexus/vocabulary/outgoing\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"2019-07-24T10:58:03.830114Z\" [label = \"https://bluebrain.github.io/nexus/vocabulary/updatedAt\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"John Doe\" [label = \"http://schema.org/name\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/incoming\" [label = \"https://bluebrain.github.io/nexus/vocabulary/incoming\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"2019-02-05T12:52:05.510Z\" [label = \"https://bluebrain.github.io/nexus/vocabulary/createdAt\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"http://localhost/v1/anonymous\" [label = \"https://bluebrain.github.io/nexus/vocabulary/updatedBy\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" [label = \"https://bluebrain.github.io/nexus/vocabulary/self\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> 34 [label = \"http://schema.org/age\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> 2 [label = \"https://bluebrain.github.io/nexus/vocabulary/rev\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> false [label = \"https://bluebrain.github.io/nexus/vocabulary/deprecated\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\" [label = \"https://bluebrain.github.io/nexus/vocabulary/constrainedBy\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"http://localhost/v1/anonymous\" [label = \"https://bluebrain.github.io/nexus/vocabulary/createdBy\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"http://localhost/v1/projects/myorg/myproj\" [label = \"https://bluebrain.github.io/nexus/vocabulary/project\"]\n  \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" -> \"http://schema.org/Person\" [label = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"]\n}\nN-triples representation is requested using the application/n-triples value for the Accept header:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \\\n-H \"Accept: application/n-triples\" \\\n\"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\"\n\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/updatedAt> \"2019-07-24T10:58:03.830114Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/createdAt> \"2019-02-05T12:52:05.510Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/createdBy> \"http://localhost/v1/anonymous\" .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/constrainedBy> <https://bluebrain.github.io/nexus/schemas/unconstrained.json> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/outgoing> \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/outgoing\" .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/updatedBy> \"http://localhost/v1/anonymous\" .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/deprecated> \"false\"^^<http://www.w3.org/2001/XMLSchema#boolean> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/project> <http://localhost/v1/projects/myorg/myproj> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <http://schema.org/age> \"34\"^^<http://www.w3.org/2001/XMLSchema#integer> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/incoming> \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/incoming\" .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/self> \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <https://bluebrain.github.io/nexus/vocabulary/rev> \"2\"^^<http://www.w3.org/2001/XMLSchema#long> .\n<http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3> <http://schema.org/name> \"John Doe\" .\nThe default representation for application/ld+json is compacted. Passing along the ?format=expanded removes the context from the resource:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \\\n-H \"Accept: application/ld+json\" \\\n\"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3?format=expanded\" | jq\n\n{\n  \"@id\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\n  \"@type\": \"http://schema.org/Person\",\n  \"http://schema.org/age\": 34,\n  \"http://schema.org/name\": \"John Doe\",\n  \"https://bluebrain.github.io/nexus/vocabulary/constrainedBy\": {\n    \"@id\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\"\n  },\n  \"https://bluebrain.github.io/nexus/vocabulary/createdAt\": \"2019-02-05T12:52:05.510Z\",\n  \"https://bluebrain.github.io/nexus/vocabulary/createdBy\": \"http://localhost/v1/anonymous\",\n  \"https://bluebrain.github.io/nexus/vocabulary/deprecated\": false,\n  \"https://bluebrain.github.io/nexus/vocabulary/incoming\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/incoming\",\n  \"https://bluebrain.github.io/nexus/vocabulary/outgoing\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/outgoing\",\n  \"https://bluebrain.github.io/nexus/vocabulary/project\": {\n    \"@id\": \"http://localhost/v1/projects/myorg/myproj\"\n  },\n  \"https://bluebrain.github.io/nexus/vocabulary/rev\": 2,\n  \"https://bluebrain.github.io/nexus/vocabulary/self\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\n  \"https://bluebrain.github.io/nexus/vocabulary/updatedAt\": \"2019-07-24T10:58:03.830114Z\",\n  \"https://bluebrain.github.io/nexus/vocabulary/updatedBy\": \"http://localhost/v1/anonymous\"\n}","title":"Resource content negotiation"},{"location":"/docs/releases/v1.1-release-notes.html#additional-query-params-in-listings","text":"Listing resources now support additional query parameters, namely: type, rev, deprecated, createdBy and updatedBy. This is applies for any resource types (files, schemas, resolvers, storages, views or plain resources).\nThe general form is:\nGET /v1/resources/{org_label}/{project_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&schema={schema}&q={q}\n… where:\n{from}: number, the parameter that describes the offset for the current query; defaults to 0 {size}: number, the parameter that limits the number of results; defaults to 20 {deprecated}: boolean, can be used to filter the resulting resources based on their deprecation status {rev}: number, can be used to filter the resulting resources based on their revision value {type}: iri, can be used to filter the resulting resources based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: iri, can be used to filter the resulting resources based on their creator {updatedBy}: iri, can be used to filter the resulting resources based on the person which performed the last update {schema}: iri, can be used to filter the resulting resources based on the conformant schema {q}: string, can be provided to select only the resources in the collection that have attribute values matching (containing) the provided string","title":"Additional query params in listings"},{"location":"/docs/releases/v1.1-release-notes.html#incoming-and-outgoing-links","text":"The incoming and outgoing sub-resources have been added to all resources in KG such that the provide a listing of known relationships of the current resource.\nThe general forms are:\nGET /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}/incoming?from={from}&size={size}\nGET /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}/outgoing?from={from}&size={size}&includeExternalLinks={includeExternalLinks}\n… where:\n{from}: number, the parameter that describes the offset for the current query; defaults to 0 {size}: number, the parameter that limits the number of results; defaults to 20 {includeExternalLinks}: boolean, flag to decide whether or not external links are to be included; external links are references to resources in other projects, or even resources external to Nexus; defaults to true\nAdditionally, the resource metadata now includes links (_incoming and _outgoing) for these endpoints.\nFor example, considering the following resource:\n{\n  \"@context\": [\n    {\n      \"@base\": \"http://localhost/v1/resources/myorg/myproj/_/\",\n      \"@vocab\": \"http://schema.org/\",\n      \"logo\": {\n        \"@id\": \"http://schema.org/logo\",\n        \"@type\": \"@id\"\n      }\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\n  \"@type\": \"Person\",\n  \"age\": 34,\n  \"logo\": \"a713b0e4-c745-4a89-a2ad-84b19c244bd5\",\n  \"name\": \"John Doe\",\n  \"_self\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\n  \"_project\": \"http://localhost/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-02-05T12:52:05.510Z\",\n  \"_createdBy\": \"http://localhost/v1/anonymous\",\n  \"_updatedAt\": \"2019-08-06T09:53:02.151413Z\",\n  \"_updatedBy\": \"http://localhost/v1/anonymous\",\n  \"_incoming\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/incoming\",\n  \"_outgoing\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/outgoing\"\n}\n… the outgoing link will return the logo relationship along with the paths, @type and resource metadata:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \\\n\"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/outgoing\" | jq\n\n{\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"http://localhost/v1/resources/myorg/myproj/_/a713b0e4-c745-4a89-a2ad-84b19c244bd5\",\n      \"@type\": \"https://bluebrain.github.io/nexus/vocabulary/File\",\n      \"paths\": \"http://schema.org/logo\",\n      \"_self\": \"http://localhost/v1/files/myorg/myproj/http://localhost/v1/resources/myorg/myproj/_/a713b0e4-c745-4a89-a2ad-84b19c244bd5\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n      \"_project\": \"http://localhost/v1/projects/myorg/myproj\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-07-24T10:57:32.707Z\",\n      \"_createdBy\": \"http://localhost/v1/anonymous\",\n      \"_updatedAt\": \"2019-07-24T10:57:32.707Z\",\n      \"_updatedBy\": \"http://localhost/v1/anonymous\"\n    }\n  ]\n}","title":"Incoming and Outgoing links"},{"location":"/docs/releases/v1.1-release-notes.html#resource-id-resolution","text":"Resolvers provide means of retrieving dependent resources, but until now they offered no means to see these resources or their origin (i.e. through their metadata).\nThe release adds the ability to query resolvers or the entire collection of resolvers (respecting their priority) for resource ids such that resolved resources can be viewed.\nThe general query form is:\nGET /v1/resolvers/{org_label}/{project_label}/{resolver_id}/{resource_id}\nAdditionally, the resolver_id can be omitted (replaced with _) such that the entire collection of non-deprecated resolvers in the project is used to resolve the resource id:\nGET /v1/resolvers/{org_label}/{project_label}/_/{resource_id}\nThe desired tag or revision can be requested via the tag or rev query params. These params are mutually exclusive.\nExample, using the default InProject resolver to fetch a specific resource:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \\\n\"http://localhost/v1/resolvers/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\" | jq\n\n{\n  \"@context\": [\n    {\n      \"@base\": \"http://localhost/v1/resources/myorg/myproj/_/\",\n      \"@vocab\": \"http://schema.org/\",\n      \"logo\": {\n        \"@id\": \"http://schema.org/logo\",\n        \"@type\": \"@id\"\n      }\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\n  \"@type\": \"Person\",\n  \"age\": 34,\n  \"logo\": \"a713b0e4-c745-4a89-a2ad-84b19c244bd5\",\n  \"name\": \"John Doe\",\n  \"_self\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\n  \"_project\": \"http://localhost/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-02-05T12:52:05.510Z\",\n  \"_createdBy\": \"http://localhost/v1/anonymous\",\n  \"_updatedAt\": \"2019-08-06T09:53:02.151413Z\",\n  \"_updatedBy\": \"http://localhost/v1/anonymous\",\n  \"_incoming\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/incoming\",\n  \"_outgoing\": \"http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3/outgoing\"\n}\nSee resolvers API for more details.","title":"Resource id resolution"},{"location":"/docs/releases/v1.1-release-notes.html#paginate-beyond-10-000-results","text":"The KG service uses ElasticSearch with a default project view to power listing of resources within a project. Due to the restriction set by this store when using from and size resources could not be listed after reaching 10,000 with the applied additional filters.\nTo address this issue, a new link (_next) has been added to all listing results such that following this link will continue the pagination over the imposed limit; the implementation relies on the searchAfter API which does not suffer from this restriction:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \"http://localhost/v1/resources/myorg/myproj?size=2\" | jq\n\n{\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 8,\n  \"_results\": [{...}, {...}],\n  \"_next\": \"http://localhost/v1/resources/myorg/myproj?size=2&after=%5B1549370708063,%22https://bluebrain.github.io/nexus/vocabulary/defaultSparqlIndex%22%5D\"\n}\nFollowing the _next link yields additional two results and a new _next value to continue from there:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \"http://localhost/v1/resources/myorg/myproj?size=2&after=%5B1549370708063,%22https://bluebrain.github.io/nexus/vocabulary/defaultSparqlIndex%22%5D\" | jq\n\n{\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 8,\n  \"_results\": [{...}, {...}],\n  \"_next\": \"http://localhost/v1/resources/myorg/myproj?size=2&after=%5B1549371125510,%22http://localhost/v1/resources/myorg/myproj/_/7fb43a6a-33f2-4106-8cb3-531f2d67c1e3%22%5D\"\n}","title":"Paginate beyond 10,000 results"},{"location":"/docs/releases/v1.1-release-notes.html#organization-and-project-uuids","text":"Internally, the organization and project labels are mapped to UUIDs to allow future functionality to relabel organizations and / or projects. These unique ids are exposed in the organization and project representations and in the event log through Server Sent Events, but until this release there was no way to resolve these UUIDS to organizations and / or projects.\nThe entire API now accepts UUIDs instead of organization or project segments, for example, getting the project and organization uuid:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \"http://localhost/v1/projects/myorg/myproj\" | jq\n\n{\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"http://localhost/v1/projects/myorg/myproj\",\n  \"@type\": \"Project\",\n  \"base\": \"http://localhost/v1/resources/myorg/myproj/_/\",\n  \"vocab\": \"http://schema.org/\",\n  \"apiMappings\": [],\n  \"_uuid\": \"fadc3e6c-fca0-45d8-b65c-a984a012c689\",\n  \"_label\": \"myproj\",\n  \"_organizationUuid\": \"d363ee88-5426-420a-8078-f8e9d9652fe9\",\n  \"_organizationLabel\": \"myorg\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-02-06T14:57:28.680Z\",\n  \"_createdBy\": \"http://localhost/v1/anonymous\",\n  \"_updatedAt\": \"2019-02-06T14:57:28.680Z\",\n  \"_updatedBy\": \"http://localhost/v1/anonymous\"\n}\n… and using them to list resources:\ncurl -s -H \"Authorization: Bearer $TOKEN\" \"http://localhost/v1/resources/d363ee88-5426-420a-8078-f8e9d9652fe9/fadc3e6c-fca0-45d8-b65c-a984a012c689?size=2\" | jq\n\n{\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 8,\n  \"_results\": [{...}, {...}],\n  \"_next\": \"http://localhost/v1/resources/d363ee88-5426-420a-8078-f8e9d9652fe9/fadc3e6c-fca0-45d8-b65c-a984a012c689?size=2&after=%5B1549370708063,%22https://bluebrain.github.io/nexus/vocabulary/defaultSparqlIndex%22%5D\"\n}","title":"Organization and Project UUIDs"},{"location":"/docs/releases/v1.1-release-notes.html#nexus-web-improvements","text":"This is the first fully supported version of Nexus Web, now freshly graduated from beta. Its v1.1 version reflects the feature set supporting the Nexus v1.1 release and will be kept in step with that project.","title":"Nexus Web improvements"},{"location":"/docs/releases/v1.1-release-notes.html#","text":"","title":"v1.1 Release Notes"},{"location":"/docs/releases/v1.1-release-notes.html#feature-highlights","text":"The login page now allows users to select the OpenId Connect provider:\nAbility to discriminate between Nexus specific resources (eg. Views, Resolvers) and user created resources:\nDisplay the project ACLs via View Project’s permissions link in the right panel:\nAbility to query user defined views, by using the drop-down presented in the query interface and additionally showing the index progress for the selected view (either as a green check if up to date, or a gauge with the percentage otherwise):","title":"Feature highlights"},{"location":"/docs/releases/v1.1-release-notes.html#other-changes","text":"The Javascript and Python SDKs and the CLI have been updated to support the additionally introduced functionality. The http client in the Python SDK / CLI has been configured to use connection pooling which brings a 4x+ performance boost due to removing the latency penalty for opening new connections. The CLI has been updated such that a user can login with username and password if the selected realm and provided client id supports Direct Access Grants. By convention the CLI defaults to nexus-public client. ElasticSearch compatibility has been updated to 7.x, please see the migration instructions. Other Bug Fixes.","title":"Other changes"},{"location":"/docs/releases/v1.0-to-v1.1-migration.html","text":"","title":"v1.0 To v1.1 Migration"},{"location":"/docs/releases/v1.0-to-v1.1-migration.html#v1-0-to-v1-1-migration","text":"As part of the v1.1 release there were two significant changes that require a primary store migration:\nUpdates to the event model ElasticSearch default view mapping update for 7.x compatibility\nAdditionally, due to a bug in the underlying persistence library some events may have been skipped when the tag_views table is populated as a reverse index for event tags.\nThe migration steps are as follows:\nStop the 3 services: iam, admin and kg. Backup the cassandra store. This step is a safeguard against anything which could go wrong during migration scripts. It’s also a good practice to protect from hardware failures. Delete all ElasticSearch indices curl -XDELETE 'http://{elasticsearch_host}/kg_*'\n Delete all BlazeGraph namespaces: for i in `curl -s 'http://{blazegraph_host}/blazegraph/namespace?describe-each-named-graph=false' | grep sparqlEndpoint | grep -o --color \"rdf:resource=\\\"[^\\\"]*\" | sed 's/rdf:resource=\"//' | sed 's#/sparql$##' | grep -v kb | grep -v LBS`\n   do curl -X DELETE \"$i\"\ndone\n Update Elasticsearch software from 6.x to 7.2 or above. Deploy the new service images (tag 1.1): iam, admin and kg; make sure to start the iam, admin and kg services one by one, in order and wait for the service to become available, following the instructions:\nWhen running iam and admin services for the first time in v1.1, set the environment variable REPAIR_FROM_MESSAGES to true. This environment variable should be removed in subsequent runs. It makes services rebuild the cassandra database from the messages table and correcting any problems with the tag_views table When running kg service for the first time in v1.1, set the environment variable MIGRATE_V10_TO_V11 to true. This environment variable should be removed in subsequent runs. It triggers the event migration, full rebuild of the cassandra database from the messages table and correcting any problems with the tag_views table.","title":"v1.0 To v1.1 Migration"},{"location":"/docs/releases/v1.0-to-v1.1-migration.html#migration-process","text":"This section explains what happens during the migration process. Although the knowledge of what is happening behind the scenes should not be necessary to successfully migrate to v1.1, it might be of interest.","title":"Migration process"},{"location":"/docs/releases/v1.0-to-v1.1-migration.html#iam-and-admin-migration-process","text":"The migration for these services is straight forward since the changes introduced did not affect the main models in the cassandra store. The migration is essentially a repair of the cassandra store to make sure that every row which should be present in the tag_views cassandra table, is indeed there. To achieve that, during the boot process the service wipes all tables but messages and materializes all persistent actors found in the messages table to force repair all dependent tables.","title":"Iam and admin migration process"},{"location":"/docs/releases/v1.0-to-v1.1-migration.html#kg-migration-process","text":"The migration for this service includes several steps, since the content on the cassandra store messages table requires modifications as per the description above.\nThe following steps are executed:\nall tables but messages are wiped all project information is loaded from admin.messages all events in the messages table are migrated to the new model a full rebuild of the cassandra store is performed by materializing all persistent actors found in the messages table to force repair all dependent tables (equivalent to the behaviour of the REPAIR_FROM_MESSAGES flag for the iam and admin services) restart all index processes from scratch\nDepending on the volume of data stored in the system, the migration process can take a fairly long time. During this window the service does not bind on the HTTP port to avoid any de-synchronization.","title":"Kg migration process"},{"location":"/docs/releases/v1.0-release-notes.html","text":"","title":"v1.0 Release Notes"},{"location":"/docs/releases/v1.0-release-notes.html#v1-0-release-notes","text":"This is the first major release of Blue Brain Nexus after almost two years of development.\nAlso referred to as “Nexus V1”, this initial release is our first big milestone in our quest to build a Knowledge Graph platform uniquely combining flexible graph database, powerful search engine and scalable data store to enable:\nEasy unification and integration of fragmented and disparate data from heterogeneous domains to break data and metadata silos Better data governance with the ability to specify and enforce organization’s best practices for data collection, storage and description through high quality metadata Data lineage and provenance recording and description FAIR (Findable, Accessible, Interoperable, Re-usable) data and metadata management\nWe’ve been running this software in production for more than a year getting good feedback on its design and we are confident that the current API meets our current and longer term goals.\nThis release represents a commitment to backwards compatibility in all future releases of the v1.y.z series.\nVersioning Nexus artifacts are versioned using semantic versioning and while services and web applications that make up Nexus are versioned independently to address specific improvements or bugfixes, their versions are synchronized across minor releases. This means, for example, that services and applications are compatible with each other if their major and minor numbers match regardless of the value of the patch numbers.\nThe behaviour of the system is described across the documentation, but here are some notable changes from the previous v0.y.z series.","title":"v1.0 Release Notes"},{"location":"/docs/releases/v1.0-release-notes.html#functionality-behaviour","text":"","title":"Functionality & Behaviour"},{"location":"/docs/releases/v1.0-release-notes.html#nexus-web-interface","text":"Previously, the web interface was dubbed Nexus Explorer, and could only be used to browse the data stored in your Nexus instance. For the Nexus V1 release, we decided to build a new web application, called Nexus Web, that also enables operational management, data management and search capabilities on the system. At this stage of development, this application is likely to be most useful to technical users who work on integrating their data into Nexus.\nThe web application is set to offer most of the features you can get with the raw API, as well as additional conveniences for Nexus users.\nAt the time of the Nexus V1 release, you can use it to:\nLogin into Nexus Browse and search organizations, projects and resources you have access to See the raw JSON-LD payload of a resources Make advanced ElasticSearch and SPARQL queries Create, edit and deprecate organizations and projects Make a project publicly accessible Create resources through an interactive JSON editor","title":"Nexus web interface"},{"location":"/docs/releases/v1.0-release-notes.html#isolated-data-scopes","text":"The v0.y.z series handled data within one single space and while it did provide some benefits with respect to the ability to query the entire system, it also provided severe limitations with respect to data evolution, scalability and future developments. We move on from this monolithic approach towards a multi scoped system, where data is bucketed and managed independently in projects.\nWhat we previously referred to as domains are now called projects and represent data and configuration boundaries within the system (we decided to change the naming as we have found that the term “domain” was understood to imply a certain data organization scheme centered around business or scientific domains; this was not intended).\nIntroducing these boundaries has opened the door to make several performance and functional improvements to the system as follows:\ndata indexing can now be configured at the project level without impacting the overall system; we’ve introduced a new resource type View that controls how and where the data is being indexed. They can be managed at runtime by the clients with “administrative” privileges enabling the development of applications specific to the area of interest. An example of that is the BBP Nexus Search application designed specifically to address the needs of the BlueBrain Project. indexing processes are now created for each individual project increasing the indexing throughput and allowing the use of distinct indexing targets. the uniqueness of a resource within the system was determined by the resource id which comprised of the “organization”, “domain”, “schema” name and version and the resource id. Introducing these data boundaries allowed us to relax this constraint and allow multiple resources to share the same id if they are scoped in different projects. access control lists are now restricted to either root (/), organization (/{org}) or project (/{org}/{project}) removing the need to index these definitions along with the data.","title":"Isolated data scopes"},{"location":"/docs/releases/v1.0-release-notes.html#client-defined-identifiers","text":"The v0.y.z series was very opinionated on how resource ids are defined and prohibited client provided identifiers. The choice at the time was that a resource id needs to be resolvable (the resource id needed to match the url to access it). This strong constraint tied the resource ids to the Nexus deployment where they were managed. While this was probably fine for most data within the system, it was nearly impossible to manage data from external sources that came with its own identification scheme (e.g. ontologies).\nThe decision was made to remove this constraint and allow clients to specify their own identifiers. In order to maintain the same API simplicity with respect to accessing resources we came up with a aliasing and curie scheme configurable at the project level (_apiMappings_) that handles bidirectional compaction and expansion of resource identifiers.\nA simple http proxying configuration with URL rewriting deployed in front of the Nexus API allows resources to continue to be resolvable.","title":"Client defined identifiers"},{"location":"/docs/releases/v1.0-release-notes.html#resolution-mechanisms-for-shared-resources","text":"During the past year of production use of Nexus we have noticed that users tend to develop schemas and contexts as reusable components. An example of that is the Neuroshapes initiative, a community effort for a shared vocabulary and collection of constraints for neuroscience.\nThe use of schemas and contexts in the v0.y.z series applied a restriction on the locality of constrained resources, specifically resources could only be created in the same domain with schemas.\nIn the new iteration we’ve introduced a configurable resolution mechanism that allows users to make use of schemas and contexts that reside in other projects. The resources that control this behaviour are called Resolvers and they behave like dependency management systems in programming language ecosystems.\nResolvers can now be created and configured to look up schemas and contexts in arbitrary locations, scoped within projects. The resolution mechanism takes into account all the resolvers defined in a project using the priorities of each resolver and attempts to resolve the referenced resource based on its @id value. Current supported resolvers are:\nInProject: a default project resource created along with a project that looks up referenced resources in the same project. CrossProject: a type of resolver that can be created by clients to look up referenced resources in projects other than the current one.\nFuture developments will include additional resolver types that are capable of resolving resources in other Nexus deployments or shared repositories (e.g.: a git repository).\nSchema imports through the owl:imports clause works recursively as before, but it applies the resolution mechanism at each iteration. Context references work recursively as before applying the resolution mechanism at each iteration.\nNote: Contexts are no longer handled differently, as special kind of resources. Any resource id can be used as a context reference; the system will resolve the referenced resource and apply only the @context value from its representation to the resource that references it.","title":"Resolution mechanisms for shared resources"},{"location":"/docs/releases/v1.0-release-notes.html#improved-handling-of-binary-resources","text":"The v0.y.z series handled binary resources as sub-resources, called attachments, following the model pioneered by CouchDB. While it provided a guarantee that every binary resource is properly described with metadata, the model did not work well in the following situations:\nuploading binaries for later organization: the parent resource required creation before a binary could be attached to it, which in the cases where users were just interested in storing binaries in Nexus it required two API calls instead of one. conflicting vocabulary definitions: a lot of the data modeling effort relied on the Nexus metadata for the uploaded binaries which forced the use of a certain vocabulary and metadata structure in Nexus\nThis model of handling binaries has been superseded by full class support for binaries through files, a new kind of resource managed just like the other types of resources within the system. Files have their own lifecycle and can be independently updated. Description of files, for example in the case of datasets, can now be done external to the file resource within a separate resource. This model allows for many-to-many relationships between files and other resources.","title":"Improved handling of binary resources"},{"location":"/docs/releases/v1.0-release-notes.html#new-mechanism-for-stable-resource-references","text":"The v0.y.z series was quite opinionated on the use of stable references ensuring the structural and semantic immutability of a resource revision. Schemas and Contexts had to be published before they could be used and once published their lifecycle would finish, preventing further updates.\nThis behaviour was replaced by giving the client the control on the immutability guarantees through the use of revisions and tags. The schema versions are no longer present in the API and the mechanism for unpacking schema references are aware of possible tag and revision references provided as query parameters. A tag is a new type of sub-resource that represents a pointer to a resource revision.\nAssuming the following entry in the project apiMappings:\n{\n  \"prefix\": \"persons\",\n  \"namespace\": \"http://nexus.example.com/schemas/person?tag=v1.0.0\"\n}\n… would ensure that resources are constrained with a stable version of a schema:\ncurl -XPOST http://nexus.example.com/resources/{org}/{proj}/persons -d '{}'\nAdditionally, the use of curies is also available, leaving the door open to providing schema versions per resource. Considering the following entry in the project apiMappings:\n{\n  \"prefix\": \"persons\",\n  \"namespace\": \"http://nexus.example.com/schemas/person?tag=\"\n}\n… resources can be constrained with a dynamic version of a schema provided at the time of resource creation:\ncurl -XPOST http://nexus.example.com/resources/{org}/{proj}/persons:v1.0.0 -d '{}'\nRevision query params can be used in the exact same manner as tag params. When omitting rev or tag query params when referring to schema, it is implied that the latest version should be used every time that schema is resolved.\nContext references follow the very same behaviour. Context iri values can be augmented with a tag or rev query parameter to point to a specific immutable reference of the resource.\nNote: the behaviour depends on the new resource reference resolution process; a change in the resolver resources (a different resolution process configuration) can not provide an immutability guarantee of the references.","title":"New mechanism for stable resource references"},{"location":"/docs/releases/v1.0-release-notes.html#client-configurable-indexing-process","text":"As mentioned previously, the indexing processes are now applied at the level of each project and can be customized by the client. Each index process is represented by a newly introduced resource View which has the following classification:\nElasticSearchView: the process replays the project event log, filters out undesired resources based on configuration, applies minimal data transformation and updates an ElasticSearch index. AggregateElasticSearchView: this view does not directly manage an indexing process, but rather represents a collection of referenced _ElasticSearchView_s that would be proxied (queried at the same time) when querying this view. SparqlView: the process replays the project event log applies minimal data transformation and updates an RDF store (currently BlazeGraph).\nA default ElasticSearchView and a default SparqlView are automatically created along with a project. The default ElasticSearchView is used by Nexus internally to power resource listing.\nSince access control lists are now limited to nesting up to the level of a project, these views do not require indexing the acl configuration and can be proxied by the system supporting their native APIs.\n_ElasticSearchView_s expose a /_search sub-resource that represents the native API for interacting with ElasticSearch. Client HTTP requests are checked for authentication and authorization and then forwarded to their respective backends. In the case of an AggregateElasticSearchView the requests executed on all the referenced indices.\n_SparqlView_s expose a /sparql sub-resource that represents the native API for interacting with the SPARQL endpoint of the RDF store. Client HTTP requests are checked for authentication and authorization and then forwarded to the respective backend.\nThe previously supported query DSL has been dropped in favour of the direct interaction with the indices via their native APIs. The attempt to provide a general query interface on top of both indices was very ambitious but production use has proven it unsatisfactory. The change gives clients a lot more power in terms of function, flexibility, expressiveness and query optimization. It also opens the door to support additional index backends without having to reconcile them with the query DSL.","title":"Client configurable indexing process"},{"location":"/docs/releases/v1.0-release-notes.html#client-provided-information-vs-nexus-metadata-and-vocabulary","text":"Since it was often unclear which information was user provided and which was generated by the system as new rule has been introduced such that:\nall user provided information predicates are kept unchanged all Nexus metadata is now presented with a leading _, example: \"_deprecated\": true or \"_rev\": 4\". the Nexus metadata vocabulary is now namespaced to https://bluebrain.github.io/nexus/vocabulary/","title":"Client provided information vs Nexus metadata and vocabulary"},{"location":"/docs/releases/v1.0-release-notes.html#technical-notes","text":"","title":"Technical Notes"},{"location":"/docs/releases/v1.0-release-notes.html#iam-service-updates","text":"IAM has been redesigned such that it no longer attempts to proxy calls to the configured OIDC provider. Instead, it introduces a new resource type (_Realm_) that represent runtime configuration for the accepted OIDC providers. Based on the well known configuration document of the realm it finds and extracts some of the important provider addresses (e.g. the authorization and token endpoints), the signature keys and the issuer description. This allows for token identification and validation without the need to contact the provider and there’s no need to mediate the interaction with the provider. We therefore dropped the iam integration services as they were not needed anymore.\nNow it also expects that group information is present in the access token as a claim, either as an array or a comma separated list of group values.\nThe service also introduces another resource (_permissions_) as a singleton resource that manages (or enumerates) the permissions that are allowed to be set as values in the ACL definitions.\nAll IAM resources are now protected from blind writes (also known as lost update problem) by means of the rev query parameter, similar to the other services.","title":"IAM service updates"},{"location":"/docs/releases/v1.0-release-notes.html#introduced-a-new-service-admin","text":"A new service has been introduced, named Admin that manages the scoping (and its configuration) within the Nexus ecosystem. Organizations and Projects (previously named domains) are now managed by this service, allowing other future services to take advantage of the functionality provided without a direct dependency on the KG service. The service dependency tree is now as follows:\n+-----------+         +-----------+         +-----------+\n  |           |         |           |         |           |\n  |    IAM    <---------+   Admin   <---------+    KG     |\n  |           |         |           |         |           |\n  +-----+-----+         +-----------+         +-+---------+\n        ^                                       |\n        |                                       |\n        +---------------------------------------+\nAccess control lists are now restricted to either root (/), organization (/{org}) or project (/{org}/{project}) removing the need to index these definitions along with the data in their respective service boundaries.","title":"Introduced a new service: Admin"},{"location":"/docs/releases/v1.0-release-notes.html#introduced-javascript-sdk-for-nexus","text":"We released a Javascript SDK for Nexus that helps integrating with the Blue Brain Nexus API from Javascript and Typescript code. It aims at giving easy access to all the features offered by the API. It also offers Typescript declarations.\nThis is the library of top of which the Nexus Web interface is built, but it remains framework-agnostic.","title":"Introduced Javascript SDK for Nexus"},{"location":"/docs/releases/v1.0-release-notes.html#introduced-python-sdk-for-nexus","text":"We released a Python SDK for Nexus that helps integrating with the Blue Brain Nexus API from Python. It aims at giving easy access to all the features offered by the API.","title":"Introduced Python SDK for Nexus"},{"location":"/docs/releases/v1.0-release-notes.html#introduced-a-command-line-interface-cli-for-nexus","text":"We released a Nexus CLI that helps interaction with Nexus from the command line. This tool is built on top of the Python SDK for Nexus. It aims at giving easy access to all the features offered by the API and faciliate your data management with Nexus. The use of the CLI is extensively demonstrated in our Nexus Tutorial.","title":"Introduced a Command Line Interface (CLI) for Nexus"},{"location":"/docs/releases/v1.0-release-notes.html#migration-from-v0-y-z-series","text":"The semantics of the API and managed resources in between the v0.y.z and v1.y.z series has changed considerably making an automatic migration almost impossible without understanding the structure of the data stored in Nexus. We recommend building a tailored migration script. Please find us on gitter for help and advice on how to do this effectively depending on your use of Nexus.","title":"Migration from v0.y.z series"},{"location":"/docs/releases/v1.0-release-notes.html#removed-of-dependency-on-kafka","text":"Services have been updated to expose their event logs or subsets via HTTP through Server Sent Events, removing the need to use Kafka as means of service to service communication. It uses the same authentication and authorization mechanism as with the rest of the API, thus ensuring that the information exchanged in guarded by the ACLs defined.\nThe change reduces the additional operational burden of maintaining a Kafka cluster and also opens up the system for extension as the event logs can be consumed by third party applications in an efficient manner without the need of direct access to the message broker.","title":"Removed of dependency on Kafka"},{"location":"/docs/releases/v1.0-release-notes.html#in-memory-indices","text":"Versions v0.y.z of iam and later on admin services depended on ElasticSearch and BlazeGraph to maintain indices of the resources managed. Since these resources easily fit in memory on a single node, the dependency on these external systems has been removed in favour of in memory indices to provide a consistent view on the data and increase the general availability. In between nodes, when services are deployed as a cluster, the indices are replicated by using CRDTs which are natively supported by Akka Distributed Data.","title":"In memory indices"},{"location":"/docs/roadmap.html","text":"","title":"Roadmap"},{"location":"/docs/roadmap.html#roadmap","text":"Note The roadmap is subject to change at any time and is given for information only.","title":"Roadmap"},{"location":"/docs/roadmap.html#release-1-5-scheduled-for-q4-2020-","text":"Check our Github milestone for more details or start contributing today!","title":"Release 1.5 (scheduled for Q4, 2020)"},{"location":"/docs/roadmap.html#nexus-fusion","text":"Fusion is the web interface that helps scientists with their day-to-day data-driven activities. This release will bring the following features:\ndefinition of data workflows re-use of predefined workflow templates improved data visualizations jupyter notebooks integration","title":"Nexus Fusion"},{"location":"/docs/roadmap.html#nexus-forge","text":"Coming soon!","title":"Nexus Forge"},{"location":"/docs/roadmap.html#nexus-delta","text":"Delta is the backbone web services powering the knowledge graph, Fusion, and Forge. This release will bring the following features:\nperformance improvements scalability improvements SQL primary store, in addition to Cassandra extensible behavior through plugins","title":"Nexus Delta"},{"location":"/docs/fusion/index.html","text":"","title":"Nexus Fusion"},{"location":"/docs/fusion/index.html#nexus-fusion","text":"Nexus Fusion is the web interface of Blue Brain Nexus, powered by Nexus Delta. It offers prebuilt data visualization, querying, data manipulation, and administration capabilities to help integrate, edit and visualize data and resources inside Nexus Delta projects.","title":"Nexus Fusion"},{"location":"/docs/fusion/index.html#extensibility","text":"Nexus Fusion aims to be an extensible web application that can serve generic needs of data visualization, governance and administration, while simultaneously serving domain specific needs of users. In order to facilitate this, we are adapting a plugin model where developers can adapt Nexus Fusion for their user’s situation. This began in previous releases by introducing Plugins, and we will continue developing this direction with SubApps.\nNexus Fusion aims to be a frame, upon which many extension are hung.","title":"Extensibility"},{"location":"/docs/fusion/index.html#notes","text":"Nexus Fusion was previously named Nexus Web before version 1.4. We hope this new name will help reflect the mission of the application: combining features for users across the data-driven science stack into one tool.","title":"Notes"},{"location":"/docs/fusion/architecture.html","text":"","title":"Architecture"},{"location":"/docs/fusion/architecture.html#architecture","text":"","title":"Architecture"},{"location":"/docs/fusion/architecture.html#technology-overview","text":"Nexus Fusion is a server-side rendered single-page webapp powered by React.js. It is written in Typescript, and therefore must be transpiled into native browser JavaScript, during a build step, before being served.\nThe build step produces a server artifact to be ran on a Node.js server, and client-side assets and Javascript.\nWe produce a docker image that is able to serve the compiled assets directly, which is available on Dockerhub.\nAlthough the application is served by a Node.js server, the client communicates directly to Nexus Delta using Nexus.js.","title":"Technology Overview"},{"location":"/docs/fusion/architecture.html#subapps","text":"Nexus Fusion is divided into sections called SubApps. SubApps are separate workspaces that attempt to contain the concerns of disparate users and activities, and provide different access rights for each.\nAt the moment, we are packaging two SubApps called Admin and Studios. These exist as part of the source code of Nexus Fusion, and live in the src/subapps folder.\nYou can learn how to develop your own SubApps to extend Fusion here.\nExpect the SubApp feature and its functionality will expand and change in the next releases of Nexus Fusion.","title":"SubApps"},{"location":"/docs/fusion/architecture.html#plugins","text":"Plugins are ways to render resources. You can find more about them here. It is important to note that the plugin repository is hosted separately from Nexus Fusion. Nexus Fusion will request a Plugin Manifest from this repository at run time, and fetch plugins to render during run time based on a config. Both the plugins, the configuration, and the manifest should be hosted somewhere Nexus Fusion can request it.","title":"Plugins"},{"location":"/docs/fusion/plugins.html","text":"","title":"Plugins"},{"location":"/docs/fusion/plugins.html#plugins","text":"A resource returned by the Nexus Delta API is usually a JSON-LD document. By default Nexus Fusion displays JSON-LD in a code editor. If the user has edit access to the document, they can update the resource in the editor.\nResources can represent a wide variety of scientific artifacts. It can be a neuron morphology, neuron electro physiology, a set of files to download, a set of images and so on. So a user may want to extend Nexus Fusion to allow them to visualize or otherwise extend the presentation layer with logic specific to their resource type. Plugins are a way to accomplish this.","title":"Plugins"},{"location":"/docs/fusion/plugins.html#what-are-plugins","text":"A core component of Studio is the ability for data curators to develop a domain-specific presentation layer for their resources in Nexus Fusion. This allows data consumers to visualize their datasets using graphs, charts, or 3D visualizations, and to present the relevant metadata to the user.\nPlugins are developed using Javascript and are loaded into the Nexus Fusion instance from the /plugins folder.","title":"What are Plugins"},{"location":"/docs/fusion/plugins.html#plugin-examples","text":"Below you can find the screenshots from some plugins that can be integrated into Nexus Fusion. They extend the Nexus Fusion presentation layer.\nNeuron Electro physiology viewer\nMINDS Metedata viewer\nData download plugin","title":"Plugin examples"},{"location":"/docs/fusion/plugins.html#development","text":"Your plugin must export a default function with the following signature:\nexport default ({ ref: HTMLElement, nexusClient: NexusClient, resource: Resource<T> }) => {\n  return () => {\n    // optional callback when your plugin is unmounted from the page\n  };\n};\nNexus Plugins uses SystemJS.\nYou have to transpile and bundle your code using SystemJS as output:\nwith rollup: use system as output format with webpack: use system as outputTarget","title":"Development"},{"location":"/docs/fusion/plugins.html#configuring-nexus-fusion-to-run-your-plugins","text":"Once you have your Javascript bundled into a single file, you can place it in the ./plugins folder at the root of your Nexus Fusion instance.\nPlugins should follow this folder naming convention:\n.\n│   README.md\n│\n└───plugins\n│   └───my-nexus-plugin\n│       │   index.js\n│   └───yet-another-nexus-plugin\n│       │   index.js\n│   ...","title":"Configuring Nexus Fusion to run your plugins"},{"location":"/docs/fusion/plugins.html#plugin-manifest","text":"The plugin manifest should be available at the same remote endpoint as the plugins. This is so Nexus Fusion can find the plugins and apply them dynamically.\nThe plugin manifest is a JSON object with keys that correspond to the plugin name with a value that corresponds to a descriptive payload of where to find the manifest, as well as some information about it’s development. It’s similar to a package.json file.\n{\n    \"circuit\": {\n      \"modulePath\": \"circuit.f7755e13c8b410efdf02.js\",\n      \"name\": \"Circuit\",\n      \"description\": \"\",\n      \"version\": \"\",\n      \"tags\": [],\n      \"author\": \"\",\n      \"license\": \"\",\n      \"mapping\": {}\n    }\n}\nPlugin Config\nThe plugin config should be available as an object under the mapping key of the plugin manifest. This tells Nexus Fusion when a plugin should be displayed, by matching a resource to a shape.","title":"Plugin Manifest"},{"location":"/docs/fusion/plugins.html#matching-all-resources","text":"The following will show nexus-plugin-test for every resource in Nexus Fusion.\n{\n    \"nexus-plugin-test\": {\n      \"modulePath\": \"nexus-plugin-test.js\",\n      \"name\": \"Nexus Plugin Test\",\n      \"description\": \"\",\n      \"version\": \"\",\n      \"tags\": [],\n      \"author\": \"\",\n      \"license\": \"\",\n      \"mapping\": {}\n    }\n}","title":"Matching all resources"},{"location":"/docs/fusion/plugins.html#matching-a-resource-with-a-specific-type-and-shape","text":"The following will show nexus-plugin-test for any resource of type File but only if they have a distribution.encodingFormat property that’s application/swc\n{\n    \"nexus-plugin-test\": {\n      \"modulePath\": \"nexus-plugin-test.js\",\n      \"name\": \"Nexus Plugin Test\",\n      \"description\": \"\",\n      \"version\": \"\",\n      \"tags\": [],\n      \"author\": \"\",\n      \"license\": \"\",\n      \"mapping\": {\n        \"@type\": \"File\",\n        \"distribution:\" {\n            \"encodingFormat\": \"application/swc\"\n        }\n    }\n}","title":"Matching a resource with a specific type and shape"},{"location":"/docs/fusion/plugins.html#default-plugins","text":"Default plugins are part of Fusion. They define the default presentation of resources.","title":"Default Plugins"},{"location":"/docs/fusion/plugins.html#admin-plugin","text":"Admin Plugin displays JSON-LD in a code editor. If the user has edit access to the document, they can update the resource in the editor. It also has few additional tabs. History, Links and Graph. History tab displays the edit history of the resource. A user can explore the graph view of the resource in Graph tab. They can also view the incoming and out going links of the resource in Links tab.","title":"Admin Plugin"},{"location":"/docs/fusion/studio.html","text":"","title":"Studios"},{"location":"/docs/fusion/studio.html#studios","text":"Studios space allows data curators to display their data using customisable, persistent queries. Using custom plugins developed with JavaScript, data curators can format the presentation of the query results any way they like.\nNote To configure the Studios space index for your Nexus instance, see at the bottom of the page.","title":"Studios"},{"location":"/docs/fusion/studio.html#what-is-a-studio","text":"A Studio is a collection of persistent queries organized in a table layout for users to quickly access relevant data in a customizable way. Studio authors can create a studio to match a specific topic, and create organization schemes called Workspaces and Dashboards to access various aspects of that data.\nNote Want to configure a studio straightaway?\nFor example, a Studio might cover all datasets from the Neocortex, with a Workspace called Physiology and a Dashboard called Morphology Pipeline.\nIn essence, a Studio is a UI layer that performs queries according to a configuration that lives in a Nexus instance as a Resource. It has a label for a meaningful title and a description field to convey to the users what sort of data they can expect to find there. Most importantly, a Studio configuration has a Workspace collection.\n{\n  \"@context\": \"https://bluebrainnexus.io/studio/context\",\n  \"@type\": \"https://bluebrainnexus.io/studio/vocabulary/Studio\",\n  \"description\": \"\",\n  \"label\": \"test\",\n  \"workspaces\": [\n    \"https://nexussandbox.io/org/project/3bdf8b08-7b9a-443b-b04d-be2a048893ba\"\n  ]\n}\nNote A Studio will be given a URI for navigation or sharing.","title":"What is a Studio"},{"location":"/docs/fusion/studio.html#about-the-studio-context","text":"In order for the Studio to work as intended with the UI, a context must be in the project. Its purpose is to direct the Knowledge Graph to understand how studio-specific properties behave, such as that Workspaces should be set (an unordered collection without duplicates).\nIf you create a Studio using the UI in Nexus Fusion, this resource will be created for you, if it doesn’t exist already. If you plan on bootstrapping your own projects programmatically, such as through the API, then you might need to take care to include it.\nEvery Studio resource that is created should reference this context resource as the @context property. For an example, see the Studio resource mentioned above. The default Studio context @id for all our examples will be https://bluebrainnexus.io/studio/context, and it is what Nexus Fusion will use.\nHere’s what the context should look like:\n\"{\n  \"@context\": [\n    {\n      \"@base\": \"https://bluebrainnexus.io/studio/\",\n      \"@vocab\": \"https://bluebrainnexus.io/studio/vocabulary/\",\n      \"label\": {\n        \"@id\": \"http://www.w3.org/2000/01/rdf-schema#label\"\n      },\n      \"name\": {\n        \"@id\": \"http://schema.org/name\"\n      },\n      \"description\": {\n        \"@id\": \"http://schema.org/description\"\n      },\n      \"workspaces\": {\n        \"@id\": \"https://bluebrainnexus.io/studio/vocabulary/workspaces\",\n        \"@container\": \"@set\",\n        \"@type\": \"@id\"\n      },\n      \"plugins\": {\n        \"@id\": \"https://bluebrainnexus.io/studio/vocabulary/plugins\",\n        \"@container\": \"@set\"\n      },\n      \"dashboards\": {\n        \"@container\": \"@set\"\n      },\n      \"dashboard\": {\n        \"@id\": \"https://bluebrainnexus.io/studio/vocabulary/dashboard\",\n        \"@type\": \"@id\"\n      },\n      \"view\": {\n        \"@id\": \"https://bluebrainnexus.io/studio/vocabulary/view\",\n        \"@type\": \"@id\"\n      }\n    }\n  ],\n  \"@id\": \"https://bluebrainnexus.io/studio/context\"\n}\"","title":"About the Studio Context"},{"location":"/docs/fusion/studio.html#workspaces","text":"A workspace is a collection of Dashboards paired with a View. You can have any number of Dashboard-View pairings organized into a Workspace. You can label a Workspace and add a description to help users understand what kind of content they can expect to find there.\n{\n  \"@context\": \"https://bluebrainnexus.io/studio/context\",\n  \"@type\": \"StudioWorkspace\",\n  \"dashboards\": [\n    {\n      \"dashboard\": \"https://bbp.epfl.ch/neurosciencegraph/data/8751df37-a75f-4858-b174-742264deb4e9\",\n      \"view\": \"nxv:defaultSparqlIndex\"\n    },\n    {\n      \"dashboard\": \"https://bbp.epfl.ch/neurosciencegraph/data/99982da8-ec3a-4f18-9388-a0cc81bfff0c\",\n      \"view\": \"nxv:defaultSparqlIndex\"\n    }\n  ],\n  \"description\": \"\",\n  \"label\": \"MorphoTester\"\n}","title":"Workspaces"},{"location":"/docs/fusion/studio.html#dashboards","text":"A Dashboard is simply a query with a description and a label. This will be used by the Workspace to query against the view paired with it inside the Workspace configuration. This way, you can write one query, and re-use it against multiple potential views.\nAn example Dashboard resource looks like this:\n{\n  \"@context\": \"https://bluebrainnexus.io/studio/context\",\n  \"@type\": \"StudioDashboard\",\n  \"dataQuery\": \"prefix nxv: <https://bluebrain.github.io/nexus/vocabulary/>\\nprefix s: <http://schema.org/>\\nSELECT DISTINCT ?self ?familyName ?givenName\\nWHERE {\\n?s nxv:constrainedBy <https://neuroshapes.org/dash/person> ;\\n  nxv:self ?self ;\\n  s:familyName ?familyName ; \\n  s:givenName ?givenName\\n}\\nLIMIT 20\",\n  \"description\": \"A list of every scientist\",\n  \"label\": \"Scientists\",\n  \"plugins\": [\"nexus-plugin-example\"]\n}\nThe Dashboard, once configured, will present the results of your SPARQL query in a table. Each item in the row will be clickable and lead to a details page showing the Resource, in this case, a list of scientists that have contributed data to the project.","title":"Dashboards"},{"location":"/docs/fusion/studio.html#how-to-configure-a-studio","text":"","title":"How to Configure a Studio"},{"location":"/docs/fusion/studio.html#studio-creation","text":"To create a new Studio, go to the Admin space, and select an organization and a project. In the Project View, you will see the Manage Studios for this project button. It will bring you to the list of Studios.\nClick the Create Studio button.\nFill in a form providing the following:\nLabel: the name of your new Studio (required field) Description for your Studio\nClick Save and you will be navigated to the Studio View.\nThat’s it! Your new Studio is empty for now, but don’t worry! We will add Workspaces and Dashboards later.\nYou can also find your Studios in the Resource List (for example, filter by type Studio, or Search by id) and view it in the Resource View.","title":"Studio Creation"},{"location":"/docs/fusion/studio.html#updating-a-studio","text":"Once created, the label and the description of a Studio can be changed. Just click Edit Studio button and update the Label and the Description fields.","title":"Updating a Studio"},{"location":"/docs/fusion/studio.html#removing-a-studio","text":"To remove an unwanted Studio, deprecate it in the Resource View of your project in the Admin space.","title":"Removing a Studio"},{"location":"/docs/fusion/studio.html#workspace-creation","text":"Inside any Studio, click the Add Workspace button.\nFill in a form providing the following:\nLabel: the name of your new Workspace (required field) Description for your Workspace\nClick Save and you will be navigated to the new workspace section of your Studio View, which is given a navigable URI.\nYour Workspace is created, but it will need to have at least one Dashboard/View association for anything to show there.\nYou can also find your Workspaces as raw JSON configurations in the Resource list (for example, filter by type StudioWorkspace, or search by id) and view it in the Resource View.","title":"Workspace Creation"},{"location":"/docs/fusion/studio.html#updating-a-workspace","text":"Inside any Studio, under a Workspace tab label, click on the Edit link. Then you’ll be provided with a dialog where you can review and edit the Workspace configuration.\nSelect View: The view of which to pair with each Dashboard inside the follow transfer list. The Dashboard queries will be run against the View listed inside this box. For now, using this Edit form, you can only pair one View for all Dashboards. If you were to create the configurations manually, you can pair each Dashboard with a different View. Add or Remove Dashboards: Add or remove a Dashboard to the collection in your Workspace configuration. The Dashboards listed are all the available non-deprecated ones in the project. Name: the name of your new Workspace (required field). Description for your Workspace.\nAfter your forms have been edited, simple click Save to submit your changes.","title":"Updating a Workspace"},{"location":"/docs/fusion/studio.html#removing-a-workspace","text":"You can remove a Workspace by deprecating it from the Resource View.","title":"Removing a Workspace"},{"location":"/docs/fusion/studio.html#dashboard-creation","text":"Inside any Studio View, under a selected Workspace, click the Add Dashboard button.\nFill in a form providing the following:\nLabel: the name of your new Dashboard (required field) Description: an optional description for your Dashboard Sparql Query: a valid SPARQL query that conforms to the dataQuery field in the configuration.\nYou can click on the View query in Sparql Editor to open the Sparql Editor in a new tab to work on your query while querying it against a Sparql View in your project, so you can make sure it works and provides the fields you want. Then, you can copy and past that back in the form. To understand more about the SPARQL queries requirements, check below.\nClick Save and the Dashboard and its query results should show up!\nYou can now also add this Dashboard to other Workspaces across the project.","title":"Dashboard Creation"},{"location":"/docs/fusion/studio.html#updating-a-dashboard","text":"You’ll find the edit Dashboard under the dashboard label. After your form has been edited, simple click Save to submit your changes.","title":"Updating a Dashboard"},{"location":"/docs/fusion/studio.html#removing-a-dashboard","text":"You can remove a Dashboard by deprecating it from the Resource View.","title":"Removing a Dashboard"},{"location":"/docs/fusion/studio.html#sparql-query-requirements","text":"","title":"Sparql Query Requirements"},{"location":"/docs/fusion/studio.html#the-self-variable","text":"In order for the UI to function as intended, you must provide a unique ID variable inside your SPARQL statement, labeled as ?self. This will be used to generate the table and fetch resources when navigating to the details page of a row item. Ideally, this ?self variable should correspond with the _self of a target Resource of which to center your query against as a subject. The ?self variable will never be shown in the table, so you need some other variable in addition to view the results properly, or you’ll end up with a table without any rows.","title":"The ?self variable"},{"location":"/docs/fusion/studio.html#making-queries-visible","text":"In addition to the ?self variable, you need to have at minimum one other variable defined, which will be displayed on each row. The variable name will label the header of the table column, capitalized.","title":"Making queries visible"},{"location":"/docs/fusion/studio.html#the-minimum-functioning-query-with-the-self-variable-defined","text":"# This is the minimum functioning query for Studio\nprefix nxv: <https://bluebrain.github.io/nexus/vocabulary/>\nSELECT DISTINCT ?subject ?self\nWHERE {\n   ?subject nxv:self ?self ;\n}\nLIMIT 20","title":"The minimum functioning query with the ?self variable defined"},{"location":"/docs/fusion/studio.html#example-sparql-queries","text":"Here’s an example of fetching unique Persons using https://schema.org properties.\nprefix nxv: <https://bluebrain.github.io/nexus/vocabulary/>\nprefix s: <http://schema.org/>\nSELECT DISTINCT ?self ?familyName ?givenName\nWHERE {\n  ?s nxv:constrainedBy <https://neuroshapes.org/dash/person> ;\n  nxv:self ?self ;\n  s:familyName ?familyName ;\n  s:givenName ?givenName\n}\nLIMIT 20","title":"Example SPARQL Queries"},{"location":"/docs/fusion/studio.html#configuring-the-studios-index-page","text":"The Studios space lists all the Studios you have permissions to view or edit.\nTo enable this feature, the following should be done:\nIf you don’t have a project to store the application data, create one. Create an Aggregated Elastic Search View inside this project, and add all of the projects that contain Studio resources to the list. For example:\n{\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/view.json\",\n  \"@id\": \"nxv:studioList\",\n  \"@type\": [\"View\", \"AggregateElasticSearchView\"],\n  \"views\": [\n    {\n      \"project\": \"c7d70552-4305-111a-trtr-75d757ed9a49\",\n      \"viewId\": \"nxv:defaultElasticSearchIndex\"\n    },\n    {\n      \"project\": \"86b0ee1e-a6a5-111b-rtrt-938b3c38dfc0\",\n      \"viewId\": \"nxv:defaultElasticSearchIndex\"\n    },\n    {\n      \"project\": \"a7d693345-8d1d-rtrt-111a-90b6b6ab94ee\",\n      \"viewId\": \"nxv:defaultElasticSearchIndex\"\n    }\n  ]\n}\nNote Ask a developer to add an ENV variable with the location of the ‘AggregateElasticSearchView’ as following: STUDIO_VIEW=[yourOrgLabel]/[yourProjectLabel]/[viewId] In our example it would be: STUDIO_VIEW=webapps/nexus-fusion/nxv:studioList Every time when you create a new Studio, the AggregateElasticSearchView needs to be updated.","title":"Configuring the Studios index page"},{"location":"/docs/fusion/admin.html","text":"","title":"Admin"},{"location":"/docs/fusion/admin.html#admin","text":"The Nexus Fusion admin app allows you to manage your Nexus Delta instance. In particular, you can:\nlist, create, edit and deprecate organizations, list, create, edit and deprecate projects within an organization, check permissions on your projects and organizations, create, view, edit, and deprecate resources within your projects, query your Knowledge Graph with SPARQL and Elasticsearch views, create new Studios (or edit or deprecate them, as Studios are resources), check the indexing status of your projects.\nNote: Some organizations in Nexus Delta are created to support Nexus Fusion internals, such as the webapps organization. Be careful when deleting those.","title":"Admin"},{"location":"/docs/fusion/admin.html#organizations-and-projects-indexes","text":"When creating a project, you can use “Advanced Settings” to set Base, Vocab and API mapping for the project.\nBase is an IRI used as a curie for generating ‘@id’ of this child resources of the project.\nVocab is an IRI used as a curie prefix for all unqualified predicates in child resources of the project. JSON object - provides a convenient way to deal with URIs when performing operations on a sub-resource. This field is optional.\nMore info can be found here regarding API Mappings.","title":"Organizations and Projects Indexes"},{"location":"/docs/fusion/admin.html#creating-a-new-organization","text":"","title":"Creating a New Organization"},{"location":"/docs/fusion/admin.html#creating-a-new-project","text":"","title":"Creating a New Project"},{"location":"/docs/fusion/admin.html#project-view","text":"The project view in your admin app is the center stage to manage a project.\nOn the left hand side, you will find the Default Query. You can filter and search resources, order them, as well as share that query with your peers. You can create as many queries as you like by clicking + Add another resource list. On the right hand side, you find the Project Tools. You’ll find the SPARQL and Elasticsearch query editors, and check the project permissions. You can also create a new resource and upload files. “Manage studios for this project”, will take you to the studio sub application. There you can create/edit/update studios for this project.\nIn the header, the breadcrumbs menu shows the organization and project your are in. You can also check the indexing status of your project.","title":"Project View"},{"location":"/docs/fusion/admin.html#creating-a-new-resource","text":"Navigate to the project where you want to create a resource. Click on the “Create Resource” button in the right sidebar. Build the JSON payload with the help of the interactive editor, then hit “Save”.","title":"Creating a New Resource"},{"location":"/docs/fusion/admin.html#resource-view","text":"In resource view, you can see various visual representations of a Nexus Resource. Based on the resource type, you will see a set of plugins, each displayed on its own expandable section. By default, there will only be an admin plugin. You can read more about admin plugin here.","title":"Resource View"},{"location":"/docs/fusion/add-your-own-app.html","text":"","title":"Add your own App"},{"location":"/docs/fusion/add-your-own-app.html#add-your-own-app","text":"","title":"Add your own App"},{"location":"/docs/fusion/add-your-own-app.html#subapps","text":"You can add your own SubApp by cloning the Nexus Fusion repo and adding your React app to the src.\nYou must build your application from source, in order to use your SubApp. As of version 1.4, there is no way to add a SubApp using the provided Dockerhub distribution.","title":"SubApps"},{"location":"/docs/fusion/add-your-own-app.html#development","text":"SubApps are essentially a configuration hosting a routing list of React components. These React components will have access to the entire app Redux store, the Nexus Client, as well as ConnectedRouter Providers for use in React hooks and consumers.\nYour SubApp should be a function that returns an object equating to this type signature:\n{\n  title: string; // Name of the app, used in titles and the Nav Bar\n  namespace: string; // subpath, used in the URL\n  routes: RouteProps[]; // a list of routes that will come after the subpath\n  icon?: string; // an optional Icon used in the Nav Bar\n};\nHere’s an example that might add a Calendar with events\nconst title = 'Calendar';\nconst namespace = 'studios';\nconst icon = require('../../shared/images/calendar.svg');\n\nroutes: [\n      {\n        path: '/',\n        exact: true,\n        component: CalendarView,\n      },\n      {\n        path: '/:event/:date',\n        exact: true,\n        component: EventView,\n      },\nThen you can add your SubApp to the src/subapps/index.ts barrell file, which hosts the SubApp set consumed by Nexus Fusion.\nconst SubApps: Map<string, SubApp> = new Map();\n\nSubApps.set(\"Admin\", Admin);\nSubApps.set(\"StudioLegacy\", StudioLegacy);\nSubApps.set(\"Calendar\", MyCalendarSubapp);\n\nexport default SubApps;","title":"Development"},{"location":"/docs/forge.html","text":"","title":"Nexus Forge"},{"location":"/docs/forge.html#nexus-forge","text":"Blue Brain Nexus Forge is a domain-agnostic, generic and extensible Python framework enabling non-expert users to create and manage knowledge graphs by making it easy to:\nDiscover and reuse available knowledge resources such as ontologies and schemas to shape, constraint, link and add semantics to datasets. Build knowledge graphs from datasets generated from heterogenous sources and formats. Defining, executing and sharing data mappers to transform data from a source format to a target one conformant to schemas and ontologies. Interface with various stores offering knowledge graph storage, management and scaling capabilities, for example Nexus Core store or in-memory store. Validate and register data and metadata. Search and download data and metadata from a knowledge graph.\nFor more information about the Forge, please refer to https://nexus-forge.readthedocs.io/en/latest/.","title":"Nexus Forge"},{"location":"/docs/delta/index.html","text":"","title":"Nexus Delta"},{"location":"/docs/delta/index.html#nexus-delta","text":"Blue Brain Nexus Delta is a low latency, scalable and secure system that realizes a range of functions to support data management and knowledge graph lifecycles.\nIt is a central piece of the Nexus ecosystem of software components as it offers a set of foundational capabilities to the other components (Nexus Fusion and Nexus Forge) around data and metadata storage, management, validation and consumption in a secure setting.\nNexus Delta is developed in the open with a permissive licence (Apache License, version 2.0) using open standards and interoperable semantic web technologies like OpenID Connect, OAuth 2.0, RDF, JSON-LD, SHACL, Server-Sent Events.\nIt is quite versatile as it is able to handle very small to very large amounts of data on-premise or in the cloud and can be used in a large spectrum of industries being completely domain agnostic.\nPlease refer to the architecture and api reference sections for more information about this component.","title":"Nexus Delta"},{"location":"/docs/delta/architecture.html","text":"","title":"Architecture"},{"location":"/docs/delta/architecture.html#architecture","text":"Blue Brain Nexus is a collection of software components that address various organizational needs relating to data storage, management, analysis and consumption. It was designed to support the data-driven science iterative cycle at Blue Brain but its genericity allows for its use in arbitrary contexts.\nThis document focuses on the characteristics of the Nexus Delta and its design choices.","title":"Architecture"},{"location":"/docs/delta/architecture.html#ecosystem","text":"Nexus Delta is a low latency, scalable and secure service that realizes a range of functions to support data management and knowledge graph lifecycles. It uses Apache Cassandra as a primary store (source of truth for all the information in the system), ElasticSearch for full text search and BlazeGraph for graph based data access.\nAn overview of the Blue Brain Nexus ecosystem is presented in the figure below:\nNexus Fusion is a web interface that helps scientists with their day-to-day data-driven activities but also facilitates the system administrative tasks. It uses the Nexus.js (a javascript SDK) that provides as set of primitives for building web applications for Nexus Delta.\nNexus CLI is a command line interface for scripting and automating the system administrative tasks. It also provides the ability to execute off-process data projections to stores that are not directly supported by Nexus Delta.\nNexus Forge is a domain-agnostic, generic and extensible Python framework that enables non-expert users to create and manage knowledge graphs using the Python programming language.","title":"Ecosystem"},{"location":"/docs/delta/architecture.html#clustering","text":"One of the more important design goals for the system was to be able scale in order to support arbitrary increases in usage and data volume. Nexus Delta can be configured to run as single node or in a cluster configuration where the load on the system is distributed to all members.\nAkka Cluster was chosen for a decentralized, fault-tolerant, peer-to-peer based cluster membership. It uses the Gossip Protocol to randomly spread the cluster state. Nodes in the cluster communicate over TCP using Akka Remoting for coordination and distribution of load.\nApache Cassandra and ElasticSearch were chosen for their horizontal scaling characteristics and for favouring availability over globally strong consistency.\nBlazeGraph was initially chosen to handle graph access patterns, but it is currently the only part of the system that cannot be scaled horizontally. We’re currently looking for open source alternatives that offer clustering out of the box or solutions that would coordinate multiple BlazeGraph nodes.","title":"Clustering"},{"location":"/docs/delta/architecture.html#anatomy","text":"Nexus Delta was built following the Command Query Responsibility Segregation (CQRS) pattern where there’s a clear separation between the read and write models. Intent to change the application state is represented by commands that are validated for access and consistency before being evaluated. Successful evaluations of commands emit events that are persisted to the global event log.\nAsynchronous processes (projections) replay the event log and process the information for efficient consumption. The information in the recorded events is transformed into documents (in the case of ElasticSearch) and named graphs (in the case of BlazeGraph) and persisted in the respective stores. The projections persist their progress such that they can be resumed in case of a crash.\nSources of events for projections are both the primary store and other (remote) Nexus Delta deployments through the Server Sent Events W3C recommendation. This allows for data aggregation when building indices.\nNative interfaces are offered as part of the read (query) model for querying ElasticSearch and BlazeGraph.\nAsynchronous indexing (projections) and the separation between reads and writes have some interesting consequences:\nthe system is eventually consistent and does not require a healing mechanism for handling synchronization errors the primary store acts as a bulkhead in case of arbitrary data ingestion spikes the primary store and the stores used for indices can be independently sized; indexing speed is allowed to vary based on the performance of each store the system continues to function with partial degradation instead of becoming unavailable if a store suffers downtime\nApache Cassandra is used as an eventsourced primary store and represents the source of truth for all the information in the system. Updates are not performed in place, state changes are appended to the event log. The state of the system is derived from the sequence of events in the log.\nThe global event log is partitioned such that there’s no need to replay the entire log. Subsets can be replayed, like for example when reconstructing the current state of a single resource.","title":"Anatomy"},{"location":"/docs/delta/architecture.html#resource-orientation","text":"Nexus Delta is built following the REpresentational State Transfer (REST) architectural style where its functions are consumed via access and manipulation of resources. All information in the system (system configuration or user data) is represented as resources. The API Reference describes all supported resource types, the addressing scheme and available operations.\nThe subset of events that correspond to single resource represent the resource lifecycle as depicted in the figure below. A resource lifecycle is a series of state transitions, each generating a unique revision.\nUser data is represented as sub-resources to projects which in turn are sub-resources of organizations. Organization and project resources provide logical grouping and isolation allowing for variation in configuration and access control policies.\nResource identification is based on HTTP Internationalized Resource Identifiers (IRIs) and uniqueness is guaranteed within the scope of a project. This allows the system to be used in a multi-tenant configuration but at the same time it implies that project and organization identifiers are part of a resource addressing scheme.\nIn order to avoid limitations in URL lengths and for convenience, resource identifiers can be aliased and compacted (CURIE) using project level configurations.","title":"Resource Orientation"},{"location":"/docs/delta/architecture.html#authentication-and-authorization","text":"The system supports OpenID Connect, OAuth 2.0 and JSON Web Tokens (JWTs) standards and can be configured to use identity providers that support these standards. Proof of identity can be provided by passing a Bearer JWT in the Authorization header of the HTTP requests when consuming the RESTful API.\nNexus Delta can use LDAP as an identity management system through several off-the-shelf products that implement these protocols on top of LDAP, like for example Keycloak.\nThe authorization flow is as follows:\nthe provided JWT is validated against the configured identity providers the subject and group claims are used to generate the set of identities of the caller (when no Bearer JWT is provided, the assumed identity is Anonymous) access to perform the intent is verified by comparing the collection of caller identities with the configured list of ACLs for the target resource(s)","title":"Authentication and Authorization"},{"location":"/docs/delta/api/current/index.html","text":"","title":"API Reference"},{"location":"/docs/delta/api/current/index.html#api-reference","text":"Nexus Delta expose a RESTful interface over HTTP(S) for synchronous communication. The generally adopted transport format is JSON based, specifically JSON-LD.\nThe API provides access and management of several primary resource types.","title":"API Reference"},{"location":"/docs/delta/api/current/index.html#realms","text":"A realm provides with the necessary information to perform authentication against a certain OIDC provider .\nOperations on realms","title":"Realms"},{"location":"/docs/delta/api/current/index.html#permissions","text":"A permission is the basic unit to provide a way to limit applications’ access to sensitive information.\nOperations on permisions","title":"Permissions"},{"location":"/docs/delta/api/current/index.html#acls","text":"In order to restrict applications’ access to data by placing restrictions on them, three parameters are important:\npermission: the value used to limit a client (user, group) access to resources. identity: a client identity reference, e.g. a certain user, a group, an anonymous user or someone who is authenticated to a certain realm. path: the location where to apply the restrictions\nAn ACL defines the set of permissions that certain identities have on a concrete path.\nOperations on ACLs","title":"ACLs"},{"location":"/docs/delta/api/current/index.html#identities","text":"Identities endpoint can be used to fetch user identities.\nOperations on identities","title":"Identities"},{"location":"/docs/delta/api/current/index.html#organizations","text":"The top-level grouping resource in the platform, called organization\nOperations on organizations","title":"Organizations"},{"location":"/docs/delta/api/current/index.html#projects","text":"The 2nd level grouping resources in the platform, called project. Projects provide isolation of ACLs, resource resolution and indices (ElasticSearch index and Blazegraph namespace).\nOperations on projects","title":"Projects"},{"location":"/docs/delta/api/current/index.html#schemas","text":"A schema is a resource which defines a set of rules and constrains using SHACL.\nOperations on schemas","title":"Schemas"},{"location":"/docs/delta/api/current/index.html#resolvers","text":"A resolver is a resource which defines the way ids are retrieved inside a project.\nOperations on resolvers","title":"Resolvers"},{"location":"/docs/delta/api/current/index.html#views","text":"A view is a resource which defines the way indexing is applied to certain resources inside a project.\nOperations on views","title":"Views"},{"location":"/docs/delta/api/current/index.html#storages","text":"A storage is a resource which represents a backend where files are stored. It describes where and how files are created and retrieve.\nOperations on storages","title":"Storages"},{"location":"/docs/delta/api/current/index.html#files","text":"A file is a binary attachment resource.\nOperations on files","title":"Files"},{"location":"/docs/delta/api/current/index.html#archives","text":"An archive is a collection of resources stored inside an archive file. The archiving format chosen for this purpose is tar (or tarball).\nOperations on archives","title":"Archives"},{"location":"/docs/delta/api/current/index.html#resources","text":"A resource is the most generic entity on the Knowledge Graph. Resources can be schemas, resolvers, views, storages, files or data.\nOperations on resources","title":"Resources"},{"location":"/docs/delta/api/current/index.html#resource-lifecycle","text":"Nexus Delta is build using the event sourcing approach. This strategy captures all changes to an application state as a sequence of events.\nAll resources in the system generally follow the very same lifecycle, as depicted in the diagram below. Every interaction with an API resource (creation, updates, state changes) is recorded into the system as revisions.\nData is never removed from the system, but rather is marked as deprecated. Depending on the type of resource, the deprecation flag may have various semantics:\nOrganizations: the resource itself and sub-resources cannot be updated. Views and resolvers contained within this organization will not be considered during indexing and resolution processes. Projects: the resource itself and sub-resources cannot be updated. Views and resolvers contained within this project will not be considered during indexing and resolution processes. Schemas: the resource itself cannot be updated and new data conformant to it cannot be created Resolvers: the resource itself will not be considered during the resolution process Views: the resource itself will not be considered during the indexing process Storages: no new files can be created against the deprecated storage Files: attachments cannot be added/deleted Data: the resource itself cannot be updated\nArchives resources are an exception. Those resources are ephemeral. They will be automatically removed from the system after certain time. This time is configurable (config property app.archives.cache-invalidate-after) and it defaults to 5 hours.\nFuture policies may use this flag to determine if or when the deprecated data may be archived.","title":"Resource Lifecycle"},{"location":"/docs/delta/api/current/operating-on-resources.html","text":"","title":"Operating on resources"},{"location":"/docs/delta/api/current/operating-on-resources.html#operating-on-resources","text":"Access to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAll resources in the system share a base set of operations. Assuming a nexus deployment at http(s)://nexus.example.com resource address of /v1/{address} the following operations should apply to most (all) resources:","title":"Operating on resources"},{"location":"/docs/delta/api/current/operating-on-resources.html#fetch-the-current-revision-of-the-resource","text":"GET /v1/{address}\nStatus Codes\n200 OK: the resource is found and returned successfully 404 Not Found: the resource was not found","title":"Fetch the current revision of the resource"},{"location":"/docs/delta/api/current/operating-on-resources.html#fetch-a-specific-revision-of-the-resource","text":"GET /v1/{address}?rev={rev}\n… where {rev} is the revision number, starting at 1.\nStatus Codes\n200 OK: the resource revision is found and returned successfully 404 Not Found: the resource revision was not found","title":"Fetch a specific revision of the resource"},{"location":"/docs/delta/api/current/operating-on-resources.html#fetch-a-specific-tag-of-the-resource","text":"GET /v1/{address}?tag={tag}\n… where {tag} is the tag name linked to a certain revision number.\nStatus Codes\n200 OK: the resource tag is found and returned successfully 404 Not Found: the resource tag was not found","title":"Fetch a specific tag of the resource"},{"location":"/docs/delta/api/current/operating-on-resources.html#create-a-new-resource","text":"Depending on whether the resource is a singleton resource or is part of a wider collection of resources of the same type the verbs POST and PUT are used.\nFor a singleton resource:\nPUT /v1/{address}\n{...}\nFor a collection resources:\nPOST /v1/{collection_address}\n{...}\n… where {collection_address} is the address of the collection the resource belongs to.\nStatus Codes\n201 Created: the resource was created successfully 400 Bad Request: the resource is not valid or cannot be created at this time 409 Conflict: the resource already exists","title":"Create a new resource"},{"location":"/docs/delta/api/current/operating-on-resources.html#update-a-resource","text":"In order to ensure a client does not perform any changes to a resource without having had seen the previous revision of the resource, the last revision needs to be passed as a query parameter.\nPUT /v1/{address}?rev={previous_rev}\n{...}\nStatus Codes\n200 OK: the resource was created successfully 400 Bad Request: the resource is not valid or cannot be updated at this time 409 Conflict: the provided revision is not the current resource revision number","title":"Update a resource"},{"location":"/docs/delta/api/current/operating-on-resources.html#tag-a-resource","text":"Links a resource revision to a specific name.\nTagging a resource is considered to be an update as well.\nPUT /v1/{address}/tags?rev={previous_rev}\n{\n   \"tag\": \"{name}\",\n   \"rev\": {rev}\n}\n… where:\n{name}: String - the name given to the resource at specific revision. {rev}: Number - the revision to link the provided {name}.","title":"Tag a resource"},{"location":"/docs/delta/api/current/operating-on-resources.html#deprecate-a-resource","text":"Locks the resource, so no further operations can be performed. It also deletes the resource from listing/querying results.\nDeprecating a resource is considered to be an update as well.\nDELETE /v1/{address}?rev={previous_rev}\nStatus Codes\n200 OK: the resource was created successfully 400 Bad Request: the resource is not valid or cannot be deprecated at this time 409 Conflict: the provided revision is not the current resource revision number\nStatus Codes\n200 OK: the resource was created successfully 400 Bad Request: the resource is not valid or cannot be created at this time 409 Conflict: the provided revision is not the current resource revision number","title":"Deprecate a resource"},{"location":"/docs/delta/api/current/operating-on-resources.html#listing","text":"GET /v1/{collection_address}?from={from}&size={size}&{deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}\n… where all of the query parameters are individually optional.\n{collection_address} Path - the selected collection to list, filter or search; for example: /v1/projects/, /v1/schemas/{org_label}/{project}, {from}: Number - the parameter that describes the offset for the current query; defaults to 0 {size}: Number - the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting resources based on their deprecation status {rev}: Number - can be used to filter the resulting resources based on their revision value {type}: Iri - can be used to filter the resulting resources based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting resources based on their creator {updatedBy}: Iri - can be used to filter the resulting resources based on the person which performed the last update Note: Some endpoints might not support some of the above query parameters. Please check the specific section of the documentation related tot he endpoint you want to consume for more details.","title":"Listing"},{"location":"/docs/delta/api/current/operating-on-resources.html#list-response-format","text":"The response to any search requests follows the described format:\n\"_total\": {hits},\n  \"_maxScore\": {maxScore},\n  \"_next\": \"{next_page_address}\",\n  \"_results\": [\n    {\n      \"@id\": \"{resource_id}\",\n      ...\n    },\n    {\n      \"@id\": \"{resource_id}\",\n      ...\n    }\n  ]\n… where:\n{hits}: Number - the total number of results found for the requested search. {maxScore} Float - the maximum score found across all hits. {resource_id} Iri - the qualified id for one of the results.\nThe relationship _next at the top level offer discovery of more resources, in terms of navigation/pagination.\nThe fields {maxScore} and {score_id} are optional fields and will only be present whenever a q query parameter is provided on the request.","title":"List response format"},{"location":"/docs/delta/api/current/iam-realms-api.html","text":"","title":"Realms"},{"location":"/docs/delta/api/current/iam-realms-api.html#realms","text":"Realms are rooted in /v1/realms collection.\nEach realm defines a specific authentication provider. Any of the authentication providers can be used to obtain access tokens that can be used with Nexus.\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying realms, the caller must have realms/write permissions on the path /. When reading realms, the caller must have realms/read permissions on the path /.","title":"Realms"},{"location":"/docs/delta/api/current/iam-realms-api.html#create-a-realm","text":"This operation creates a realm.\nPUT /v1/realms/{realm}\nThe following examples describe the payload used to create a realm.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/realms/realm1\" \\\n    -d '{\"name\":\"Nexus Dev\",\"openIdConfig\":\"https://nexus.example.com/auth/realms/bbp-test/.well-known/openid-configuration\",\"logo\":\"http://nexus.example.com/logo.png\"}' Payload {\n  \"name\": \"Nexus Dev\",\n  \"openIdConfig\": \"https://nexus.example.com/auth/realms/bbp-test/.well-known/openid-configuration\",\n  \"logo\": \"http://nexus.example.com/logo.png\"\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/realms/realm1\",\n  \"@type\": \"Realm\",\n  \"_label\": \"realm1\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}\nThe logo parameter is optional.","title":"Create a realm"},{"location":"/docs/delta/api/current/iam-realms-api.html#update-a-realm","text":"This operation updates a realm.\nPUT /v1/realms/{realm}?rev={previous_rev}\n  {...}\nwhere {previous_rev} is the last known revision number for the realm. The json payload should be the same as the one used to create realms.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/realms/realm1?rev=1\" \\\n    -d '{\"name\":\"Nexus Dev\",\"openIdConfig\":\"https://nexus.example.com/auth/realms/bbp-test/.well-known/openid-configuration\",\"logo\":\"http://nexus.example.com/logo.png\"}' Payload {\n  \"name\": \"Nexus Dev\",\n  \"openIdConfig\": \"https://nexus.example.com/auth/realms/bbp-test/.well-known/openid-configuration\",\n  \"logo\": \"http://nexus.example.com/logo.png\"\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/realms/realm1\",\n  \"@type\": \"Realm\",\n  \"_label\": \"realm1\",\n  \"_rev\": 2,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:25:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Update a realm"},{"location":"/docs/delta/api/current/iam-realms-api.html#deprecate-a-realm","text":"This operation deprecates a realm. After deprecation, realms loose their metadata\nDELETE /v1/realms/{realm}?rev={previous_rev} {...}\nwhere {previous_rev} is the last known revision number for the realm.\nRequest curl -XDELETE  -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/realms/realm1?rev=2\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/realms/realm1\",\n  \"@type\": \"Realm\",\n  \"_label\": \"realm1\",\n  \"_rev\": 3,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:25:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate a realm"},{"location":"/docs/delta/api/current/iam-realms-api.html#list-realms","text":"Lists all available realms.\nGET /v1/realms?deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}\nwhere…\n{deprecated}: Boolean - can be used to filter the resulting realms based on their deprecation status {rev}: Number - can be used to filter the resulting realms based on their revision value {type}: Iri - can be used to filter the resulting realms based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting realms based on their creator {updatedBy}: Iri - can be used to filter the resulting realms based on the person which performed the last update\nRequest curl \"https://nexus.example.com/v1/realms\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\"\n  ],\n  \"_total\": 2,\n  \"_results\": [\n    {\n      \"@id\": \"http://nexus.example.com/v1/realms/realm1\",\n      \"@type\": \"Realm\",\n      \"name\": \"Github Dev\",\n      \"openIdConfig\": \"http://nexus.example.com/auth/realms/realm1/.well-known/openid-configuration\",\n      \"_label\": \"realm1\",\n      \"_grantTypes\": [\n        \"password\",\n        \"clientCredentials\",\n        \"refreshToken\",\n        \"authorizationCode\",\n        \"implicit\"\n      ],\n      \"_issuer\": \"http://nexus.example.com/auth/realms/realm1\",\n      \"_authorizationEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/auth\",\n      \"_tokenEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/token\",\n      \"_userInfoEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/userinfo\",\n      \"_endSessionEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/logout\",\n      \"_rev\": 3,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-01-22T10:50:47.351Z\",\n      \"_createdBy\": \"http://nexus.example.com/v1/anonymous\",\n      \"_updatedAt\": \"2019-01-22T12:24:13.029Z\",\n      \"_updatedBy\": \"http://nexus.example.com/v1/anonymous\"\n    },\n    {\n      \"@id\": \"http://nexus.example.com/v1/realms/realm2\",\n      \"@type\": \"Realm\",\n      \"name\": \"Realm 2\",\n      \"openIdConfig\": \"http://nexus.example.com/auth/realms/realm2/.well-known/openid-configuration\",\n      \"_label\": \"realm2\",\n      \"_grantTypes\": [\n        \"password\",\n        \"clientCredentials\",\n        \"refreshToken\",\n        \"authorizationCode\",\n        \"implicit\"\n      ],\n      \"_issuer\": \"http://nexus.example.com/auth/realms/realm2\",\n      \"_authorizationEndpoint\": \"http://nexus.example.com/auth/realms/realm2/protocol/openid-connect/auth\",\n      \"_tokenEndpoint\": \"http://nexus.example.com/auth/realms/realm2/protocol/openid-connect/token\",\n      \"_userInfoEndpoint\": \"http://nexus.example.com/auth/realms/realm2/protocol/openid-connect/userinfo\",\n      \"_endSessionEndpoint\": \"http://nexus.example.com/auth/realms/realm2/protocol/openid-connect/logout\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-01-22T12:22:50.738Z\",\n      \"_createdBy\": \"http://nexus.example.com/v1/anonymous\",\n      \"_updatedAt\": \"2019-01-22T12:22:50.738Z\",\n      \"_updatedBy\": \"http://nexus.example.com/v1/anonymous\"\n    }\n  ]\n}","title":"List realms"},{"location":"/docs/delta/api/current/iam-realms-api.html#fetch-a-realm-current-version-","text":"GET /v1/realms/{realm}\nExample\nRequest curl \"https://nexus.example.com/v1/realms/realm1\" Response {\n  \"@id\": \"http://nexus.example.com/v1/realms/realm1\",\n  \"@type\": \"Realm\",\n  \"name\": \"Github Dev\",\n  \"openIdConfig\": \"http://nexus.example.com/auth/realms/realm1/.well-known/openid-configuration\",\n  \"_label\": \"realm1\",\n  \"_grantTypes\": [\n    \"password\",\n    \"clientCredentials\",\n    \"refreshToken\",\n    \"authorizationCode\",\n    \"implicit\"\n  ],\n  \"_issuer\": \"http://nexus.example.com/auth/realms/realm1\",\n  \"_authorizationEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/auth\",\n  \"_tokenEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/token\",\n  \"_userInfoEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/userinfo\",\n  \"_endSessionEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/logout\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-22T10:50:47.351Z\",\n  \"_createdBy\": \"http://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T12:24:13.029Z\",\n  \"_updatedBy\": \"http://nexus.example.com/v1/anonymous\"\n}","title":"Fetch a realm (current version)"},{"location":"/docs/delta/api/current/iam-realms-api.html#fetch-a-realm-specific-version-","text":"GET /v1/realms/{realm}?rev={rev}\n… where {rev} is the revision number of the resolver to be retrieved.\nExample\nRequest curl \"https://nexus.example.com/v1/realms/realm1?rev=3\" Response {\n  \"@id\": \"http://nexus.example.com/v1/realms/realm1\",\n  \"@type\": \"Realm\",\n  \"name\": \"Github Dev\",\n  \"openIdConfig\": \"http://nexus.example.com/auth/realms/realm1/.well-known/openid-configuration\",\n  \"_label\": \"realm1\",\n  \"_grantTypes\": [\n    \"password\",\n    \"clientCredentials\",\n    \"refreshToken\",\n    \"authorizationCode\",\n    \"implicit\"\n  ],\n  \"_issuer\": \"http://nexus.example.com/auth/realms/realm1\",\n  \"_authorizationEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/auth\",\n  \"_tokenEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/token\",\n  \"_userInfoEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/userinfo\",\n  \"_endSessionEndpoint\": \"http://nexus.example.com/auth/realms/realm1/protocol/openid-connect/logout\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-22T10:50:47.351Z\",\n  \"_createdBy\": \"http://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T12:24:13.029Z\",\n  \"_updatedBy\": \"http://nexus.example.com/v1/anonymous\"\n}","title":"Fetch a realm (specific version)"},{"location":"/docs/delta/api/current/iam-realms-api.html#realms-server-sent-events","text":"This endpoint allows clients to receive automatic updates from the realms in a streaming fashion.\nGET /v1/realms/events\nwhere Last-Event-Id is an optional HTTP Header that identifies the last consumed realm event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nThe response contains a series of realm events, represented in the following way\ndata:{payload}\nevent:{type}\nid:{id}\nwhere…\n{payload}: Json - is the actual payload of the current realm {type}: String - is a type identifier for the current realm. Possible types are: RealmCreated, RealmUpdated and RealmDeprecated {id}: String - is the identifier of the realm event. It can be used in the Last-Event-Id HTTP Header\nExample\nRequest curl \"https://nexus.example.com/v1/realms/events\" Response data:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@id\":\"http://nexus.example.com/v1/realms/github\",\"@type\":\"RealmCreated\",\"name\":\"Github\",\"openIdConfig\":\"https://nexus.example.com/nexus/auth/realms/github-dev/.well-known/openid-configuration\",\"_label\":\"github\",\"_grantTypes\":[\"password\",\"clientCredentials\",\"refreshToken\",\"authorizationCode\",\"implicit\"],\"_issuer\":\"https://nexus.example.com/nexus/auth/realms/github-dev\",\"_keys\":[{\"alg\":\"RS256\",\"e\":\"AQAB\",\"kid\":\"*****\",\"kty\":\"RSA\",\"n\":\"***\",\"use\":\"sig\"}],\"_authorizationEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/auth\",\"_tokenEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/token\",\"_userInfoEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/userinfo\",\"_endSessionEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/logout\",\"_rev\":1,\"_instant\":\"2019-06-11T11:31:52.278Z\",\"_subject\":\"http://nexus.example.com/v1/anonymous\"}\nevent:RealmCreated\nid:83bf27a2-8c3c-11e9-a8f6-c5c16f2312d6\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@id\":\"http://nexus.example.com/v1/realms/github\",\"@type\":\"RealmUpdated\",\"logo\":\"http://nexus.example.com/logo.png\",\"name\":\"Github\"\"openIdConfig\":\"https://nexus.example.com/nexus/auth/realms/github-dev/.well-known/openid-configuration\",\"_label\":\"github\",\"_grantTypes\":[\"password\",\"clientCredentials\",\"refreshToken\",\"authorizationCode\",\"implicit\"],\"_issuer\":\"https://nexus.example.com/nexus/auth/realms/github-dev\",\"_keys\":[{\"alg\":\"RS256\",\"e\":\"AQAB\",\"kid\":\"*****\",\"kty\":\"RSA\",\"n\":\"***\",\"use\":\"sig\"}],\"_authorizationEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/auth\",\"_tokenEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/token\",\"_userInfoEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/userinfo\",\"_endSessionEndpoint\":\"https://nexus.example.com/nexus/auth/realms/github-dev/protocol/openid-connect/logout\",\"_rev\":2,\"_instant\":\"2019-06-14T11:56:58.372Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/anonymous\"}\nevent:RealmUpdated\nid:835128c0-8e9b-11e9-a8f6-c5c16f2312d6\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@id\":\"http://nexus.example.com/v1/realms/github\",\"@type\":\"RealmDeprecated\",\"_label\":\"internal\",\"_rev\":3,\"_instant\":\"2019-06-14T11:57:01.426Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/myuser\"}\nevent:RealmDeprecated\nid:85054160-8e9b-11e9-a8f6-c5c16f2312d6","title":"Realms Server Sent Events"},{"location":"/docs/delta/api/current/authentication.html","text":"","title":"Authentication"},{"location":"/docs/delta/api/current/authentication.html#authentication","text":"In order to interact with Nexus Delta, clients need a valid access token. Tokens can be obtained from authentication providers. Please see, realms for documentation on how to find available providers(realms).\nEach realm defines openid-configuration endpoint. From that endpoint, clients can obtain the information necessary to obtain an access token, especially the authorize and token endpoints for the provider.\nPlease see oauth2 documentation for different authentication flows available for different types of applications.","title":"Authentication"},{"location":"/docs/delta/api/current/iam-permissions-api.html","text":"","title":"Permissions"},{"location":"/docs/delta/api/current/iam-permissions-api.html#permissions","text":"Permissions are rooted in the /v1/permissions collection.\nEach permission is the basic unit to provide a way to limit applications’ access to sensitive information.\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying permissions, the caller must have permissions/write permissions on the path /. When reading permissions, the caller must have permissions/read permissions on the path /.","title":"Permissions"},{"location":"/docs/delta/api/current/iam-permissions-api.html#minimum-permissions","text":"Delta is configured to include minimum permissions, i.e. permissions that cannot be removed, because they are necessary for correct functioning of Nexus.\nCurrently the following permissions are required:\ndefault permissions for acls, with the exception that everyone should be able to see his own permissions acls/read acls/write default permissions for permissions permissions/read permissions/write default permissions for realms realms/read realms/write generic permissions for full read access to the global event log events/read default permissions for organizations organizations/read organizations/write organizations/create default permissions for projects projects/read projects/write projects/create default permissions for resources resources/read resources/write default permissions for resolvers resolvers/write default permissions for views views/query views/write default permissions for schemas schemas/write default permissions for files files/write","title":"Minimum permissions"},{"location":"/docs/delta/api/current/iam-permissions-api.html#replace-permissions","text":"This operation overrides the collection of permissions.\nPUT /v1/permissions?rev={previous_rev}\n  {...}\n…where {previous_rev} is the last known revision number for the permissions. If there are only minimum permissions present present, this query parameter can be omitted.\nThe json payload contains the set of permissions to be added.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/permissions?rev=1\" -d \\\n'{\n  \"permissions\": [\n    \"newpermission/read\",\n    \"newpermission/write\"\n  ]\n}' Payload {\n  \"permissions\": [\n    \"newpermission/read\",\n    \"newpermission/write\"\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/permissions\",\n  \"@type\": \"Permissions\",\n  \"_rev\": 2,\n  \"_createdAt\": \"2019-01-22T13:15:54.667Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T13:22:03.007Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Replace permissions"},{"location":"/docs/delta/api/current/iam-permissions-api.html#subtract-permissions","text":"This operation removes the provided permissions from the existing collection of permissions.\nPATCH /v1/permissions?rev={previous_rev}\n  {...}\n…where {previous_rev} is the last known revision number for the permissions.\nThe json payload contains the set of permissions to be deleted. Example\nRequest curl -XPATCH -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/permissions?rev=2\" -d \\\n'{\n  \"@type\": \"Subtract\",\n  \"permissions\": [\n    \"newpermission/write\"\n  ]\n}' Payload {\n  \"@type\": \"Subtract\",\n  \"permissions\": [\n    \"newpermission/write\"\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/permissions\",\n  \"@type\": \"Permissions\",\n  \"_rev\": 1,\n  \"_createdAt\": \"2019-01-22T13:15:54.667Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T13:22:03.007Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Subtract permissions"},{"location":"/docs/delta/api/current/iam-permissions-api.html#append-permissions","text":"This operation appends the provided permissions to the existing collection of permissions.\nPATCH /v1/permissions?rev={previous_rev}\n  {...}\n…where {previous_rev} is the last known revision number for the permissions.\nThe json payload contains the set of permissions to be added.\nExample\nRequest curl -XPATCH -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/permissions?rev=3\" -d \\\n'{\n  \"@type\": \"Append\",\n  \"permissions\": [\n    \"newpermission/create\"\n  ]\n}' Payload {\n  \"@type\": \"Append\",\n  \"permissions\": [\n    \"newpermission/create\"\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/permissions\",\n  \"@type\": \"Permissions\",\n  \"_rev\": 2,\n  \"_createdAt\": \"2019-01-22T13:15:54.667Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T13:22:03.007Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Append permissions"},{"location":"/docs/delta/api/current/iam-permissions-api.html#delete-all-permissions","text":"This operation deletes the all the user defined permission and resets the collection to minimum permissions.\nDELETE /v1/permissions?rev={previous_rev}\n…where {previous_rev} is the last known revision number for the permissions.\nRequest curl -XDELETE \"https://nexus.example.com/v1/permissions?rev=4\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/permissions\",\n  \"@type\": \"Permissions\",\n  \"_rev\": 3,\n  \"_createdAt\": \"2019-01-22T13:15:54.667Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T13:22:03.007Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Delete all permissions"},{"location":"/docs/delta/api/current/iam-permissions-api.html#fetch-permissions-latest-revision-","text":"GET /v1/permissions\nRequest curl \"https://nexus.example.com/v1/permissions\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/permissions\",\n  \"@type\": \"Permissions\",\n  \"permissions\": [\n    \"acls/read\",\n    \"acls/write\",\n    \"events/read\",\n    \"files/write\",\n    \"organizations/create\",\n    \"organizations/read\",\n    \"organizations/write\",\n    \"permissions/read\",\n    \"permissions/write\",\n    \"projects/create\",\n    \"projects/read\",\n    \"projects/write\",\n    \"realms/read\",\n    \"realms/write\",\n    \"resolvers/write\",\n    \"resources/read\",\n    \"resources/write\",\n    \"schemas/write\",\n    \"views/query\",\n    \"views/write\"\n  ],\n  \"_rev\": 10,\n  \"_createdAt\": \"2019-01-22T13:15:54.667Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T13:22:03.007Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Fetch permissions (latest revision)"},{"location":"/docs/delta/api/current/iam-permissions-api.html#fetch-permissions-specific-revision-","text":"GET /v1/permissions?rev={rev}\n…where {rev} is the revision number of the permissions to be retrieved.\nRequest curl \"https://nexus.example.com/v1/permissions?rev=1\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/permissions\",\n  \"@type\": \"Permissions\",\n  \"permissions\": [\n    \"acls/read\",\n    \"acls/write\",\n    \"events/read\",\n    \"files/write\",\n    \"organizations/create\",\n    \"organizations/read\",\n    \"organizations/write\",\n    \"permissions/read\",\n    \"permissions/write\",\n    \"projects/create\",\n    \"projects/read\",\n    \"projects/write\",\n    \"realms/read\",\n    \"realms/write\",\n    \"resolvers/write\",\n    \"resources/read\",\n    \"resources/write\",\n    \"schemas/write\",\n    \"views/query\",\n    \"views/write\"\n  ],\n  \"_rev\": 3,\n  \"_createdAt\": \"2019-01-22T13:15:54.667Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-22T13:22:03.007Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Fetch permissions (specific revision)"},{"location":"/docs/delta/api/current/iam-permissions-api.html#permissions-server-sent-events","text":"This endpoint allows clients to receive automatic updates from the permissions in a streaming fashion.\nGET /v1/permissions/events\nwhere Last-Event-Id is an optional HTTP Header that identifies the last consumed permission event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nThe response contains a series of permission events, represented in the following way\ndata:{payload}\nevent:{type}\nid:{id}\nwhere…\n{payload}: Json - is the actual payload of the current permission {type}: String - is a type identifier for the current permission. Possible types are: PermissionsAppended, PermissionsSubtracted, PermissionsReplaced and PermissionsDeleted {id}: String - is the identifier of the permission event. It can be used in the Last-Event-Id HTTP Header\nExample\nRequest curl \"https://nexus.example.com/v1/permissions/events\" Response data:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"PermissionsAppended\",\"permissions\":[\"resources/write\",\"views/query\"],\"_rev\":1,\"_instant\":\"2019-06-14T11:57:04.039Z\",\"_subject\":\"https://nexus.example.com/v1/realms/nexusdev/users/myuser\"}\nevent:PermissionsAppended\nid:8693f7b0-8e9b-11e9-a8f6-c5c16f2312d6\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"PermissionsSubtracted\",\"permissions\":[\"views/query\"],\"_rev\":2,\"_instant\":\"2019-06-14T11:57:05.771Z\",\"_subject\":\"https://nexus.example.com/v1/realms/nexusdev/users/myuser\"}\nevent:PermissionsSubtracted\nid:879c3ff0-8e9b-11e9-a8f6-c5c16f2312d6\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"PermissionsReplaced\",\"permissions\":[\"schemas/write\",\"views/write\",\"files/write\",\"permissions/write\",\"acls/write\",\"realms/write\",\"projects/read\",\"acls/read\",\"organizations/create\",\"tcmbsyeq/rcxpdxng\",\"organizations/write\",\"resources/write\",\"realms/read\",\"projects/create\",\"storages/write\",\"permissions/read\",\"resources/read\",\"organizations/read\",\"resolvers/write\",\"events/read\",\"views/query\",\"projects/write\"],\"_rev\":3,\"_instant\":\"2019-06-14T11:57:07.277Z\",\"_subject\":\"https://nexus.example.com/v1/realms/nexusdev/users/myuser\"}\nevent:PermissionsReplaced\nid:88820c10-8e9b-11e9-a8f6-c5c16f2312d6","title":"Permissions Server Sent Events"},{"location":"/docs/delta/api/current/iam-acls-api.html","text":"","title":"Access Control Lists"},{"location":"/docs/delta/api/current/iam-acls-api.html#access-control-lists","text":"Access Control Lists are rooted in the /v1/acls collection.\nAn ACL defines the applications’ data access restriction using the following three parameters:\npermission: the value used to limit a client (user, group) access to resources. identity: a client identity reference, e.g. a certain user, a group, an anonymous user or someone who is authenticated to a certain realm. path: the location where to apply the restrictions. Examples of paths are: /, /myorg or /myorg/myproject\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying ACLs, the caller must have acls/write permissions on the path where the ACLs are being modified or its ancestors. When reading ACLs, the caller must have acls/read permissions on the path where the ACLs are being modified or its ancestors.","title":"Access Control Lists"},{"location":"/docs/delta/api/current/iam-acls-api.html#default-permissions","text":"When the service starts for the first time, it applies the default permissions to /. This gives all permissions to the anonymous user to enable setting up realms. It is recommended to replace these permissions once user has setup an authorization realm.","title":"Default permissions"},{"location":"/docs/delta/api/current/iam-acls-api.html#acls-hierarchy","text":"It is important to know that ACLs are represented in a tree-like structure depending on their path. Imagine the following scenario:\nEach block is identified by a path that contains a list of permissions for a certain identity (identities are color code divided).\nThere is a special set of permissions which restrict the use of the ACLs API:\nacls/read - an auth. token containing an identity with this permission is allowed to fetch a collection of ACL from any other identity. acls/write - an auth. token containing an identity with this permission is allowed to perform the call to the following endpoints: create ACLs, replace ACLs, subtract ACLs, append ACLs and delete ACLs.\nThose permissions need to be present in the current {path} where the API interaction occurs or in any parent path. In other words, they are inherited.\nLet’s clarify this concept with an example from the previous diagram. identity 1 could call the create ACLs endpoint on any {path} while identity 2 could only call the same endpoint for any path child of /myorg (like /myorg/myproj). At the same time, identity 3 could not perform any of the write operations.","title":"ACLs Hierarchy"},{"location":"/docs/delta/api/current/iam-acls-api.html#create-acls","text":"This operation creates a collection of ACL on the provided path.\nPUT /v1/acls/{path}\n  {...}\n…where {path} is the target location for the ACL collection.\nThe json payload contains the collection of ACL to set.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/acls/org1\" -d  \\\n'{\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"projects/read\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"projects/read\",\n        \"projects/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"realm\",\n        \"group\": \"some-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"acls/read\",\n        \"acls/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"realm\",\n        \"subject\": \"alice\"\n      }\n    }\n  ]\n}' Payload {\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"projects/read\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"projects/read\",\n        \"projects/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"some-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"acls/read\",\n        \"acls/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"subject\": \"alice\"\n      }\n    }\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/acls/org1\",\n  \"@type\": \"AccessControlList\",\n  \"_rev\": 1,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:01:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create ACLs"},{"location":"/docs/delta/api/current/iam-acls-api.html#replace-acls","text":"This operation overrides the collection of ACL on the provided path.\nPUT /v1/acls/{path}?rev={previous_rev}\n  {...}\n…where:\n{previous_rev}: Number - the last known revision for the ACL collection. Not required for replacing empty ACLs. {path}: String - is the target location for the ACL collection.\nThe json payload contains the collection of ACL to set.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/acls/org1?rev=1\" -d \\\n'{\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"projects/read\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"projects/read\",\n        \"projects/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"realm\",\n        \"group\": \"some-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"acls/read\",\n        \"acls/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"realm\",\n        \"subject\": \"alice\"\n      }\n    }\n  ]\n}' Payload {\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"projects/read\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"projects/read\",\n        \"projects/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"some-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"acls/read\",\n        \"acls/write\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"subject\": \"alice\"\n      }\n    }\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/acls/org1\",\n  \"@type\": \"AccessControlList\",\n  \"_rev\": 2,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:07:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Replace ACLs"},{"location":"/docs/delta/api/current/iam-acls-api.html#subtract-acls","text":"This operation removes the provided ACL collection from the existing collection of ACL on the provided path.\nPATCH /v1/acls/{path}?rev={previous_rev}\n  {...}\n…where:\n{previous_rev}: Number - the last known revision for the ACL collection. {path}: String - is the target location for the ACL collection.\nThe json payload contains the collection of ACL to remove.\nExample\nRequest curl -XPATCH -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/acls/org1?rev=2\" -d \\\n'{\n  \"@type\": \"Subtract\",\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"projects/read\"\n      ],\n      \"identity\": {\n        \"group\": \"a-group\",\n        \"realm\": \"myrealm\"\n      }\n    }\n  ]\n}' Payload {\n  \"@type\": \"Subtract\",\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"projects/read\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    }\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/acls/org1\",\n  \"@type\": \"AccessControlList\",\n  \"_rev\": 3,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:10:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Subtract ACLs"},{"location":"/docs/delta/api/current/iam-acls-api.html#append-acls","text":"This operation appends the provided ACL collection to the existing collection of ACL on the provided path.\nPATCH /v1/acls/{path}?rev={previous_rev}\n  {...}\n…where:\n{previous_rev}: Number - the last known revision for the ACL collection. Not required for appending to empty ACLs. {path}: String - is the target location for the ACL collection.\nThe json payload contains the collection of ACL to add.\nExample\nRequest curl -XPATCH -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/acls/org1?rev=3\" -d  \\\n'{\n  \"@type\": \"Append\",\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"own\",\n        \"other\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    }\n  ]\n}' Payload {\n  \"@type\": \"Append\",\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"own\",\n        \"other\"\n      ],\n      \"identity\": {\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    }\n  ]\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/acls/org1\",\n  \"@type\": \"nxv:AccessControlList\",\n  \"_rev\": 4,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:15:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Append ACLs"},{"location":"/docs/delta/api/current/iam-acls-api.html#delete-acls","text":"This operation deletes the entire collection of ACL on the provided path.\nDELETE /v1/acls/{path}?rev={previous_rev}\n…where:\n{previous_rev}: Number - the last known revision for the ACL collection. {path}: String - is the target location for the ACL collection.\nRequest curl -XDELETE \"https://nexus.example.com/v1/acls/org1?rev=4\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/acls/org1\",\n  \"@type\": \"nxv:AccessControlList\",\n  \"_rev\": 5,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:30:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Delete ACLs"},{"location":"/docs/delta/api/current/iam-acls-api.html#fetch-acls","text":"GET /v1/acls/{path}?rev={rev}&self={self}\n…where\n{path}: String - is the target location for the ACL collection. {rev}: Number - the revision of the ACL to be retrieved. This parameter is optional and it defaults to the current revision. {self}: Boolean - if true, only the ACLs containing the identities found on the auth. token are included in the response. If false all the ACLs on the current {path} are included. This parameter is optional and it defaults to true.\nThe ability to use the query parameter self=false depends on whether or not any of the identities found on the auth. token contains the acls:read permission on the provided {path} or its ancestors. For further details, check ACLs hierarchy.\nRequest curl \"https://nexus.example.com/v1/acls/org1?rev=1&self=false\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/acls.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/acls/org1\",\n  \"@type\": \"nxv:AccessControlList\",\n  \"path\": \"/org1\",\n  \"acl\": [\n    {\n      \"permissions\": [\n        \"read\"\n      ],\n      \"identity\": {\n        \"@id\": \"https://nexus.example.com/v1/realms/myrealm/groups/a-group\",\n        \"@type\": \"Group\",\n        \"realm\": \"myrealm\",\n        \"group\": \"a-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"read\",\n        \"write\"\n      ],\n      \"identity\": {\n        \"@id\": \"https://nexus.example.com/v1/realms/myrealm/groups/some-group\",\n        \"@type\": \"Group\",\n        \"realm\": \"myrealm\",\n        \"group\": \"some-group\"\n      }\n    },\n    {\n      \"permissions\": [\n        \"acls/read\",\n        \"acls/write\"\n      ],\n      \"identity\": {\n        \"@id\": \"https://nexus.example.com/v1/realms/myrealm/users/user\",\n        \"@type\": \"User\",\n        \"realm\": \"myrealm\",\n        \"subject\": \"alice\"\n      }\n    }\n  ],\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:01:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_rev\": 1\n}","title":"Fetch ACLs"},{"location":"/docs/delta/api/current/iam-acls-api.html#list-acls","text":"GET /v1/acls/{path}?ancestors={ancestors}&self={self}\n…where\n{path}: String - is the target location for the ACL collection. {ancestors}: Boolean - if true, the ACLs of the parent {path} are included in the response. If false only the ACLs on the current {path} are included. This parameter is optional and it defaults to false. {self}: Boolean - if true, only the ACLs containing the identities found on the auth. token are included in the response. If false all the ACLs on the current {path} are included. This parameter is optional and it defaults to true.\nThe ability to use the query parameter self=false and ancestors=true depends on whether or not any of the identities found on the auth. token contains the acls:read permission on the provided {path} or its parents. For further details, check ACLs hierarchy.\nThe {path} can contain the special character * which can be read as any.\nLet’s imagine we have the ACLs from the following diagram in place. If we query this endpoint with the path /myorg/*, we are selecting the ACLs defined in /myorg/myproj and myorg/myproj2. Likewise If we use the path /*, we are selecting the ACLs defined in /myorg and myorg2.\nThe following examples illustrate listings from the diagram on the section ACLs hierarchy with the following considerations:\nidentity 1: Is a group called one identity 2: Is a group called two identity 3: Is a user called me The auth. token is linked to the identity 1.\nRequest curl \"https://nexus.example.com/v1/acls/*?ancestors=true&self=true\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\"\n  ],\n  \"_total\": 2,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/acls/myorg/myproj\",\n      \"@type\": \"AccessControlList\",\n      \"acl\": [\n        {\n          \"permissions\": [\n            \"read\",\n            \"write\"\n          ],\n          \"identity\": {\n            \"@id\": \"https://nexus.example.com/v1/realm/groups/two\",\n            \"@type\": \"Group\",\n            \"realm\": \"myrealm\",\n            \"group\": \"two\"\n          }\n        }\n      ],\n      \"_path\": \"/myorg/myproj\",\n      \"_rev\": 1,\n      \"_createdAt\": \"2018-09-17T14:55:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-17T15:05:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/v1/acls/myorg/myproj2\",\n      \"@type\": \"AccessControlList\",\n      \"acl\": [\n        {\n          \"permissions\": [\n            \"read\"\n          ],\n          \"identity\": {\n            \"@id\": \"https://nexus.example.com/v1/realms/myrealm/users/me\",\n            \"@type\": \"User\",\n            \"realm\": \"myrealm\",\n            \"subject\": \"me\"\n          }\n        }\n      ],\n      \"_path\": \"/myorg/myproj2\",\n      \"_rev\": 2,\n      \"_createdAt\": \"2018-09-17T14:00:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/alice\",\n      \"_updatedAt\": \"2018-09-17T14:05:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/alice\"\n    }\n  ]\n} Request (with ancestors) curl \"https://nexus.example.com/v1/acls/myorg/*?ancestors=false&self=false\" Response (with ancestors) {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\"\n  ],\n  \"_total\": 3,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/acls/\",\n      \"@type\": \"AccessControlList\",\n      \"acl\": [\n        {\n          \"permissions\": [\n            \"acls/write\"\n          ],\n          \"identity\": {\n            \"@id\": \"https://nexus.example.com/v1/realms/myrealm/groups/one\",\n            \"@type\": \"Group\",\n            \"realm\": \"myrealm\",\n            \"group\": \"one\"\n          }\n        }\n      ],\n      \"_path\": \"/\",\n      \"_rev\": 1,\n      \"_createdAt\": \"2018-09-17T14:55:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-17T15:05:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/v1/acls/myorg\",\n      \"@type\": \"AccessControlList\",\n      \"acl\": [\n        {\n          \"permissions\": [\n            \"acls/write\"\n          ],\n          \"identity\": {\n            \"@id\": \"https://nexus.example.com/v1/realms/myrealm/groups/two\",\n            \"@type\": \"Group\",\n            \"realm\": \"myrealm\",\n            \"group\": \"two\"\n          }\n        }\n      ],\n      \"_path\": \"/myorg\",\n      \"_rev\": 2,\n      \"_createdAt\": \"2018-09-17T14:00:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/alice\",\n      \"_updatedAt\": \"2018-09-17T14:05:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/alice\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/v1/acls/myorg2\",\n      \"@type\": \"nxv:AccessControlList\",\n      \"acl\": [\n        {\n          \"permissions\": [\n            \"other\"\n          ],\n          \"identity\": {\n            \"@id\": \"https://nexus.example.com/v1/realms/myrealm/groups/one\",\n            \"@type\": \"Group\",\n            \"realm\": \"myrealm\",\n            \"group\": \"one\"\n          }\n        }\n      ],\n      \"_path\": \"/myorg2\",\n      \"_rev\": 1,\n      \"_createdAt\": \"2018-09-17T14:00:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/alice\",\n      \"_updatedAt\": \"2018-09-17T14:05:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/alice\"\n    }\n  ]\n}","title":"List ACLs"},{"location":"/docs/delta/api/current/iam-acls-api.html#acl-server-sent-events","text":"This endpoint allows clients to receive automatic updates from the ACLs in a streaming fashion.\nGET /v1/acls/events\nwhere Last-Event-Id is an optional HTTP Header that identifies the last consumed ACL event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nThe response contains a series of ACL events, represented in the following way\ndata:{payload}\nevent:{type}\nid:{id}\nwhere…\n{payload}: Json - is the actual payload of the current ACL {type}: String - is a type identifier for the current ACL. Possible types are: AclAppended, AclSubtracted, AclReplaced, AclDeleted {id}: String - is the identifier of the ACL event. It can be used in the Last-Event-Id HTTP Header\nExample\nRequest curl \"https://nexus.example.com/v1/acls/events\" Response data:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"AclAppended\",\"acl\":[{\"identity\":{\"@id\":\"https://nexus.example.com/v1/realms/nexusdev/users/test\",\"@type\":\"User\",\"realm\":\"nexusdev\",\"subject\":\"test\"},\"permissions\":[\"organizations/create\"]}],\"_path\":\"/\",\"_rev\":5,\"_instant\":\"2019-06-14T11:54:52.379Z\",\"_subject\":\"https://nexus.example.com/v1/realms/nexusdev/users/myuser\"}\nevent:AclAppended\nid:381a17e0-8e9b-11e9-a8f6-c5c16f2312d6\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"AclReplaced\",\"acl\":[{\"identity\":{\"@id\":\"https://nexus.example.com/v1/realms/nexusdev/users/test\",\"@type\":\"User\",\"realm\":\"nexusdev\",\"subject\":\"test\"},\"permissions\":[\"schemas/write\",\"views/write\",\"files/write\",\"acls/write\",\"projects/read\",\"acls/read\",\"organizations/create\",\"organizations/write\",\"resources/write\",\"projects/create\",\"storages/write\",\"resources/read\",\"organizations/read\",\"resolvers/write\",\"views/query\",\"projects/write\"]}],\"_path\":\"/imw5ta2pjjvxjxm\",\"_rev\":1,\"_instant\":\"2019-06-14T11:54:53.133Z\",\"_subject\":\"https://nexus.example.com/v1/anonymous\"}\nevent:AclReplaced\nid:388cfdf0-8e9b-11e9-a8f6-c5c16f2312d6\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/iam.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"AclSubtracted\",\"acl\":[{\"identity\":{\"@id\":\"https://nexus.example.com/v1/realms/nexusdev/users/test\",\"@type\":\"User\",\"realm\":\"nexusdev\",\"subject\":\"test\"},\"permissions\":[\"organizations/create\"]}],\"_path\":\"/\",\"_rev\":6,\"_instant\":\"2019-06-14T11:56:55.963Z\",\"_subject\":\"https://nexus.example.com/v1/realms/nexusdev/users/myuser\"}\nevent:AclSubtracted\nid:81c3d200-8e9b-11e9-a8f6-c5c16f2312d6","title":"ACL Server Sent Events"},{"location":"/docs/delta/api/current/iam-identities.html","text":"","title":"Identities"},{"location":"/docs/delta/api/current/iam-identities.html#identities","text":"The /v1/identities endpoint allows user to retrieve the identities that the user has in the platform. Calling the endpoint without a token will result in only one identity returned: Anonymous. Calling it with token should return multiple identities. There are four different types of identities:\nAnonymous - represents anonymous user Authenticated - represents a realm via which the user is authenticated Group - represents a group to which a user belongs in a realm User - represents the user.\nThe following HTTP call can used to retrieve the identities:\nGET /v1/identities\nExample\nRequest curl \"https://nexus.example.com/v1/identities\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/iam.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"identities\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/anonymous\",\n      \"@type\": \"Anonymous\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/v1/realms/nexusdev/authenticated\",\n      \"@type\": \"Authenticated\",\n      \"realm\": \"nexusdev\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/v1/realms/nexusdev/groups/test-group\",\n      \"@type\": \"Group\",\n      \"group\": \"test-group\",\n      \"realm\": \"nexusdev\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/v1/realms/nexusdev/users/test-user\",\n      \"@type\": \"User\",\n      \"realm\": \"nexusdev\",\n      \"subject\": \"test-user\"\n    }\n  ]\n}","title":"Identities"},{"location":"/docs/delta/api/current/admin-orgs-api.html","text":"","title":"Organizations"},{"location":"/docs/delta/api/current/admin-orgs-api.html#organizations","text":"Organizations are rooted in the /v1/orgs path and are used to group and categorize sub-resources.\nAccess to resources in the system depends on the access control list set for them. A caller may need to prove its identity by means of an access token passed in the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about retrieving access tokens.\nAuthorization notes When creating organizations, the caller must have organizations/create permissions on the current path of the organization or /. When updating organizations, the caller must have organizations/write permissions on the current path of the organization or /. When reading organizations, the caller must have organizations/read permissions on the current path of the organization or /.","title":"Organizations"},{"location":"/docs/delta/api/current/admin-orgs-api.html#create-an-organization","text":"PUT /v1/orgs/{label}\n  {...}\n…where {label} is the user friendly name assigned to this organization. The semantics of the label should be consistent with the type of data provided by its sub-resources, since it’ll be a part of the sub-resources’ URI.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/orgs/myorg\" -d \\\n'{\n  \"description\": \"My organization\"\n}' Payload {\n  \"description\": \"My organization\"\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/orgs/myorg\",\n  \"@type\": \"Organization\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create an organization"},{"location":"/docs/delta/api/current/admin-orgs-api.html#update-an-organization","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to an organization without having had seen the previous revision of the organization, the last revision needs to be passed as a query parameter.\nPUT /v1/orgs/{label}?rev={previous_rev}\n  {...}\n… where\n{previous_rev}: Number - is the last known revision for the organization. {label}: String - is the user friendly name that identifies this organization.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/orgs/myorg?rev=1\" -d \\\n'{\n  \"description\": \"A new description\"\n}' Payload {\n  \"description\": \"My organization\"\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/orgs/myorg\",\n  \"@type\": \"Organization\",\n  \"description\": \"My organization\",\n  \"_rev\": 2,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:01:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Update an organization"},{"location":"/docs/delta/api/current/admin-orgs-api.html#deprecate-an-organization","text":"Locks the organization, so that no further operations can be performed on the resource or on the child resources.\nDeprecating an organization is considered to be an update as well.\nDELETE /v1/orgs/{label}?rev={previous_rev}\n… where\n{label}: String - is the user friendly name that identifies this organization. {previous_rev}: Number - is the last known revision for the organization.\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/orgs/myorg/tags?rev=3\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/orgs/myorg\",\n  \"@type\": \"Organization\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:01:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate an organization"},{"location":"/docs/delta/api/current/admin-orgs-api.html#fetch-an-organization-current-version-","text":"GET /v1/orgs/{label}\n…where {label} is the user friendly String name that identifies this organization.\nExample\nRequest curl \"https://nexus.example.com/v1/orgs/myorg\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/orgs/myorg\",\n  \"@type\": \"Organization\",\n  \"description\": \"My Organization\",\n  \"_label\": \"myorg\",\n  \"_uuid\": \"bc0eba71-2a7f-40e8-ac90-5c97fc6f37d7\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:01:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch an organization (current version)"},{"location":"/docs/delta/api/current/admin-orgs-api.html#fetch-an-organization-specific-version-","text":"GET /v1/orgs/{label}?rev={rev}\n… where\n{rev}: Number - is the revision of the organization to be retrieved. {label}: String - is the user friendly name that identifies this organization.\nExample\nRequest curl \"https://nexus.example.com/v1/orgs/myorg?rev=4\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/orgs/myorg\",\n  \"@type\": \"Organization\",\n  \"description\": \"My Organization\",\n  \"_label\": \"myorg\",\n  \"_uuid\": \"bc0eba71-2a7f-40e8-ac90-5c97fc6f37d7\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:01:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch an organization (specific version)"},{"location":"/docs/delta/api/current/admin-orgs-api.html#list-organizations","text":"GET /v1/orgs?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&label={label}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting organizations based on their deprecation status {rev}: Number - can be used to filter the resulting organizations based on their revision value {type}: Iri - can be used to filter the resulting organizations based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting organizations based on their creator {updatedBy}: Iri - can be used to filter the resulting organizations based on the person which performed the last update {label}: String - can be used to filter the resulting organizations based on its label. E.g.: label=my will match any organization’s label that contains the string my.\nExample\nRequest curl \"https://nexus.example.com/v1/orgs\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 2,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/orgs/myorg\",\n      \"@type\": \"Organization\",\n      \"description\": \"My Organization\",\n      \"_label\": \"myorg\",\n      \"_uuid\": \"bc0eba71-2a7f-40e8-ac90-5c97fc6f37d7\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T10:01:00.801Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/v1/orgs/myorg2\",\n      \"@type\": \"Organization\",\n      \"description\": \"My Second Organization\",\n      \"_label\": \"myorg2\",\n      \"_uuid\": \"b42e5206-f81e-430b-808d-5dac2599153d\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-01-14T09:29:39.416Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2019-01-14T09:29:39.416Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ]\n}","title":"List organizations"},{"location":"/docs/delta/api/current/admin-orgs-api.html#organization-server-sent-events","text":"This endpoint allows clients to receive automatic updates from the organizations in a streaming fashion.\nGET /v1/orgs/events\nwhere Last-Event-Id is an optional HTTP Header that identifies the last consumed organization event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nThe response contains a series of organization events, represented in the following way\ndata:{payload}\nevent:{type}\nid:{id}\nwhere…\n{payload}: Json - is the actual payload of the current organization {type}: String - is a type identifier for the current organization. Possible types are: OrganizationCreated, OrganizationUpdated and OrganizationDeprecated {id}: String - is the identifier of the organization event. It can be used in the Last-Event-Id HTTP Header\nExample\nRequest curl \"https://nexus.example.com/v1/orgs/events\" Response data:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"OrganizationCreated\",\"description\":\"l3dd4frl6axlueb organization\",\"_uuid\":\"3a793ee4-e973-4181-98f5-1eb3ac87d6f6\",\"_label\":\"l3dd4frl6axlueb\",\"_rev\":1,\"_instant\":\"2019-06-14T11:58:46.509Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:OrganizationCreated\nid:c3abebd0-8e9b-11e9-81dd-338cb949d9cb\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"OrganizationCreated\",\"description\":\"43rl0svyk8fcfki organization\",\"_uuid\":\"d8ed8e9f-6d4a-4cf7-8f9f-9ed6ed62838c\",\"_label\":\"43rl0svyk8fcfki\",\"_rev\":1,\"_instant\":\"2019-06-14T11:58:53.744Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:OrganizationCreated\nid:c7fbe500-8e9b-11e9-81dd-338cb949d9cb\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"OrganizationUpdated\",\"description\":\"43rl0svyk8fcfki organization update 1\",\"_uuid\":\"d8ed8e9f-6d4a-4cf7-8f9f-9ed6ed62838c\",\"_label\":\"43rl0svyk8fcfki\",\"_rev\":2,\"_instant\":\"2019-06-14T11:58:59.458Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:OrganizationUpdated\nid:cb680de0-8e9b-11e9-81dd-338cb949d9cb\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"OrganizationUpdated\",\"description\":\"43rl0svyk8fcfki organization update 2\",\"_uuid\":\"d8ed8e9f-6d4a-4cf7-8f9f-9ed6ed62838c\",\"_label\":\"43rl0svyk8fcfki\",\"_rev\":3,\"_instant\":\"2019-06-14T11:59:00.057Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:OrganizationUpdated\nid:cbc6a8a0-8e9b-11e9-81dd-338cb949d9cb\n        \n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"OrganizationDeprecated\",\"_uuid\":\"eb50c21d-3dc7-45e4-94ed-5b2a62f44907\",\"_rev\":2,\"_instant\":\"2019-06-14T11:59:05.790Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:OrganizationDeprecated\nid:cf2d2c30-8e9b-11e9-81dd-338cb949d9cb","title":"Organization Server Sent Events"},{"location":"/docs/delta/api/current/admin-projects-api.html","text":"","title":"Projects"},{"location":"/docs/delta/api/current/admin-projects-api.html#projects","text":"Projects belong to an organization and are rooted in the corresponding /v1/projects/{org_label} path. The purposes of projects are:\nGroup and categorize sub-resources. Define settings that apply for operations on all sub-resources. Provide isolation from resources inside other projects. This behavior can be changed by defining resolvers\nAccess to resources in the system depends on the access control list set for them. A caller may need to prove its identity by means of an access token passed in the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about retrieving access tokens.\nAuthorization notes When creating projects, the caller must have projects/create permissions on the current path of the project or the ancestor paths. When updating projects, the caller must have projects/write permissions on the current path of the project or the ancestor paths. When reading projects, the caller must have projects/read permissions on the current path of the project or the ancestor paths.","title":"Projects"},{"location":"/docs/delta/api/current/admin-projects-api.html#project-payload","text":"{\n  \"description\": \"{description}\",\n  \"base\": \"{base}\",\n  \"vocab\": \"{vocab}\",\n  \"apiMappings\": [\n   {\n      \"prefix\": \"{prefix}\",\n      \"namespace\": \"{namespace}\"\n    },\n    ...\n  ]\n}\nwhere…\n{description}: String - an optional description for this project. {base}: IRI - is going to be used as a curie in the generation of the @id children resources. E.g.: Let base be http://example.com/. When a resource is created and no @id is present in the payload, the platform will generate an @id which will look like http://example.com/{UUID}. This field is optional and will default to {{base}}/v1/resources/{org_label}/{project_label}/_/. {vocab}: IRI - is going to be used as a curie prefix for all unqualified predicates in children resources. E.g. if the vocab is set to https://schema.org/, when a field a resource is created and a field name is present in the payload, it will be expanded to http://schema.org/name by the system during indexing and fetch operations. This field is optional and will default to {{base}}/v1/vocabs/{org_label}/{project_label}/. {apiMappings}: Json object - provides a convinient way to deal with URIs when performing operations on a sub-resource. This field is optional.","title":"Project payload"},{"location":"/docs/delta/api/current/admin-projects-api.html#api-mappings","text":"The apiMappings Json object array maps each prefix to its namespace so that curies on children endpoints can be used.\nHaving the following apiMappings:\n{\n  \"apiMappings\": [\n   {\n      \"prefix\": \"{prefix}\",\n      \"namespace\": \"{namespace}\"\n    },\n    { ... }\n  ]\n}\nwhere…\n{prefix}: String - the left hand side of a curie. It has certain constrains. {namespace}: IRI - the right hand side of a curie. It has certain constrains (irelative-ref).\nLet’s see an example:\njson { \"apiMappings\": [ { \"prefix\": \"person\", \"namespace\": \"http://example.com/some/person\" }, { \"prefix\": \"schemas\", \"namespace\": \"https://bluebrainnexus.io/schemas/\" } ] }\nThe previous payload allows us to create a schema using the following endpoints:\n/v1/schemas/{org_label}/{project_label}/person. The @id of the resulting schema will be http://example.com/some/person /v1/schemas/{org_label}/{project_label}/schema:other. The @id of the resulting schema will be https://bluebrainnexus.io/schemas/other","title":"API Mappings"},{"location":"/docs/delta/api/current/admin-projects-api.html#create-a-project","text":"PUT /v1/projects/{org_label}/{label}\n  {...}\n…where {label} is the user friendly name assigned to this project. The semantics of the label should be consistent with the type of data provided by its sub-resources, since it’ll be a part of the sub-resources’ URI.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/projects/myorg/myproject\" -d \\\n'{\n  \"description\": \"example project creation\",\n  \"base\": \"https://nexus.example.com/v1/projects/myorg/myproject/\",\n  \"vocab\": \"https://schema.org/\",\n  \"apiMappings\": [\n    {\n      \"prefix\": \"person\",\n      \"namespace\": \"http://example.com/some/person\"\n    },\n    {\n      \"prefix\": \"schemas\",\n      \"namespace\": \"https://bluebrain.github.io/nexus/schemas/\"\n    },\n    {\n      \"prefix\": \"ex\",\n      \"namespace\": \"http://example.com/\"\n    }\n  ]\n}' Payload {\n  \"description\": \"example project creation\",\n  \"base\": \"https://nexus.example.com/v1/myorg/myproject/\",\n  \"vocab\": \"https://schema.org/\",\n  \"apiMappings\": [\n    {\n      \"prefix\": \"person\",\n      \"namespace\": \"http://example.com/some/person\"\n    },\n    {\n      \"prefix\": \"schemas\",\n      \"namespace\": \"https://bluebrain.github.io/nexus/schemas/\"\n    },\n    {\n      \"prefix\": \"ex\",\n      \"namespace\": \"http://example.com/\"\n    }\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n  \"@type\": \"Project\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a project"},{"location":"/docs/delta/api/current/admin-projects-api.html#update-a-project","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to a project without having had seen the previous revision of the project, the last revision needs to be passed as a query parameter.\nPUT /v1/projects/{org_label}/{label}?rev={previous_rev}\n  {...}\n… where\n{previous_rev}: Number - the last known revision for the organization. {label}: String - the user friendly name that identifies this project.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/projects/myorg/myproject?rev=1\" -d \\\n'{\n  \"description\": \"example project creation\",\n  \"base\": \"https://nexus.example.com/v1/myorg/myproject/\",\n  \"vocab\": \"https://schema.org/\",\n  \"apiMappings\": [\n    {\n      \"prefix\": \"person\",\n      \"namespace\": \"http://example.com/some/person\"\n    },\n    {\n      \"prefix\": \"schemas\",\n      \"namespace\": \"https://bluebrain.github.io/nexus/schemas/\"\n    },\n    {\n      \"prefix\": \"ex\",\n      \"namespace\": \"http://example.com/\"\n    }\n  ]\n}' Payload {\n  \"description\": \"example project creation\",\n  \"base\": \"https://nexus.example.com/v1/myorg/myproject/\",\n  \"vocab\": \"https://schema.org/\",\n  \"apiMappings\": [\n    {\n      \"prefix\": \"person\",\n      \"namespace\": \"http://example.com/some/person\"\n    },\n    {\n      \"prefix\": \"schemas\",\n      \"namespace\": \"https://bluebrain.github.io/nexus/schemas/\"\n    },\n    {\n      \"prefix\": \"ex\",\n      \"namespace\": \"http://example.com/\"\n    }\n  ]\n} Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n  \"@type\": \"Project\",\n  \"_rev\": 2,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Update a project"},{"location":"/docs/delta/api/current/admin-projects-api.html#deprecate-a-project","text":"Locks the project, so no further operations can be performed on it or on the children resources.\nDeprecating a project is considered to be an update as well.\nDELETE /v1/projects/{org_label}/{label}?rev={previous_rev}\n… where\n{previous_rev}: Number - the last known revision for the organization. {label}: String - the user friendly name that identifies this project.\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/projects/myorg/myproject?rev=3\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n  \"@type\": \"Project\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:30:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate a project"},{"location":"/docs/delta/api/current/admin-projects-api.html#fetch-a-project-current-version-","text":"GET /v1/projects/{org_label}/{label}\n…where {label} is the user friendly name that identifies this project.\nExample\nRequest curl \"https://nexus.example.com/v1/projects/myorg/myproject\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n  \"@type\": \"Project\",\n  \"base\": \"https://nexus.example.com/v1/myorg/myproject/\",\n  \"vocab\": \"https://schema.org/\",\n  \"apiMappings\": [\n    {\n      \"prefix\": \"person\",\n      \"namespace\": \"http://example.com/some/person\"\n    },\n    {\n      \"prefix\": \"schemas\",\n      \"namespace\": \"https://bluebrain.github.io/nexus/schemas/\"\n    },\n    {\n      \"prefix\": \"ex\",\n      \"namespace\": \"http://example.com/\"\n    }\n  ],\n  \"_label\": \"myproject\",\n  \"_organizationLabel\": \"myorg\",\n  \"_organizationUuid\": \"bc0eba71-2a7f-40e8-ac90-5c97fc6f37d7\",\n  \"_uuid\": \"e622745d-5eea-4dc5-8318-58a3dd4101ff\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:30:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch a project (current version)"},{"location":"/docs/delta/api/current/admin-projects-api.html#fetch-a-project-specific-version-","text":"GET /v1/projects/{org_label}/{label}?rev={rev}\n…where\n{label}: String - the user friendly name that identifies this project. {rev}: Number - the revision of the project to be retrieved.\nExample\nRequest curl \"https://nexus.example.com/v1/projects/myorg/myproject?rev=4\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n  \"@type\": \"Project\",\n  \"base\": \"https://nexus.example.com/v1/myorg/myproject/\",\n  \"vocab\": \"https://schema.org/\",\n  \"apiMappings\": [\n    {\n      \"prefix\": \"person\",\n      \"namespace\": \"http://example.com/some/person\"\n    },\n    {\n      \"prefix\": \"schemas\",\n      \"namespace\": \"https://bluebrain.github.io/nexus/schemas/\"\n    },\n    {\n      \"prefix\": \"ex\",\n      \"namespace\": \"http://example.com/\"\n    }\n  ],\n  \"_label\": \"myproject\",\n  \"_organizationLabel\": \"myorg\",\n  \"_organizationUuid\": \"bc0eba71-2a7f-40e8-ac90-5c97fc6f37d7\",\n  \"_uuid\": \"e622745d-5eea-4dc5-8318-58a3dd4101ff\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:30:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch a project (specific version)"},{"location":"/docs/delta/api/current/admin-projects-api.html#list-projects","text":"GET /v1/projects?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&label=label\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting projects based on their deprecation status {rev}: Number - can be used to filter the resulting projects based on their revision value {type}: Iri - can be used to filter the resulting projects based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting projects based on their creator {updatedBy}: Iri - can be used to filter the resulting projects based on the person which performed the last update {label}: String - can be used to filter the resulting projects based on its label. E.g.: label=my will match any project’s label that contains the string my. label='my' will match any project where label is equal to my.\nExample\nRequest curl \"https://nexus.example.com/v1/projects\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n      \"@type\": \"Project\",\n      \"base\": \"http://nexus.example.com/\",\n      \"vocab\": \"http://schema.org/\",\n      \"apiMappings\": [\n        {\n          \"namespace\": \"http://schema.org/\",\n          \"prefix\": \"schema\"\n        }\n      ],\n      \"_uuid\": \"e622745d-5eea-4dc5-8318-58a3dd4101ff\",\n      \"_label\": \"myproject\",\n      \"_organizationUuid\": \"bc0eba71-2a7f-40e8-ac90-5c97fc6f37d7\",\n      \"_organizationLabel\": \"myorg\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T10:30:00.801Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ]\n}","title":"List projects"},{"location":"/docs/delta/api/current/admin-projects-api.html#list-projects-belonging-to-an-organization","text":"GET /v1/projects/{org_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&label=label\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting projects based on their deprecation status {rev}: Number - can be used to filter the resulting projects based on their revision value {type}: Iri - can be used to filter the resulting projects based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting projects based on their creator {updatedBy}: Iri - can be used to filter the resulting projects based on the person which performed the last update {label}: String - can be used to filter the resulting projects based on its label. E.g.: label=my will match any project’s label that contains the string my.\nExample\nRequest curl \"https://nexus.example.com/v1/projects/myorg\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/admin.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n      \"@type\": \"Project\",\n      \"base\": \"http://nexus.example.com/\",\n      \"vocab\": \"http://schema.org/\",\n      \"apiMappings\": [\n        {\n          \"namespace\": \"http://schema.org/\",\n          \"prefix\": \"schema\"\n        }\n      ],\n      \"_uuid\": \"e622745d-5eea-4dc5-8318-58a3dd4101ff\",\n      \"_label\": \"myproject\",\n      \"_organizationUuid\": \"bc0eba71-2a7f-40e8-ac90-5c97fc6f37d7\",\n      \"_organizationLabel\": \"myorg\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T10:30:00.801Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ]\n}","title":"List projects belonging to an organization"},{"location":"/docs/delta/api/current/admin-projects-api.html#project-server-sent-events","text":"This endpoint allows clients to receive automatic updates from the projects in a streaming fashion.\nGET /v1/projects/events\nwhere Last-Event-Id is an optional HTTP Header that identifies the last consumed project event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nThe response contains a series of project events, represented in the following way\ndata:{payload}\nevent:{type}\nid:{id}\nwhere…\n{payload}: Json - is the actual payload of the current project {type}: String - is a type identifier for the current project. Possible types are: ProjectCreated, ProjectUpdated and ProjectDeprecated {id}: String - is the identifier of the project event. It can be used in the Last-Event-Id HTTP Header\nExample\nRequest curl \"https://nexus.example.com/v1/projects/events\" Response data:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"ProjectCreated\",\"description\":\"rel07bd3x7ux7xy/3g2tp5jdtj2bii7 project\",\"base\":\"http://nexus.example.com/v1/resources/rel07bd3x7ux7xy/3g2tp5jdtj2bii7/_/\",\"vocab\":\"http://nexus.example.com/v1/vocabs/rel07bd3x7ux7xy/3g2tp5jdtj2bii7/\",\"apiMappings\":[{\"prefix\":\"nxv\",\"namespace\":\"https://bbp-nexus.epfl.ch/vocabs/nexus/core/terms/v0.1.0/\"},{\"prefix\":\"person\",\"namespace\":\"https://shapes-registry.org/commons/person\"}],\"_uuid\":\"0ccd8bb7-e2d6-468b-bf35-2d01f3ddaedf\",\"_label\":\"3g2tp5jdtj2bii7\",\"_organizationUuid\":\"cfd51482-294f-4f52-be78-8edce0775c42\",\"_organizationLabel\":\"rel07bd3x7ux7xy\",\"_rev\":1,\"_instant\":\"2019-06-14T11:59:14.684Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:ProjectCreated\nid:d47715c0-8e9b-11e9-81dd-338cb949d9cb\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"ProjectUpdated\",\"description\":\"rel07bd3x7ux7xy/3g2tp5jdtj2bii7 project update 1\",\"base\":\"http://nexus.example.com/v1/tmynbseodckawgit/\",\"vocab\":\"http://nexus.example.com/v1/iwspaxkdbrpfsbni/\",\"apiMappings\":[{\"prefix\":\"nxv\",\"namespace\":\"https://bbp-nexus.epfl.ch/vocabs/nexus/core/terms/v0.1.0/\"},{\"prefix\":\"person\",\"namespace\":\"https://shapes-registry.org/commons/person\"},{\"prefix\":\"xsd\",\"namespace\":\"http://www.w3.org/2001/XMLSchema#\"}],\"_uuid\":\"0ccd8bb7-e2d6-468b-bf35-2d01f3ddaedf\",\"_label\":\"3g2tp5jdtj2bii7\",\"_rev\":2,\"_instant\":\"2019-06-14T11:59:19.544Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:ProjectUpdated\nid:d7602bf0-8e9b-11e9-81dd-338cb949d9cb\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"ProjectUpdated\",\"description\":\"rel07bd3x7ux7xy/3g2tp5jdtj2bii7 project update 2\",\"base\":\"http://nexus.example.com/v1/wwpeuyhtqbsesfxl/\",\"vocab\":\"http://nexus.example.com/v1/xqbfndagddjerwwc/\",\"apiMappings\":[{\"prefix\":\"nxv\",\"namespace\":\"https://bbp-nexus.epfl.ch/vocabs/nexus/core/terms/v0.1.0/\"},{\"prefix\":\"person\",\"namespace\":\"https://shapes-registry.org/commons/person\"},{\"prefix\":\"xsd\",\"namespace\":\"http://www.w3.org/2001/XMLSchema#\"}],\"_uuid\":\"0ccd8bb7-e2d6-468b-bf35-2d01f3ddaedf\",\"_label\":\"3g2tp5jdtj2bii7\",\"_rev\":3,\"_instant\":\"2019-06-14T11:59:20.094Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:ProjectUpdated\nid:d7b66240-8e9b-11e9-81dd-338cb949d9cb\n\ndata:{\"@context\":[\"https://bluebrain.github.io/nexus/contexts/admin.json\",\"https://bluebrain.github.io/nexus/contexts/resource.json\"],\"@type\":\"ProjectDeprecated\",\"_uuid\":\"0ccd8bb7-e2d6-468b-bf35-2d01f3ddaedf\",\"_rev\":4,\"_instant\":\"2019-06-14T11:59:23.722Z\",\"_subject\":\"http://nexus.example.com/v1/realms/nexusdev/users/test\"}\nevent:ProjectDeprecated\nid:d9de7260-8e9b-11e9-81dd-338cb949d9cb","title":"Project Server Sent Events"},{"location":"/docs/delta/api/current/kg-schemas-api.html","text":"","title":"Schemas"},{"location":"/docs/delta/api/current/kg-schemas-api.html#schemas","text":"Schemas are rooted in the /v1/schemas/{org_label}/{project_label} collection. They define a set of rules and constraints using SHACL. Once those schemas are present, other resources can be created against them. Those resources won’t be successfully created unless they match the required constraints defined on the schema.\nEach schema…\nbelongs to a project identifier by the label {project_label} inside an organization identifier by the label {org_label} it is validated against the shacl schema (version 20170720).\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying schemas, the caller must have schemas/write permissions on the current path of the project or the ancestor paths. When reading schemas, the caller must have resources/read permissions on the current path of the project or the ancestor paths.","title":"Schemas"},{"location":"/docs/delta/api/current/kg-schemas-api.html#create-a-schema-using-post","text":"POST /v1/schemas/{org_label}/{project_label}\n  {...}\nThe json payload:\nIf the @id value is found on the payload, this @id will be used. If the @id value is not found on the payload, an @id will be generated as follows: base:{UUID}. The base is the prefix defined on the resource’s project ({project_label}).\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/schemas/myorg/myproj\" -d \\\n'{\n  \"@context\": {\n      \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n      \"ex\": \"http://example.com/\"\n  },\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"sh:NodeShape\",\n      \"nodeKind\": \"sh:BlankNodeOrIRI\",\n      \"targetClass\": \"ex:Custom\",\n      \"property\": [\n        {\n          \"path\": \"ex:name\",\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:number\",\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:bool\",\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1\n        }\n      ]\n    }\n  ]\n}' Payload {\n  \"@context\": {\n    \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n    \"ex\": \"http://example.com/\"\n  },\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"sh:NodeShape\",\n      \"nodeKind\": \"sh:BlankNodeOrIRI\",\n      \"targetClass\": \"ex:Custom\",\n      \"property\": [\n        {\n          \"path\": \"ex:name\",\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:number\",\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:bool\",\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1\n        }\n      ]\n    }\n  ]\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"@type\": \"Schema\",\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/shacl-20170720.ttl\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a schema using POST"},{"location":"/docs/delta/api/current/kg-schemas-api.html#create-a-schema-using-put","text":"This alternative endpoint to create a schema is useful in case the json payload does not contain an @id but you want to specify one. The @id will be specified in the last segment of the endpoint URI.\nPUT /v1/schemas/{org_label}/{project_label}/{schema_id}\n  {...}\nNote that if the payload contains an @id different from the {schema_id}, the request will fail.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\" -d \\\n'{\n  \"@context\":  {\n      \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n      \"ex\": \"http://example.com/\"\n  },\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"sh:NodeShape\",\n      \"nodeKind\": \"sh:BlankNodeOrIRI\",\n      \"targetClass\": \"ex:Custom\",\n      \"property\": [\n        {\n          \"path\": \"ex:name\",\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:number\",\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:bool\",\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1\n        }\n      ]\n    }\n  ]\n}' Payload {\n  \"@context\": {\n    \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n    \"ex\": \"http://example.com/\"\n  },\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"sh:NodeShape\",\n      \"nodeKind\": \"sh:BlankNodeOrIRI\",\n      \"targetClass\": \"ex:Custom\",\n      \"property\": [\n        {\n          \"path\": \"ex:name\",\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:number\",\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:bool\",\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1\n        }\n      ]\n    }\n  ]\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"@type\": \"Schema\",\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/shacl-20170720.ttl\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a schema using PUT"},{"location":"/docs/delta/api/current/kg-schemas-api.html#update-a-schema","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to a resource without having had seen the previous revision of the resource, the last revision needs to be passed as a query parameter.\nPUT /v1/schemas/{org_label}/{project_label}/{schema_id}?rev={previous_rev}\n  {...}\n… where {previous_rev} is the last known revision number for the schema.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c?rev=1\" -d \\\n'{\n  \"@context\": {\n      \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n      \"ex\": \"http://example.com/\"\n  },\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"sh:NodeShape\",\n      \"nodeKind\": \"sh:BlankNodeOrIRI\",\n      \"targetClass\": \"ex:Custom\",\n      \"property\": [\n        {\n          \"path\": \"ex:name\",\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:number\",\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:bool\",\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1\n        }\n      ]\n    }\n  ]\n}' Payload {\n  \"@context\": {\n    \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n    \"ex\": \"http://example.com/\"\n  },\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"sh:NodeShape\",\n      \"nodeKind\": \"sh:BlankNodeOrIRI\",\n      \"targetClass\": \"ex:Custom\",\n      \"property\": [\n        {\n          \"path\": \"ex:name\",\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:number\",\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1\n        },\n        {\n          \"path\": \"ex:bool\",\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1\n        }\n      ]\n    }\n  ]\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"@type\": \"Schema\",\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/shacl-20170720.ttl\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 2,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:55:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:56:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Update a schema"},{"location":"/docs/delta/api/current/kg-schemas-api.html#tag-a-schema","text":"Links a schema revision to a specific name.\nTagging a schema is considered to be an update as well.\nPOST /v1/schemas/{org_label}/{project_label}/{schema_id}/tags?rev={previous_rev}\n  {\n    \"tag\": \"{name}\",\n    \"rev\": {rev}\n  }\n… where\n{previous_rev}: Number - is the last known revision for the resolver. {name}: String - label given to the schemas at specific revision. {rev}: Number - the revision to link the provided {name}.\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/schemas/myorg/myproj/myschema/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/tags?rev=2\" -d \\\n'{\n  \"tag\": \"mytag\",\n  \"rev\": 1\n}' Payload {\n  \"tag\": \"mytag\",\n  \"rev\": 1\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"@type\": \"Schema\",\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/shacl-20170720.ttl\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:55:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:58:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Tag a schema"},{"location":"/docs/delta/api/current/kg-schemas-api.html#deprecate-a-schema","text":"Locks the schema, so no further operations can be performed. It also deletes the schema from listing/querying results.\nDeprecating a schema is considered to be an update as well.\nDELETE /v1/schemas/{org_label}/{project_label}/{schema_id}?rev={previous_rev}\n… where {previous_rev} is the last known revision number for the schema.\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c?rev=5\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"@type\": \"Schema\",\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/shacl-20170720.ttl\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 6,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-17T14:55:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T15:05:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate a schema"},{"location":"/docs/delta/api/current/kg-schemas-api.html#fetch-a-schema","text":"When fetching a schema, the response format can be chosen through HTTP content negotiation, using the Accept HTTP header.\napplication/ld+json: JSON-LD output response. Further specifying the query parameter format=compacted|expanded will provide with the JSON-LD compacted document form or the expanded document form. application/n-triples: RDF n-triples response, as defined by the w3. text/vnd.graphviz: A DOT response.\nIf Accept: */* HTTP header is present, Nexus defaults to the JSON-LD output in compacted form.\nGET /v1/schemas/{org_label}/{project_label}/{schema_id}?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\" Response {\n  \"@context\": [\n    {\n      \"ex\": \"http://example.com/\",\n      \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n    },\n    \"https://bluebrain.github.io/nexus/contexts/shacl-20170720.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"@type\": \"Schema\",\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"NodeShape\",\n      \"nodeKind\": \"BlankNode:OrIRI\",\n      \"property\": [\n        {\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1,\n          \"path\": \"ex:name\"\n        },\n        {\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1,\n          \"path\": \"ex:bool\"\n        },\n        {\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1,\n          \"path\": \"ex:number\"\n        }\n      ],\n      \"targetClass\": \"ex:Custom\"\n    }\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/shacl-20170720.ttl\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-17T14:55:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T15:05:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch a schema"},{"location":"/docs/delta/api/current/kg-schemas-api.html#fetch-a-schema-original-payload","text":"GET /v1/schemas/{org_label}/{project_label}/{schema_id}/source?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/source\" Response {\n  \"@context\": [\n    {\n      \"ex\": \"http://example.com/\",\n      \"this\": \"https://nexus.example.com/v1/schemas/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c/shapes\",\n    },\n    \"https://bluebrain.github.io/nexus/contexts/shacl-20170720.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n  \"@type\": \"Schema\",\n  \"shapes\": [\n    {\n      \"@id\": \"this:MyShape\",\n      \"@type\": \"NodeShape\",\n      \"nodeKind\": \"BlankNode:OrIRI\",\n      \"property\": [\n        {\n          \"datatype\": \"xsd:string\",\n          \"minCount\": 1,\n          \"path\": \"ex:name\"\n        },\n        {\n          \"datatype\": \"xsd:boolean\",\n          \"minCount\": 1,\n          \"path\": \"ex:bool\"\n        },\n        {\n          \"datatype\": \"xsd:integer\",\n          \"minCount\": 1,\n          \"path\": \"ex:number\"\n        }\n      ],\n      \"targetClass\": \"ex:Custom\"\n    }\n  ]\n}","title":"Fetch a schema original payload"},{"location":"/docs/delta/api/current/kg-schemas-api.html#list-schemas","text":"GET /v1/schemas/{org_label}/{project_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&q={search}&sort={sort}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting schemas based on their deprecation status {rev}: Number - can be used to filter the resulting schemas based on their revision value {type}: Iri - can be used to filter the resulting schemas based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting schemas based on their creator {updatedBy}: Iri - can be used to filter the resulting schemas based on the person which performed the last update {search}: String - can be provided to select only the schemas in the collection that have attribute values matching (containing) the provided string {sort}: String - can be used to sort schemas based on a payloads’ field. This parameter can appear multiple times to enable sorting by multiple fields\nExample\nRequest curl \"https://nexus.example.com/v1/schemas/myorg/myproj\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/schemas/myschema2\",\n      \"@type\": \"https://bluebrain.github.io/nexus/vocabulary/Schema\",\n      \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/base:e1729302-35b8-4d80-97b2-d63c984e2b5c\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/shacl-20170720.ttl\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-17T14:55:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-17T15:05:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ],\n  \"_next\": \"https://nexus.example.com/v1/schemas/myorg/myproj?after=%5B1559045718752,%22https://bluebrain.github.io/nexus/schemas/myschema29%22%5D\"\n}","title":"List schemas"},{"location":"/docs/delta/api/current/kg-resolvers-api.html","text":"","title":"Resolvers"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#resolvers","text":"Resolvers are rooted in the /v1/resolvers/{org_label}/{project_label} collection and are used in the following scenarios:\nBring the content of the owl:imports predicate for schema resources. The value is the @id of the resource. E.g.: You can define owl imports on a schema, as follows \"owl:imports\": \"http://example.com/myid\". The resolver will try to find a resource with \"@id\": \"http://example.com/myid\" and if found, will bring the payload into the original resource. Bring the content of the @context links. The value is the @id of the resource. E.g.: A resource might define the context as follows: \"@context\": \"http://example.com/id\". The resolver will try to find a resource with \"@id\": \"http://example.com/id\" and if found, will bring the payload into the original resource.\nEach resolver…\nbelongs to a project identifier by the label {project_label} inside an organization identifier by the label {org_label} it is validated against the resolver schema.\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying resolvers, the caller must have resolvers/write permissions on the current path of the project or the ancestor paths. When reading resolvers, the caller must have resources/read permissions on the current path of the project or the ancestor paths.","title":"Resolvers"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#resolver-types","text":"There are several types of resolvers, which perform resolution in different scopes.","title":"Resolver types"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#inproject-resolver","text":"The scope of the resolution is the current project where the resource resides. In other words:\nSchema A can import schema B using the owl:import as long as schema B is located on the same project as schema A. Resource A can reference resource’s context B (inside @context) as long as resource B is located on the same project as resource A.\nThis resolver gets automatically created when the project is created and it cannot be modified.\nInProject resolver payload\n{\n    \"@id\": \"nxv:InProject\",\n    \"@type\": [ \"InProject\", \"Resolver\" ],\n    \"priority\": {priority},\n}\nwhere {priority} is a numeric value (from 1 - 100) which defines the resolution priority when attempting to find the resource with a particular @id.","title":"InProject resolver"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#crossproject-resolver","text":"The scope of the resolution is the collections of projects P defined on the resolver. CrossProject resolution also defines a collection of identities I to enforce ACLs. In other words:\nSchema A can import schema B using the owl:import as long as schema B is located on some of the projects from the collection P and as long I have resources/read permissions on the schema B project. Resource A can reference resource’s context B (inside @context) as long as resource B is located on some of the projects from the collection P and as long as I have resources/read permissions on the schema B project.\nCrossProject resolver payload\n{\n  \"@id\": \"{someid}\",\n  \"@type\": [\"Resolver\", \"CrossProject\"],\n  \"resourceTypes\": [\"{resourceType}\", ...],\n  \"projects\": [\"{project}\", ... ],\n  \"identities\": [ {_identity_}, {...} ],\n  \"priority\": 50\n}\nwhere…\n{resourceType}: Iri - resolves only the resources with @type containing {resourceType}. This field is optional. {priority}: Number - value (from 1 - 100) which defines the resolution priority when attempting to find the resource with a particular @id. {project}: String - the user friendly reference to the project from where the resolution process will attempt to find the @id’s. It follows the format {organization}/{project}. _identity_: Json object - the identity against which to enforce ACLs during resolution process. {someid}: Iri - the @id value for this resolver.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver\" -d \\\n'{\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n}' Payload {\n  \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myresolver\",\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myresolver\",\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"CrossProject resolver"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#create-a-resolver-using-post","text":"POST /v1/resolvers/{org_label}/{project_label}\n  {...}\nThe json payload:\nIf the @id value is found on the payload, this @id will be used. If the @id value is not found on the payload, an @id will be generated as follows: base:{UUID}. The base is the prefix defined on the resolver’s project ({project_label}).\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resolvers/myorg/myproj\" -d \\\n'{\n  \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myresolver\",\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n}' Payload {\n  \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myresolver\",\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myresolver\",\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a resolver using POST"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#create-a-resolver-using-put","text":"This alternative endpoint to create a resolver is useful in case the json payload does not contain an @id but you want to specify one. The @id will be specified in the last segment of the endpoint URI.\nPUT /v1/resolvers/{org_label}/{project_label}/{resolver_id}\n  {...}\nNote that if the payload contains an @id different from the {resolver_id}, the request will fail.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver\" -d \\\n'{\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n}' Payload {\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myresolver\",\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a resolver using PUT"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#update-a-resolver","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to a resolver without having had seen the previous revision of the resolver, the last revision needs to be passed as a query parameter.\nPUT /v1/resolvers/{org_label}/{project_label}/{resolver_id}?rev={previous_rev}\n  {...}\n… where {previous_rev} is the last known revision number for the resolver.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver?rev=1\" -d \\\n'{\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n}' Payload {\n  \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myresolver\",\n  \"@type\": [\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myresolver\",\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 2,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:10:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Update a resolver"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#tag-a-resolver","text":"Links a resolver revision to a specific name.\nTagging a resolver is considered to be an update as well.\nPOST /v1/resolvers/{org_label}/{project_label}/{resolver_id}/tags?rev={previous_rev}\n  {\n    \"tag\": \"{name}\",\n    \"rev\": {rev}\n  }\n… where\n{previous_rev}: Number - the last known revision for the resolver. {name}: String - label given to the resolver at specific revision. {rev}: Number - the revision to link the provided {name}.\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver/tags?rev=2\" -d \\\n'{\n  \"tag\": \"mytag\",\n  \"rev\": 1\n}' Payload {\n  \"tag\": \"mytag\",\n  \"rev\": 1\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myresolver\",\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:25:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Tag a resolver"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#deprecate-a-resolver","text":"Locks the resolver, so no further operations can be performed. It will also not be taken into account in the resolution process.\nDeprecating a resolver is considered to be an update as well.\nDELETE /v1/resolvers/{org_label}/{project_label}/{resolver_id}?rev={previous_rev}\n… where {previous_rev} is the last known revision number for the resolver.\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver?rev=5\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myresolver\",\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 6,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:25:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate a resolver"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#fetch-a-resolver","text":"When fetching a resolver, the response format can be chosen through HTTP content negotiation, using the Accept HTTP header.\napplication/ld+json: JSON-LD output response. Further specifying the query parameter format=compacted|expanded will provide with the JSON-LD compacted document form or the expanded document form. application/n-triples: RDF n-triples response, as defined by the w3. text/vnd.graphviz: A DOT response.\nIf Accept: */* HTTP header is present, Nexus defaults to the JSON-LD output in compacted form.\nGET /v1/resolvers/{org_label}/{project_label}/{resolver_id}?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resolver.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"nxv:myresolver\",\n\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"@type\": \"User\",\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50,\n  \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T10:25:00.801Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch a resolver"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#fetch-a-resolver-original-payload","text":"GET /v1/resolvers/{org_label}/{project_label}/{resolver_id}/source?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver/source Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resolver.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"nxv:myresolver\",\n\n  \"@type\": [\n    \"Resolver\",\n    \"CrossProject\"\n  ],\n  \"projects\": [\n    \"org1/project1\",\n    \"org1/project2\"\n  ],\n  \"identities\": [\n    {\n      \"@type\": \"User\",\n      \"realm\": \"myrealm\",\n      \"subject\": \"name\"\n    }\n  ],\n  \"priority\": 50\n}","title":"Fetch a resolver original payload"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#list-resolvers","text":"GET /v1/resolvers/{org_label}/{project_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&q={search}&sort={sort}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting resolvers based on their deprecation status {rev}: Number - can be used to filter the resulting resolvers based on their revision value {type}: Iri - can be used to filter the resulting resolvers based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting resolvers based on their creator {updatedBy}: Iri - can be used to filter the resulting resolvers based on the person which performed the last update {search}: String - can be provided to select only the resolvers in the collection that have attribute values matching (containing) the provided string {sort}: String - can be used to sort resolvers based on a payloads’ field. This parameter can appear multiple times to enable sorting by multiple fields\nExample\nRequest curl \"https://nexus.example.com/v1/resolvers/myorg/myproj\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 2,\n  \"_results\": [\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/InProject\",\n      \"@type\": [\n        \"https://bluebrain.github.io/nexus/vocabulary/Resolver\",\n        \"https://bluebrain.github.io/nexus/vocabulary/InProject\"\n      ],\n      \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:InProject/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:InProject/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:InProject\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_createdAt\": \"2018-09-18T09:50:00.801Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T10:00:00.801Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_rev\": 1,\n      \"_deprecated\": true\n    },\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myresolver\",\n      \"@type\": [\n        \"https://bluebrain.github.io/nexus/vocabulary/Resolver\",\n        \"https://bluebrain.github.io/nexus/vocabulary/CrossProject\"\n      ],\n      \"_incoming\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/resolvers/myorg/myproject/nxv:myresolver\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resolver\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_createdAt\": \"2018-09-18T09:58:00.801Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T10:25:00.801Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_rev\": 4,\n      \"_deprecated\": true\n    }\n  ],\n  \"_next\": \"https://nexus.example.com/v1/resolvers/myorg/myproj?after=%5B1559045718752,%22https://bluebrain.github.io/nexus/vocabulary/myresolver29%22%5D\"\n}","title":"List resolvers"},{"location":"/docs/delta/api/current/kg-resolvers-api.html#fetch-resource-using-resolvers","text":"Fetches a resource using the provided resolver.\nIf the resolver segment ({resolver_id}) is _ the resource is fetched from the first resolver in the requested project ({org_label}/{project_label}). The resolvers are ordered by its priority field.\nGET /v1/resolvers/{org_label}/{project_label}/{resolver_id}/{resource_id}?rev={rev}&tag={tag}\n… where\n{resource_id}: Iri - the @id value of the resource to be retrieved. {rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/resolvers/myorg/myproj/nxv:myresolver/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\" Response {\n  \"@context\": [\n    {\n      \"@vocab\": \"http://example.com/\",\n      \"ex\": \"http://example.com/\"\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"Custom\",\n  \"bool\": false,\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T15:02:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch resource using resolvers"},{"location":"/docs/delta/api/current/views/index.html","text":"","title":"Views"},{"location":"/docs/delta/api/current/views/index.html#views","text":"Views are rooted in the /v1/views/{org_label}/{project_label} collection and are used to index the selected resources into a bucket.\nEach view…\nbelongs to a project identifier by the label {project_label} inside an organization identifier by the label {org_label} it is validated against the view schema.\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying views, the caller must have views/write permissions on the current path of the project or the ancestor paths. When querying views, the caller must have views/query permissions on the current path of the project or the ancestor paths. When reading views, the caller must have resources/read permissions on the current path of the project or the ancestor paths.","title":"Views"},{"location":"/docs/delta/api/current/views/index.html#view-types","text":"There are several types of views, which relies on different technology to perform the indexing","title":"View types"},{"location":"/docs/delta/api/current/views/index.html#sparqlview","text":"A view that creates a Sparql namespace. which converts the targeted Json resources intro RDF triples and stores them in a Sparql store.\nThe triples created on each view are isolated from triples created on another view.\nMore information","title":"SparqlView"},{"location":"/docs/delta/api/current/views/index.html#elasticsearchview","text":"A view which stores the targeted Json resources into an ElasticSearch Document.\nThe Documents created on each view are isolated from Documents created on other views by using different ElasticSearch indices.\nMore information","title":"ElasticSearchView"},{"location":"/docs/delta/api/current/views/index.html#compositeview","text":"A view which is composed by multiple sources and projections.\nA source defines from where to retrieve the resources. It is the input for the indexing in a later stage.\nA projection defines the type of indexing and the transformations to apply to the data.\nComposite views are useful when aggregating data across multiple projects (local or remote) using multiple sources. Afterwards, by defining multiple projections, the data can be adapted to the client needs.\nMore information","title":"CompositeView"},{"location":"/docs/delta/api/current/views/index.html#aggregateelasticsearchview","text":"This view describes an aggregation of multiple existing ElasticSearch views. This approach is useful for searching documents across multiple ElasticSearch views.\nWhen querying an AggregateElasticSearchView, the query is performed on each of the described views and the results are aggregated by ElasticSearch.\nMore information","title":"AggregateElasticSearchView"},{"location":"/docs/delta/api/current/views/index.html#aggregatesparqlview","text":"This view describes an aggregation of multiple existing Sparql views. This approach is useful for searching triples across multiple Sparql views.\nWhen querying an AggregateSparqlView, the query is performed on each of the described views. The Sparql store does not have means for aggregating the query and for that reason this approach is very limited.\nMore information","title":"AggregateSparqlView"},{"location":"/docs/delta/api/current/views/index.html#endpoints","text":"In the following sections we describe the endpoints that apply for every view subtype.\nSome views have other endpoints to deal with specific functionality. Please refer to each view for further information.","title":"Endpoints"},{"location":"/docs/delta/api/current/views/index.html#create-a-view-using-post","text":"POST /v1/view/{org_label}/{project_label}\n  {...}\nThe json payload:\nIf the @id value is found on the payload, this @id will be used. If the @id value is not found on the payload, an @id will be generated as follows: base:{UUID}. The base is the prefix defined on the view’s project ({project_label}).","title":"Create a view using POST"},{"location":"/docs/delta/api/current/views/index.html#create-a-view-using-put","text":"This alternative endpoint to create a view is useful in case the json payload does not contain an @id but you want to specify one. The @id will be specified in the last segment of the endpoint URI.\nPUT /v1/views/{org_label}/{project_label}/{view_id}\n  {...}\nNote that if the payload contains an @id different from the {view_id}, the request will fail.","title":"Create a view using PUT"},{"location":"/docs/delta/api/current/views/index.html#update-a-view","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to a view without having had seen the previous revision of the view, the last revision needs to be passed as a query parameter.\nPUT /v1/views/{org_label}/{project_label}/{view_id}?rev={previous_rev}\n  {...}\n… where {previous_rev} is the last known revision number for the view.","title":"Update a View"},{"location":"/docs/delta/api/current/views/index.html#tag-a-view","text":"Links a view’s revision to a specific name.\nTagging a view is considered to be an update as well.\nPOST /v1/views/{org_label}/{project_label}/{view_id}/tags?rev={previous_rev}\n  {\n    \"tag\": \"{name}\",\n    \"rev\": {rev}\n  }\n… where\n{previous_rev}: Number - the last known revision for the resolver. {name}: String - label given to the view at specific revision. {rev}: Number - the revision to link the provided {name}.\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/tags?rev=2\" -d \\\n'{\n  \"tag\": \"mytag\",\n  \"rev\": 1\n}' Payload {\n  \"tag\": \"mytag\",\n  \"rev\": 1\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myview\",\n  \"@type\": [\n    \"ElasticSearchView\",\n    \"View\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T16:52:22.748Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Tag a View"},{"location":"/docs/delta/api/current/views/index.html#deprecate-a-view","text":"Locks the view, so no further operations can be performed. It also stops indexing any more resources into it.\nDeprecating a view is considered to be an update as well.\nDELETE /v1/views/{org_label}/{project_label}/{view_id}?rev={previous_rev}\n… where {previous_rev} is the last known revision number for the view.\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview?rev=5\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myview\",\n  \"@type\": [\n    \"ElasticSearchView\",\n    \"View\"\n  ],\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 6,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T17:10:22.748Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate a view"},{"location":"/docs/delta/api/current/views/index.html#fetch-a-view","text":"When fetching a view, the response format can be chosen through HTTP content negotiation, using the Accept HTTP header.\napplication/ld+json: JSON-LD output response. Further specifying the query parameter format=compacted|expanded will provide with the JSON-LD compacted document form or the expanded document form. application/n-triples: RDF n-triples response, as defined by the w3. text/vnd.graphviz: A DOT response.\nIf Accept: */* HTTP header is present, Nexus defaults to the JSON-LD output in compacted form.\nGET /v1/views/{org_label}/{project_label}/{view_id}?rev={rev}&tag={tag}\nwhere … - {rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. - {tag}: String - the targeted tag to be fetched. This field is optional. {rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/view.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"nxv:myview2\",\n  \"@type\": [\n    \"ElasticSearchView\",\n    \"View\"\n  ],\n  \"includeMetadata\": false,\n  \"includeDeprecated\": false,\n  \"mapping\": {\n    \"dynamic\": false,\n    \"properties\": {\n      \"@id\": {\n        \"type\": \"keyword\"\n      },\n      \"@type\": {\n        \"type\": \"keyword\"\n      },\n      \"bool\": {\n        \"type\": \"boolean\"\n      },\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"number\": {\n        \"type\": \"long\"\n      }\n    }\n  },\n  \"resourceSchemas\": [\n    \"https://bluebrain.github.io/nexus/schemas/myschema\"\n  ],\n  \"resourceTypes\": [],\n  \"sourceAsText\": false,\n  \"_uuid\": \"4f90ceff-45b7-442d-8536-d41705321d50\",\n  \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-18T17:10:22.748Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_rev\": 4,\n  \"_deprecated\": true\n}","title":"Fetch a view"},{"location":"/docs/delta/api/current/views/index.html#fetch-a-view-original-payload","text":"GET /v1/views/{org_label}/{project_label}/{view_id}/source?rev={rev}&tag={tag}\nwhere … - {rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. - {tag}: String - the targeted tag to be fetched. This field is optional. {rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/source\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/view.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"nxv:myview2\",\n  \"@type\": [\n    \"ElasticSearchView\",\n    \"View\"\n  ],\n  \"includeMetadata\": false,\n  \"includeDeprecated\": false,\n  \"mapping\": {\n    \"dynamic\": false,\n    \"properties\": {\n      \"@id\": {\n        \"type\": \"keyword\"\n      },\n      \"@type\": {\n        \"type\": \"keyword\"\n      },\n      \"bool\": {\n        \"type\": \"boolean\"\n      },\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"number\": {\n        \"type\": \"long\"\n      }\n    }\n  },\n  \"resourceSchemas\": [\n    \"https://bluebrain.github.io/nexus/schemas/myschema\"\n  ],\n  \"resourceTypes\": [],\n  \"sourceAsText\": false,\n  \"_uuid\": \"4f90ceff-45b7-442d-8536-d41705321d50\"\n}","title":"Fetch a view original payload"},{"location":"/docs/delta/api/current/views/index.html#list-views","text":"GET /v1/views/{org_label}/{project_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&q={search}&sort={sort}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting views based on their deprecation status {rev}: Number - can be used to filter the resulting views based on their revision value {type}: Iri - can be used to filter the resulting views based on their @type value. This parameter can appear multiple times, filtering further the @type value {createdBy}: Iri - can be used to filter the resulting views based on their creator {updatedBy}: Iri - can be used to filter the resulting views based on the person which performed the last update {search}: String - can be provided to select only the views in the collection that have attribute values matching (containing) the provided string {sort}: String - can be used to sort views based on a payloads’ field. This parameter can appear multiple times to enable sorting by multiple fields\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 3,\n  \"_results\": [\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/defaultElasticIndex\",\n      \"@type\": [\n        \"https://bluebrain.github.io/nexus/vocabulary/View\",\n        \"https://bluebrain.github.io/nexus/vocabulary/Alpha\",\n        \"https://bluebrain.github.io/nexus/vocabulary/ElasticSearchView\"\n      ],\n      \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:defaultElasticIndex/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:defaultElasticIndex/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:defaultElasticIndex\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T17:10:22.748Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    },\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/defaultSparqlIndex\",\n      \"@type\": [\n        \"https://bluebrain.github.io/nexus/vocabulary/View\",\n        \"https://bluebrain.github.io/nexus/vocabulary/SparqlView\"\n      ],\n      \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:defaultSparqlIndex/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:defaultSparqlIndex/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:defaultSparqlIndex\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T17:10:22.748Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    },\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myview2\",\n      \"@type\": [\n        \"https://bluebrain.github.io/nexus/vocabulary/ElasticSearchView\",\n        \"https://bluebrain.github.io/nexus/vocabulary/View\",\n        \"https://bluebrain.github.io/nexus/vocabulary/Alpha\"\n      ],\n      \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-18T17:10:22.748Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ],\n  \"_next\": \"https://nexus.example.com/v1/views/myorg/myproj?after=%5B1559045718752,%22https://bluebrain.github.io/nexus/vocabulary/myview29%22%5D\"\n}","title":"List views"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html","text":"","title":"ElasticSearchView"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#elasticsearchview","text":"This view creates an ElasticSearch index and stores the targeted Json resources into an ElasticSearch Document.\nThe documents created on each view are isolated from documents created on other views by using different ElasticSearch indices.\nA default view gets automatically created when the project is created but other views can be created.","title":"ElasticSearchView"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#processing-pipeline","text":"An asynchronous process gets trigger for every view. This process can be visualized as a pipeline with different stages.\nThe first stage is the input of the pipeline: a stream of events scoped for the project where the view was created.\nThe last stage takes the JSON document, generated through the pipeline steps, and stores it as a Document in an ElasticSearch index","title":"Processing pipeline"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#payload","text":"{\n  \"@id\": \"{someid}\",\n  \"@type\": \"ElasticSearchView\",\n  \"resourceSchemas\": [ \"{resourceSchema}\", ...],\n  \"resourceTypes\": [ \"{resourceType}\", ...],\n  \"resourceTag\": \"{tag}\",\n  \"sourceAsText\": {sourceAsText},\n  \"includeMetadata\": {includeMetadata},\n  \"includeDeprecated\": {includeDeprecated},\n  \"mapping\": _elasticsearch mapping_\n}\nwhere…\n{resourceSchema}: Iri - Selects only resources that are validated against the provided schema Iri. This field is optional. {resourceType}: Iri - Select only resources of the provided type Iri. This field is optional. {tag}: String - Selects only resources with the provided tag. This field is optional. _elasticsearch mapping_: Json object - Defines the value types for the Json keys, as stated at the ElasticSearch mapping documentation. {sourceAsText}: Boolean - If true, the resource’s payload will be stored in the ElasticSearch document as a single escaped string value of the key _original_source. If false, the resource’s payload will be stored normally in the ElasticSearch document. The default value is false. {includeMetadata}: Boolean - If true, the resource’s nexus metadata (_constrainedBy, _deprecated, …) will be stored in the ElasticSearch document. Otherwise it won’t. The default value is false. {includeDeprecated}: Boolean - If true, deprecated resources are also indexed. The default value is false. {someid}: Iri - The @id value for this view.","title":"Payload"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#example","text":"The following example creates an ElasticSearch view that will index resources validated against the schema with id https://bluebrain.github.io/nexus/schemas/myschema. If a resource is deprecated, it won’t be selected for indexing.\nThe resulting ElasticSearch Documents fields will be indexed according to the provided mapping rules and they won’t include the resource metadata fields.\n{\n  \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myview\",\n  \"@type\": [\n    \"ElasticSearchView\"\n  ],\n  \"mapping\": {\n    \"dynamic\": false,\n    \"properties\": {\n      \"@id\": {\n        \"type\": \"keyword\"\n      },\n      \"@type\": {\n        \"type\": \"keyword\"\n      },\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"number\": {\n        \"type\": \"long\"\n      },\n      \"bool\": {\n        \"type\": \"boolean\"\n      }\n    }\n  },\n  \"includeMetadata\": false,\n  \"includeDeprecated\": false,\n  \"sourceAsText\": false,\n  \"resourceSchemas\": [\n    \"https://bluebrain.github.io/nexus/schemas/myschema\"\n  ],\n  \"resourceTypes\": []\n}","title":"Example"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#endpoints","text":"The following sections describe the endpoints that are specific to an ElasticSearchView.\nThe general view endpoints are described on the parent page.","title":"Endpoints"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#search-documents","text":"POST /v1/views/{org_label}/{project_label}/{view_id}/_search\n  {...}\nThe supported payload is defined on the ElasticSearch documentation\nThe string documents is used as a prefix of the default ElasticSearch view_id\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/_search\" -d \\\n'{\n  \"query\": {\n    \"term\": {\n      \"_deprecated\": true\n    }\n  }\n}' Payload {\n  \"query\": {\n    \"term\": {\n      \"_deprecated\": true\n    }\n  }\n} Response {\n  \"_shards\": {\n    \"failed\": 0,\n    \"skipped\": 0,\n    \"successful\": 0,\n    \"total\": 0\n  },\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_score\": 1.2039728,\n        \"_id\": \"http://example.com/myview\",\n        \"_index\": \"kg_v1_803da242-d510-4e1a-a12d-d0e0b7018a41_684bd815-9273-46f4-ac1c-0383d4a98254_1\",\n        \"_source\": {\n          \"@id\": \"http://example.com/myview\",\n          \"@type\": [\n            \"https://bluebrain.github.io/nexus/vocabulary/View\",\n            \"https://bluebrain.github.io/nexus/vocabulary/ElasticSearchView\",\n            \"https://bluebrain.github.io/nexus/vocabulary/Alpha\"\n          ],\n          \"_original_source\": \"{\\\"mapping\\\":\\\"{\\\\\\\"dynamic\\\\\\\":false,\\\\\\\"properties\\\\\\\":{\\\\\\\"@id\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"keyword\\\\\\\"},\\\\\\\"@type\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"keyword\\\\\\\"},\\\\\\\"name\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"keyword\\\\\\\"},\\\\\\\"number\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"long\\\\\\\"},\\\\\\\"bool\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"boolean\\\\\\\"}}}\\\",\\\"_uuid\\\":\\\"89dd9858-cf87-4c46-94c2-24da0fcae0aa\\\",\\\"@context\\\":\\\"https://bluebrain.github.io/nexus/contexts/view\\\",\\\"@type\\\":[\\\"View\\\",\\\"ElasticSearchView\\\"],\\\"includeMetadata\\\":true,\\\"sourceAsText\\\":false}\",\n          \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/incoming\",\n          \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/outgoing\",\n          \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview\",\n          \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n          \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n          \"_rev\": 6,\n          \"_deprecated\": true,\n          \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n          \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n          \"_updatedAt\": \"2018-09-18T17:10:22.748Z\",\n          \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n        },\n        \"_type\": \"doc\"\n      }\n    ],\n    \"max_score\": 1.2039728,\n    \"total\": 1\n  },\n  \"timed_out\": false,\n  \"took\": 11\n}","title":"Search Documents"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#fetch-statistics","text":"GET /v1/views/{org_label}/{project_label}/{view_id}/statistics\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/statistics\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/statistics.json\",\n  \"@type\": \"ViewStatistics\",\n  \"totalEvents\": 3754,\n  \"processedEvents\": 3754,\n  \"evaluatedEvents\": 3754,\n  \"remainingEvents\": 0,\n  \"discardedEvents\": 0,\n  \"failedEvents\": 0,\n  \"delayInSeconds\": 0,\n  \"lastEventDateTime\": \"2020-01-31T15:04:44.021Z\",\n  \"lastProcessedEventDateTime\": \"2020-01-31T15:04:44.021Z\"\n}\nwhere…\ntotalEvents - total number of events in the project processedEvents - number of events that have been considered by the view remainingEvents - number of events that remain to be considered by the view discardedEvents - number of events that have been discarded (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the view) evaluatedEvents - number of events that have been used to update an index lastEventDateTime - timestamp of the last event in the project lastProcessedEventDateTime - timestamp of the last event processed by the view delayInSeconds - number of seconds between the last processed event timestamp and the last known event timestamp","title":"Fetch statistics"},{"location":"/docs/delta/api/current/views/elasticsearch-view-api.html#restart-view","text":"This endpoint restarts the view indexing process. It does not delete the created indices but it overrides the resource Document when going through the event log.\nDELETE /v1/views/{org_label}/{project_label}/{view_id}/offset\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/offset\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/offset.json\",\n  \"@type\": \"NoOffset\"\n}","title":"Restart view"},{"location":"/docs/delta/api/current/views/sparql-view-api.html","text":"","title":"SparqlView"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#sparqlview","text":"This view creates a Blazegraph namespace and stores the targeted resources as RDF triples into an Sparql store.\nThe triples created on each view are isolated from triples created on another view through the namespace.\nA default view gets automatically created when the project is created but other views can be created.","title":"SparqlView"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#processing-pipeline","text":"An asynchronous process gets trigger for every view. This process can be visualized as a pipeline with different stages.\nThe first stage is the input of the pipeline: a stream of events scoped for the project where the view was created.\nThe last stage takes the resource, generated through the pipeline steps, and extracts its RDF triples to store them in a Blazegraph namespace.","title":"Processing pipeline"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#payload","text":"{\n  \"@id\": \"{someid}\",\n  \"@type\": \"SparqlView\",\n  \"resourceSchemas\": [ \"{resourceSchema}\", ...],\n  \"resourceTypes\": [ \"{resourceType}\", ...],\n  \"resourceTag\": \"{tag}\",\n  \"includeMetadata\": {includeMetadata},\n  \"includeDeprecated\": {includeDeprecated}\n}\nwhere…\n{resourceSchema}: Iri - Selects only resources that are validated against the provided schema Iri. This field is optional. {resourceType}: Iri - Selects only resources of the provided type Iri. This field is optional. {tag}: String - Selects the resources with the provided tag. This field is optional. {includeMetadata}: Boolean - If true, the resource’s nexus metadata (_constrainedBy, _deprecated, …) will be stored in the Sparql graph. Otherwise it won’t. The default value is false. {includeDeprecated}: Boolean - If true, deprecated resources are also indexed. The default value is false.","title":"Payload"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#example","text":"The following example creates an Sparql view that will index resources not deprecated and with tag mytag.\nThe resulting RDF triples will contain the resources metadata.\n{\n  \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myview\",\n  \"@type\": [\n    \"SparqlView\"\n  ],\n  \"includeMetadata\": true,\n  \"includeDeprecated\": false,\n  \"resourceTag\": \"mytag\"\n}","title":"Example"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#endpoints","text":"The following sections describe the endpoints that are specific to an SparqlView.\nThe general view endpoints are described on the parent page.","title":"Endpoints"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#sparql-query","text":"Provides search functionality on the SparqlView content.\nPOST /v1/views/{org_label}/{project_label}/{view_id}/sparql\n  {query}\nor\nGET /v1/views/{org_label}/{project_label}/{view_id}/sparql?query={query}\nIn both endpoints, {query} is defined by the SPARQL documentation\nThe Content-Type HTTP header for POST request is application/sparql-query.\nExample\nRequest curl -XPOST -H \"Content-Type: application/sparql-query\" \"https://nexus.example.com/v1/views/myorg/myproj/graph/sparql\" -d \\\n'SELECT ?s where {?s ?p ?o} LIMIT 2' Response {\n  \"head\": {\n    \"vars\": [\n      \"s\"\n    ]\n  },\n  \"results\": {\n    \"bindings\": [\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/myview\"\n        }\n      },\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/other\"\n        }\n      }\n    ]\n  }\n}","title":"SPARQL query"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#fetch-statistics","text":"GET /v1/views/{org_label}/{project_label}/{view_id}/statistics\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/statistics\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/statistics.json\",\n  \"@type\": \"ViewStatistics\",\n  \"totalEvents\": 3754,\n  \"processedEvents\": 3754,\n  \"evaluatedEvents\": 3754,\n  \"remainingEvents\": 0,\n  \"discardedEvents\": 0,\n  \"failedEvents\": 0,\n  \"delayInSeconds\": 0,\n  \"lastEventDateTime\": \"2020-01-31T15:04:44.021Z\",\n  \"lastProcessedEventDateTime\": \"2020-01-31T15:04:44.021Z\"\n}\nwhere…\ntotalEvents - total number of events in the project processedEvents - number of events that have been considered by the view remainingEvents - number of events that remain to be considered by the view discardedEvents - number of events that have been discarded (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the view) evaluatedEvents - number of events that have been used to update an index lastEventDateTime - timestamp of the last event in the project lastProcessedEventDateTime - timestamp of the last event processed by the view delayInSeconds - number of seconds between the last processed event timestamp and the last known event timestamp","title":"Fetch statistics"},{"location":"/docs/delta/api/current/views/sparql-view-api.html#restart-view","text":"This endpoint restarts the view indexing process. It does not delete the created namespaces but it overrides the resource GRAPH when going through the event log.\nDELETE /v1/views/{org_label}/{project_label}/{view_id}/offset\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/offset\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/offset.json\",\n  \"@type\": \"NoOffset\"\n}","title":"Restart view"},{"location":"/docs/delta/api/current/views/composite-view-api.html","text":"","title":"CompositeView"},{"location":"/docs/delta/api/current/views/composite-view-api.html#compositeview","text":"This view is composed by multiple sources and projections.","title":"CompositeView"},{"location":"/docs/delta/api/current/views/composite-view-api.html#processing-pipeline","text":"An asynchronous process gets trigger for every view. This process can be visualized as a pipeline with different stages.\nThe first stage is the input of the pipeline: a stream of sources.\nThe last stage takes the resulting output from the pipeline and index it on the configured projection.","title":"Processing pipeline"},{"location":"/docs/delta/api/current/views/composite-view-api.html#sources","text":"A source defines the location where to retrieve the resources. It is the input of the pipeline.\nThere are 3 types of sources available.","title":"Sources"},{"location":"/docs/delta/api/current/views/composite-view-api.html#projecteventstream","text":"This source reads events in a streaming fashion from the current project event log.\nThe events are offered to the projections stage.\n{\n   \"sources\": [\n      {\n         \"@id\": \"{sourceId},\n         \"@type\": \"ProjectEventStream\",\n         \"resourceSchemas\": [ \"{resourceSchema}\", ...],\n         \"resourceTypes\": [ \"{resourceType}\", ...],\n         \"resourceTag\": \"{tag}\"\n      }\n   ],\n   ...\n}\nwhere…\n{sourceId}: Iri - The identifier of the source. This field is optional. When missing, a randomly generated Iri will be assigned. {resourceSchema}: Iri - Selects only resources that are validated against the provided schema Iri. This field is optional. {resourceType}: Iri - Select only resources of the provided type Iri. This field is optional. {tag}: String - Selects only resources with the provided tag. This field is optional.","title":"ProjectEventStream"},{"location":"/docs/delta/api/current/views/composite-view-api.html#crossprojecteventstream","text":"This source reads events in a streaming fashion from the defined project event log in the current Nexus deployment.\nThe specified list of identities will be used to retrieve the resources from the project. The target project must have resources/read permissions in order to read events.\nThe events are offered to the projections stage.\n{\n   \"sources\": [\n      {\n         \"@id\": \"{sourceId}\",\n         \"@type\": \"CrossProjectEventStream\",\n         \"project\": \"{project}\",\n         \"identities\": [ {_identity_}, {...} ],\n         \"resourceSchemas\": [ \"{resourceSchema}\", ...],\n         \"resourceTypes\": [ \"{resourceType}\", ...],\n         \"resourceTag\": \"{tag}\"\n      }\n   ],\n   ...\n}\nwhere…\n{sourceId}: Iri - The identifier of the source. This field is optional. When missing, a randomly generated Iri will be assigned. {project}: String - the target project (in the format ‘myorg/myproject’). _identity_: Json object - the identity against which to enforce ACLs during the resource retrieval process. {resourceSchema}: Iri - Selects only resources that are validated against the provided schema Iri. This field is optional. {resourceType}: Iri - Select only resources of the provided type Iri. This field is optional. {tag}: String - Selects only resources with the provided tag. This field is optional.","title":"CrossProjectEventStream"},{"location":"/docs/delta/api/current/views/composite-view-api.html#remoteprojecteventstream","text":"This source reads events in a streaming fashion from the defined project event log in a remote Nexus deployment.\nThe events are offered to the projections stage.\n{\n   \"sources\": [\n      {\n         \"@id\": \"{sourceId}\",\n         \"@type\": \"RemoteProjectEventStream\",\n         \"project\": \"{project}\",\n         \"endpoint\": \"{endpoint}\",\n         \"token\": \"{token}\",\n         \"resourceSchemas\": [ \"{resourceSchema}\", ...],\n         \"resourceTypes\": [ \"{resourceType}\", ...],\n         \"resourceTag\": \"{tag}\"\n      }\n   ],\n   ...\n}\nwhere…\n{sourceId}: Iri - The identifier of the source. This field is optional. When missing, a randomly generated Iri will be assigned. {project}: String - the remote project (in the format ‘myorg/myproject’). {endpoint}: Iri - the Nexus deployment endpoint. {token}: String - the Nexus deployment token. This field is optional. When missing, the Nexus endpoint will be accessed without authentication. {resourceSchema}: Iri - Selects only resources that are validated against the provided schema Iri. This field is optional. {resourceType}: Iri - Select only resources of the provided type Iri. This field is optional. {tag}: String - Selects only resources with the provided tag. This field is optional.","title":"RemoteProjectEventStream"},{"location":"/docs/delta/api/current/views/composite-view-api.html#intermediate-sparql-space","text":"After the events are gathered from each source, the following steps are executed:\nConvert event into a resource. Discard undesired resources. Store the RDF triple representation of a resource in an intermediate Sparql space. This space will be used by the projections in the following pipeline steps.","title":"Intermediate Sparql space"},{"location":"/docs/delta/api/current/views/composite-view-api.html#projections","text":"A projection defines the type of indexing and a query to transform the data. It is the output of the pipeline.\nThere are 2 types of projections available","title":"Projections"},{"location":"/docs/delta/api/current/views/composite-view-api.html#elasticsearchprojection","text":"This projection executes the following steps:\nDiscard undesired resources. Transform the resource by executing an SPARQL construct query against the intermediate Sparql space. Convert the resulting RDF triples into JSON using the provided JSON-LD context. Stores the resulting JSON as a Document in an ElasticSearch index.\n{\n   \"projections\": [\n      {\n         \"@id\": \"{projectionId}\",\n         \"@type\": \"ElasticSearchProjection\",\n         \"mapping\": _elasticsearch mapping_,\n         \"query\": \"{query}\",\n         \"context\": _context_,\n         \"resourceSchemas\": [ \"{resourceSchema}\", ...],\n         \"resourceTypes\": [ \"{resourceType}\", ...],\n         \"resourceTag\": \"{tag}\",\n         \"includeMetadata\": {includeMetadata},\n         \"includeDeprecated\": {includeDeprecated}\n      }\n   ],\n   ...\n}\nwhere…\n{projectionId}: Iri - The identifier of the projection. This field is optional. When missing, a randomly generated Iri will be assigned. _elasticsearch mapping_: Json object - Defines the value types for the Json keys, as stated at the ElasticSearch mapping documentation. {resourceSchema}: Iri - Selects only resources that are validated against the provided schema Iri to perform the query. This field is optional. {resourceType}: Iri - Select only resources of the provided type Iri to perform the query. This field is optional. {tag}: String - Selects only resources with the provided tag to perform the query. This field is optional. {includeMetadata}: Boolean - If true, the resource’s nexus metadata (_constrainedBy, _deprecated, …) will be stored in the ElasticSearch document. Otherwise it won’t. The default value is false. {includeDeprecated}: Boolean - If true, deprecated resources are also indexed. The default value is false. {query}: Sparql Query - Defines the Sparql query to execute against the intermediate Sparql space for each target resource. _context_: Json - the JSON-LD context value applied to the query results.","title":"ElasticSearchProjection"},{"location":"/docs/delta/api/current/views/composite-view-api.html#sparqlprojection","text":"This projection executes the following steps:\nDiscard undesired resources. Transform the resource by executing an Sparql construct query against the intermediate Sparql space. Stores the resulting RDF Triple in a Blazegraph namespace.\n{\n   \"projections\": [\n      {\n         \"@id\": \"{projectionId}\",\n         \"@type\": \"SparqlProjection\",\n         \"query\": \"{query}\",\n         \"resourceSchemas\": [ \"{resourceSchema}\", ...],\n         \"resourceTypes\": [ \"{resourceType}\", ...],\n         \"resourceTag\": \"{tag}\",\n         \"includeMetadata\": {includeMetadata},\n         \"includeDeprecated\": {includeDeprecated}\n      }\n   ],\n   ...\n}\nwhere…\n{projectionId}: Iri - The identifier of the projection. This field is optional. When missing, a randomly generated Iri will be assigned. {resourceSchema}: Iri - Selects only resources that are validated against the provided schema Iri to perform the query. This field is optional. {resourceType}: Iri - Select only resources of the provided type Iri to perform the query. This field is optional. {tag}: String - Selects only resources with the provided tag to perform the query. This field is optional. {includeMetadata}: Boolean - If true, the resource’s nexus metadata (_constrainedBy, _deprecated, …) will be stored in the ElasticSearch document. Otherwise it won’t. The default value is false. {includeDeprecated}: Boolean - If true, deprecated resources are also indexed. The default value is false. {query}: Sparql Query - Defines the Sparql query to execute against the intermediate Sparql space for each target resource.","title":"SparqlProjection"},{"location":"/docs/delta/api/current/views/composite-view-api.html#payload","text":"{\n  \"@id\": \"{someid}\",\n  \"@type\": [\"CompositeView\", \"Beta\"],\n  \"sources\": [ _source_, ...],\n  \"projections\": [ _projection_, ...],\n  \"rebuildStrategy\": {\n    \"@type\": \"Interval\",\n    \"value\": \"{interval_value}\"\n  }\n}\nwhere…\n_source_: Json - The source definition. _projection_: Json - The projection definition. {interval_value}: String - The maximum interval delay for a resource to be present in a projection, in a human readable format (e.g.: 10 minutes).\nNote: The rebuildStrategy block is optional. If missing, the view won’t be automatically restarted.","title":"Payload"},{"location":"/docs/delta/api/current/views/composite-view-api.html#example","text":"The following example creates a Composite view containing 3 sources and 2 projections.\nThe incoming data from each of the sources is stored as RDF triples in the intermediate Sparql space .\nThe ElasticSearch projection http://music.com/bands is only going to query the Sparql space with the provided query when the current resource in the pipeline has the type http://music.com/Band.\nThe ElasticSearch projection http://music.com/albums is only going to query the Sparql space with the provided query when the current resource in the pipeline has the type http://music.com/Album.\nThe view is going to be restarted every 10 minutes if there are new resources in any of the sources since the last time the view was restarted. This allows to deal with partial graph visibility issues.\n{\n  \"@type\": [\"CompositeView\", \"Beta\"],\n  \"sources\": [\n    {\n      \"@id\": \"http://music.com/sources/local\",\n      \"@type\": \"ProjectEventStream\"\n    },\n    {\n      \"@id\": \"http://music.com/sources/albums\",\n      \"@type\": \"CrossProjectEventStream\",\n      \"project\": \"demo/albums\",\n      \"identities\": {\n          \"realm\": \"myrealm\",\n          \"group\": \"mygroup\"\n      }\n    },\n    {\n      \"@id\": \"http://music.com/sources/songs\",\n      \"@type\": \"RemoteProjectEventStream\",\n      \"project\": \"remote_demo/songs\",\n      \"endpoint\": \"https://example2.nexus.com\",\n      \"token\": \"mytoken\"\n    }    \n  ],\n  \"projections\": [\n    {\n      \"@id\": \"http://music.com/bands\",\n      \"@type\": \"ElasticSearchProjection\",\n      \"mapping\": {\n        \"properties\": {\n          \"@type\": {\n            \"type\": \"keyword\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"@id\": {\n            \"type\": \"keyword\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"name\": {\n            \"type\": \"keyword\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"genre\": {\n            \"type\": \"keyword\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"album\": {\n            \"type\": \"nested\",\n            \"properties\": {\n              \"title\": {\n                \"type\": \"keyword\",\n                \"copy_to\": \"_all_fields\"\n              },\n              \"released\": {\n                \"type\": \"date\",\n                \"copy_to\": \"_all_fields\"\n              },\n              \"song\": {\n                \"type\": \"nested\",\n                \"properties\": {\n                  \"title\": {\n                    \"type\": \"keyword\",\n                    \"copy_to\": \"_all_fields\"\n                  },\n                  \"number\": {\n                    \"type\": \"long\",\n                    \"copy_to\": \"_all_fields\"\n                  },\n                  \"length\": {\n                    \"type\": \"long\",\n                    \"copy_to\": \"_all_fields\"\n                  }\n                }\n              }\n            }\n          },\n          \"_all_fields\": {\n            \"type\": \"text\"\n          }\n        },\n        \"dynamic\": false\n      },\n      \"query\": \"prefix music: <http://music.com/> prefix nxv: <https://bluebrain.github.io/nexus/vocabulary/> CONSTRUCT {{resource_id}   music:name       ?bandName ; music:genre      ?bandGenre ; music:album      ?albumId . ?albumId        music:released   ?albumReleaseDate ; music:song       ?songId . ?songId         music:title      ?songTitle ; music:number     ?songNumber ; music:length     ?songLength } WHERE {{resource_id}   music:name       ?bandName ; music:genre      ?bandGenre . OPTIONAL {{resource_id} ^music:by        ?albumId . ?albumId        music:released   ?albumReleaseDate . OPTIONAL {?albumId         ^music:on        ?songId . ?songId          music:title      ?songTitle ; music:number     ?songNumber ; music:length     ?songLength } } } ORDER BY(?songNumber)\",\n      \"context\": {\n        \"@base\": \"http://music.com/\",\n        \"@vocab\": \"http://music.com/\"\n      },\n      \"resourceTypes\": [\n        \"http://music.com/Band\"\n      ]\n    },\n    {\n      \"@id\": \"http://music.com/albums\",\n      \"@type\": \"ElasticSearchProjection\",\n      \"mapping\": {\n        \"properties\": {\n          \"@type\": {\n            \"type\": \"keyword\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"@id\": {\n            \"type\": \"keyword\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"name\": {\n            \"type\": \"keyword\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"length\": {\n            \"type\": \"long\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"numberOfSongs\": {\n            \"type\": \"long\",\n            \"copy_to\": \"_all_fields\"\n          },\n          \"_all_fields\": {\n            \"type\": \"text\"\n          }\n        },\n        \"dynamic\": false\n      },\n      \"query\": \"prefix music: <http://music.com/> prefix nxv: <https://bluebrain.github.io/nexus/vocabulary/> CONSTRUCT {{resource_id}             music:name               ?albumTitle ; music:length             ?albumLength ; music:numberOfSongs      ?numberOfSongs } WHERE {SELECT ?albumReleaseDate ?albumTitle (sum(?songLength) as ?albumLength) (count(?albumReleaseDate) as ?numberOfSongs) WHERE {OPTIONAL { {resource_id}           ^music:on / music:length   ?songLength } {resource_id} music:released             ?albumReleaseDate ; music:title                ?albumTitle . } GROUP BY ?albumReleaseDate ?albumTitle }\",\n      \"context\": {\n        \"@base\": \"http://music.com/\",\n        \"@vocab\": \"http://music.com/\"\n      },\n      \"resourceTypes\": [\n        \"http://music.com/Album\"\n      ]\n    }\n  ],\n  \"rebuildStrategy\": {\n    \"@type\": \"Interval\",\n    \"value\": \"10 minutes\"\n  }  \n}","title":"Example"},{"location":"/docs/delta/api/current/views/composite-view-api.html#endpoints","text":"The following sections describe the endpoints that are specific to a CompositeView.\nThe general view endpoints are described on the parent page.","title":"Endpoints"},{"location":"/docs/delta/api/current/views/composite-view-api.html#search-documents-in-a-projection","text":"POST /v1/views/{org_label}/{project_label}/{view_id}/projections/{projection_id}/_search\n  {...}\nwhere {projection_id} is the @id value of the target ElasticSearch projection.\nThe supported payload is defined on the ElasticSearch documentation\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/nxv:myprojection/_search\" -d \\\n'{\n    \"query\": {\n        \"term\": {\n            \"name\": {\n                \"value\": \"Muse\"\n            }\n        }\n    }\n}' Payload {\n    \"query\": {\n        \"term\": {\n            \"name\": {\n                \"value\": \"Muse\"\n            }\n        }\n    }\n} Response {\n  \"_shards\": {\n    \"failed\": 0,\n    \"skipped\": 0,\n    \"successful\": 0,\n    \"total\": 0\n  },\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_score\": 0.6931472,\n        \"_id\": \"http://music.com/muse\",\n        \"_index\": \"kg_2d4b3208-63ad-441b-9eb1-831722b5df88_24a0220e-c546-456f-b904-8770132f8e12_1\",\n        \"_source\": {\n          \"@id\": \"muse\",\n          \"album\": [\n            {\n              \"@id\": \"absolution\",\n              \"released\": \"2003-09-15\",\n              \"song\": [\n                {\n                  \"@id\": \"absolution/1.json\",\n                  \"length\": 252,\n                  \"number\": 1,\n                  \"title\": \"Apocalypse Please\"\n                },\n                {\n                  \"@id\": \"absolution/2.json\",\n                  \"length\": 236,\n                  \"number\": 2,\n                  \"title\": \"Time Is Running Out\"\n                },\n                {\n                  \"@id\": \"absolution/3.json\",\n                  \"length\": 294,\n                  \"number\": 3,\n                  \"title\": \"Sing for Absolution\"\n                }\n              ]\n            },\n            {\n              \"@id\": \"black_holes_and_revelations\",\n              \"released\": \"2006-07-03\",\n              \"song\": [\n                {\n                  \"@id\": \"black_holes_and_revelations/1.json\",\n                  \"length\": 275,\n                  \"number\": 1,\n                  \"title\": \"Take a Bow\"\n                },\n                {\n                  \"@id\": \"black_holes_and_revelations/2.json\",\n                  \"length\": 239,\n                  \"number\": 2,\n                  \"title\": \"Starlight\"\n                },\n                {\n                  \"@id\": \"black_holes_and_revelations/3.json\",\n                  \"length\": 209,\n                  \"number\": 3,\n                  \"title\": \"Supermassive Black Hole\"\n                }\n              ]\n            }\n          ],\n          \"genre\": [\n            \"progressive rock\",\n            \"alternative rock\",\n            \"space rock\",\n            \"art rock\",\n            \"electronica\",\n            \"hard rock\"\n          ],\n          \"name\": \"Muse\"\n        },\n        \"_type\": \"_doc\"\n      }\n    ],\n    \"max_score\": 0.6931472,\n    \"total\": {\n      \"relation\": \"eq\",\n      \"value\": 1\n    }\n  },\n  \"timed_out\": false,\n  \"took\": 0\n}","title":"Search Documents in a projection"},{"location":"/docs/delta/api/current/views/composite-view-api.html#search-documents-in-all-projections","text":"POST /v1/views/{org_label}/{project_label}/{view_id}/projections/_/_search\n  {...}\nThe supported payload is defined on the ElasticSearch documentation\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/_/_search\" -d \\\n'{\n    \"query\": {\n        \"term\": {\n            \"name\": {\n                \"value\": \"Muse\"\n            }\n        }\n    }\n}' Payload {\n    \"query\": {\n        \"term\": {\n            \"name\": {\n                \"value\": \"Muse\"\n            }\n        }\n    }\n} Response {\n  \"_shards\": {\n    \"failed\": 0,\n    \"skipped\": 0,\n    \"successful\": 0,\n    \"total\": 0\n  },\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_score\": 0.6931472,\n        \"_id\": \"http://music.com/muse\",\n        \"_index\": \"kg_2d4b3208-63ad-441b-9eb1-831722b5df88_24a0220e-c546-456f-b904-8770132f8e12_1\",\n        \"_source\": {\n          \"@id\": \"muse\",\n          \"album\": [\n            {\n              \"@id\": \"absolution\",\n              \"released\": \"2003-09-15\",\n              \"song\": [\n                {\n                  \"@id\": \"absolution/1.json\",\n                  \"length\": 252,\n                  \"number\": 1,\n                  \"title\": \"Apocalypse Please\"\n                },\n                {\n                  \"@id\": \"absolution/2.json\",\n                  \"length\": 236,\n                  \"number\": 2,\n                  \"title\": \"Time Is Running Out\"\n                },\n                {\n                  \"@id\": \"absolution/3.json\",\n                  \"length\": 294,\n                  \"number\": 3,\n                  \"title\": \"Sing for Absolution\"\n                }\n              ]\n            },\n            {\n              \"@id\": \"black_holes_and_revelations\",\n              \"released\": \"2006-07-03\",\n              \"song\": [\n                {\n                  \"@id\": \"black_holes_and_revelations/1.json\",\n                  \"length\": 275,\n                  \"number\": 1,\n                  \"title\": \"Take a Bow\"\n                },\n                {\n                  \"@id\": \"black_holes_and_revelations/2.json\",\n                  \"length\": 239,\n                  \"number\": 2,\n                  \"title\": \"Starlight\"\n                },\n                {\n                  \"@id\": \"black_holes_and_revelations/3.json\",\n                  \"length\": 209,\n                  \"number\": 3,\n                  \"title\": \"Supermassive Black Hole\"\n                }\n              ]\n            }\n          ],\n          \"genre\": [\n            \"progressive rock\",\n            \"alternative rock\",\n            \"space rock\",\n            \"art rock\",\n            \"electronica\",\n            \"hard rock\"\n          ],\n          \"name\": \"Muse\"\n        },\n        \"_type\": \"_doc\"\n      }\n    ],\n    \"max_score\": 0.6931472,\n    \"total\": {\n      \"relation\": \"eq\",\n      \"value\": 1\n    }\n  },\n  \"timed_out\": false,\n  \"took\": 0\n}","title":"Search Documents in all projections"},{"location":"/docs/delta/api/current/views/composite-view-api.html#sparql-query-in-a-projection","text":"POST /v1/views/{org_label}/{project_label}/{view_id}/projections/{projection_id}/sparql\n  {query}\nGET /v1/views/{org_label}/{project_label}/{view_id}/projections/{projection_id}/sparql?query={query}\nIn both endpoints, {query} is defined by the SPARQL documentation\nwhere {projection_id} is the @id value of the target Sparql projection.\nThe Content-Type HTTP header for POST request is application/sparql-query.\nExample\nRequest curl -XPOST -H \"Content-Type: application/sparql-query\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/nxv:album/sparql\" -d \\\n'SELECT ?s where {?s ?p ?o} LIMIT 2' Response {\n  \"head\": {\n    \"vars\": [\n      \"s\"\n    ]\n  },\n  \"results\": {\n    \"bindings\": [\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/myview\"\n        }\n      },\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/other\"\n        }\n      }\n    ]\n  }\n}","title":"SPARQL query in a projection"},{"location":"/docs/delta/api/current/views/composite-view-api.html#sparql-query-in-all-projections","text":"POST /v1/views/{org_label}/{project_label}/{view_id}/projections/_/sparql\n  {query}\nGET /v1/views/{org_label}/{project_label}/{view_id}/projections/_/sparql?query={query}\nIn both endpoints, {query} is defined by the SPARQL documentation\nThe Content-Type HTTP header for POST request is application/sparql-query.\nExample\nRequest curl -XPOST -H \"Content-Type: application/sparql-query\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/_/sparql\" -d \\\n'SELECT ?s where {?s ?p ?o} LIMIT 2' Response {\n  \"head\": {\n    \"vars\": [\n      \"s\"\n    ]\n  },\n  \"results\": {\n    \"bindings\": [\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/myview\"\n        }\n      },\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/other\"\n        }\n      }\n    ]\n  }\n}","title":"SPARQL query in all projections"},{"location":"/docs/delta/api/current/views/composite-view-api.html#sparql-query-in-the-intermediate-space","text":"POST /v1/views/{org_label}/{project_label}/{view_id}/sparql\n  {query}\nGET /v1/views/{org_label}/{project_label}/{view_id}/sparql?query={query}\nIn both endpoints, {query} is defined by the SPARQL documentation\nThe Content-Type HTTP header for POST request is application/sparql-query.\nExample\nRequest curl -XPOST -H \"Content-Type: application/sparql-query\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/sparql\" -d \\\n'SELECT ?s where {?s ?p ?o} LIMIT 2' Response {\n  \"head\": {\n    \"vars\": [\n      \"s\"\n    ]\n  },\n  \"results\": {\n    \"bindings\": [\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/myview\"\n        }\n      },\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/other\"\n        }\n      }\n    ]\n  }\n}","title":"SPARQL query in the intermediate space"},{"location":"/docs/delta/api/current/views/composite-view-api.html#fetch-statistics","text":"This endpoint displays statistical information about the intermediate Sparql space.\nGET /v1/views/{org_label}/{project_label}/{view_id}/statistics\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/statistics\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/statistics.json\",\n  \"@type\": \"https://bluebrain.github.io/nexus/vocabulary/CompositeViewStatistics\",\n  \"totalEvents\": 34,\n  \"processedEvents\": 34,\n  \"evaluatedEvents\": 4,\n  \"remainingEvents\": 0,\n  \"discardedEvents\": 30,\n  \"failedEvents\": 0,\n  \"delayInSeconds\": 0,\n  \"lastEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n  \"lastProcessedEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n  \"values\": [\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 9,\n      \"processedEvents\": 9,\n      \"evaluatedEvents\": 4,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 5,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:31:41.400Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:31:41.400Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 17,\n      \"processedEvents\": 17,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 17,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-01-24T13:41:42.177Z\",\n      \"lastProcessedEventDateTime\": \"2020-01-24T13:41:42.177Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 8,\n      \"processedEvents\": 8,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 8,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:32:44.650Z\"\n    }\n  ]\n}\nwhere:\ntotalEvents - sum of total number of events from each source processedEvents - sum of number of events that have been considered by each source remainingEvents - sum of number of events that remain to be considered by each source discardedEvents - sum of number of events that have been discarded by each source (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the source) evaluatedEvents - sum of number of events that have been used to update the intermediate Sparql space of each source lastEventDateTime - timestamp of the last event in the sources lastProcessedEventDateTime - timestamp of the last event processed by the sources delayInSeconds - number of seconds between the last processed event timestamp and the last known event timestamp sourceId - the @id unique value of the source","title":"Fetch statistics"},{"location":"/docs/delta/api/current/views/composite-view-api.html#fetch-source-statistics","text":"This endpoint displays statistical information about the provided source.\nGET /v1/views/{org_label}/{project_label}/{view_id}/sources/{source_id}/statistics\nwhere {source_id} is the @id value of the source.\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/sources/nxv:mysource/statistics\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/statistics.json\",\n  \"@type\": \"ViewStatistics\",\n  \"totalEvents\": 9,\n  \"processedEvents\": 9,\n  \"evaluatedEvents\": 9,\n  \"remainingEvents\": 0,\n  \"discardedEvents\": 0,\n  \"failedEvents\": 0,\n  \"delayInSeconds\": 0,\n  \"lastEventDateTime\": \"2020-02-14T09:31:41.400Z\",\n  \"lastProcessedEventDateTime\": \"2020-02-14T09:31:41.400Z\"\n}\nwhere:\ntotalEvents - total number of events for the provided source processedEvents - number of events that have been considered by the provided source remainingEvents - number of events that remain to be considered by the provided source discardedEvents - number of events that have been discarded by the provided source (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the source) evaluatedEvents - number of events that have been used to update the intermediate Sparql of the provided source lastEventDateTime - timestamp of the last event from the provided source lastProcessedEventDateTime - timestamp of the last event processed by the provided source delayInSeconds - number of seconds between the last processed event timestamp and the last known event timestamp","title":"Fetch source statistics"},{"location":"/docs/delta/api/current/views/composite-view-api.html#fetch-all-sources-statistics","text":"This endpoint displays statistical information about all the sources.\nGET /v1/views/{org_label}/{project_label}/{view_id}/sources/_/statistics\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/sources/_/statistics\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/statistics.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\"\n  ],\n  \"_total\": 3,\n  \"_results\": [\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"totalEvents\": 9,\n      \"processedEvents\": 9,\n      \"evaluatedEvents\": 9,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 0,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:31:41.400Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:31:41.400Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"totalEvents\": 8,\n      \"processedEvents\": 8,\n      \"evaluatedEvents\": 8,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 0,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:32:44.650Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"totalEvents\": 17,\n      \"processedEvents\": 17,\n      \"evaluatedEvents\": 17,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 0,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-01-24T13:41:42.177Z\",\n      \"lastProcessedEventDateTime\": \"2020-01-24T13:41:42.177Z\"\n    }\n  ]\n}\nwhere:\nsourceId - the @id unique value of the source totalEvents - total number of events for the provided source processedEvents - number of events that have been considered by the provided source remainingEvents - number of events that remain to be considered by the provided source discardedEvents - number of events that have been discarded by the provided source (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the source) evaluatedEvents - number of events that have been used to update the intermediate Sparql of the provided source lastEventDateTime - timestamp of the last event from the provided source lastProcessedEventDateTime - timestamp of the last event processed by the provided source delayInSeconds - number of seconds between the last processed event timestamp and the last known event timestamp","title":"Fetch all sources statistics"},{"location":"/docs/delta/api/current/views/composite-view-api.html#fetch-projection-statistics","text":"This endpoint displays statistical information about the provided projection.\nGET /v1/views/{org_label}/{project_label}/{view_id}/projections/{projection_id}/statistics\nwhere {projection_id} is the @id value of the projection.\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/nxv:albums/statistics\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/statistics.json\",\n  \"@type\": \"https://bluebrain.github.io/nexus/vocabulary/CompositeViewStatistics\",\n  \"totalEvents\": 34,\n  \"processedEvents\": 34,\n  \"evaluatedEvents\": 4,\n  \"remainingEvents\": 0,\n  \"discardedEvents\": 30,\n  \"failedEvents\": 0,\n  \"delayInSeconds\": 0,\n  \"lastEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n  \"lastProcessedEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n  \"values\": [\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 9,\n      \"processedEvents\": 9,\n      \"evaluatedEvents\": 4,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 5,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:31:41.400Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:31:41.400Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 17,\n      \"processedEvents\": 17,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 17,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-01-24T13:41:42.177Z\",\n      \"lastProcessedEventDateTime\": \"2020-01-24T13:41:42.177Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 8,\n      \"processedEvents\": 8,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 8,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:32:44.650Z\"\n    }\n  ]\n}\nwhere:\nsourceId - the @id unique value of the source projectionId - the @id unique value of the projection totalEvents - total number of events for the provided source processedEvents - number of events that have been considered by the projection remainingEvents - number of events that remain to be considered by the projection discardedEvents - number of events that have been discarded (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the projection) evaluatedEvents - number of events that have been used to update the projection index lastEventDateTime - timestamp of the last event in the source lastProcessedEventDateTime - timestamp of the last event processed by the projection delayInSeconds - number of seconds between the last processed event timestamp and the last known event timestamp","title":"Fetch projection statistics"},{"location":"/docs/delta/api/current/views/composite-view-api.html#fetch-all-projections-statistics","text":"This endpoint displays statistical information about the all projections.\nGET /v1/views/{org_label}/{project_label}/{view_id}/projections/_/statistics\nExample\nRequest curl \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/_/statistics\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/statistics.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\"\n  ],\n  \"_total\": 6,\n  \"_results\": [\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 9,\n      \"processedEvents\": 9,\n      \"evaluatedEvents\": 4,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 5,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:31:41.400Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:31:41.400Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"projectionId\": \"http://music.com/bands\",\n      \"totalEvents\": 9,\n      \"processedEvents\": 9,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 9,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:31:41.400Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:31:41.400Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 8,\n      \"processedEvents\": 8,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 8,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:32:44.650Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"projectionId\": \"http://music.com/bands\",\n      \"totalEvents\": 8,\n      \"processedEvents\": 8,\n      \"evaluatedEvents\": 2,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 6,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-02-14T09:32:44.650Z\",\n      \"lastProcessedEventDateTime\": \"2020-02-14T09:32:44.650Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"totalEvents\": 17,\n      \"processedEvents\": 17,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 17,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-01-24T13:41:42.177Z\",\n      \"lastProcessedEventDateTime\": \"2020-01-24T13:41:42.177Z\"\n    },\n    {\n      \"@type\": \"ViewStatistics\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"projectionId\": \"http://music.com/bands\",\n      \"totalEvents\": 17,\n      \"processedEvents\": 17,\n      \"evaluatedEvents\": 0,\n      \"remainingEvents\": 0,\n      \"discardedEvents\": 17,\n      \"failedEvents\": 0,\n      \"delayInSeconds\": 0,\n      \"lastEventDateTime\": \"2020-01-24T13:41:42.177Z\",\n      \"lastProcessedEventDateTime\": \"2020-01-24T13:41:42.177Z\"\n    }\n  ]\n}\nwhere:\nsourceId - the @id unique value of the source projectionId - the @id unique value of the projection totalEvents - total number of events for the provided source processedEvents - number of events that have been considered by the projection remainingEvents - number of events that remain to be considered by the projection discardedEvents - number of events that have been discarded (were not evaluated due to filters, e.g. did not match schema, tag or type defined in the projection) evaluatedEvents - number of events that have been used to update the projection index lastEventDateTime - timestamp of the last event in the source lastProcessedEventDateTime - timestamp of the last event processed by the projection delayInSeconds - number of seconds between the last processed event timestamp and the last known event timestamp","title":"Fetch all projections statistics"},{"location":"/docs/delta/api/current/views/composite-view-api.html#restart-view","text":"This endpoint restarts the view indexing process. It does not delete the created indices/namespaces but it overrides the graphs/documents when going through the event log.\nDELETE /v1/views/{org_label}/{project_label}/{view_id}/offset\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/offset\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/offset.json\",\n  \"@type\": \"CompositeViewOffset\",\n  \"values\": [\n    {\n      \"@type\": \"NoOffset\",\n      \"sourceId\": \"http://music.com/sources/albums\"\n    },\n    {\n      \"@type\": \"NoOffset\",\n      \"sourceId\": \"http://music.com/sources/songs\"\n    },\n    {\n      \"@type\": \"NoOffset\",\n      \"sourceId\": \"http://music.com/sources/local\"\n    }\n  ]\n}","title":"Restart view"},{"location":"/docs/delta/api/current/views/composite-view-api.html#restart-projection","text":"This endpoint restarts indexing process for the provided projection while keeping the sources (and the intermediate Sparql space) progress.\nDELETE /v1/views/{org_label}/{project_label}/{view_id}/projections/{projection_id}/offset\nwhere {projection_id} is the @id value of the projection.\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/nxv:album/offset\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/offset.json\",\n  \"@type\": \"CompositeViewOffset\",\n  \"values\": [\n    {\n      \"@type\": \"NoOffset\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"projectionId\": \"http://music.com/albums\"\n    },\n    {\n      \"@type\": \"NoOffset\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"projectionId\": \"http://music.com/albums\"\n    },\n    {\n      \"@type\": \"NoOffset\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"projectionId\": \"http://music.com/albums\"\n    }\n  ]\n}","title":"Restart projection"},{"location":"/docs/delta/api/current/views/composite-view-api.html#restart-all-projections","text":"This endpoint restarts indexing process for all projections while keeping the sources (and the intermediate Sparql space) progress.\nDELETE /v1/views/{org_label}/{project_label}/{view_id}/projections/_/offset\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/projections/_/offset\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/offset.json\",\n    \"https://bluebrain.github.io/nexus/contexts/search.json\"\n  ],\n  \"_total\": 6,\n  \"_results\": [\n    {\n      \"@type\": \"TimeBasedOffset\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"instant\": \"2020-02-14T09:31:41.400Z\",\n      \"value\": \"ceaf0580-4f0c-11ea-98d9-dff6b2cf55b4\"\n    },\n    {\n      \"@type\": \"TimeBasedOffset\",\n      \"sourceId\": \"http://music.com/sources/albums\",\n      \"projectionId\": \"http://music.com/bands\",\n      \"instant\": \"2020-02-14T09:31:41.400Z\",\n      \"value\": \"ceaf0580-4f0c-11ea-98d9-dff6b2cf55b4\"\n    },\n    {\n      \"@type\": \"TimeBasedOffset\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"instant\": \"2020-02-14T09:32:44.650Z\",\n      \"value\": \"f46234a0-4f0c-11ea-98d9-dff6b2cf55b4\"\n    },\n    {\n      \"@type\": \"TimeBasedOffset\",\n      \"sourceId\": \"http://music.com/sources/local\",\n      \"projectionId\": \"http://music.com/bands\",\n      \"instant\": \"2020-02-14T09:32:44.650Z\",\n      \"value\": \"f46234a0-4f0c-11ea-98d9-dff6b2cf55b4\"\n    },\n    {\n      \"@type\": \"TimeBasedOffset\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"projectionId\": \"http://music.com/albums\",\n      \"instant\": \"2020-01-24T13:41:42.177Z\",\n      \"value\": \"412b3110-3eaf-11ea-8415-9b8aa8c49858\"\n    },\n    {\n      \"@type\": \"TimeBasedOffset\",\n      \"sourceId\": \"http://music.com/sources/songs\",\n      \"projectionId\": \"http://music.com/bands\",\n      \"instant\": \"2020-01-24T13:41:42.177Z\",\n      \"value\": \"412b3110-3eaf-11ea-8415-9b8aa8c49858\"\n    }\n  ]\n}","title":"Restart all projections"},{"location":"/docs/delta/api/current/views/aggregated-es-view-api.html","text":"","title":"AggregateElasticSearchView"},{"location":"/docs/delta/api/current/views/aggregated-es-view-api.html#aggregateelasticsearchview","text":"This view is an aggregate of ElasticSearchViews. The view itself does not create any index, but it references the already existing indices of the linked ElasticSearchViews.\nWhen performing queries on the _search endpoint, this view will make use of the multi-index query capabilities of ElasticSearch in order to select the indices of every view present on this aggregate view.\nIf the caller does not have the permission views/query on all the projects defined on the aggregated view, only a subset of indices (or none) will be selected, respecting the defined permissions.","title":"AggregateElasticSearchView"},{"location":"/docs/delta/api/current/views/aggregated-es-view-api.html#payload","text":"{\n  \"@id\": \"{someid}\",\n  \"@type\": \"AggregateElasticSearchView\",\n  \"views\": [ \n    {\n        \"project\": \"{project}\",\n        \"viewId\": \"{viewId}\"\n    },\n    ...\n  ]\n}\nwhere…\n{project}: String - The project, defined as {org_label}/{project_label}, where the {viewId} is located. {viewId}: Iri - The view @id value to be aggregated.","title":"Payload"},{"location":"/docs/delta/api/current/views/aggregated-es-view-api.html#endpoints","text":"The following sections describe the endpoints that are specific to an AggregateElasticSearchView.\nThe general view endpoints are described on the parent page.","title":"Endpoints"},{"location":"/docs/delta/api/current/views/aggregated-es-view-api.html#search-documents","text":"Provides aggregated search functionality across all the ElasticSearchViews referenced from the target view_id.\nPOST /v1/views/{org_label}/{project_label}/{view_id}/_search\n  {...}\nThe supported payload is defined on the ElasticSearch documentation\nThe string documents is used as a prefix of the default ElasticSearch view_id\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/views/myorg/myproj/nxv:myview/_search\" -d \\\n'{\n  \"query\": {\n    \"term\": {\n      \"_deprecated\": true\n    }\n  }\n}' Payload {\n  \"query\": {\n    \"term\": {\n      \"_deprecated\": true\n    }\n  }\n} Response {\n  \"_shards\": {\n    \"failed\": 0,\n    \"skipped\": 0,\n    \"successful\": 0,\n    \"total\": 0\n  },\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_score\": 1.2039728,\n        \"_id\": \"http://example.com/myview\",\n        \"_index\": \"kg_v1_803da242-d510-4e1a-a12d-d0e0b7018a41_684bd815-9273-46f4-ac1c-0383d4a98254_1\",\n        \"_source\": {\n          \"@id\": \"http://example.com/myview\",\n          \"@type\": [\n            \"https://bluebrain.github.io/nexus/vocabulary/View\",\n            \"https://bluebrain.github.io/nexus/vocabulary/ElasticSearchView\",\n            \"https://bluebrain.github.io/nexus/vocabulary/Alpha\"\n          ],\n          \"_original_source\": \"{\\\"mapping\\\":\\\"{\\\\\\\"dynamic\\\\\\\":false,\\\\\\\"properties\\\\\\\":{\\\\\\\"@id\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"keyword\\\\\\\"},\\\\\\\"@type\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"keyword\\\\\\\"},\\\\\\\"name\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"keyword\\\\\\\"},\\\\\\\"number\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"long\\\\\\\"},\\\\\\\"bool\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"boolean\\\\\\\"}}}\\\",\\\"_uuid\\\":\\\"89dd9858-cf87-4c46-94c2-24da0fcae0aa\\\",\\\"@context\\\":\\\"https://bluebrain.github.io/nexus/contexts/view\\\",\\\"@type\\\":[\\\"View\\\",\\\"ElasticSearchView\\\"],\\\"includeMetadata\\\":true,\\\"sourceAsText\\\":false}\",\n          \"_incoming\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/incoming\",\n          \"_outgoing\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview/outgoing\",\n          \"_self\": \"https://nexus.example.com/v1/schemas/myorg/myproj/nxv:myview\",\n          \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/view\",\n          \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n          \"_rev\": 6,\n          \"_deprecated\": true,\n          \"_createdAt\": \"2018-09-18T16:39:22.748Z\",\n          \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n          \"_updatedAt\": \"2018-09-18T17:10:22.748Z\",\n          \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n        },\n        \"_type\": \"doc\"\n      }\n    ],\n    \"max_score\": 1.2039728,\n    \"total\": 1\n  },\n  \"timed_out\": false,\n  \"took\": 11\n}","title":"Search Documents"},{"location":"/docs/delta/api/current/views/aggregated-sparql-view-api.html","text":"","title":"AggregateSparqlView"},{"location":"/docs/delta/api/current/views/aggregated-sparql-view-api.html#aggregatesparqlview","text":"This view is an aggregate of SparqlViews. The view itself does not create any index, but it references the already existing indices of the linked SparqlViews.\nWhen performing queries on the sparql endpoint, this view will query all the underlying SparqlViews and then aggregate the results. The order how the results across the different SparqlView gets merged it is not deterministic.\nIf the caller does not have the permission views/query on all the projects defined on the aggregated view, only a subset of indices (or none) will be selected, respecting the defined permissions.","title":"AggregateSparqlView"},{"location":"/docs/delta/api/current/views/aggregated-sparql-view-api.html#payload","text":"{\n  \"@id\": \"{someid}\",\n  \"@type\": \"AggregateSparqlView\",\n  \"views\": [\n    {\n        \"project\": \"{project}\",\n        \"viewId\": \"{viewId}\"\n    },\n    ...\n  ]\n}\nwhere…\n{project}: String - the project, defined as {org_label}/{project_label}, where the {viewId} is located. {viewId}: Iri - The view @id value to be aggregated.\nNote This approach to aggregate data from SPARQL does not circumvent the fact that each namespace is isolated. Neither it deals with sorting or filtering in an aggregated manner. For that reason, path traversals will not work out of the scope of the single namespace (even using an aggregate view). Ordering and DISTINCT selection won’t work either, due to the fact that the query is executed on each namespace independently. In order to have a more robust SPARQL aggregation support, please make us of CompositeView.","title":"Payload"},{"location":"/docs/delta/api/current/views/aggregated-sparql-view-api.html#endpoints","text":"The following sections describe the endpoints that are specific to an AggregateSparqlView.\nThe general view endpoints are described on the parent page.","title":"Endpoints"},{"location":"/docs/delta/api/current/views/aggregated-sparql-view-api.html#sparql-query","text":"Provides aggregated search functionality across all the SparqlViews referenced from the target view_id.\nPOST /v1/views/{org_label}/{project_label}/{view_id}/sparql\n  {query}\nor\nGET /v1/views/{org_label}/{project_label}/{view_id}/sparql?query={query}\nIn both endpoints, {query} is defined by the SPARQL documentation\nThe Content-Type HTTP header for POST request is application/sparql-query.\nExample\nRequest curl -XPOST -H \"Content-Type: application/sparql-query\" \"https://nexus.example.com/v1/views/myorg/myproj/graph/sparql\" -d \\\n'SELECT ?s where {?s ?p ?o} LIMIT 2' Response {\n  \"head\": {\n    \"vars\": [\n      \"s\"\n    ]\n  },\n  \"results\": {\n    \"bindings\": [\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/myview\"\n        }\n      },\n      {\n        \"s\": {\n          \"type\": \"uri\",\n          \"value\": \"http://example.com/other\"\n        }\n      }\n    ]\n  }\n}","title":"SPARQL query"},{"location":"/docs/delta/api/current/kg-storages-api.html","text":"","title":"Storages"},{"location":"/docs/delta/api/current/kg-storages-api.html#storages","text":"Storages are rooted in the /v1/storages/{org_label}/{project_label} collection and are used to describe where files are physically stored.\nEach storage…\nbelongs to a project identifier by the label {project_label} inside an organization identifier by the label {org_label} is validated against the storage schema.\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn how to retrieve an access token.\nAuthorization notes To read or modify storages, the caller must have respectively storages/read or storages/write permissions on the current path of the project or its ancestors.","title":"Storages"},{"location":"/docs/delta/api/current/kg-storages-api.html#storage-types","text":"There are several types (or classes) of storages, that represent different kinds of backends.","title":"Storage types"},{"location":"/docs/delta/api/current/kg-storages-api.html#local-disk-storage","text":"This is the most basic storage type. It is backed by the local file-system (i.e. where the Nexus deployment is running) and rooted in an arbitrary path.\nUpon project creation, a default disk storage is initialized automatically, so that users can start uploading resource attachments right away. This resource has the @id nxv:diskStorageDefault.\nIts behavior is similar to earlier versions of the Nexus API: files are stored and managed by the system in an opaque, internal way.\nWhile typically not necessary, you can manage and create additional disk storages, provided you are aware of the local file-system structure and that Nexus has read and write access to the target folder.","title":"Local disk storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#remote-disk-storage","text":"This storage type relies on a remote HTTP service that exposes basic file operations on an underlying POSIX file-system. This is particularly handy if your organization is running some kind of distributed network storage (such as Ceph, Gluster, GPFS, Lustre, …) that you don’t want to mount directly on the system where Nexus runs.\nWhile there’s no formal specification for this service, you can check out or deploy our own implementation: Nexus remote storage service.","title":"Remote disk storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#amazon-s3-compatible-storage","text":"This storage type allows the use of an internal or external blob-store that is compatible with the Amazon S3 API.","title":"Amazon S3 compatible storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#changing-the-default-storage","text":"The internal resource describing every storage has a boolean field called default. The selection mechanism when no storage id is provided picks the last created storage with default set to true.","title":"Changing the default storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#resource-format","text":"These tables summarize mandatory and optional fields for each storage type:\n@type @id default volume readPermission writePermission maxFileSize DiskStorage optional mandatory mandatory optional optional optional\n@type @id default folder endpoint credentials readPermission writePermission maxFileSize RemoteDiskStorage optional mandatory mandatory optional optional optional optional optional\n@type @id default bucket endpoint accessKey secretKey readPermission writePermission maxFileSize S3Storage optional mandatory mandatory optional optional optional optional optional optional\nNote The endpoint field is optional for the S3 storage type, as our internal implementation uses the official S3 client and defaults to s3.amazonaws.com. Relying on this behavior is discouraged.","title":"Resource format"},{"location":"/docs/delta/api/current/kg-storages-api.html#create-a-storage-using-post","text":"POST /v1/storages/{org_label}/{project_label}\n  {...}\nJson payload:\nIf an @id value is found in the payload, it will be used. If an @id value is not found in the payload, one will be generated as follows: base:{UUID}. The base is the prefix defined on the storage’s project ({project_label}).\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/storages/myorg/myproj\" -d \\\n'{\n  \"@id\": \"nxv:mys3storage\",\n  \"@type\": \"S3Storage\",\n  \"default\": false,\n  \"bucket\": \"mybucket\",\n  \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n  \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n  \"secretKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n}' Payload {\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": \"S3Storage\",\n    \"default\": false,\n    \"bucket\": \"mybucket\",\n    \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n    \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n    \"secretKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n} Response {\n    \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": [\n        \"S3Storage\",\n        \"Storage\"\n    ],\n    \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/incoming\",\n    \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/outgoing\",\n    \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\",\n    \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n    \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n    \"_rev\": 1,\n    \"_deprecated\": false,\n    \"_createdAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n    \"_updatedAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a storage using POST"},{"location":"/docs/delta/api/current/kg-storages-api.html#create-a-storage-using-put","text":"This alternative endpoint to create a storage is useful in case the json payload does not contain an @id but you want to specify one. The @id will be specified in the last segment of the endpoint URI.\nPUT /v1/storages/{org_label}/{project_label}/{storage_id}\n  {...}\nNote that if the payload contains an @id different from the {storage_id}, the request will fail.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\" -d \\\n'{\n  \"@type\": \"S3Storage\",\n  \"default\": false,\n  \"bucket\": \"mybucket\",\n  \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n  \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n  \"secretKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n}' Payload {\n    \"@type\": \"S3Storage\",\n    \"default\": false,\n    \"bucket\": \"mybucket\",\n    \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n    \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n    \"secretKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n} Response {\n    \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": [\n        \"S3Storage\",\n        \"Storage\"\n    ],\n    \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/incoming\",\n    \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/outgoing\",\n    \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\",\n    \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n    \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n    \"_rev\": 1,\n    \"_deprecated\": false,\n    \"_createdAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n    \"_updatedAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a storage using PUT"},{"location":"/docs/delta/api/current/kg-storages-api.html#update-a-storage","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to a storage without having had seen the previous revision of the storage, the last revision needs to be passed as a query parameter.\nPUT /v1/storages/{org_label}/{project_label}/{storage_id}?rev={previous_rev}\n  {...}\n… where {previous_rev} is the last known revision number for the storage.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\" -d \\\n'{\n  \"@type\": \"S3Storage\",\n  \"default\": true,\n  \"bucket\": \"mybucket\",\n  \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n  \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n  \"secretKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n}' Payload {\n    \"@type\": \"S3Storage\",\n    \"default\": true,\n    \"bucket\": \"mybucket\",\n    \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n    \"accessKey\": \"AKIAIOSFODNN7EXAMPLE\",\n    \"secretKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n} Response {\n    \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": [\n        \"S3Storage\",\n        \"Storage\"\n    ],\n    \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/incoming\",\n    \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/outgoing\",\n    \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\",\n    \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n    \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n    \"_rev\": 2,\n    \"_deprecated\": false,\n    \"_createdAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n    \"_updatedAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Update a storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#tag-a-storage","text":"Links a storage revision to a specific name.\nTagging a storage is considered to be an update as well.\nPOST /v1/storages/{org_label}/{project_label}/{storage_id}/tags?rev={previous_rev}\n  {\n    \"tag\": \"{name}\",\n    \"rev\": {rev}\n  }\n… where\n{previous_rev}: Number - the last known revision for the storage. {name}: String - label given to the storage at specific revision. {rev}: Number - the revision to link the provided {name}.\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/tags?rev=2\" -d \\\n'{\n  \"tag\": \"mytag\",\n  \"rev\": 1\n}' Payload {\n  \"tag\": \"mytag\",\n  \"rev\": 1\n} Response {\n    \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": [\n        \"S3Storage\",\n        \"Storage\"\n    ],\n    \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/incoming\",\n    \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/outgoing\",\n    \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\",\n    \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n    \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n    \"_rev\": 3,\n    \"_deprecated\": false,\n    \"_createdAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n    \"_updatedAt\": \"2019-05-10T16:26:54.423Z\",\n    \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Tag a storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#deprecate-a-storage","text":"Locks the storage, so no further operations can be performed. It will also not be taken into account by the default storage selection mechanism.\nDeprecating a storage is considered to be an update as well.\nDELETE /v1/storages/{org_label}/{project_label}/{storage_id}?rev={previous_rev}\n… where {previous_rev} is the last known revision number for the storage.\nExample\nRequest curl -XDELETE -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\" Response {\n    \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": [\n        \"S3Storage\",\n        \"Storage\"\n    ],\n    \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/incoming\",\n    \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/outgoing\",\n    \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\",\n    \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n    \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n    \"_rev\": 4,\n    \"_deprecated\": true,\n    \"_createdAt\": \"2019-05-13T14:31:24.661Z\",\n    \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n    \"_updatedAt\": \"2019-05-13T14:32:03.287Z\",\n    \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate a storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#fetch-a-storage","text":"When fetching a storage, the response format can be chosen through HTTP content negotiation, using the Accept HTTP header.\napplication/ld+json: JSON-LD output response. Further specifying the query parameter format=compacted|expanded will provide with the JSON-LD compacted document form or the expanded document form. application/n-triples: RDF n-triples response, as defined by the w3. text/vnd.graphviz: A DOT response.\nIf Accept: */* HTTP header is present, Nexus defaults to the JSON-LD output in compacted form.\nGET /v1/storages/{org_label}/{project_label}/{storage_id}?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\" Response {\n    \"@context\": [\n        \"https://bluebrain.github.io/nexus/contexts/storage.json\",\n        \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n    ],\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": [\n        \"S3Storage\",\n        \"Storage\"\n    ],\n    \"bucket\": \"mybucket\",\n    \"default\": true,\n    \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n    \"maxFileSize\": 10737418240,\n    \"readPermission\": \"resources/read\",\n    \"writePermission\": \"files/write\",\n    \"_algorithm\": \"SHA-256\",\n    \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/incoming\",\n    \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/outgoing\",\n    \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage\",\n    \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n    \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n    \"_rev\": 3,\n    \"_deprecated\": false,\n    \"_createdAt\": \"2019-05-13T14:38:51.190Z\",\n    \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n    \"_updatedAt\": \"2019-05-13T14:38:51.190Z\",\n    \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch a storage"},{"location":"/docs/delta/api/current/kg-storages-api.html#fetch-a-storage-original-payload","text":"GET /v1/storages/{org_label}/{project_label}/{storage_id}/source?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/storages/myorg/myproj/nxv:mys3storage/source?rev=1\" Response {\n    \"@context\": [\n        \"https://bluebrain.github.io/nexus/contexts/storage.json\",\n        \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n    ],\n    \"@id\": \"nxv:mys3storage\",\n    \"@type\": [\n        \"S3Storage\",\n        \"Storage\"\n    ],\n    \"bucket\": \"mybucket\",\n    \"default\": true,\n    \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n    \"maxFileSize\": 10737418240,\n    \"readPermission\": \"resources/read\",\n    \"writePermission\": \"files/write\",\n    \"_algorithm\": \"SHA-256\"\n}","title":"Fetch a storage original payload"},{"location":"/docs/delta/api/current/kg-storages-api.html#list-storages","text":"GET /v1/storages/{org_label}/{project_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&q={search}&sort={sort}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting storages based on their deprecation status {rev}: Number - can be used to filter the resulting storages based on their revision value {type}: Iri - can be used to filter the resulting storages based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting storages based on their creator {updatedBy}: Iri - can be used to filter the resulting storages based on the person which performed the last update {search}: String - can be provided to select only the storages in the collection that have attribute values matching (containing) the provided string {sort}: String - can be used to sort storages based on a payloads’ field. This parameter can appear multiple times to enable sorting by multiple fields\nExample\nRequest curl \"https://nexus.example.com/v1/storages/myorg/myproj\" Response {\n    \"@context\": [\n        \"https://bluebrain.github.io/nexus/contexts/search.json\",\n        \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n    ],\n    \"_total\": 3,\n    \"_results\": [\n        {\n            \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/diskStorageDefault\",\n            \"@type\": [\n                \"https://bluebrain.github.io/nexus/vocabulary/Storage\",\n                \"https://bluebrain.github.io/nexus/vocabulary/DiskStorage\"\n            ],\n            \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2FdiskStorageDefault/incoming\",\n            \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2FdiskStorageDefault/outgoing\",\n            \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2FdiskStorageDefault\",\n            \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n            \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n            \"_rev\": 1,\n            \"_deprecated\": false,\n            \"_createdAt\": \"2019-05-13T14:26:47.817Z\",\n            \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n            \"_updatedAt\": \"2019-05-13T14:26:47.817Z\",\n            \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n        },\n        {\n            \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myoldstorage\",\n            \"@type\": [\n                \"https://bluebrain.github.io/nexus/vocabulary/S3Storage\",\n                \"https://bluebrain.github.io/nexus/vocabulary/Storage\"\n            ],\n            \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%myoldstorage/incoming\",\n            \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%myoldstorage/outgoing\",\n            \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%myoldstorage\",\n            \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n            \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n            \"_rev\": 2,\n            \"_deprecated\": true,\n            \"_createdAt\": \"2019-05-13T14:31:24.661Z\",\n            \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n            \"_updatedAt\": \"2019-05-13T14:32:03.287Z\",\n            \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n        },\n        {\n            \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/mys3storage\",\n            \"@type\": [\n                \"https://bluebrain.github.io/nexus/vocabulary/S3Storage\",\n                \"https://bluebrain.github.io/nexus/vocabulary/Storage\"\n            ],\n            \"_incoming\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2Fmys3storage/outgoing\",\n            \"_outgoing\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2Fmys3storage/outgoing\",\n            \"_self\": \"https://nexus.example.com/v1/storages/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2Fmys3storage\",\n            \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/storage.json\",\n            \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n            \"_rev\": 3,\n            \"_deprecated\": false,\n            \"_createdAt\": \"2019-05-13T14:38:51.190Z\",\n            \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n            \"_updatedAt\": \"2019-05-13T16:07:27.859Z\",\n            \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n        }\n    ],\n    \"_next\": \"https://nexus.example.com/v1/storages/myorg/myproj/?after=%5B1557758331190,%22https://bluebrain.github.io/nexus/vocabulary/mys3storage%22%5D\"\n}","title":"List storages"},{"location":"/docs/delta/api/current/kg-files-api.html","text":"","title":"Files"},{"location":"/docs/delta/api/current/kg-files-api.html#files","text":"Files are attachment resources rooted in the /v1/files/{org_label}/{project_label}/ collection.\nEach file…\nbelongs to a project identifier by the label {project_label} inside an organization identifier by the label {org_label}\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying files, the caller must have the permissions defined on the storage associated to the file on the current path of the project or the ancestor paths. When reading files, the caller must have the permissions defined on the storage associated to the file on the current path of the project or the ancestor paths.","title":"Files"},{"location":"/docs/delta/api/current/kg-files-api.html#create-a-file-using-post","text":"POST /v1/files/{org_label}/{project_label}\nThe json payload:\nIf the @id value is found on the payload, this @id will be used. If the @id value is not found on the payload, an @id will be generated as follows: base:{UUID}. The base is the prefix defined on the resource’s project ({project_label}).\nExample\nRequest curl -XPOST -F \"file=@/path/to/myfile.jpg;type=image/jpeg\" \"https://nexus.example.com/v1/files/myorg/myproj\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"@type\": \"File\",\n  \"_bytes\": 670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile.jpg\",\n  \"_mediaType\": \"image/jpeg\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Create a file using POST"},{"location":"/docs/delta/api/current/kg-files-api.html#create-a-file-using-put","text":"This alternative endpoint to create a resource is useful in case the json payload does not contain an @id but you want to specify one. The @id will be specified in the last segment of the endpoint URI.\nPUT /v1/files/{org_label}/{project_label}/{file_id}\nNote that if the payload contains an @id different from the {file_id}, the request will fail.\nExample\nRequest curl -XPUT -F \"file=@/path/to/myfile.jpg;type=image/jpeg\" \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile.jpg\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myfile\",\n  \"@type\": \"File\",\n  \"_bytes\": 670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile.jpg\",\n  \"_mediaType\": \"image/jpeg\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Create a file using PUT"},{"location":"/docs/delta/api/current/kg-files-api.html#create-a-file-specific-storage-","text":"POST /v1/files/{org_label}/{project_label}?storage={storageId}\nOr\nPUT /v1/files/{org_label}/{project_label}/{file_id}?storage={storageId}\n… where {storageId} selects a specific storage backend where the file will be uploaded.\nExample\nRequest curl -XPOST -F \"file=@/path/to/myfile.jpg;type=image/jpeg\" \"https://nexus.example.com/v1/files/myorg/myproj?storage=nxv:mys3storage\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"@type\": \"File\",\n  \"_bytes\": 670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile.jpg\",\n  \"_mediaType\": \"image/jpeg\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Create a file (specific storage)"},{"location":"/docs/delta/api/current/kg-files-api.html#link-an-existing-file-using-post","text":"Creates a resource from an existing file, provided that the storage backend where it is located supports the operation.\nPOST /v1/files/{org_label}/{project_label}?storage={storageId}\n  {\n    \"filename\": \"myfile.png\",\n    \"path\": \"relative/path/to/myfile.png\",\n    \"mediaType\": \"image/png\"\n  }\n… where {storageId} selects a specific storage backend that supports linking existing files.\nExample\nRequest curl -XPOST \"https://nexus.example.com/v1/files/myorg/myproj?storage=nxv:mys3storage\" -d \\\n'{\n    \"filename\": \"myfile.png\",\n    \"path\": \"relative/path/to/myfile.png\",\n    \"mediaType\": \"image/png\"\n}' Payload {\n    \"filename\": \"myfile.png\",\n    \"path\": \"relative/path/to/myfile.png\",\n    \"mediaType\": \"image/png\"\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"@type\": \"File\",\n  \"_bytes\": 670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile.png\",\n  \"_location\": \"https://s3.us-west-1.amazonaws.com/mybucket/relative/path/to/myfile.png\",\n  \"_mediaType\": \"image/png\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Link an existing file using POST"},{"location":"/docs/delta/api/current/kg-files-api.html#link-an-existing-file-using-put","text":"Creates a resource from an existing file, provided that the storage backend where it is located supports the operation.\nThis alternative endpoint allows to specify the resource @id.\nPUT /v1/files/{org_label}/{project_label}/{file_id}?storage={storageId}\n  {\n    \"filename\": \"myfile.png\",\n    \"path\": \"relative/path/to/myfile.png\",\n    \"mediaType\": \"image/png\"\n  }\n… where {storageId} selects a specific storage backend that supports linking existing files.\nExample\nRequest curl -XPUT \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile.png?storage=nxv:mys3storage\" -d \\\n'{\n    \"filename\": \"myfile.png\",\n    \"path\": \"relative/path/to/myfile.png\",\n    \"mediaType\": \"image/png\"\n}' Payload {\n    \"filename\": \"myfile.png\",\n    \"path\": \"relative/path/to/myfile.png\",\n    \"mediaType\": \"image/png\"\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"@type\": \"File\",\n  \"_bytes\": 670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile.png\",\n  \"_location\": \"https://s3.us-west-1.amazonaws.com/mybucket/relative/path/to/myfile.png\",\n  \"_mediaType\": \"image/png\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/base:d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Link an existing file using PUT"},{"location":"/docs/delta/api/current/kg-files-api.html#update-a-file","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to a file without having had seen the previous revision of the file, the last revision needs to be passed as a query parameter.\nPUT /v1/files/{org_label}/{project_label}/{resource_id}?rev={previous_rev}\n… where {previous_rev} is the last known revision number for the resource.\nExample\nRequest curl -XPUT -F \"file=@/path/to/myfile2.png;type=image/png\" \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile.jpg?rev=1\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myfile\",\n  \"@type\": \"File\",\n  \"_bytes\": 2670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile2.png\",\n  \"_mediaType\": \"image/png\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 2,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Update a file"},{"location":"/docs/delta/api/current/kg-files-api.html#tag-a-file","text":"Links a file revision to a specific name.\nTagging a file is considered to be an update as well.\nPOST /v1/files/{org_label}/{project_label}/{file_id}/tags?rev={previous_rev}\n  {\n    \"tag\": \"{name}\",\n    \"rev\": {rev}\n  }\n… where\n{previous_rev}: is the last known revision number for the file. {name}: String - label given to the file at specific revision. {rev}: Number - the revision to link the provided {name}.\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/tags?rev=2\" -d \\\n'{\n  \"tag\": \"mytag\",\n  \"rev\": 1\n}' Payload {\n  \"tag\": \"mytag\",\n  \"rev\": 1\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myfile\",\n  \"@type\": \"File\",\n  \"_bytes\": 2670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile2.png\",\n  \"_mediaType\": \"image/png\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-10-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Tag a file"},{"location":"/docs/delta/api/current/kg-files-api.html#deprecate-a-file","text":"Locks the file, so no further operations can be performed.\nDeprecating a file is considered to be an update as well.\nDELETE /v1/files/{org_label}/{project_label}?rev={previous_rev}\n… where {previous_rev} is the last known revision number for the file.\nExample\nRequest curl -XDELETE \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/tags?rev=3\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myfile\",\n  \"@type\": \"File\",\n  \"_bytes\": 2670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile2.png\",\n  \"_mediaType\": \"image/png\",\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-12-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Deprecate a file"},{"location":"/docs/delta/api/current/kg-files-api.html#fetch-a-file","text":"When fetching a file, the response format can be chosen through HTTP content negotiation, using the Accept HTTP header.\napplication/ld+json: JSON-LD output response to retrieve the file metadata. Further specifying the query parameter format=compacted|expanded will provide with the JSON-LD compacted document form or the expanded document form. */*: retrieves the file content. for any other Content-Type that matches the file Content-Type, the file content will be fetched as well.\nGET /v1/files/{org_label}/{project_label}/{file_id}?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest (binary) curl \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile.jpg\" Request (metadata) curl -H \"Accept: application/json\" \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile.jpg\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"nxv:myfile\",\n  \"@type\": \"File\",\n  \"_bytes\": 2670,\n  \"_digest\": {\n    \"_algorithm\": \"SHA-256\",\n    \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n  },\n  \"_filename\": \"myfile2.png\",\n  \"_mediaType\": \"image/png\",\n  \"_storage\": {\n    \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/_/myStorage\",\n    \"_rev\": 1\n  },\n  \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/nxv:myfile\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n  \"_updatedAt\": \"2019-12-28T12:15:33.238Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n}","title":"Fetch a file"},{"location":"/docs/delta/api/current/kg-files-api.html#list-files","text":"GET /v1/files/{org_label}/{project_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&q={search}&sort={sort}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting files based on their deprecation status {rev}: Number - can be used to filter the resulting files based on their revision value {type}: Iri - can be used to filter the resulting files based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting files based on their creator {updatedBy}: Iri - can be used to filter the resulting files based on the person which performed the last update {search}: String - can be provided to select only the files in the collection that have attribute values matching (containing) the provided string {sort}: String - can be used to sort files based on a payloads’ field. This parameter can appear multiple times to enable sorting by multiple fields\nExample\nRequest curl \"https://nexus.example.com/v1/files/myorg/myproj\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 2,\n  \"_results\": [\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/myfile\",\n      \"@type\": \"https://bluebrain.github.io/nexus/vocabulary/File\",\n      \"_bytes\": 670,\n      \"_digest\": {\n        \"_algorithm\": \"SHA-256\",\n        \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n      },\n      \"_filename\": \"myfile.jpg\",\n      \"_storage\": {\n        \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/_/myStorage\",\n        \"_rev\": 1\n      },\n      \"_mediaType\": \"image/jpeg\",\n      \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2Fmyfile/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2Fmyfile/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/https%3A%2F%2Fbluebrain.github.io%2Fnexus%2Fvocabulary%2Fmyfile\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n      \"_updatedAt\": \"2019-01-28T12:15:33.238Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n    },\n    {\n      \"@id\": \"https://nexus.example.com/mybase/d8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n      \"@type\": \"https://bluebrain.github.io/nexus/vocabulary/File\",\n      \"_bytes\": 2670,\n      \"_digest\": {\n        \"_algorithm\": \"SHA-256\",\n        \"_value\": \"25fc54fba0beec17a598b5a68420ded1595b2f76f0a0b7c6077792ece828bc2e\"\n      },\n      \"_storage\": {\n        \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/_/myStorage\",\n        \"_rev\": 1\n      },\n      \"_filename\": \"myfile2.png\",\n      \"_mediaType\": \"image/png\",\n      \"_incoming\": \"https://nexus.example.com/v1/files/myorg/myproj/https%3A%2F%2Fnexus.example.com%2Fmybase%2Fd8848d4c-68f7-4ffd-952f-63a8cbcb86a9/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/files/myorg/myproj/https%3A%2F%2Fnexus.example.com%2Fmybase%2Fd8848d4c-68f7-4ffd-952f-63a8cbcb86a9/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/files/myorg/myproj/https%3A%2F%2Fnexus.example.com%2Fmybase%2Fd8848d4c-68f7-4ffd-952f-63a8cbcb86a9\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/file.json\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-01-28T12:15:33.238Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/anonymous\",\n      \"_updatedAt\": \"2019-12-28T12:15:33.238Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/anonymous\"\n    }\n  ],\n  \"_next\": \"https://nexus.example.com/v1/files/myorg/myproj?after=%5B1559045718752,%22https://nexus.example.com/mybase/d8848d4c-68f7-4ffd-952f-63a8cbcb86a9%22%5D\"\n}","title":"List files"},{"location":"/docs/delta/api/current/kg-archives-api.html","text":"","title":"Archives"},{"location":"/docs/delta/api/current/kg-archives-api.html#archives","text":"An archive is a collection of resources stored inside an archive file. The archiving format chosen for this purpose is tar (or tarball). Archive resources are rooted in the /v1/archives/{org_label}/{project_label}/ collection.\nEach archive…\nbelongs to a project identifier by the label {project_label} inside an organization identifier by the label {org_label}\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying archives, the caller must have archives/write permissions on the current path of the project or the ancestor paths. When reading archives, the caller must have resources/read permissions on the current path of the project or the ancestor paths.","title":"Archives"},{"location":"/docs/delta/api/current/kg-archives-api.html#archive-lifecycle","text":"Contrarily to the rest of the platform resources, archives are not persisted resources, given their nature. Therefore there are no update, tag or deprecation operations available on archive resources.\nAn archive resource will be automatically erased from the system after certain after certain time. This time is configurable (config property app.archives.cache-invalidate-after) and it defaults to 5 hours.","title":"Archive lifecycle"},{"location":"/docs/delta/api/current/kg-archives-api.html#archive-format","text":"{\n    \"resources\" : [\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"{resource_id}\",\n            \"project\": \"{project}\",\n            \"path\": \"{path}\",\n            \"originalSource\": \"{originalSource}\",\n            \"rev\": \"{rev}\",\n            \"tag\": \"{tag}\"\n        },\n        {\n            \"@type\": \"File\",\n            \"resourceId\": \"{resource_id}\",\n            \"project\": \"{project}\",\n            \"path\": \"{path}\",\n            \"rev\": \"{rev}\",\n            \"tag\": \"{tag}\"\n        },\n        {...}       \n    ]\n}\nwhere…\n{resource_id}: Iri - the @id value of the resource to be added to the archive. {project}: String - the project (in the format ‘myorg/myproject’) where the specified resource belongs. This field is optional. It defaults to the current project. {path}: Path - the relative path on the archive where this resource is going to stored. This field is optional. It defaults to {project}/{resourceId}.json for a Resource type and {project}/{filename} for File type. {originalSource}: Boolean - flag to decide the whether to fetch the original payload or the payload with metadata and JSON-LD algorithm applied. This field optional and is only allowed for Resource type. It defaults to true. {rev}: Long - the revision of the resource. This field is optional. It defaults to the latest revision. {tag}: String - the tag of the resource. This field is optional. This field cannot be present at the same time as rev field.\nIn order to decide whether we want to select a resource or a file, the @type discriminator is used with the following possibilities:\nResource: targets a resource File: targets a file","title":"Archive format"},{"location":"/docs/delta/api/current/kg-archives-api.html#create-an-archive-using-post","text":"This endpoint is used to describe the archive and to subsequently consume it.\nPOST /v1/archives/{org_label}/{project_label}\nThe json payload:\nIf the @id value is found on the payload, this @id will be used. If the @id value is not found on the payload, an @id will be generated as follows: base:{UUID}. The base is the prefix defined on the resource’s project ({project_label}).\nThe response will be an HTTP 303 Location redirect, which will point to the url where to consume the archive (tarball).\nThe following diagram can help to understand the HTTP exchange\nExample\nThe following example shows how to create an archive containing 3 files. 2 of them are resources and the other is a file. As a response, the tarball will be offered.\nRequest curl -L \"https://nexus.example.com/v1/archives/myorg/myproject\" -H \"Content-Type: application/json\" -H \"Accept: */*\" -d '{\n    \"resources\" : [\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource1\",\n            \"rev\": 2\n        },\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"originalSource\": false\n        },\n        {\n            \"@type\": \"File\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"path\": \"my/custom/path/resource2.json\"\n        }\n    ]\n}\n' Payload {\n    \"resources\" : [\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource1\",\n            \"rev\": 2\n        },\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"originalSource\": false\n        },\n        {\n            \"@type\": \"File\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"path\": \"my/custom/path/resource2.json\"\n        }\n    ]\n}","title":"Create an archive using POST"},{"location":"/docs/delta/api/current/kg-archives-api.html#create-an-archive-using-put","text":"This alternative endpoint to create an archive is useful in case you want to split the creation of the archive resource and the consumption of it.\nIt can also be useful in cases where one user wants to create the definition of the archive and share the link with another user who then is going to consume it.\nPUT /v1/archives/{org_label}/{project_label}/{archive_id}\nExample\nRequest curl \"https://nexus.example.com/v1/archives/myorg/myproject/myarchive\" -H \"Content-Type: application/json\" -d '{\n    \"resources\" : [\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource1\",\n            \"rev\": 2\n        },\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"originalSource\": false\n        },\n        {\n            \"@type\": \"File\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"path\": \"my/custom/path/resource2.json\"\n        }\n    ]\n}\n' Payload {\n    \"resources\" : [\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource1\",\n            \"rev\": 2\n        },\n        {\n            \"@type\": \"Resource\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"originalSource\": false\n        },\n        {\n            \"@type\": \"File\",\n            \"resourceId\": \"https://nexus.example.com/resource2\",\n            \"project\": \"myorg/myproject2\",\n            \"path\": \"my/custom/path/resource2.json\"\n        }\n    ]\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/archives/myorg/myproj/myarchive\",\n  \"@type\": \"https://bluebrain.github.io/nexus/vocabulary/Archive\",\n  \"_self\": \"https://nexus.example.com/v1/archives/myorg/myproj/myarchive\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/archive\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}\nNote that if the payload contains an @id different from the {archive_id}, the request will fail.","title":"Create an archive using PUT"},{"location":"/docs/delta/api/current/kg-archives-api.html#fetch-an-archive","text":"When fetching an archive, the response format can be chosen through HTTP content negotiation, using the Accept HTTP header.\napplication/ld+json: JSON-LD output response to retrieve the archive metadata. Further specifying the query parameter format=compacted|expanded will provide with the JSON-LD compacted document form or the expanded document form. */*: retrieves the archive content. application/x-tar: retrieves the archive content.\nGET /v1/archives/{org_label}/{project_label}/{archive_id}\nExample\nRequest (tarball) curl \"https://nexus.example.com/v1/archives/myorg/myproject/myarchive\" -H \"Accept: application/x-tar\" -o output.tar Request (metadata) curl \"https://nexus.example.com/v1/archives/myorg/myproject/myarchive\" -H \"Accept: application/json\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n    \"https://bluebrain.github.io/nexus/contexts/archive.json\"\n  ],\n  \"@id\": \"myarchive\",\n  \"@type\": \"Archive\",\n  \"resources\" : [\n    {\n      \"@type\": \"Resource\",\n      \"resourceId\": \"https://nexus.example.com/resource1\",\n      \"rev\": 2\n    },\n    {\n      \"@type\": \"Resource\",\n      \"resourceId\": \"https://nexus.example.com/resource2\",\n      \"project\": \"myorg/myproject2\",\n      \"originalSource\": false\n    },\n    {\n      \"@type\": \"File\",\n      \"resourceId\": \"https://nexus.example.com/resource2\",\n      \"project\": \"myorg/myproject2\",\n      \"path\": \"my/custom/path/resource2.json\"\n    }\n  ],\n  \"_self\": \"https://nexus.example.com/v1/archives/myorg/myproj/myarchive\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/archive\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n  \"_expiresInSeconds\": 17530\n}","title":"Fetch an archive"},{"location":"/docs/delta/api/current/kg-resources-api.html","text":"","title":"Resources"},{"location":"/docs/delta/api/current/kg-resources-api.html#resources","text":"Generic resources are rooted in the /v1/resources/{org_label}/{project_label}/{schema_id} collection.\nEach resource…\nbelongs to a project identifier by the label {project_label} inside an organization identifier by the label {org_label} it is validated against a schema with id {schema_id}. In case of using _ for this segment, the schema segment reads as irrelevant.\nAccess to resources in the system depends on the access control list set for them. Depending on the access control list, a caller may need to prove its identity by means of an access token passed to the Authorization header (Authorization: Bearer {token}). Please visit Authentication to learn more about how to retrieve an access token.\nAuthorization notes When modifying resources, the caller must have resources/write permissions on the current path of the project or the ancestor paths. When reading resources, the caller must have resources/read permissions on the current path of the project or the ancestor paths.","title":"Resources"},{"location":"/docs/delta/api/current/kg-resources-api.html#create-a-resource-using-post","text":"POST /v1/resources/{org_label}/{project_label}/{schema_id}\n  {...}\nThe json payload:\nIf the @id value is found on the payload, this @id will be used. If the @id value is not found on the payload, an @id will be generated as follows: base:{UUID}. The base is the prefix defined on the resource’s project ({project_label}).\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resources/myorg/myproj/myschema\" -d \\\n'{\n  \"@context\": {\n    \"ex\": \"http://example.com/\",\n    \"@vocab\": \"http://example.com/\"\n  },\n  \"@type\": \"ex:Custom\",\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"bool\": false\n}' Payload {\n  \"@context\": {\n    \"ex\": \"http://example.com/\",\n    \"@vocab\": \"http://example.com/\"\n  },\n  \"@type\": \"ex:Custom\",\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"bool\": false\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"http://example.com/Custom\",\n  \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a resource using POST"},{"location":"/docs/delta/api/current/kg-resources-api.html#create-a-resource-using-put","text":"This alternative endpoint to create a resource is useful in case the json payload does not contain an @id but you want to specify one. The @id will be specified in the last segment of the endpoint URI.\nPUT /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}\n  {...}\nNote that if the payload contains an @id different from the {resource_id}, the request will fail.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\" -d \\\n'{\n  \"@context\": {\n    \"ex\": \"http://example.com/\",\n    \"@vocab\": \"http://example.com/\"\n  },\n  \"@type\": \"ex:Custom\",\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"bool\": false\n}' Payload {\n  \"@context\": {\n    \"ex\": \"http://example.com/\",\n    \"@vocab\": \"http://example.com/\"\n  },\n  \"@type\": \"ex:Custom\",\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"bool\": false\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"http://example.com/Custom\",\n  \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Create a resource using PUT"},{"location":"/docs/delta/api/current/kg-resources-api.html#update-a-resource","text":"This operation overrides the payload.\nIn order to ensure a client does not perform any changes to a resource without having had seen the previous revision of the resource, the last revision needs to be passed as a query parameter.\nPUT /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}?rev={previous_rev}\n  {...}\n… where {previous_rev} is the last known revision number for the resource.\nExample\nRequest curl -XPUT -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0?rev=1\" -d \\\n'{\n  \"@context\": {\n    \"ex\": \"http://example.com/\",\n    \"@vocab\": \"http://example.com/\"\n  },\n  \"@type\": \"ex:Custom\",\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"bool\": false\n}' Payload {\n  \"@context\": {\n    \"ex\": \"http://example.com/\",\n    \"@vocab\": \"http://example.com/\"\n  },\n  \"@type\": \"ex:Custom\",\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"bool\": false\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"http://example.com/Custom\",\n  \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 2,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:56:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Update a resource"},{"location":"/docs/delta/api/current/kg-resources-api.html#tag-a-resource","text":"Links a resource revision to a specific name.\nTagging a resource is considered to be an update as well.\nPOST /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}/tags?rev={previous_rev}\n  {\n    \"tag\": \"{name}\",\n    \"rev\": {rev}\n  }\n… where\n{previous_rev}: is the last known revision number for the resource. {name}: String - label given to the resources at specific revision. {rev}: Number - the revision to link the provided {name}.\nExample\nRequest curl -XPOST -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/tags?rev=2\" -d \\\n'{\n  \"tag\": \"mytag\",\n  \"rev\": 1\n}' Payload {\n  \"tag\": \"mytag\",\n  \"rev\": 1\n} Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"http://example.com/Custom\",\n  \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 3,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T14:58:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Tag a resource"},{"location":"/docs/delta/api/current/kg-resources-api.html#deprecate-a-resource","text":"Locks the resource, so no further operations can be performed. It also deletes the resource from listing/querying results.\nDeprecating a resource is considered to be an update as well.\nDELETE /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}?rev={previous_rev}\n… where {previous_rev} is the last known revision number for the resource.\nExample\nRequest curl -XDELETE -H \"Content-Type: application/json\" \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0?rev=5\" Response {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/resource.json\",\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"http://example.com/Custom\",\n  \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 6,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T15:02:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Deprecate a resource"},{"location":"/docs/delta/api/current/kg-resources-api.html#fetch-a-resource","text":"When fetching a resource, the response format can be chosen through HTTP content negotiation, using the Accept HTTP header.\napplication/ld+json: JSON-LD output response. Further specifying the query parameter format=compacted|expanded will provide with the JSON-LD compacted document form or the expanded document form. application/n-triples: RDF n-triples response, as defined by the w3. text/vnd.graphviz: A DOT response.\nIf Accept: */* HTTP header is present, Nexus defaults to the JSON-LD output in compacted form.\nGET /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\" Response {\n  \"@context\": [\n    {\n      \"@vocab\": \"http://example.com/\",\n      \"ex\": \"http://example.com/\"\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"Custom\",\n  \"bool\": false,\n  \"name\": \"Alex\",\n  \"number\": 24,\n  \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n  \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n  \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n  \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n  \"_rev\": 4,\n  \"_deprecated\": true,\n  \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n  \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n  \"_updatedAt\": \"2018-09-17T15:02:42.939Z\",\n  \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n}","title":"Fetch a resource"},{"location":"/docs/delta/api/current/kg-resources-api.html#fetch-a-resource-original-payload","text":"GET /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}/source?rev={rev}&tag={tag}\nwhere …\n{rev}: Number - the targeted revision to be fetched. This field is optional and defaults to the latest revision. {tag}: String - the targeted tag to be fetched. This field is optional.\n{rev} and {tag} fields cannot be simultaneously present.\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0?rev=4\" Response {\n  \"@context\": [\n    {\n      \"@vocab\": \"http://example.com/\",\n      \"ex\": \"http://example.com/\"\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n  \"@type\": \"Custom\",\n  \"bool\": false,\n  \"name\": \"Alex\",\n  \"number\": 24\n}","title":"Fetch a resource original payload"},{"location":"/docs/delta/api/current/kg-resources-api.html#list-resources","text":"GET /v1/resources/{org_label}/{project_label}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}&schema={schema}&q={search}&sort={sort}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting resources based on their deprecation status {rev}: Number - can be used to filter the resulting resources based on their revision value {type}: Iri - can be used to filter the resulting resources based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting resources based on their creator {updatedBy}: Iri - can be used to filter the resulting resources based on the person which performed the last update {schema}: Iri - can be used to filter the resulting resources based on the conformant schema {search}: String - can be provided to select only the resources in the collection that have attribute values matching (containing) the provided string {sort}: String - can be used to sort resources based on a payloads’ field. This parameter can appear multiple times to enable sorting by multiple fields\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/myproj\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n      \"@type\": \"http://example.com/Custom\",\n      \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-17T15:02:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ],\n  \"_next\": \"https://nexus.example.com/v1/resources/myorg/myproj?after=%5B1559045718752,%22https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b029%22%5D\"\n}","title":"List resources"},{"location":"/docs/delta/api/current/kg-resources-api.html#list-resources-belonging-to-a-schema","text":"GET /v1/resources/{org_label}/{project_label}/{schemaId}?from={from}&size={size}&deprecated={deprecated}&rev={rev}&type={type}&createdBy={createdBy}&updatedBy={updatedBy}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {deprecated}: Boolean - can be used to filter the resulting resources based on their deprecation status {rev}: Number - can be used to filter the resulting resources based on their revision value {type}: Iri - can be used to filter the resulting resources based on their @type value. This parameter can appear multiple times, filtering further the @type value. {createdBy}: Iri - can be used to filter the resulting resources based on their creator {updatedBy}: Iri - can be used to filter the resulting resources based on the person which performed the last update\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/myproj/myschema\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n      \"@type\": \"http://example.com/Custom\",\n      \"_incoming\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\",\n      \"_outgoing\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing\",\n      \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/resource\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproj\",\n      \"_rev\": 4,\n      \"_deprecated\": true,\n      \"_createdAt\": \"2018-09-17T14:54:42.939Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2018-09-17T15:02:42.939Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ],\n  \"_next\": \"https://nexus.example.com/v1/resources/myorg/myproj?after=%5B1559045718752,%22https://nexus.example.com/v1/resources/myorg/myproj/fd8a2b32-170e-44e8-808f-44a8cbbc49b029%22%5D\"\n}","title":"List resources belonging to a schema"},{"location":"/docs/delta/api/current/kg-resources-api.html#list-incoming-links","text":"Provides a list of resources where the current resource {resource_id} is being referenced in the payload.\nGET /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}/incoming?from={from}&size={size}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/incoming\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 1,\n  \"_results\": [\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/reconstruction1\",\n      \"@type\": [\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/Entity\",\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/Dataset\",\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/ReconstructedPatchedCell\"\n      ],\n      \"paths\": \"https://nexus.example.com/v1/vocabs/myorg/myproject/subject\",\n      \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproject/_/https://bluebrain.github.io/nexus/vocabulary/reconstruction1\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n      \"_rev\": 4,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-05-28T13:28:00.186Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2019-05-29T13:41:45.357Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    }\n  ]\n}","title":"List incoming links"},{"location":"/docs/delta/api/current/kg-resources-api.html#list-outgoing-links","text":"Provides a list of resources that are being used in the current resource {resource_id} payload. It also offers information\nGET /v1/resources/{org_label}/{project_label}/{schema_id}/{resource_id}/outgoing?from={from}&size={size}&includeExternalLinks={includeExternalLinks}\nwhere…\n{from}: Number - is the parameter that describes the offset for the current query; defaults to 0 {size}: Number - is the parameter that limits the number of results; defaults to 20 {includeExternalLinks}: Boolean - flag to decide whether or not external links are to be included. External links are references to resources in other projects, or even resources external to Nexus; defaults to true\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/myproj/myschema/base:fd8a2b32-170e-44e8-808f-44a8cbbc49b0/outgoing?includeExternalLinks=true\" Response {\n  \"@context\": [\n    \"https://bluebrain.github.io/nexus/contexts/search.json\",\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"_total\": 4,\n  \"_results\": [\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/mouse1\",\n      \"@type\": [\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/Entity\",\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/Subject\"\n      ],\n      \"paths\": \"https://nexus.example.com/v1/vocabs/myorg/myproject/subject\",\n      \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproject/_/https://bluebrain.github.io/nexus/vocabulary/mouse1\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-05-28T13:27:42.707Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2019-05-28T13:27:42.707Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    },\n    {\n      \"@id\": \"https://bluebrain.github.io/nexus/vocabulary/jane\",\n      \"@type\": [\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/Agent\",\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/Person\"\n      ],\n      \"paths\": [\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/contribution\",\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/agent\"\n      ],\n      \"_self\": \"https://nexus.example.com/v1/resources/myorg/myproject/_/https://bluebrain.github.io/nexus/vocabulary/jane\",\n      \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\n      \"_project\": \"https://nexus.example.com/v1/projects/myorg/myproject\",\n      \"_rev\": 1,\n      \"_deprecated\": false,\n      \"_createdAt\": \"2019-05-28T13:26:27.627Z\",\n      \"_createdBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\",\n      \"_updatedAt\": \"2019-05-28T13:26:27.627Z\",\n      \"_updatedBy\": \"https://nexus.example.com/v1/realms/myrealm/users/john\"\n    },\n    {\n      \"@id\": \"http://uri.interlex.org/base/ilx_0383233\",\n      \"@type\": \"https://nexus.example.com/v1/vocabs/myorg/myproject/MType\",\n      \"paths\": [\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/annotation\",\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/hasBody\"\n      ]\n    },\n    {\n      \"@id\": \"http://purl.obolibrary.org/obo/UBERON_0008933\",\n      \"paths\": [\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/brainLocation\",\n        \"https://nexus.example.com/v1/vocabs/myorg/myproject/brainRegion\"\n      ]\n    }\n  ]\n}","title":"List outgoing links"},{"location":"/docs/delta/api/current/kg-resources-api.html#resources-server-sent-events","text":"This endpoint allows clients to receive automatic updates from the realms in a streaming fashion.\nThe server sent events response contains a series of resource events, represented in the following way\ndata:{payload}\nevent:{type}\nid:{id}\nwhere…\n{payload}: Json - is the actual payload of the current resource {type}: String - is a type identifier for the current realm. Possible types are: Created, Updated, Deprecated, TagAdded, FileCreated, FileUpdated {id}: String - is the identifier of the resource event. It can be used in the Last-Event-Id query parameter","title":"Resources Server Sent Events"},{"location":"/docs/delta/api/current/kg-resources-api.html#server-sent-events-all-resources","text":"GET /v1/resources/events\nwhere Last-Event-Id is an optional HTTP Header that identifies the last consumed resource event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nExample\nRequest curl \"https://nexus.example.com/v1/resources/events\" Response data:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Created\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_source\":{\"@type\":\"Hobbit\",\"age\":23,\"name\":\"Frodo\"},\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_constrainedBy\":\"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_instant\":\"2019-06-24T07:35:47.447631Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Created\nid:aebbf8f4-9652-11e9-89a7-6d3c5701d287\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Updated\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_source\":{\"@type\":\"Hobbit\",\"age\":25,\"name\":\"Frodo\"},\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_rev\":2,\"_instant\":\"2019-06-24T07:36:27.130185Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Updated\nid:c6642f90-9652-11e9-89a7-6d3c5701d287\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Deprecated\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_rev\":3,\"_instant\":\"2019-06-24T07:36:40.558514Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Deprecated\nid:ce6549e0-9652-11e9-89a7-6d3c5701d287\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"FileCreated\",\"_resourceId\":\"https://nexus.example.com/v1/resources/otherorg/myproject/_/myfile\",\"_attributes\":{\"_bytes\":48144,\"_digest\":{\"_value\":\"721d03056b82a22c54f30fd3c68b41dfe5f53828911984e47182d82cfbac9f36\",\"_algorithm\":\"SHA-256\"},\"_filename\":\"brain.jpg\",\"_location\":\"file:///opt/binaries/1089947c-dc76-4cbc-8b04-3f919b436828/b/8/4/a/b/f/9/c/brain.jpg\",\"_mediaType\":\"image/jpeg\"},\"_storage\":{\"@type\":\"DiskStorage\",\"_storageId\":\"https://bluebrain.github.io/nexus/vocabulary/diskStorageDefault\",\"default\":true,\"volume\":\"/opt/binaries\",\"readPermission\":\"resources/read\",\"writePermission\":\"files/write\"},\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"aa7053ba-54ea-41b6-baab-96ec1acd7a44\",\"_instant\":\"2019-06-24T07:37:10.311391Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:FileCreated\nid:e024e5f0-9652-11e9-89a7-6d3c5701d287","title":"Server Sent Events all resources"},{"location":"/docs/delta/api/current/kg-resources-api.html#server-sent-events-organization-resources","text":"GET /v1/resources/{org_label}/events\nwhere\n{org_label}: String - the selected organization for which the events are going to be filtered Last-Event-Id: String - optional HTTP Header that identifies the last consumed resource event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/events\" Response data:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Created\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_source\":{\"@type\":\"Hobbit\",\"age\":23,\"name\":\"Frodo\"},\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_constrainedBy\":\"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_instant\":\"2019-06-24T07:35:47.447631Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Created\nid:aebbf8f4-9652-11e9-89a7-6d3c5701d287\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Updated\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_source\":{\"@type\":\"Hobbit\",\"age\":25,\"name\":\"Frodo\"},\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_rev\":2,\"_instant\":\"2019-06-24T07:36:27.130185Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Updated\nid:c6642f90-9652-11e9-89a7-6d3c5701d287\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Deprecated\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_rev\":3,\"_instant\":\"2019-06-24T07:36:40.558514Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Deprecated\nid:ce6549e0-9652-11e9-89a7-6d3c5701d287","title":"Server Sent Events organization resources"},{"location":"/docs/delta/api/current/kg-resources-api.html#server-sent-events-project-resources","text":"GET /v1/resources/{org_label}/{project_label}/events\nwhere\n{org_label}: String - the selected organization for which the events are going to be filtered {project_label}: String - the selected project for which the events are going to be filtered Last-Event-Id: String - optional HTTP Header that identifies the last consumed resource event. It can be used for cases when a client does not want to retrieve the whole event stream, but to start after a specific event.\nExample\nRequest curl \"https://nexus.example.com/v1/resources/myorg/myproject/events\" Response data:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Created\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_source\":{\"@type\":\"Hobbit\",\"age\":23,\"name\":\"Frodo\"},\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_constrainedBy\":\"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_instant\":\"2019-06-24T07:35:47.447631Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Created\nid:aebbf8f4-9652-11e9-89a7-6d3c5701d287\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Updated\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_source\":{\"@type\":\"Hobbit\",\"age\":25,\"name\":\"Frodo\"},\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_rev\":2,\"_instant\":\"2019-06-24T07:36:27.130185Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Updated\nid:c6642f90-9652-11e9-89a7-6d3c5701d287\n\ndata:{\"@context\":\"https://bluebrain.github.io/nexus/contexts/resource.json\",\"@type\":\"Deprecated\",\"_resourceId\":\"https://nexus.example.com/v1/resources/myorg/myproject/_/7887416b-d501-4508-a625-2a6664dfca94\",\"_types\":[\"https://nexus.example.com/v1/vocabs/myorg/myproject/Hobbit\"],\"_projectUuid\":\"1089947c-dc76-4cbc-8b04-3f919b436828\",\"_organizationUuid\":\"ba7053ba-54ea-41b6-baab-96ec1acd7ad4\",\"_rev\":3,\"_instant\":\"2019-06-24T07:36:40.558514Z\",\"_subject\":\"https://nexus.example.com/v1/realms/github/users/myuser\"}\nevent:Deprecated\nid:ce6549e0-9652-11e9-89a7-6d3c5701d287","title":"Server Sent Events project resources"},{"location":"/docs/delta/api/current/error-signaling.html","text":"","title":"Error Signaling"},{"location":"/docs/delta/api/current/error-signaling.html#error-signaling","text":"Nexus Delta makes use of the HTTP status codes to report the outcome of each API call. The status codes are complemented by a consistent response data model for reporting client and system level failures.\nFormat {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/error.json\",\n  \"@type\": \"<a machine readable unique identifier>\",\n  \"reason\": \"<a human readable description of the error>\"\n} Example {\n  \"@context\": \"https://bluebrain.github.io/nexus/contexts/error.json\",\n  \"@type\": \"IllegalFilterFormat\",\n  \"reason\": \"Unable to parse 'path' as an uri\",\n  \"field\": \"DownField(filter)/DownField(path)\"\n}\nIn addition to mandatory @type and reason fields, arbitrary fields may be present for extra information in certain scenarios.","title":"Error Signaling"},{"location":"/docs/delta/benchmarks.html","text":"","title":"Benchmarks"},{"location":"/docs/delta/benchmarks.html#benchmarks","text":"The main goal of the benchmarks is to analyze the hardware requirements for a Nexus deployment and to find potential issues and / or bottlenecks. In particular, we are most interested in the following metrics:\nthroughput - how many requests per second the system can handle latency - the time the system needed to provide response to the requests\n… and how they were affected by different factors, especially:\ndata volume - how does the volume of the data in the system affect the performance hardware configuration and scalability - does assigning more hardware increase the performance of the system and can the system scale both horizontally and vertically. clustering - what’s the effect of changing from a single node to clustered deployment, as well as, what’s the effect of adding more nodes to the cluster.\nThe test scenarios and scripts can be found in the nexus-benchmarks repository.\nThe tests were run against version 1.2.1 in October 2019 using Gatling version 3.2.1.","title":"Benchmarks"},{"location":"/docs/delta/benchmarks.html#environment","text":"The system was deployed on AWS EKS using the following basic configuration:\n8 compute nodes of 16 vCPU, 64 GB RAM, 2 x 300 GB NVMe disks nginx ingress controller 1 Keycloak pod using MariaDB as its storage 6 Cassandra pods each with 4 vCPU, 6 GB HEAP, local NVMe storage, replication factor of 3 3 Elasticsearch pods each with 4 vCPU, 8 GB HEAP, local NVMe storage 1 Blazegraph pod with 8 vCPU, 16 GB HEAP, local NVMe storage 1 Prometheus pod and 1 Jaeger pod\nThe services were deployed as follows:\n3 pod IAM cluster, each node using 4 vCPU, 4 GB HEAP 3 pod Admin cluster, each node using 4 vCPU, 4 GB HEAP 1 to 6 pods KG cluster, each node with 8 vCPU, 8 GB HEAP","title":"Environment"},{"location":"/docs/delta/benchmarks.html#data-volume","text":"Prior to the test execution a reasonable amount of data was injected into the system to ensure the system behaves well under a typical volume, specifically 120,000,000 resources were created across 27 projects using an exponential distribution. The total number of triples (22 for each resource + 11 system metadata) was approximately: 4,000,000,000.\nThe following resource template was used for both pre-created resources and the resources created during the tests:\n{\n  \"@type\": [\n    \"http://www.w3.org/ns/prov#Activity\",\n    \"https://neuroshapes.org/StimulusExperiment\"\n  ],\n  \"http://www.w3.org/ns/prov#used\": {\n    \"@id\": \"https://nexus-sandbox.io/neurosciencegraph/data/049b569d-98ba-4a54-a9cb-45f5c5cd3b40\",\n    \"@type\": [\n      \"http://www.w3.org/ns/prov#Entity\",\n      \"https://neuroshapes.org/PatchedCell\"\n    ],\n    \"http://schema.org/name\": \"Some PatchedCell\"\n  },\n  \"http://www.w3.org/ns/prov#wasAssociatedWith\": {\n    \"@id\": \"https://nexus-sandbox.io/v1/realms/random/users/someuser\",\n    \"@type\": \"http://www.w3.org/ns/prov#Agent\"\n  },\n  \"https://neuroshapes.org/hadProtocol\": {\n    \"@id\": \"https://nexus-sandbox.io/neurosciencegraph/data/3f189851-c3de-470d-894e-68abe116bfe4\",\n    \"@type\": [\n      \"https://neuroshapes.org/Protocol\",\n      \"https://neuroshapes.org/ExperimentalProtocol\",\n      \"http://www.w3.org/ns/prov#Entity\"\n    ],\n    \"http://schema.org/name\": \"Some Protocol\"\n  },\n  \"https://neuroshapes.org/stimulus\": {\n    \"https://neuroshapes.org/stimulusType\": {\n      \"@id\": \"http://stimulusont.org/H20S8\",\n      \"http://www.w3.org/2000/01/rdf-schema#label\": \"H20S8\"\n    }\n  }\n}","title":"Data volume"},{"location":"/docs/delta/benchmarks.html#scenarios","text":"The main focus of the tests is to identify the throughput and latency for the primary operations as most of the secondary operations would either have the same results or be irrelevant. For example:\ntagging or deprecating a resource is equivalent to performing a create without validation updating a resource is equivalent to creating a new one (with or without validation) accessing the incoming or outgoing link is irrelevant as the system just delegates the operation to the triple store\nThe primary operations are:\ncreate without validation create with validation using a schema that imports others as transitive dependencies create with validation using a schema with the same collection of shapes but without any dependencies fetch a resource by id while injecting the metadata in the resource RDF graph representation and returning it as json fetch a resource source json representation\nEach test has been run for 5 minutes using a concurrency level (users) of 16 for each KG node (e.g.: 6 KG nodes -> 96 users).","title":"Scenarios"},{"location":"/docs/delta/benchmarks.html#results","text":"","title":"Results"},{"location":"/docs/delta/benchmarks.html#highlights-and-conclusions","text":"The system scales almost linearly with the number of nodes in terms of throughput and the latency remains within acceptable values.\nIn most cases the increase of latency is minimal as adding additional nodes to the cluster increases the necessary data exchange between nodes when handling requests. The chance for the required data to be handled by the node that accepts each request decreases from 100% (single node) to ~16% (6 node cluster) and if executing the request implies interaction with multiple resources (like in the case of creating a resource with validation where the schema has import definitions) the chances drop close to 1%.\nThe latency increase for creating resources with validation using a self contained (single) schema is caused by the fact that the system is CPU bound while performing heavy operations. The the values for the 50 and 95 percentiles show that there’s a higher deviation in the values for this operation. This is explained by nodes processing different number of validations depending on how requests are distributed between the members of the cluster.","title":"Highlights and conclusions"},{"location":"/docs/delta/benchmarks.html#raw-results","text":"The following sections show the exact numbers for throughput and latency of the system for each test configuration.","title":"Raw results"},{"location":"/docs/delta/benchmarks.html#create-resource-no-validation","text":"The test evaluates the throughput and latency at 50, 75, 95 and 99 percentiles when creating new unconstrained resources.\nNodes Users Throughput (req/s) p50 (ms) p75 (ms) p95 (ms) p99 (ms) 1 16 781 16 21 42 57 2 32 1281 20 29 50 66 4 64 2044 25 37 65 89 6 96 2730 40 62 96 130","title":"Create Resource, No Validation"},{"location":"/docs/delta/benchmarks.html#create-resource-validation-crossproject-resolution-modular-schema","text":"The test evaluates the throughput and latency at 50, 75, 95 and 99 percentiles when creating new resources constrained by schemas hosted in a separate project than the one used for creation. The schema uses transitive imports of other schemas and contexts.\nNodes Users Throughput (req/s) p50 (ms) p75 (ms) p95 (ms) p99 (ms) 1 16 26 618 638 666 699 2 32 46 682 712 768 977 4 64 88 719 753 822 1067 6 96 127 743 806 898 1051","title":"Create Resource, Validation, CrossProject Resolution, Modular Schema"},{"location":"/docs/delta/benchmarks.html#create-resource-validation-inproject-resolution-modular-schema","text":"The test evaluates the throughput and latency at 50, 75, 95 and 99 percentiles when creating new resources constrained by schemas hosted in the same project as the one used for creation. The schema uses transitive imports of other schemas and contexts.\nNodes Users Throughput (req/s) p50 (ms) p75 (ms) p95 (ms) p99 (ms) 1 16 28 569 590 620 650 2 32 48 655 685 736 926 4 64 97 658 687 739 867 6 96 125 758 799 879 977","title":"Create Resource, Validation, InProject Resolution, Modular Schema"},{"location":"/docs/delta/benchmarks.html#create-resource-validation-inproject-resolution-single-schema","text":"The test evaluates the throughput and latency at 50, 75, 95 and 99 percentiles when creating new resources constrained by a schema hosted in the same project as the one used for creation. The schema has all the necessary shapes defined in the same resource and does not reference other schemas or contexts.\nNodes Users Throughput (req/s) p50 (ms) p75 (ms) p95 (ms) p99 (ms) 1 16 82 201 228 272 316 2 32 138 211 301 410 504 4 64 258 153 317 668 838 6 96 364 147 273 879 1198","title":"Create Resource, Validation, InProject Resolution, Single Schema"},{"location":"/docs/delta/benchmarks.html#fetch-resource","text":"The test evaluates the throughput and latency at 50, 75, 95 and 99 percentiles when getting a resource by its id. It shows the impact of transforming the original json representation into an RDF graph, injecting the system metadata (e.g. rev, deprecated, project, org etc.) and presenting the result in a JSON-LD representation.\nNodes Users Throughput (req/s) p50 (ms) p75 (ms) p95 (ms) p99 (ms) 1 16 777 20 21 28 33 2 32 1518 20 22 28 45 4 64 3000 20 22 30 47 6 96 4393 19 25 40 61","title":"Fetch Resource"},{"location":"/docs/delta/benchmarks.html#fetch-resource-source","text":"The test evaluates the throughput and latency at 50, 75, 95 and 99 percentiles when getting a resource by its id in its original representation.\nNodes Users Throughput (req/s) p50 (ms) p75 (ms) p95 (ms) p99 (ms) 1 16 1050 15 16 17 26 2 32 2103 15 16 18 30 4 64 3821 16 17 19 37 6 96 5648 16 17 21 37","title":"Fetch Resource Source"},{"location":"/docs/utilities/index.html","text":"","title":"Utilities"},{"location":"/docs/utilities/index.html#utilities","text":"","title":"Utilities"},{"location":"/docs/utilities/index.html#domains-schemas-vocabularies-","text":"Nexus provides some schemas which make building provenance based knowledge graphs easier.","title":"Domains (Schemas, Vocabularies)"},{"location":"/docs/utilities/index.html#nexus-core-schemas","text":"","title":"Nexus Core Schemas"},{"location":"/docs/utilities/index.html#nexus-schemaorg","text":"SHACL version of a subset of schemas defined by schema.org that are commonly used in Blue Brain Nexus.\nSource Code","title":"nexus-schemaorg"},{"location":"/docs/utilities/index.html#nexus-prov","text":"Data management oriented SHACL version of W3C PROV-O.\nSource Code","title":"nexus-prov"},{"location":"/docs/utilities/index.html#nexus-domain-specific-components","text":"","title":"Nexus domain specific components"},{"location":"/docs/utilities/index.html#nexus-bbp-data-models","text":"Data models that Blue Brain has developed in order to facilitate the integration of specific neuroscience data.\nSource Code","title":"Nexus BBP Data models"},{"location":"/docs/utilities/index.html#neuroshapes","text":"A community effort to develop open SHACL schemas for FAIR (Findable, Accessible, Interoperable, Reproducible) neuroscience data.\nSource Code","title":"Neuroshapes"},{"location":"/docs/utilities/index.html#nexus-tools","text":"","title":"Nexus Tools"},{"location":"/docs/utilities/index.html#nexus-cli","text":"A command line interface (CLI) to perform basic operations on a Nexus deployment.\nSource Code","title":"Nexus CLI"},{"location":"/docs/utilities/index.html#nexus-python-sdk","text":"A Python wrapper for the Blue Brain Nexus REST API.","title":"Nexus Python SDK"},{"location":"/docs/utilities/index.html#how-to-install-the-nexus-python-sdk","text":"pip install nexus-sdk","title":"How to install the Nexus Python SDK"},{"location":"/docs/utilities/index.html#usage","text":"import nexussdk as nexus\n\nnexus.config.set_environment(DEPLOYMENT)\nnexus.config.set_token(TOKEN)\n\nnexus.permissions.fetch()\nSource Code | Documentation","title":"Usage"},{"location":"/docs/utilities/index.html#nexus-js","text":"The Javascript SDK provides many features to help you build web applications that integrate with Blue Brain Nexus.","title":"Nexus.js"},{"location":"/docs/utilities/index.html#how-to-install-nexus-js","text":"npm install @bbp/nexus-sdk","title":"How to install Nexus.js"},{"location":"/docs/utilities/index.html#typescript-declarations","text":"The SDK is written in Typescript, so type declarations for all operations are included in the package.\nYou can generate documentation using npm run documentation or with docker by running make documentation. More information can be found here.\nSource Code\nDocumentation:\nnexus-sdk","title":"Typescript declarations"},{"location":"/docs/utilities/index.html#other-javascript-packages","text":"","title":"Other JavaScript Packages"},{"location":"/docs/utilities/index.html#react-nexus","text":"This package contains some utility components to easily integrate the Nexus SDK as React hooks or contexts.\nreact-nexus","title":"React-Nexus"},{"location":"/docs/utilities/index.html#nexus-link","text":"Another utility packages was written to facilitate chained calling behavior, which can be used independently of Nexus.js for other projects.\nnexus-link","title":"Nexus-Link"},{"location":"/docs/utilities/index.html#indexing-data-in-other-systems","text":"Nexus also provides a CLI tool to index data into other systems. PostgreSQL and InfluxDB are currently supported. More information about this tool can be found here.","title":"Indexing data in other systems"},{"location":"/docs/utilities/projections.html","text":"","title":"Indexing data in other systems"},{"location":"/docs/utilities/projections.html#indexing-data-in-other-systems","text":"","title":"Indexing data in other systems"},{"location":"/docs/utilities/projections.html#introduction","text":"Blue Brain Nexus supports out of the box document and RDF graph based indices of the data through Elasticsearch, Sparql and Composite views. These cover a wide range of requirements but may not suffice in certain cases. New indexing capabilities can be added using external processes that subscribe to the global event log, enrich the information and project the result in arbitrary stores.\nBy exposing over HTTP(S) the event log using the Server-Sent Events W3C recommendation, Blue Brain Nexus allows clients to replicate the internal streaming approach, and the push based asynchronous service communication for resource projections.\nAn example of such a tool is the newly introduced docker image (bluebrain/nexus-cli) that supports projecting data to InfluxDB and PostgreSQL databases. The image is yet another software artifact in the Blue Brain Nexus ecosystem that complements the system to introduce new indexing capabilities that are not part of the core.\nIt functions as described above following a simple streaming approach with the following stages:\nsubscribe to the global event log of the KG service for each individual event (change in the system) collect additional information about the change and the current state of the resource; the information is collected by querying the Sparql view defined in the project where the change occurred the collected information is projected to a target system (InfluxDB or PostgreSQL) by performing an insert or update\nThe sections below describe how each of the newly supported projections work and how one would configure them.","title":"Introduction"},{"location":"/docs/utilities/projections.html#projecting-data-into-influxdb","text":"In order to compute statistics about various kinds of data hosted in Blue Brain Nexus, like volume over time, a time series database like InfluxDB is a very good solution.\nThe following example shows how one could use the bluebrain/nexus-cli docker image, InfluxDB and Grafana to continuously compute statistics about data evolution in each project in Blue Brain Nexus.\nTo start, let’s set up an influxdb docker container running in the background:\ndocker run -p 8086:8086 -d -e INFLUXDB_DATA_MAX_VALUES_PER_TAG=0 --name influx influxdb:1.8.0\nThe additional environment variable INFLUXDB_DATA_MAX_VALUES_PER_TAG disables the limit of maximum tag values for measurements.\nWe can now configure the projection using two config files (env.conf and influx.conf in the HOCON format) that will be mounted to the nexus-cli container:\nmkdir config\n\necho '\nenv {\n  endpoint = ${NEXUS_ENDPOINT}\n  token = ${NEXUS_TOKEN}\n  http-client {\n    retry {\n      strategy = \"exponential\"\n      initial-delay = 100 millis\n      max-delay = 20 seconds\n      max-retries = 10\n      condition = \"on-server-error\"\n    }\n  }\n  default-sparql-view = \"https://bluebrain.github.io/nexus/vocabulary/defaultSparqlIndex\"\n}\n' > config/env.conf\n\necho '\ninflux {\n  endpoint = ${NEXUS_INFLUXDB_ENDPOINT}\n  database = ${NEXUS_INFLUXDB_DATABASE}\n  db-creation-command = \"\"\"CREATE DATABASE \"\"\"\"${influx.database}\"\"\"\" WITH DURATION 10000d REPLICATION 1 SHARD DURATION 7d NAME \"\"\"\"${influx.database}\"\"\"\"\"\"\"\n  offset-file = ${NEXUS_INFLUXDB_OFFSET_FILE}\n  offset-save-interval = 5 minutes\n  default-sparql-query = \"\"\"\n    PREFIX ns:<https://neuroshapes.org/>\n    PREFIX schema:<http://schema.org/>\n    PREFIX nxv:<https://bluebrain.github.io/nexus/vocabulary/>\n\n    SELECT ?project ?type ?created ?deprecated ?bytes WHERE {\n      <{resource_id}>       nxv:createdAt            ?created .\n      <{resource_id}>      nxv:deprecated         ?deprecated .\n      OPTIONAL {\n        <{resource_id}> schema:distribution                  ?d .\n        ?d                                a schema:DataDownload .\n        ?d               schema:contentSize                 ?cs .\n        ?cs                    schema:value         ?bytesValue .\n      }\n      BIND(\"{resource_project}\" AS ?project)\n      BIND(REPLACE(\"{resource_type}\", \"^.*/([^/]+)$\", \"$1\") AS ?type)\n      BIND(IF(BOUND(?bytesValue),?bytesValue,0) AS ?bytes)\n    }\n  \"\"\"\n  projects {\n    bbp/atlas {\n      types = [\n        {\n          type = ${nrs}\"BrainAtlasRelease\"\n          query = ${influx.default-sparql-query}\n          measurement = \"distribution\"\n          values = [\"bytes\"]\n          timestamp = \"created\"\n        },\n        {\n          type = ${nrs}\"BrainAtlasSpatialReferenceSystem\"\n          query = ${influx.default-sparql-query}\n          measurement = \"distribution\"\n          values = [\"bytes\"]\n          timestamp = \"created\"\n        }\n      ]\n    }\n  }\n}\nnrs = \"https://neuroshapes.org/\"\n' > config/influx.conf\nThe env.conf file defines a set of global properties that will be read from the process environment variables like for example the NEXUS_ENDPOINT or the NEXUS_TOKEN to be used for connecting to the system and how errors should be retried.\nThe influx.conf file defines how should the execution happen, what projects and types to consider, what queries to be executed for collecting information about each resource and where to project the result.\nIn this example we will consider that we’d like to index information about resources with the types https://neuroshapes.org/BrainAtlasRelease and https://neuroshapes.org/BrainAtlasSpatialReferenceSystem from the bbp/atlas project. The information that we would like to collect about each of these resources is defined in the variables selected in the SPARQL query, specifically:\n?project: the project where the resource is hosted (resources of the same type can be in multiple projects) ?type: the type that was used to configure the collection of information (resources may have multiple types, but we may only be interested in one) ?created: the timestamp when the resource was initially created ?deprecated: whether the resource was deprecated or not ?bytes: the number of bytes of the resource distribution\nFor each of the resources in the system that have the type defined in the configuration a new point will be created in the InfluxDB database using the ?created value as the timestamp, ?bytes as field with its value and the ?project, ?type and ?deprecated as tags.\nObviously some of the information we’re looking for is not necessarily present in the RDF graph, but we can obtain this information by means of templating. The SPARQL select query executed is first processed to replace some well known tokens (supported ones are: resource_id - the id of the resource for which the current change was recorded, resource_project - the project in which the change was recorded, resource_type - the type of the resource that matches the type entry in the configuration and event_rev - the revision of the resource that the current processed event has yielded). Information can thus be passed from the context of each event to the SPARQL select query. The BIND statements allow setting fixed or conditional values to the collected variable patterns:\nBIND(\"{resource_project}\" AS ?project) binds the project label (bbp/atlas in this case) to the ?project variable BIND(REPLACE(\"{resource_type}\", \"^.*/([^/]+)$\", \"$1\") AS ?type) binds the tail (curie name) to the ?type variable such that a type like https://neuroshapes.org/BrainAtlasRelease will be bound as BrainAtlasRelease to the ?type variable BIND(IF(BOUND(?bytesValue),?bytesValue,0) AS ?bytes) binds the value of the selected literal bytes value if it is found in the graph, or the value of 0 otherwise.\nSince the SPARQL query configuration supports templating, the queries can be very efficient. They can select triples with a well defined starting point (the resource id) which are simple for the triple store to handle due to optimal use of indices. Any Sparql query can be executed; the selected variables will be projected as either a timestamp, a field or a tag, depending on the configuration. If the query returns multiple rows only the first one will be considered.\nThe configuration also mentions a file (NEXUS_INFLUXDB_OFFSET_FILE) where the tool can save its progress such that it can resume from the last event processed in case of restarts.\nWe’re ready to start the tool:\ndocker run \\\n  -v $(pwd)/config:/home/nexus/.nexus \\\n  --link=influx \\\n  -e NEXUS_ENDPOINT=\"https://sandbox.bluebrainnexus.io/v1\" \\\n  -e NEXUS_TOKEN=\"******\" \\\n  -e NEXUS_INFLUXDB_ENDPOINT=\"http://influx:8086\" \\\n  -e NEXUS_INFLUXDB_DATABASE=\"nstats\" \\\n  -e NEXUS_INFLUXDB_OFFSET_FILE=\"/home/nexus/.nexus/influx.offset\" \\\n  bluebrain/nexus-cli:1.3.0 influxdb run\nThe tool will output something like the following (assuming the selected data exists in the system), and it’s going to continue to run, waiting for new changes. The tool uses a continuous subscription, so it will first replay the entire log until it reaches the end and then it’s going to wait for new changes to be recorded in the system.\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nStarting influxDB projection...\nRead 100 events (success: 0, skip: 100, errors: 0)\nRead 200 events (success: 0, skip: 200, errors: 0)\nRead 300 events (success: 0, skip: 300, errors: 0)\nRead 400 events (success: 0, skip: 400, errors: 0)\nRead 500 events (success: 0, skip: 500, errors: 0)\nRead 600 events (success: 0, skip: 600, errors: 0)\nRead 700 events (success: 0, skip: 700, errors: 0)\nRead 800 events (success: 0, skip: 800, errors: 0)\nRead 900 events (success: 0, skip: 900, errors: 0)\nRead 1000 events (success: 0, skip: 1000, errors: 0)\n...\nRead 2023400 events (success: 905059, skip: 1118341, errors: 0)\nProcessed 905100 events (success: 905100, errors: 0)\nRead 2023500 events (success: 905159, skip: 1118341, errors: 0)\nProcessed 905200 events (success: 905200, errors: 0)\nThe final step is to set up grafana to visualize the time series data recorded.\ndocker run -p 3000:3000 -d --link=influx --name grafana grafana/grafana:6.4.4\nAfter the grafana container starts successfully, we need to configure it to add the influxdb datasource and create a dashboard to visualize the data:\ncurl -XPOST -H\"Content-Type: application/json\" -s http://localhost:3000/api/datasources -u admin:admin -d '\n{\n  \"orgId\": 1,\n  \"name\": \"InfluxDB\",\n  \"type\": \"influxdb\",\n  \"typeLogoUrl\": \"\",\n  \"access\": \"proxy\",\n  \"url\": \"http://influx:8086\",\n  \"password\": \"\",\n  \"user\": \"\",\n  \"database\": \"nstats\",\n  \"basicAuth\": false,\n  \"basicAuthUser\": \"\",\n  \"basicAuthPassword\": \"\",\n  \"withCredentials\": false,\n  \"isDefault\": false,\n  \"jsonData\": {\n    \"httpMode\": \"GET\",\n    \"keepCookies\": [],\n    \"timeInterval\": \"1h\"\n  }\n}'\n\nwget https://bluebrainnexus.io/docs/additional-info/grafana-dashboard.json\n\ncurl -XPOST -H\"Content-Type: application/json\" -s http://localhost:3000/api/dashboards/db -d @grafana-dashboard.json\nThe last command should output something like:\n{\"id\":1,\"slug\":\"blue-brain-nexus-statistics\",\"status\":\"success\",\"uid\":\"CjzVq5RMk\",\"url\":\"/d/CjzVq5RMk/blue-brain-nexus-statistics\",\"version\":1}\nYou can now navigate to the grafana container to view the data at http://localhost:3000 (default username and password are admin:admin). Assuming the configuration matches the data in the Blue Brain Nexus deployment the board should look similar to the following:","title":"Projecting data into InfluxDB"},{"location":"/docs/utilities/projections.html#projecting-data-into-postgresql","text":"A lot of users prefer using a relational model with a fixed schema to query data in systems. They’re used to using SQL a query language and wouldn’t necessarily want to learn a new query language like SPARQL to navigate the graph. Additionally, there are a lot of analytics tools that support connecting to RDBMS systems and enable real time queries with strong visualization engines.\nIn order to address this use case we’ve built the bluebrain/nexus-cli docker image to be used for projecting data into a PostgreSQL database.\nThe following example shows how one could use the bluebrain/nexus-cli docker image to project a subset of an RDF graph to a strict relational model. The use case we’re going to address in this example is to collect all schema resources in a Blue Brain Nexus instance and identify all transitive dependencies.\nTo start, let’s set up a postgresql docker container running in the background:\ndocker run -p 5432:5432 -d -e POSTGRES_PASSWORD=postgres --name postgres library/postgres:12.2\nWe can now configure the projection using two config files (env.conf and postgres.conf in the HOCON format) that will be mounted to the nexus-cli container:\nmkdir config\n\necho '\nenv {\n  endpoint = ${NEXUS_ENDPOINT}\n  token = ${NEXUS_TOKEN}\n  http-client {\n    retry {\n      strategy = \"exponential\"\n      initial-delay = 100 millis\n      max-delay = 20 seconds\n      max-retries = 10\n      condition = \"on-server-error\"\n    }\n  }\n  default-sparql-view = \"https://bluebrain.github.io/nexus/vocabulary/defaultSparqlIndex\"\n}\n' > config/env.conf\n\necho '\npostgres {\n  host = ${NEXUS_POSTGRES_HOST}\n  port = ${NEXUS_POSTGRES_PORT}\n  username = ${NEXUS_POSTGRES_USERNAME}\n  password = ${NEXUS_POSTGRES_PASSWORD}\n  database = ${NEXUS_POSTGRES_DATABASE}\n  offset-file =  ${NEXUS_POSTGRES_OFFSET_FILE}\n  offset-save-interval = 1s\n  projects {\n    tutorialnexus/datamodels {\n      sparql-view = ${env.default-sparql-view}\n      types = [\n        {\n          type = \"https://bluebrain.github.io/nexus/vocabulary/Schema\"\n          queries = [\n            {\n              table = schemas\n              ddl =\n                \"\"\"\n                  CREATE TABLE IF NOT EXISTS schemas (\n                    id      VARCHAR NOT NULL UNIQUE,\n                    rev     INT NOT NULL,\n                    project VARCHAR NOT NULL\n                  );\n                \"\"\"\n              query =\n                \"\"\"\n                  PREFIX nxv:<https://bluebrain.github.io/nexus/vocabulary/>\n                  PREFIX owl:<http://www.w3.org/2002/07/owl#>\n                  SELECT ?id ?rev ?project\n                  WHERE {\n                    <{resource_id}>             a   nxv:Schema .\n                    <{resource_id}>       nxv:rev          ?rev .\n                    BIND(\"{resource_id}\" as ?id) .\n                    BIND(\"{resource_project}\" AS ?project) .\n                    FILTER(?rev >= {event_rev})\n                  }\n                  LIMIT 1\n                \"\"\"\n            },\n            {\n              table = schema_imports\n              ddl =\n                \"\"\"\n                  CREATE TABLE IF NOT EXISTS schema_imports (\n                    id     VARCHAR NOT NULL,\n                    import VARCHAR NOT NULL\n                  );\n                \"\"\"\n              query =\n                \"\"\"\n                  PREFIX nxv:<https://bluebrain.github.io/nexus/vocabulary/>\n                  PREFIX owl:<http://www.w3.org/2002/07/owl#>\n                  SELECT ?id ?import\n                  WHERE {\n                    <{resource_id}>           a nxv:Schema .\n                    <{resource_id}> owl:imports    ?import .\n                    <{resource_id}>     nxv:rev       ?rev .\n                    BIND(\"{resource_id}\" as ?id) .\n                    FILTER(?rev >= {event_rev})\n                  }\n                \"\"\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n' > config/postgres.conf\nThe env.conf file defines a set of global properties that will be read from the process environment variables like for example the NEXUS_ENDPOINT or the NEXUS_TOKEN to be used for connecting to the system and how errors should be retried.\nThe postgres.conf file defines how should the execution happen, what projects and types to consider, what queries to be executed for collecting information about each resource and where to project the result.\nIn this example we will collect all resources of type Schema from the tutorialnexus/datamodels and project a subset of the information in two tables. The information that we would like to collect about each of these resources is defined in the variables selected in the SPARQL queries, specifically for the schemas table we’ll collect:\n?id: the id of each schema ?rev: the last known revision of each schema ?project: the project where the schema resides\nFor the schema_imports table we’ll collect the import relationships:\n?id: the id of each schema ?import: the id of the schema that is imported by the one identified by ?id\nThe schema_imports table will contain multiple rows for a schema identified by ?id if it defines multiple imports.\nObviously some of the information we’re looking for is not necessarily present in the RDF graph, but we can obtain this information by means of templating. The SPARQL select query executed is first processed to replace some well known tokens (supported ones are: resource_id - the id of the resource for which the current change was recorded, resource_project - the project in which the change was recorded, resource_type - the type of the resource that matches the type entry in the configuration and event_rev - the revision of the resource that the current processed event has yielded). Information can thus be passed from the context of each event to the SPARQL select query. The BIND statements allow setting fixed or conditional values to the collected variable patterns, like for example: the BIND(\"{resource_project}\" AS ?project) binds the project label (tutorialnexus/datamodels in this case) to the ?project variable.\nSince the SPARQL query configuration supports templating, the queries can be very efficient. They can select triples with a well defined starting point (the resource id) which are simple for the triple store to handle due to optimal use of indices. Any Sparql query can be executed; the selected variables will be projected as either a timestamp, a field or a tag, depending on the configuration.\nThe configuration requires the definition of a DDL statement for each type selection. The following type mapping is currently supported by the tool:\nNode Type DB Type Iri Character types, such as: char, varchar and text Blank Node Character types, such as: char, varchar and text http://www.w3.org/2001/XMLSchema#string Character types, such as: char, varchar and text http://www.w3.org/2001/XMLSchema#long Numeric types, such as int http://www.w3.org/2001/XMLSchema#int Numeric types, such as int http://www.w3.org/2001/XMLSchema#integer Numeric types, such as int http://www.w3.org/2001/XMLSchema#boolean Boolean http://www.w3.org/2001/XMLSchema#dateTime Timestamp\nThe configuration also mentions a file (NEXUS_POSTGRES_OFFSET_FILE) where the tool can save its progress such that it can resume from the last event processed in case of restarts.\nWe’re ready to start the tool:\ndocker run \\\n  -v $(pwd)/config:/home/nexus/.nexus \\\n  --link=postgres \\\n  -e NEXUS_ENDPOINT=\"https://sandbox.bluebrainnexus.io/v1\" \\\n  -e NEXUS_TOKEN=\"******\" \\\n  -e NEXUS_POSTGRES_HOST=\"postgres\" \\\n  -e NEXUS_POSTGRES_PORT=\"5432\" \\\n  -e NEXUS_POSTGRES_DATABASE=\"postgres\" \\\n  -e NEXUS_POSTGRES_USERNAME=\"postgres\" \\\n  -e NEXUS_POSTGRES_PASSWORD=\"postgres\" \\\n  -e NEXUS_POSTGRES_OFFSET_FILE=\"/home/nexus/.nexus/postgres.offset\" \\\n  bluebrain/nexus-cli:1.3.0 postgres run\nThe tool will output something like the following (assuming the selected data exists in the system), and it’s going to continue to run, waiting for new changes. The tool uses a continuous subscription, so it will first replay the entire log until it reaches the end and then it’s going to wait for new changes to be recorded in the system.\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nStarting influxDB projection...\nRead 100 events (success: 0, skip: 100, errors: 0)\nRead 200 events (success: 0, skip: 200, errors: 0)\nRead 300 events (success: 0, skip: 300, errors: 0)\nRead 400 events (success: 0, skip: 400, errors: 0)\nRead 500 events (success: 0, skip: 500, errors: 0)\nRead 600 events (success: 0, skip: 600, errors: 0)\nRead 700 events (success: 0, skip: 700, errors: 0)\nRead 800 events (success: 0, skip: 800, errors: 0)\nRead 900 events (success: 0, skip: 900, errors: 0)\nRead 1000 events (success: 0, skip: 1000, errors: 0)\n...\nRead 238000 events (success: 0, skip: 238000, errors: 0)\nRead 238100 events (success: 0, skip: 238100, errors: 0)\nRead 238200 events (success: 9, skip: 238191, errors: 0)\nProcessed 100 events (success: 100, errors: 0)\nRead 238300 events (success: 109, skip: 238191, errors: 0)\nRead 238400 events (success: 177, skip: 238223, errors: 0)\nRead 238500 events (success: 177, skip: 238323, errors: 0)\nWe can now query the data that has been projected to the PostgreSQL container.\nFirst we need to login:\ndocker exec -it postgres psql -U postgres\npsql (12.2 (Debian 12.2-2.pgdg100+1))\nType \"help\" for help.\n\npostgres=#\nCount the schemas:\npostgres=# select count(*) from schemas;\n count\n-------\n   176\n(1 row)\nFind the top 5 schemas with the most direct imports:\npostgres=# select id,count(import) from schema_imports group by id order by count desc limit 5;\n                          id                          | count\n------------------------------------------------------+-------\n https://neuroshapes.org/commons/entity               |     7\n https://neuroshapes.org/commons/minds                |     6\n https://neuroshapes.org/dash/density                 |     4\n https://neuroshapes.org/commons/experimentalprotocol |     4\n https://neuroshapes.org/dash/intrasharprecordedcell  |     4\n(5 rows)\nFind all transitive imports of a specific schema:\npostgres=# WITH RECURSIVE tree(schema, timport) AS (\n   SELECT\n      s.id,\n      s.import\n   FROM\n      schema_imports s\n   LEFT JOIN\n      schema_imports p ON s.import = p.id\n   WHERE\n      p.id IS NULL\n   UNION\n   SELECT\n      id,\n      timport\n   FROM\n      tree\n   INNER JOIN\n      schema_imports on tree.schema = schema_imports.import\n)\nSELECT * FROM tree where schema = 'https://neuroshapes.org/dash/intrasharprecordedcell';\n\n                       schema                        |                        timport\n-----------------------------------------------------+-------------------------------------------------------\n https://neuroshapes.org/dash/intrasharprecordedcell | https://neuroshapes.org/commons/labeledontologyentity\n https://neuroshapes.org/dash/intrasharprecordedcell | https://provshapes.org/commons/derivation\n https://neuroshapes.org/dash/intrasharprecordedcell | https://provshapes.org/commons/invalidation\n https://neuroshapes.org/dash/intrasharprecordedcell | https://provshapes.org/commons/generation\n https://neuroshapes.org/dash/intrasharprecordedcell | https://neuroshapes.org/commons/language\n https://neuroshapes.org/dash/intrasharprecordedcell | https://neuroshapes.org/commons/license\n https://neuroshapes.org/dash/intrasharprecordedcell | https://neuroshapes.org/commons/vector3d\n https://neuroshapes.org/dash/intrasharprecordedcell | https://neuroshapes.org/commons/propertyvalue\n(8 rows)","title":"Projecting data into PostgreSQL"},{"location":"/docs/utilities/nexus-python-cli.html","text":"","title":"MovieLens Tutorial using the Nexus Python CLI"},{"location":"/docs/utilities/nexus-python-cli.html#movielens-tutorial-using-the-nexus-python-cli","text":"","title":"MovieLens Tutorial using the Nexus Python CLI"},{"location":"/docs/utilities/nexus-python-cli.html#overview","text":"This example-driven tutorial presents 5 steps to get started with Blue Brain Nexus to build and query a simple knowledge graph. The goal is to go over some capabilities of Blue Brain Nexus enabling:\nThe creation of a project as a protected data space to work in An easy ingestion of a dataset within a given project The listing and querying of a dataset Sharing a dataset by making it public\nNote This quick start tutorial tutorial makes use of: an AWS deployment of Blue Brain Nexus available at https://sandbox.bluebrainnexus.io. Nexus Python CLI, a python Command Line Interface.\nLet’s get started.","title":"Overview"},{"location":"/docs/utilities/nexus-python-cli.html#set-up","text":"Install the Nexus Python CLI:\npip install git+https://github.com/BlueBrain/nexus-cli","title":"Set up"},{"location":"/docs/utilities/nexus-python-cli.html#create-a-project","text":"Projects in BlueBrain Nexus are spaces where data can be:\nmanaged: created, updated, deprecated, validated, secured; accessed: directly by ids or through various search interfaces; shared: through fine grain Access Control List.\nA project is always created within an organization just like a git repository is created in a github organization. Organizations can be understood as accounts hosting multiple projects.","title":"Create a project"},{"location":"/docs/utilities/nexus-python-cli.html#select-an-organization","text":"Note A public organization named tutorialnexus is already created for the purpose of this tutorial. All projects will be created under this organization.\nThe following command should list the organizations you have access to. The tutorialnexus organization should be listed and tagged as non-deprecated in the output.\nCommand nexus orgs list Output +----------------+-------------------+-----------------------------------------------------+------------+\n| Name           | Description       | Id                                                  | Deprecated |\n+----------------+-------------------+-----------------------------------------------------+------------+\n| tutorialnexus  | Nexus sandbox     | https://sandbox.bluebrainnexus.io/v1/tutorialnexus     | False      |\nLet select the tutorialnexus organization.\nCommand nexus orgs select tutorialnexus Output tutorialnexus organization selected.\nIn case the tutorialnexus organization is not available, pick an organization label (value of $ORGLABEL) and create an organization using the following command:\nCommand nexus orgs create $ORGLABEL && nexus orgs select $ORGLABEL && nexus orgs list Output Organization created (id: https://sandbox.bluebrainnexus.io/v1/orgs/$ORGLABEL)\norganization selected.\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| Label         | Description | Id                                                                     | Deprecated |\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| $ORGLABEL     |             | https://sandbox.bluebrainnexus.io/v1/orgs/$ORGLABEL                    | False      |\n+---------------+-------------+------------------------------------------------------------------------+------------+","title":"Select an organization"},{"location":"/docs/utilities/nexus-python-cli.html#create-a-project","text":"A project is created with a label and within an organization. The label should be made of alphanumerical characters and its length should be between 3 and 32 (it should match the regex: [a-zA-Z0-9-_]{3,32}).\nPick a label (hereafter referred to as $PROJECTLABEL) and create a project using the following command. It is recommended to use your username to avoid collision of projects labels within an organization.\nCommand nexus projects create $PROJECTLABEL && nexus projects list Output Project created (id: https://sandbox.bluebrainnexus.io/v1/projects/tutorialnexus/$PROJECTLABEL)\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| Label         | Description | Id                                                                     | Deprecated |\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| $PROJECTLABEL |             | https://sandbox.bluebrainnexus.io/v1/projects/tutorialnexus/$PROJECTLABEL | False      |\n+---------------+-------------+------------------------------------------------------------------------+------------+\nBy default, created projects are private meaning that only the project creator (you) has read and write access to it. We’ll see below how to make a project public.\nThe output of the previous command shows the list of projects you have read access to. The project you just created should be the only one listed at this point. Let select it.\nCommand nexus projects select $PROJECTLABEL && nexus projects list Output $PROJECTLABEL project selected\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| Label         | Description | Id                                                                     | Deprecated |\n+---------------+-------------+------------------------------------------------------------------------+------------+\n| $PROJECTLABEL |             | https://sandbox.bluebrainnexus.io/v1/projects/tutorialnexus/$PROJECTLABEL | False      |\n+---------------+-------------+------------------------------------------------------------------------+------------+\nWe are all set to bring some data within the project we just created.","title":"Create a project"},{"location":"/docs/utilities/nexus-python-cli.html#ingest-data","text":"The CLI supports the ingestion of datasets in two formats: JSON and CSV.","title":"Ingest data"},{"location":"/docs/utilities/nexus-python-cli.html#ingest-json","text":"","title":"Ingest JSON"},{"location":"/docs/utilities/nexus-python-cli.html#ingest-json-from-a-payload","text":"Command nexus resources create  -d \\\n'{\n  \"movieId\":\"1\",\n  \"title\": \"Toy Story (1995)\",\n  \"genres\": \"Adventure|Animation|Children|Comedy|Fantasy\"\n}'\nNote Note that ingesting a JSON array is not supported.\nBy default Nexus generates an identifier (in fact a URI) for a created resource as shown in the output of the above command. Furthermore, it is possible to provide:\na specific identifier by setting the --id option and a type by setting the --type option\nCommand nexus resources create  --id https://movies.com/movieId/1 \\\n                        --type https://schema.org/Movie -d \\\n                        '{\n                          \"movieId\":\"1\",\n                          \"title\": \"Toy Story (1995)\",\n                          \"genres\": \"Adventure|Animation|Children|Comedy|Fantasy\"\n                        }' Output Resource created (id: https://movies.com/movieId/1)\nIdentifiers and types can also be provided directly in the JSON payload using respectively: the @id and @type keys.\nThe created resource identified by https://movies.com/movieId/1 can then be fetched using the following command :\nCommand nexus resources fetch https://movies.com/movieId/1 Output {\n  \"@context\": [\n    {\n          \"@base\": \"https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/\",\n          \"@vocab\": \"https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/\"\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"https://movies.com/movieId/1\",\n  \"@type\": \"https://schema.org/Movie\",\n  \"genres\": \"Adventure|Animation|Children|Comedy|Fantasy\",\n  \"movieId\": \"1\",\n  \"title\": \"Toy Story (1995)\",\n  \"_self\": \"https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/https%3A%2F%2Fmovies.com%2FmovieId%2F1\",\n  \"_constrainedBy\": \"https://bluebrain.github.io/nexus/schemas/unconstrained.json\",\n  \"_project\": \"https://sandbox.bluebrainnexus.io/v1/projects/tutorialnexus/$PROJECTLABEL\",\n  \"_rev\": 1,\n  \"_deprecated\": false,\n  \"_createdAt\": \"2019-06-28T21:26:29.197Z\"\n}","title":"Ingest JSON from a payload"},{"location":"/docs/utilities/nexus-python-cli.html#ingest-json-from-a-file","text":"A JSON payload can be ingested from a file.\nnexus resources create --file /path/to/file.json\nA directory (/path/to/dir) of JSON files can be ingested by using the following looping command:\nfind /path/to/dir -name '*.json' -exec  nexus resources create --file {} \\;\nIngested resources can be listed using the following command:\nnexus resources list --size 10","title":"Ingest JSON from a file"},{"location":"/docs/utilities/nexus-python-cli.html#ingest-csv-files","text":"To illustrate how to load CSV files we will work with the small version of the MovieLens dataset containing a set of movies (movies.csv) along with their ratings (ratings.csv) and tags (tags.csv) made by users. An overview of this dataset can be found here.","title":"Ingest CSV files"},{"location":"/docs/utilities/nexus-python-cli.html#download-the-dataset","text":"The MovieLens dataset can be downloaded either directly on a browser or using a curl command as shown below.\nThe following command download, unzip the dataset in the folder ~/ml-latest-small and list the files. The downloaded MovieLens dataset is made of four csv files as shown in the output tab.\nCommand cd ~ && curl -s -O http://files.grouplens.org/datasets/movielens/ml-latest-small.zip && unzip -qq ml-latest-small.zip && cd ml-latest-small && ls Output README.txt\tlinks.csv\tmovies.csv\tratings.csv\ttags.csv","title":"Download the dataset"},{"location":"/docs/utilities/nexus-python-cli.html#load-the-dataset","text":"Let first load the movies and merge them with the links.\nnexus resources create -f ~/ml-latest-small/movies.csv -t Movie --format csv --idcolumn movieId --mergewith ~/ml-latest-small/links.csv --mergeon movieId --max-connections 4\nThen we can load the tags.\nnexus resources create -f ~/ml-latest-small/tags.csv -t Tag --format csv --max-connections 50\nAnd finally load the ratings. Loading 100837 resources might take some time and also it is not needed to load them all to follow this tutorial. The maximum number of concurrent connections (–max-connections) can be increased for better loading performance.\nnexus resources create -f ~/ml-latest-small/ratings.csv -t Rating --format csv --max-connections 50","title":"Load the dataset"},{"location":"/docs/utilities/nexus-python-cli.html#access-data","text":"","title":"Access data"},{"location":"/docs/utilities/nexus-python-cli.html#view-data-in-nexus-web","text":"Nexus is deployed with a web application allowing to browse organizations, projects, data and schemas you have access to. You can go to the address https://sandbox.bluebrainnexus.io/web and browse the data you just loaded.","title":"View data in Nexus Web"},{"location":"/docs/utilities/nexus-python-cli.html#list-data","text":"The simplest way to accessed data within Nexus is by listing them. The following command lists 5 resources:\nCommand nexus resources list --size 5 Output +------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\n| Id                                                                                 | Type                                                                       | Revision | Deprecated |\n+------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Movie_1  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Movie | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Movie_9  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Movie | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Movie_12 | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Movie | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Movie_7  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Movie | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Movie_8  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Movie | 1        | False      |\n+------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\nThe full payload of the resources are not retrieved when listing them: only identifier, type as well as Nexus added metadata are. But the result list can be scrolled and each resource fetched by identifier.\nCommand nexus resources fetch https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Movie_1 Output {\n  \"@context\": [\n    {\n      \"@base\": \"https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/\",\n      \"@vocab\": \"https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/\"\n    },\n    \"https://bluebrain.github.io/nexus/contexts/resource.json\"\n  ],\n  \"@id\": \"Movie_1\",\n  \"@type\": \"Movie\",\n  \"genres\": \"Adventure|Animation|Children|Comedy|Fantasy\",\n  \"imdbId\": 114709,\n  \"movieId\": 1,\n  \"title\": \"Toy Story (1995)\",\n  \"tmdbId\": 862.0,\n  \"_self\": \"../../resource/https%3A%2F%2Fbbp.epfl.ch%2Fnexus%2Fv1%2Fresources%2Ftutorialnexus%2F$PROJECTLABEL%2F_%2FMovie_1\",\n  \"_constrainedBy\": \"nxs:resource.json\",\n  \"_project\": \"../../../../../projects/tutorialnexus/$PROJECTLABEL\",\n  \"_createdAt\": \"2019-01-17T10:32:02.221Z\",\n  \"_createdBy\": \"....\",\n  \"_updatedAt\": \"2019-01-17T10:32:02.221Z\",\n  \"_updatedBy\": \"....\",\n  \"_rev\": 1,\n  \"_deprecated\": false\n}\nWhenever a resource is created, Nexus injects some useful metadata. The table below details some of them:\nMetadata Description Value Type @id Generated resource identifier. The user can provide its own identifier. URI @type The type of the resource if provided by the user. URI _self The resource address within Nexus. It contains the resource management details such as the organization, the project and the schema. URI _createdAt The resource creation date. DateTime _createdBy The resource creator. DateTime\nNote that Nexus uses JSON-LD as data exchange format.\nFilters are available to list specific resources. For example a list of resources of type Rating can be retrieved by running the following command:\nCommand nexus resources list --type Rating --size 5 Output +------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\n| Id                                                                                 | Type                                                                       | Revision | Deprecated |\n+------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Rating_1  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Rating_9  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Rating_12 | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Rating_7  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Rating | 1        | False      |\n| https://sandbox.bluebrainnexus.io/v1/resources/tutorialnexus/$PROJECTLABEL/_/Rating_8  | https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Rating | 1        | False      |\n+------------------------------------------------------------------------------------+----------------------------------------------------------------------------+----------+------------+\nListing with various filters using the CLI As an exercise try to filter by tag to only retrieve resources of type Tag.","title":"List data"},{"location":"/docs/utilities/nexus-python-cli.html#query-data","text":"Listing is usually not enough to select specific subset of data. Data ingested within each project can be searched through two complementary search interfaces called views.\nView Description ElasticSearchView Exposes data in ElasticSearch a document oriented search engine and provide access to it using the ElasticSearch query language. SparqlView Exposes data as a graph and allows to navigate and explore the data using the W3C Sparql query language.\nNote Note that the following queries (ElasticSearch and SPARQL) contain the variable $PROJECTLABEL. It should be replaced by the current project. Please copy each query and use a text editor to replace $PROJECTLABEL.","title":"Query data"},{"location":"/docs/utilities/nexus-python-cli.html#query-data-using-the-elasticsearchview","text":"The ElasticSearchView URL is available at the address [https://sandbox.bluebrainnexus.io/v1/views/tutorialnexus/$PROJECTLABEL/documents/_search].\nSelect queries # Select 5 ratings sorted by creation date in descending order\nnexus views query-es --data \\\n'{\n     \"size\":5,\n     \"sort\" : [\n       {\n        \"_createdAt\" : {\"order\" : \"desc\"}\n       }\n     ],\n     \"query\": {\n     \t\"terms\" : {\"@type\":[\"https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/Rating\"]}\n     }\n }'\n Graph navigation queries # Not possible by default.\n# Relationships handling needs to be made explicit to ElasticSearch through a mapping.","title":"Query data using the ElasticSearchView"},{"location":"/docs/utilities/nexus-python-cli.html#query-data-using-the-sparqlview","text":"The SparqlView is available at the address [https://sandbox.bluebrainnexus.io/v1/views/tutorialnexus/$PROJECTLABEL/graph/sparql]. The following diagram shows how the MovieLens data is structured in the default Nexus SparqlView. Note that the ratings, tags and movies are joined by the movieId property.\nSelect queries # Select 5 ratings sorted by creation date in descending order\nnexus views query-sparql --data \\\n'\nPREFIX vocab: <https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/>\nPREFIX nxv: <https://bluebrain.github.io/nexus/vocabulary/>\n\nSelect ?userId ?moviedId ?rating ?createdAt\n WHERE  {\n\n    ?ratingNode a vocab:Rating.\n    ?ratingNode nxv:createdAt ?createdAt.\n    ?ratingNode vocab:userId  ?userId.\n    ?ratingNode vocab:movieId ?moviedId.\n    ?ratingNode vocab:rating  ?rating.\n}\nORDER BY DESC (?creationDate)\nLIMIT 5' Graph navigation queries # Average rating score for movies tagged as funny\nnexus views query-sparql --data \\\n'\nPREFIX vocab: <https://sandbox.bluebrainnexus.io/v1/vocabs/tutorialnexus/$PROJECTLABEL/>\nPREFIX nxv: <https://bluebrain.github.io/nexus/vocabulary/>\n\nSelect (AVG(?ratingvalue) AS ?score)\n WHERE  {\n    # Select movies\n    ?movie a vocab:Movie.\n\n    # Select their movieId values\n    ?movie vocab:movieId ?movieId.\n\n    # Keep movies with 'funny' tags\n    ?tag a vocab:Tag.\n    ?tag vocab:movieId ?movieId.\n    ?tag vocab:tag ?tagvalue.\n    FILTER(?tagvalue = \"funny\").\n    \n    # Keep movies with ratings\n    ?rating a vocab:Rating.\n    ?rating vocab:movieId ?ratingmovieId.\n    FILTER(xsd:integer(?ratingmovieId) = xsd:integer(?movieId))\n    ?rating vocab:rating ?ratingvalue.\n\n}'","title":"Query data using the SparqlView"},{"location":"/docs/utilities/nexus-python-cli.html#share-data","text":"Making a dataset public means granting read permissions to “anonymous” user.\n$ nexus acls make-public\nTo check that the dataset is now public:\nAsk the person next to you to list resources in your project. Or create and select another profile named public-tutorial (following the instructions in the Set up. You should see the that the public-tutorial is selected and its corresponding token column is None.\nOutput Selected profile: tutorial\n+-------------------+----------+-------------------------------------+------------------+\n| Profile           | Selected | URL                                 |       Token      |\n+-------------------+----------+-------------------------------------+------------------+\n| tutorial          |          | https://sandbox.bluebrainnexus.io/v1         |  Expiry: 2019... |\n| public-tutorial   |   Yes    | https://sandbox.bluebrainnexus.io/v1         |       None       |\n+-------------------+----------+-------------------------------------+------------------+\nResources in your project should be listed with the command even though you are not authenticated.\nCommand nexus resources list --size 5 -o tutorialnexus -p $PROJECTLABEL","title":"Share data"},{"location":"/docs/faq.html","text":"","title":"FAQ"},{"location":"/docs/faq.html#faq","text":"","title":"FAQ"},{"location":"/docs/faq.html#general-faq","text":"","title":"General FAQ"},{"location":"/docs/faq.html#what-is-blue-brain-nexus-","text":"Blue Brain Nexus is an ecosystem that allows you to organize and better leverage your data through the use of a Knowledge Graph. You can find out more information on our product home page.","title":"What is Blue Brain Nexus?"},{"location":"/docs/faq.html#is-blue-brain-nexus-free-to-use-","text":"Yes, Nexus is a free, Open Source platform released under Apache Licence 2.0","title":"Is Blue Brain Nexus free to use?"},{"location":"/docs/faq.html#how-do-i-run-blue-brain-nexus-","text":"There are many ways to run Nexus. Our public Sandbox is running here and you can use it to test Nexus on small, non-sensitive data. Our tutorial can help you to run Nexus step by step.\nMeanwhile if you want to run it locally you might need to install Docker or Minikube. You can also deploy Nexus “on premise”, as a single instance or as a cluster. Blue Brain Nexus has also been deployed and tested on AWS using Kubernetes.","title":"How do I run Blue Brain Nexus?"},{"location":"/docs/faq.html#how-can-i-try-blue-brain-nexus-without-installing-it-","text":"The Sandbox provides a public instance that can serve as a testbed. Be aware that the content of the Sandbox is regularly purged.","title":"How can I try Blue Brain Nexus without installing it?"},{"location":"/docs/faq.html#what-is-the-difference-with-a-relational-database-like-postgresql-","text":"Although Blue Brain Nexus can be used as a regular database, it’s flexibility and feature set are well beyond that. Just to mention some of the Nexus features:\nAllows the user to define different constraints to different set of data at runtime Provides automatic indexing into several indexers (currently ElasticSearch and Sparql), dealing with reindexing strategies, retries and progress Provides authentication Comes with a flexible and granular authorization mechanism Guarantees resources immutability, keeping track of a history of changes.","title":"What is the difference with a relational database like PostgreSQL?"},{"location":"/docs/faq.html#is-there-a-limit-on-the-number-of-resources-blue-brain-nexus-can-store-","text":"Blue Brain Nexus leverages scalable open source technologies, therefore limitations and performance depends heavily on the deployment setup where Nexus is running.\nTo get an idea about the ingestion capabilities, we have run Benchmarks where we were able to ingest over 3.5 billion triples representing 120 million resources.","title":"Is there a limit on the number of resources Blue Brain Nexus can store?"},{"location":"/docs/faq.html#what-is-a-knowledge-graph-","text":"A Knowledge Graph is a modern approach to enabling the interlinked representations of entities (real-world objects, activities or concepts). In order to find more information about Knowledge Graphs, please visit the section “Understanding the Knowledge Graph”\nBlue Brain Nexus employs a Knowledge Graph to enable validation, search, analysis and integration of data.","title":"What is a Knowledge Graph?"},{"location":"/docs/faq.html#how-do-i-report-a-bug-which-support-blue-brain-nexus-team-provide-","text":"There are several channels provided to address different issues:\nBug report: If you have found a bug while using the Nexus ecosystem, please create an issue here. Questions: if you need support, we will be reachable through the Nexus Gitter channel Documentation: Technical documentation and ‘Quick Start’ to Nexus related concepts can be found here Feature request: If there is a feature you would like to see in Blue Brain Nexus, please first consult the list of open feature requests. In case there isn’t already one, please open a feature request describing your feature with as much detail as possible.","title":"How do I report a bug? Which support Blue Brain Nexus team provide?"},{"location":"/docs/faq.html#technical-faq","text":"","title":"Technical FAQ"},{"location":"/docs/faq.html#what-are-the-clients-i-can-use-with-blue-brain-nexus-what-are-the-requirements-to-run-blue-brain-nexus-locally-","text":"On macOS and Windows, Docker effectively runs containers inside a VM created by the system hypervisor. Nexus requires at least 2 CPUs and 8 GB of memory in total. You can increase the limits in Docker settings in the menu Preferences > Advanced. More details are in the dedicated page.","title":"What are the clients I can use with Blue Brain Nexus? What are the requirements to run Blue Brain Nexus locally?"},{"location":"/docs/faq.html#what-is-json-ld-","text":"JSON-LD is a JavaScript Object Notation for Linked Data. A JSON-LD payload is then converted to an RDF Graph for validation purposes and for ingestion in the Knowledge Graph. In order to find more information about JSON-LD, please visit this page, please visit the section this page","title":"What is JSON-LD?"},{"location":"/docs/faq.html#how-can-i-represent-lists-on-json-ld-","text":"Using JSON-LD, arrays are interpreted as Sets by default. If you want an array to be interpreted as a list, you will have to add the proper context for it. For example, if the field containing the array is called myfield, then the context to be added would be:\n{\n  \"@context\": {\n    \"myfield\": {\n      \"@container\": \"@list\"\n    }\n  }\n}\nYou can find more information about Sets and Lists in JSON-LD on the Json-LD 1.0 specification","title":"How can I represent lists on JSON-LD?"},{"location":"/docs/faq.html#what-is-rdf-","text":"The Resource Description Framework (RDF) is a graph-based data model used for representing information in the Web. The basic structure of any expression in RDF is in triples, an extremely easy segmentation of any kind of knowledge in subject-predicate-object. It is a family of W3C specifications, and was originally designed as a metadata model. In order to find more information about RDF and JSON-LD, please visit this page, please visit the section this page","title":"What is RDF?"},{"location":"/docs/faq.html#what-is-elasticsearch-","text":"Elasticsearch is a document oriented search engine with an HTTP endpoint and schema-free JSON document. It is able to aggregate data based on specific queries enabling the exploration of trends and patterns.","title":"What is Elasticsearch?"},{"location":"/docs/faq.html#what-is-a-shacl-schema-","text":"SHACL (Shapes Constraint Language) is a language for validating RDF graphs against a set of conditions. These conditions are provided as shapes and other constructs expressed in the form of an RDF graph. SHACL is used in Blue Brain Nexus to constrain and control the payload that can be pushed into Nexus. You can use the SHACL Playground to test your schemas.","title":"What is a SHACL schema?"},{"location":"/docs/faq.html#do-i-need-to-define-shacl-schemas-to-bring-data-in-","text":"No. SHACL schemas provide an extra layer of quality control for the data that is ingested into Nexus. However, we acknowledge the complexity of defining schemas. That’s why clients can decide whether to use schemas to constrain their data or not, depending on their use case and their available resources.","title":"Do I need to define SHACL schemas to bring data in?"},{"location":"/docs/faq.html#where-can-i-find-shacl-shapes-i-can-reuse-point-to-resources-like-schema-org-","text":"Datashapes.org provides an automated conversion of schema.org as SHACL entities. A neuroscience community effort and INCF Special Interest Group - Neuroshapes, provides open schemas for neuroscience data based on common use cases.","title":"Where can I find SHACL shapes I can reuse (point to resources, like schema.org)?"},{"location":"/docs/faq.html#why-are-rdf-and-json-ld-important-for-blue-brain-nexus-","text":"RDF is the data model used to ingest data into the Knowledge Graph and it is also used for SHACL schema data validation. JSON-LD is an RDF concrete syntax, and it is the main format we use for messages exchange. The choice of JSON-LD is due to the fact that is plain JSON but with some special keywords and JSON is a broadly adopted API exchange format.","title":"Why are RDF and JSON-LD important for Blue Brain Nexus?"},{"location":"/docs/faq.html#can-i-connect-any-sparql-client-to-nexus-sparql-endpoint-","text":"Yes. As long as the client supports the ability to provide a Authentication HTTP Header (for authentication purposes) on the HTTP request, any SPARQL client should work.","title":"Can I connect any SPARQL client to Nexus’ SPARQL endpoint?"},{"location":"/docs/faq.html#how-can-i-create-an-organization-as-an-anonymous-user-in-the-docker-compose-file-what-needs-to-be-done-to-switch-to-mode-","text":"By default, the permissions used - for an authenticated user - when running Nexus Delta are the ones defined on the JVM property app.permissions.minimum. In order to change that behaviour, please create some ACLs for the path /. For more details about ACLs creation, visit the ACLs page.","title":"How can I create an organization as an anonymous user in the docker-compose file? What needs to be done to switch to “authenticated” mode?"},{"location":"/docs/faq.html#can-i-use-blue-brain-nexus-from-jupyter-notebooks-","text":"Blue Brain Nexus can be used from Jupyter Notebooks using Nexus Forge or Nexus Python SDK. Alternatively, you can also use any Python HTTP client and use Nexus REST API directly from the Jupyter Notebook. Please consider looking at our tutorial to learn how to user Nexus Forge on the Sandbox.","title":"Can I use Blue Brain Nexus from Jupyter Notebooks?"}]}