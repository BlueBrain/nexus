// TODO: remove when the upstream kamon-monix support is merged: https://github.com/kamon-io/Kamon/pull/879
kanela.modules {
  executor-service {
    within += "monix.eval..*"
    within += "monix.execution..*"
    within += "monix.bio..*"
  }
}

kamon {
  environment {
    service = ${app.description.name}
  }
  trace {
    tick-interval = ${app.monitoring.trace.tick-interval}
    include-error-stacktrace = ${app.monitoring.trace.include-error-stacktrace}
    sampler = ${app.monitoring.trace.sampler}
    # An adaptive sampler tries to balance a global throughput goal across all operations in the current application,
    # making the best possible effort to provide sampled traces of all operations.
    #
    adaptive-sampler {

      # The target maximum number of affirmative sample decisions to be taken by the sampler. The sampler will do a best
      # effort to balance sampling decisions across all operations to produce no more than this number of affirmative
      # decisions.
      throughput = 600

      # Groups allow to override the default balacing behavior for a particular subset of operations in this
      # application. With groups, users can guarantee that certain operations will always be sampled, never sampled, or
      # provide minimum and/or maximum sampled traces throughput goals.
      #
      # Groups have two properties: an operation name regex list which decides what operations get into the group and a
      # set of rules for that group. The available rules are:
      #
      #               sample: [always|never] Provides a definitive sampling decision for all operations in the group.
      #                       When this rule is set, the sampler will always return this decision and any other
      #                       configured rule will be ignored.
      #
      #   minimum-throughput: [number] Defines the minimum number of sampled traces expected per minute for each
      #                       operation in the group. Even though the sampler will do its best effort to provide the
      #                       minimum number of sampled traces, the actual minimum will vary depending on application
      #                       traffic and the global throughput goal.
      #
      #   maximum-throughput: [number] Defines the maximum number of sampled traces expected per minute for each
      #                       operation in the group, regardless of whether there is room left before meeting the global
      #                       throughput goal.
      #
      # For example, if you wanted to ensure that health check operations are never sampled you could include
      #
      #   health-checks {
      #     operations = ["GET \/status"]
      #
      #     rules {
      #       sample = never
      #     }
      #   }
      #
      #
      groups {
      }
    }
  }

  modules {
    jaeger {
      enabled = ${app.monitoring.jaeger.enabled}
    }
  }

  jaeger {
    host = ${app.monitoring.jaeger.host}
    port = ${app.monitoring.jaeger.port}
    protocol = ${app.monitoring.jaeger.protocol}
    http-url = ${app.monitoring.jaeger.http-url}
    include-environment-tags = ${app.monitoring.jaeger.include-environment-tags}
  }
}