# All application specific configuration and defaults should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "delta"
  }

  http {
    # The default interface to bind to
    interface = 127.0.0.1
    # The default port to bind to
    port = 8080
    # The default base uri; the last path segment is considered the API version
    base-uri = "http://localhost:8080/v1"
  }

  # Cluster specific settings
  cluster {
    # The seeds to use for joining a cluster.  Should not contain the self address.
    # Example: 127.0.0.1:2552,127.0.0.2:2552,127.0.0.3:2552
    seeds = null
    # The default interface to bind to for remoting
    remote-interface = 127.0.0.1
  }

  # Primary store settings
  database {
    # The database type selection, possible values are 'postgres' and 'cassandra'
    flavour = "cassandra"

    # Postgres settings
    postgres {
      # the database host
      host = 127.0.0.1
      # the database port
      port = 5432
      # the database username
      username = "postgres"
      # the database password
      password = "postgres"
      # the database name
      database = "postgres"
      # the database jdbc url
      url = "jdbc:postgresql://"${app.database.postgres.host}":"${app.database.postgres.port}"/"${app.database.postgres.database}"?reWriteBatchedInserts="${app.database.postgres.rewrite-batch-inserts}"&stringtype=unspecified"
      # This will change batch inserts from insert into foo (col1, col2, col3) values (1,2,3) into insert into foo (col1, col2, col3) values (1,2,3), (4,5,6)
      # this provides 2-3x performance improvement
      rewrite-batch-inserts = true
    }

    # Cassandra settings
    cassandra {
      # the initial contact points
      contact-points = ["127.0.0.1:9042"]
      # the default keyspace
      keyspace = "delta"
      # the default snapshot keyspace
      snapshot-keyspace = ${app.database.cassandra.keyspace}"_snapshot"
      # the default username
      username = "cassandra"
      # the default password
      password = "cassandra"
    }
  }

  # Identities configuration
  identities {
    # configuration on how group information is cached
    groups {
      # the aggregate configuration
      aggregate = ${app.defaults.aggregate}
      # the retry configuration
      retry-strategy = ${app.defaults.retry-strategy}
      # the duration after which the cache expires
      passivate-after = 3 minutes
    }
  }

  # Acls configuration
  acls {
    # the acls aggregate configuration
    aggregate = ${app.defaults.aggregate}
    # the acls cache config
    key-value-store = ${app.defaults.key-value-store}
    # the acls indexing config
    indexing = ${app.defaults.indexing}
  }

  # Permissions configuration
  permissions {
    # the minimum set of permissions
    minimum = [
      "acls/read",
      "acls/write",
      "permissions/read",
      "permissions/write",
      "realms/read",
      "realms/write",
      "events/read",
      "projects/read",
      "projects/write",
      "projects/create",
      "organizations/read",
      "organizations/write",
      "organizations/create",
      "resources/read",
      "resources/write",
      "resolvers/write",
      "views/query",
      "views/write",
      "schemas/write",
      "files/write",
      "storages/write",
      "archives/write",
      "plugins/read"
    ]
    # the permissions aggregate configuration
    aggregate = ${app.defaults.aggregate}

    # permissions applied to the creator of the project
    owner-permissions = [
      "acls/read",
      "acls/write",

      "projects/read",
      "projects/write",
      "projects/create",
      "organizations/read",
      "organizations/write",
      "organizations/create",

      "resources/read",
      "resources/write",
      "resolvers/write",
      "views/query",
      "views/write",
      "schemas/write",
      "files/write",
      "storages/write",
      "archives/write"
    ]
  }

  # Realms configuration
  realms {
    # the realms aggregate configuration
    aggregate = ${app.defaults.aggregate}
    # the realms cache config
    key-value-store = ${app.defaults.key-value-store}
    # the realms pagination config
    pagination = ${app.defaults.pagination}
    # the realms indexing config
    indexing = ${app.defaults.indexing}
  }

  # Organizations configuration
  organizations {
    # the organizations aggregate configuration
    aggregate = ${app.defaults.aggregate}
    # the organizations cache config
    key-value-store = ${app.defaults.key-value-store}
    # the organizations pagination config
    pagination = ${app.defaults.pagination}
    # the organizations indexing config
    indexing = ${app.defaults.indexing}
  }

  # Projects configuration
  projects {
    # the projects aggregate configuration
    aggregate = ${app.defaults.aggregate}
    # the projects cache config
    key-value-store = ${app.defaults.key-value-store}
    # the projects pagination config
    pagination = ${app.defaults.pagination}
    # the projects indexing config
    indexing = ${app.defaults.indexing}
  }

  # Resolvers configuration
  resolvers {
    # the resolvers aggregate configuration
    aggregate = ${app.defaults.aggregate}
    # the resolvers cache config
    key-value-store = ${app.defaults.key-value-store}
    # the resolvers pagination config
    pagination = ${app.defaults.pagination}
    # the resolvers indexing config
    indexing = ${app.defaults.indexing}
  }

  # Resources configuration
  resources {
    # the resources aggregate configuration
    aggregate {
      snapshot-strategy = ${app.defaults.snapshot-default}
      stop-strategy = ${app.defaults.passivate-since-last-interaction}
      ask-timeout = 15 seconds
      evaluation-max-duration = 8 seconds # Increased this value since during evaluation SHACL validation can occur
      stash-size = 10
    }
  }

  # Schemas configuration
  schemas {
    # the schemas aggregate configuration
    aggregate = ${app.defaults.aggregate}
  }

  defaults {
    # default aggregate configuration
    aggregate {
      snapshot-strategy = ${app.defaults.snapshot-default}
      stop-strategy = ${app.defaults.passivate-never}
      ask-timeout = 15 seconds
      evaluation-max-duration = 3 seconds
      stash-size = 10
    }
    # default key-value-store configuration
    key-value-store {
      ask-timeout = 15 seconds
      consistency-timeout = 5 seconds
      retry = ${app.defaults.exponential-retry-strategy}
    }
    # default pagination configuration
    pagination {
      # the default number of results if none is specified
      default-size = 30
      # the maximum number of results if none is specified
      size-limit = 100
      # the maximum start index for a page
      from-limit = 10000
    }

    # default indexing configuration (platform caches)
    indexing {
      # how many events are indexed concurrently
      concurrency = 1
      # retry strategy while indexing
      retry = ${app.defaults.retry-strategy}
    }
    # default retry strategy, possible value formats are defined at the following config path:
    # - ${app.defaults.never-retry-strategy}
    # - ${app.defaults.once-retry-strategy}
    # - ${app.defaults.constant-retry-strategy}
    # - ${app.defaults.exponential-retry-strategy}
    retry-strategy = ${app.defaults.never-retry-strategy}
    # never retry
    never-retry-strategy {
      retry = "never"
    }
    # retry once with a delay
    once-retry-stategy {
      retry = "once"
      delay = 500 milliseconds
    }
    # retry with a constant delay until the max-retries value has been met
    constant-retry-strategy {
      retry = "constant"
      delay = 500 milliseconds
      max-retries = 5
    }
    # retry with an exponential delay until the max-retries value has been met
    exponential-retry-strategy {
      retry = "exponential"
      initial-delay = 50 milliseconds
      max-delay = 5 seconds
      max-retries = 20
    }

    # default snapshot strategies:
    # - ${app.defaults.snapshot-never}
    # - ${app.defaults.snapshot-default}

    # never snapshot
    snapshot-never {
      number-of-events = null
      keep-snapshots = null
      delete-events-on-snapshot = null
    }

    # Snapshot after 500 events consumed
    snapshot-default {
      # frequency we need to trigger snapshots
      number-of-events = 500
      # number of snapshots we need to keep
      keep-snapshots = 1
      ## flag to decide if we need to delete old events
      delete-events-on-snapshot = false
    }

    # default passivation strategies:
    # - ${app.defaults.passivate-never}
    # - ${app.defaults.passivate-since-last-interaction}

    # never passivate aggreate actor
    passivate-never {
      lapsed-since-last-interaction = null
      lapsed-since-recovery-completed = null
    }

    # passivate aggregate actor after 10 seconds have passed since last message
    passivate-since-last-interaction {
      # duration since the last received message after which the aggregate actors should shut down.
      lapsed-since-last-interaction = 10 seconds
    }

  }

  # monitoring config
  monitoring {
    # tracing settings
    trace {
      # Interval at which sampled finished spans will be flushed to SpanReporters.
      tick-interval = 10 seconds
      # Decides whether to include the stack trace of a Throwable as the "error.stacktrace" Span tag when a Span is marked
      # as failed.
      include-error-stacktrace = yes
      # Configures a sampler that decides which Spans should be sent to Span reporters. The possible values are:
      #   - always: report all traces.
      #   - never:  don't report any trace.
      #   - random: randomly decide using the probability defined in the random-sampler.probability setting.
      #   - adaptive: keeps dynamic samplers for each operation while trying to achieve a set throughput goal.
      #   - A FQCN of a kamon.trace.Sampler implementation to be used instead. The implementation must have a default
      #     constructor that will be used by Kamon when creating the instance.
      #
      sampler = "adaptive"
    }
    # jaeger settings
    jaeger {
      enabled = false
      host = "localhost"
      port = 14268
      # Protocol used to send data to Jaeger. The available options are:
      #   - http: Sends spans using jaeger.thrift over HTTP. Aimed to used with a Jaeger Collector.
      #   - https: Sends spans using jaeger.thrift over HTTPS. Aimed to used with a Jaeger Collector.
      #   - udp: Sends spans using jaeger.thrift compact over UDP. Aimed to used with a Jaeger Agent.
      protocol = http
      # for http and https, this is the full url to be used
      http-url = ${app.monitoring.jaeger.protocol}"://"${app.monitoring.jaeger.host}":"${app.monitoring.jaeger.port}"/api/traces"
      # Enable or disable including tags from kamon.environment as labels
      include-environment-tags = no
    }
  }

  # Service account configuration for internal operations
  service-account {
    subject: "delta"
    realm: "internal"
  }
}
