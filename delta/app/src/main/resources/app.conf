# All application specific configuration and defaults should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "delta"
  }

  http {
    # The default interface to bind to
    interface = 127.0.0.1
    # The default port to bind to
    port = 8080
    # The default base uri
    base-uri = "http://localhost:8080"
  }

  # Cluster specific settings
  cluster {
    # The seeds to use for joining a cluster.  Should not contain the self address.
    # Example: 127.0.0.1:2552,127.0.0.2:2552,127.0.0.3:2552
    seeds = null
    # The default interface to bind to for remoting
    remote-interface = 127.0.0.1
  }

  # Primary store settings
  database {
    # The database type selection, possible values are 'postgres' and 'cassandra'
    flavour = "cassandra"

    # Postgres settings
    postgres {
      # the database host
      host = 127.0.0.1
      # the database port
      port = 5432
      # the database username
      username = "postgres"
      # the database password
      password = "postgres"
      # the database name
      database = "postgres"
      # the database jdbc url
      url = "jdbc:postgresql://"${app.database.postgres.host}":"${app.database.postgres.port}"/"${app.database.postgres.database}"?reWriteBatchedInserts="${app.database.postgres.rewrite-batch-inserts}"&stringtype=unspecified"
      # This will change batch inserts from insert into foo (col1, col2, col3) values (1,2,3) into insert into foo (col1, col2, col3) values (1,2,3), (4,5,6)
      # this provides 2-3x performance improvement
      rewrite-batch-inserts = true
    }

    # Cassandra settings
    cassandra {
      # the initial contact points
      contact-points = ["127.0.0.1:9042"]
      # the default keyspace
      keyspace = "delta"
      # the default snapshot keyspace
      snapshot-keyspace = ${app.database.cassandra.keyspace}"_snapshot"
      # the default username
      username = "cassandra"
      # the default password
      password = "cassandra"
    }
  }

  # Identities configuration
  identities {
    # configuration on how group information is cached
    groups {
      # the aggregate configuration
      aggregate = ${app.defaults.aggregate}
      # the retry configuration
      retry-strategy = ${app.defaults.retry-strategy}
      # the duration after which the cache expires
      passivate-after = 3 minutes
    }
  }

  # Permissions configuration
  permissions {
    # the minimum set of permissions
    minimum = [
      "acls/read",
      "acls/write",
      "permissions/read",
      "permissions/write",
      "realms/read",
      "realms/write",
      "events/read",
      "projects/read",
      "projects/write",
      "projects/create",
      "organizations/read",
      "organizations/write",
      "organizations/create",
      "resources/read",
      "resources/write",
      "resolvers/write",
      "views/query",
      "views/write",
      "schemas/write",
      "files/write",
      "storages/write",
      "archives/write"
    ]
    # the permissions aggregate configuration
    aggregate = ${app.defaults.aggregate}
  }

  # Realms configuration
  realms {
    # the realms aggregate configuration
    aggregate = ${app.defaults.aggregate}
    # the realms cache config
    key-value-store = ${app.defaults.key-value-store}
  }

  defaults {
    # default aggregate configuration
    aggregate {
      ask-timeout = 15 seconds
      evaluation-max-duration = 3 seconds
      stash-size = 10
    }
    # default key-value-store configuration
    key-value-store {
      ask-timeout = 15 seconds
      consistency-timeout = 5 seconds
      retry = ${app.defaults.retry-strategy}
    }
    # default retry strategy, possible value formats are defined at the following config path:
    # - ${app.defaults.never-retry-strategy}
    # - ${app.defaults.once-retry-strategy}
    # - ${app.defaults.constant-retry-strategy}
    # - ${app.defaults.exponential-retry-strategy}
    retry-strategy = ${app.defaults.never-retry-strategy}
    # never retry
    never-retry-strategy {
      retry = "never"
    }
    # retry once with a delay
    once-retry-stategy {
      retry = "once"
      delay = 500 milliseconds
    }
    # retry with a constant delay until the max-retries value has been met
    constant-retry-strategy {
      retry = "constant"
      delay = 500 milliseconds
      max-retries = 5
    }
    # retry with an exponential delay until the max-retries value has been met
    exponential-retry-strategy {
      retry = "exponential"
      initial-delay = 50 milliseconds
      max-delay = 5 seconds
      max-retries = 20
    }
  }
}
