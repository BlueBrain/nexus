akka {
  log-dead-letters = on
  loglevel = INFO

  extensions += "akka.cluster.ddata.DistributedData"

  remote {
    startup-timeout = 30 s
    artery {
      transport = tcp
      canonical.hostname = ${app.cluster.remote-interface}
    }
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    enable-additional-serialization-bindings = on
    allow-java-serialization = off

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      circe = "ch.epfl.bluebrain.nexus.delta.service.serialization.EventSerializer"
    }

    serialization-bindings = ${service.serialization-bindings}
  }

  cluster {
    min-nr-of-members = 1
    sharding.state-store-mode = ddata

    distributed-data.durable {
      keys = ["*"]
      lmdb.dir = "/tmp/delta-cache"
    }

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver {
      # The name of the strategy to use for split-brain resolution.
      # Available: static-quorum, keep-majority, keep-referee, keep-oldest.
      active-strategy = "keep-oldest"
      keep-oldest {
        # Down the oldest member when alone.
        down-if-alone = on
        role = ""
      }

      # Duration during which the cluster must be stable before taking action on the network-partition.
      # The duration must chose large enough to allow for membership events to be gossiped and persistent actor to be migrated.
      stable-after = 30s
    }
  }

  http {
    server {
      parsing.max-content-length = ${akka.remote.artery.advanced.maximum-frame-size}
      request-timeout = 1 minute
    }
    client {
      parsing.max-content-length = 10g
    }
    host-connection-pool {
      max-connections = 16
      max-open-requests = 64
      idle-timeout = 10 minutes
    }
    sse {
      # The maximum size for parsing server-sent events (96KiB).
      max-event-size = 98304

      # The maximum size for parsing lines of a server-sent event (48KiB).
      max-line-size = 49152
    }
  }

}

akka-kryo-serialization {
  id-strategy = "automatic"
  implicit-registration-logging = true
  resolve-subclasses = false
  kryo-initializer = "ch.epfl.bluebrain.nexus.delta.service.serialization.KryoSerializerInit"
}