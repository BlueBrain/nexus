akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  loglevel = INFO

  extensions += "akka.cluster.ddata.DistributedData"

  remote {
    artery.canonical.port = 0
    artery.canonical.hostname = 127.0.0.1
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serialize-messages = on
    enable-additional-serialization-bindings = on
    allow-java-serialization = off

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      circeStorage = "ch.epfl.bluebrain.nexus.delta.plugins.storage.serialization.EventSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.delta.plugins.storage.storages.model.StorageEvent"     = "circeStorage"
      "ch.epfl.bluebrain.nexus.delta.plugins.storage.files.model.FileEvent"           = "circeStorage"
      "java.nio.file.Path"                                                            = "kryo"
      "org.apache.jena.iri.IRI"                                                       = "kryo"
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$"           = "kryo"
    }
    testkit.typed.throw-on-shutdown-timeout = false
  }

  cluster {
    jmx.multi-mbeans-in-same-jvm = on
    min-nr-of-members = 1
    sharding.state-store-mode = ddata
  }

}

akka-kryo-serialization {
  id-strategy = "automatic"
  implicit-registration-logging = true
  resolve-subclasses = false
  kryo-initializer = "ch.epfl.bluebrain.nexus.delta.plugins.storage.serialization.KryoSerializerInit"
}