include required(classpath("akka-test.conf"))
# All application specific configuration and defaults should reside here
app {
  # storages configuration
  storages {
    # Password and salt used to encrypt credentials at rest
    password = "changeme"
    salt = "salt"

    # Disk storage configuration
    disk {
      # the base path where the files are stored
      default-volume = "/tmp"
      # algorithm for checksum calculation
      digest-algorithm = "SHA-256"
      # the default permission required in order to download a file from a disk storage
      default-read-permission = "resources/read"
      # the default permission required in order to upload a file to a disk storage
      default-write-permission = "files/write"
      # flag to decide whether or not to show the absolute location of the files in the metadata response
      show-location = false
      # the default maximum allowed file size (in bytes) for uploaded files. 10 GB 
      default-max-file-size = 10737418240
    }
    # Amazon S3 storage configuration
    amazon {
      # the default digest algorithm
      digest-algorithm = "SHA-256"
      # the default permission required in order to download a file from an S3 storage
      default-read-permission = "resources/read"
      # the default permission required in order to upload a file to a S3 storage
      default-write-permission = "files/write"
      # flag to decide whether or not to show the absolute location of the files in the metadata response
      show-location = true
      # the default maximum allowed file size (in bytes) for uploaded files. 10 GB 
      default-max-file-size = 10737418240
    }
    # Remote disk storage configuration
    remote-disk {
      # the default endpoint
      default-endpoint = "http://localhost:8084/v1"
      # the default credentials for the endpoint
      default-credentials = null
      # the default digest algorithm
      digest-algorithm = "SHA-256"
      # the default permission required in order to download a file from a remote disk storage
      default-read-permission = "resources/read"
      # the default permission required in order to upload a file to a remote disk storage
      default-write-permission = "files/write"
      # flag to decide whether or not to show the absolute location of the files in the metadata response
      show-location = true
      # the default maximum allowed file size (in bytes) for uploaded files. 10 GB 
      default-max-file-size = 10737418240
    }
    # the storages aggregate configuration
    aggregate = ${app.defaults.aggregate}
    # the storages cache config
    key-value-store = ${app.defaults.key-value-store}
    # the storages pagination config
    pagination = ${app.defaults.pagination}
    # the storages indexing config
    indexing = ${app.defaults.indexing}
  }

  defaults {
    # default aggregate configuration
    aggregate {
      snapshot-strategy {
        # frequency we need to trigger snapshots
        number-of-events = 500
        # number of snapshots we need to keep
        keep-snapshots = 1
        ## flag to decide if we need to delete old events
        delete-events-on-snapshot = false
      }
      stop-strategy {
        lapsed-since-last-interaction = null
        lapsed-since-recovery-completed = null
      }
      ask-timeout = 15 seconds
      evaluation-max-duration = 3 seconds
      stash-size = 10
    }
    # default key-value-store configuration
    key-value-store {
      ask-timeout = 15 seconds
      consistency-timeout = 5 seconds
      retry = ${app.defaults.never-retry-strategy}
    }
    # default pagination configuration
    pagination {
      # the default number of results if none is specified
      default-size = 30
      # the maximum number of results if none is specified
      size-limit = 100
      # the maximum start index for a page
      from-limit = 10000
    }

    # default indexing configuration (platform caches)
    indexing {
      # how many events are indexed concurrently
      concurrency = 1
      # retry strategy while indexing
      retry = ${app.defaults.never-retry-strategy}
    }
    # never retry
    never-retry-strategy {
      retry = "never"
    }
  }
}
