akka {

  http {
    server {
      parsing.max-content-length = ${akka.remote.artery.advanced.maximum-frame-size}
      request-timeout = 1 minute
    }
    client {
      parsing.max-content-length = 10g
    }
    host-connection-pool  {
      max-connections   = 16
      max-open-requests = 64
      idle-timeout = 10 minutes
    }
    sse {
      # The maximum size for parsing server-sent events (96KiB).
      max-event-size = 98304

      # The maximum size for parsing lines of a server-sent event (48KiB).
      max-line-size = 49152
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  loglevel = INFO

  extensions += "akka.cluster.ddata.DistributedData"

  actor {

    provider = "akka.cluster.ClusterActorRefProvider"

    enable-additional-serialization-bindings = on

    allow-java-serialization = off

    serializers {
      iamCirceEvent = "ch.epfl.bluebrain.nexus.iam.io.EventSerializer"
      adminCirceEvent = "ch.epfl.bluebrain.nexus.admin.persistence.EventSerializer"
      kgCirceEvent = "ch.epfl.bluebrain.nexus.kg.serializers.Serializer$EventSerializer"
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.iam.acls.AclEvent" = iamCirceEvent
      "ch.epfl.bluebrain.nexus.iam.acls.AclState" = kryo
      "ch.epfl.bluebrain.nexus.iam.acls.AclCommand" = kryo
      "ch.epfl.bluebrain.nexus.iam.acls.AclRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsEvent" = iamCirceEvent
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsState" = kryo
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsCommand" = kryo
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.realms.RealmEvent" = iamCirceEvent
      "ch.epfl.bluebrain.nexus.iam.realms.RealmState" = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.RealmCommand" = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.RealmRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.types.Label" = kryo
      "ch.epfl.bluebrain.nexus.iam.types.ResourceF" = kryo

      "ch.epfl.bluebrain.nexus.admin.organizations.OrganizationEvent" = adminCirceEvent
      "ch.epfl.bluebrain.nexus.admin.projects.ProjectEvent"           = adminCirceEvent

      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                                       = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Start"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$FetchLatestState$" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$LatestState"       = kryo

      "ch.epfl.bluebrain.nexus.iam.realms.GroupsCache$Write" = kryo
      "java.util.UUID"                                = kryo
      "ch.epfl.bluebrain.nexus.admin.types.ResourceF" = kryo


      # application values sent across the wire
      "ch.epfl.bluebrain.nexus.kg.resources.Event"                       = kgCirceEvent
      "ch.epfl.bluebrain.nexus.kg.resources.Command"                     = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.State"                       = kryo
      "ch.epfl.bluebrain.nexus.kg.storage.Storage"                       = kryo
      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                        = kryo

      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                                       = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Start"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$FetchLatestState$" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$LatestState"       = kryo

      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$Start"                      = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$Stop"                       = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$ViewsAddedOrModified"       = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$RestartView"                = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$RestartProjection"          = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$Ack"                        = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$ViewsRemoved"               = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$UpdateRestart"              = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$FetchOffset"                = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$FetchStatistics"            = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectViewCoordinatorActor$Msg$AclChanges"                 = kryo

      "ch.epfl.bluebrain.nexus.kg.async.ProjectAttributesCoordinatorActor$Msg$Start"            = kryo
      "ch.epfl.bluebrain.nexus.kg.async.ProjectAttributesCoordinatorActor$Msg$Stop"             = kryo

      "ch.epfl.bluebrain.nexus.kg.archives.ArchiveCache$Write"   = kryo

      # key value store types
      "ch.epfl.bluebrain.nexus.kg.archives.Archive"                          = kryo
      "ch.epfl.bluebrain.nexus.kg.archives.Archive$ResourceDescription"      = kryo
      "ch.epfl.bluebrain.nexus.kg.archives.Archive$File"                     = kryo
      "ch.epfl.bluebrain.nexus.kg.archives.Archive$Resource"                 = kryo
      "ch.epfl.bluebrain.nexus.kg.indexing.View"                             = kryo
      "ch.epfl.bluebrain.nexus.kg.resolve.Resolver"                          = kryo
      "ch.epfl.bluebrain.nexus.rdf.Iri$AbsoluteIri"                          = kryo
      "ch.epfl.bluebrain.nexus.rdf.Iri$Path"                                 = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.ProjectIdentifier"               = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.ProjectIdentifier$ProjectRef"    = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.ProjectIdentifier$ProjectLabel"  = kryo
      "ch.epfl.bluebrain.nexus.kg.resources.Id"                              = kryo
      "ch.epfl.bluebrain.nexus.kg.RevisionedValue"                           = kryo


      # generic values sent across the wire
      "scala.runtime.BoxedUnit"         = kryo
      "scala.util.Left"                 = kryo
      "scala.util.Right"                = kryo
      "com.nimbusds.jose.jwk.JWKSet"    = kryo
      "scala.collection.immutable.Set"  = kryo
      "java.nio.file.Path"              = kryo
      "java.util.UUID"                  = kryo
      "java.time.Instant"               = kryo
    }
  }

  cluster {
    min-nr-of-members = 1
    sharding.state-store-mode = ddata
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver {
      # The name of the strategy to use for split-brain resolution.
      # Available: static-quorum, keep-majority, keep-referee, keep-oldest.
      active-strategy = "keep-oldest"
      keep-oldest {
        # Down the oldest member when alone.
        down-if-alone = on
        role = ""
      }

      # Duration during which the cluster must be stable before taking action on the network-partition.
      # The duration must chose large enough to allow for membership events to be gossiped and persistent actor to be migrated.
      stable-after = 30s
    }
  }

  remote {
    startup-timeout = 30 s
    artery {
      transport = tcp # See Selecting a transport below
      canonical.hostname = ${app.instance.interface}
      canonical.hostname = ${?override.remoting.interface}
      canonical.port = 2552
      canonical.port = ${?override.remoting.port}
    }
  }

  persistence {
    journal.plugin = ${app.persistence.journal-plugin}
    snapshot-store.plugin = ${app.persistence.snapshot-store-plugin}
    cassandra {
      journal {
        keyspace-autocreate = false
        tables-autocreate = false
        keyspace = ${app.description.name}

        event-adapters {
          iamTagging = "ch.epfl.bluebrain.nexus.iam.io.TaggingAdapter"
          adminTagging = "ch.epfl.bluebrain.nexus.admin.persistence.TaggingAdapter"
          kgTagging = "ch.epfl.bluebrain.nexus.kg.persistence.TaggingAdapter"
        }
        # Event type to event adapter bindings
        event-adapter-bindings {
          "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsEvent" = iamTagging
          "ch.epfl.bluebrain.nexus.iam.acls.AclEvent"                = iamTagging
          "ch.epfl.bluebrain.nexus.iam.realms.RealmEvent"            = iamTagging
          "ch.epfl.bluebrain.nexus.admin.organizations.OrganizationEvent" = adminTagging
          "ch.epfl.bluebrain.nexus.admin.projects.ProjectEvent" = adminTagging
          "ch.epfl.bluebrain.nexus.kg.resources.Event" = kgTagging
        }

        pubsub-notification = on

      }
      snapshot {
        keyspace-autocreate = false
        tables-autocreate = false
        keyspace = ${akka.persistence.cassandra.journal.keyspace}"_snapshot"
      }
      query {
        refresh-interval = 5s
        first-time-bucket = "20181213T00:00"
      }
      events-by-tag {
        # This delay helps to order events. Setting this to anything lower than 2s is highly discouraged.
        eventual-consistency-delay = 4s

        # Tagged events are written to a separate Cassandra table in unlogged batches
        # Max size of these batches. The best value for this will depend on the size of
        # the serialized events. Cassandra logs a warning for batches above a certain
        # size and this should be reduced if that warning is seen.
        max-message-batch-size = 60

        # Max time to buffer events for before writing.
        # Larger valeues will increase cassandra write efficiency but increase the delay before
        # seeing events in EventsByTag queries.
        # Setting this to 0 means that tag writes will get written immediately but will still be asynchronous
        # with respect to the PersistentActor's persist call. However, this will be very bad for throughput.
        flush-interval = 250ms

        # Update the tag_scanning table with this interval. Shouldn't be done too often to
        # avoid unecessary load. The tag_scanning table keeps track of a starting point for tag
        # scanning during recovery of persistent actor.
        scanning-flush-interval = 30s
      }
    }
  }
}

akka-kryo-serialization {
  idstrategy = "automatic"

  # Log implicitly registered classes. Useful, if you want to know all classes which are serialized.
  implicit-registration-logging = true

  # Set compression
  post-serialization-transformations = "lz4"

  kryo-initializer = "ch.epfl.bluebrain.nexus.marshallers.KryoSerializerInit"
}