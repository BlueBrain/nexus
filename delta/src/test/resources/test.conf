include "app.conf"
include "kg-app.conf"
include "akka.conf"

app {
  persistence {
    journal-plugin = "akka.persistence.cassandra.journal"
    snapshot-store-plugin = "akka.persistence.cassandra.snapshot"
    query-journal-plugin = "akka.persistence.cassandra.query"
  }
}

akka {
  extensions = []
  log-dead-letters = off
  stdout-loglevel = "OFF"
  log-dead-letters-during-shutdown = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO
  loglevel = ${?LOG_LEVEL}

  cluster {
    jmx.multi-mbeans-in-same-jvm = on
  }
  actor {
    provider = "cluster"
    serialize-messages = on
    allow-java-serialization = off
    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }
  }
  persistence {
    journal-plugin = ${app.persistence.journal-plugin}
    snapshot-store-plugin = ${app.persistence.snapshot-store-plugin}
    query-journal-plugin = ${app.persistence.query-journal-plugin}
    cassandra {
      journal {
        class = "akka.persistence.inmemory.journal.InMemoryAsyncWriteJournal"
        ask-timeout = "10s"
        event-adapters {
          iamTagging = "ch.epfl.bluebrain.nexus.iam.io.TaggingAdapter"
          adminTagging = "ch.epfl.bluebrain.nexus.admin.persistence.TaggingAdapter"
          kgTagging = "ch.epfl.bluebrain.nexus.kg.persistence.TaggingAdapter"
        }
        # Event type to event adapter bindings
        event-adapter-bindings {
          "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsEvent" = iamTagging
          "ch.epfl.bluebrain.nexus.iam.acls.AclEvent"                = iamTagging
          "ch.epfl.bluebrain.nexus.iam.realms.RealmEvent"            = iamTagging
          "ch.epfl.bluebrain.nexus.admin.organizations.OrganizationEvent" = adminTagging
          "ch.epfl.bluebrain.nexus.admin.projects.ProjectEvent" = adminTagging
          "ch.epfl.bluebrain.nexus.kg.resources.Event" = kgTagging
        }
      }
      snapshot {
        class = "akka.persistence.inmemory.snapshot.InMemorySnapshotStore"
        ask-timeout = "10s"
      }
      query {
        class = "akka.persistence.inmemory.query.InMemoryReadJournalProvider"
        write-plugin = "inmemory-journal"
        offset-mode = "sequence"
        ask-timeout = "10s"
        refresh-interval = "10ms"
        max-buffer-size = "100"
      }
    }
  }
  test {
    timefactor = 5.0
  }

  remote {
    enabled-transports = []
    artery {
      transport = tcp # See Selecting a transport below
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
      advanced.maximum-frame-size = 512 KiB
    }
  }
}