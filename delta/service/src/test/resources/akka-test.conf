akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  loglevel = INFO

  extensions += "akka.cluster.ddata.DistributedData"

  remote {
    artery.canonical.port = 0
    artery.canonical.hostname = 127.0.0.1
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serialize-messages = on
    enable-additional-serialization-bindings = on
    allow-java-serialization = off

    serializers {
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.delta.sdk.model.Event" = "kryo"
      "ch.epfl.bluebrain.nexus.delta.service.identity.IdentitiesImpl$FetchGroups" = "kryo"
      "ch.epfl.bluebrain.nexus.delta.service.cache.SubscriberCommand$Unsubscribe$" = "kryo"
      "ch.epfl.bluebrain.nexus.delta.service.cache.KeyValueStoreSpec$RevisionedValue" = "kryo"
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$" = kryo
    }
  }

  cluster {
    min-nr-of-members = 1
    sharding.state-store-mode = ddata
  }

}