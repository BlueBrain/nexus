{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const convertLength = require(\"convert-css-length\")\nconst parseUnit = require(\"parse-unit\")\n\nconst unit = length => parseUnit(length)[1]\n\nconst unitLess = length => parseUnit(length)[0]\n\nconst defaults = {\n  baseFontSize: \"16px\",\n  baseLineHeight: 1.5,\n  rhythmUnit: \"rem\",\n  defaultRhythmBorderWidth: \"1px\",\n  defaultRhythmBorderStyle: \"solid\",\n  roundToNearestHalfLine: true,\n  minLinePadding: \"2px\",\n}\n\nconst linesForFontSize = function(fontSize, options) {\n  let lines\n  const convert = convertLength(options.baseFontSize)\n  const fontSizeInPx = unitLess(convert(fontSize, \"px\"))\n  const lineHeightInPx = unitLess(options.baseLineHeightInPx)\n  const minLinePadding = unitLess(convert(options.minLinePadding, \"px\"))\n\n  if (options.roundToNearestHalfLine) {\n    lines = Math.ceil(2 * fontSizeInPx / lineHeightInPx) / 2\n  } else {\n    lines = Math.ceil(fontSizeInPx / lineHeightInPx)\n  }\n\n  // If lines are cramped, include some extra lead.\n  if (lines * lineHeightInPx - fontSizeInPx < minLinePadding * 2) {\n    if (options.roundToNearestHalfLine) {\n      lines += 0.5\n    } else {\n      lines += 1\n    }\n  }\n\n  return lines\n}\n\nconst rhythm = function(options) {\n  const convert = convertLength(options.baseFontSize)\n\n  return function(lines, fontSize, offset) {\n    if (lines == null) {\n      lines = 1\n    }\n    if (fontSize == null) {\n      fontSize = options.baseFontSize\n    }\n    if (offset == null) {\n      offset = 0\n    }\n    const length = lines * unitLess(options.baseLineHeightInPx) - offset + \"px\"\n    let rhythmLength = convert(length, options.rhythmUnit, fontSize)\n    if (unit(rhythmLength) === \"px\") {\n      rhythmLength = Math.floor(unitLess(rhythmLength)) + unit(rhythmLength)\n    }\n\n    // Limit to 5 decimals.\n    return parseFloat(unitLess(rhythmLength).toFixed(5)) + unit(rhythmLength)\n  }\n}\n\nconst establishBaseline = function(options) {\n  const convert = convertLength(options.baseFontSize)\n\n  // Set these values on html in your css.\n  return {\n    // 16px is the default browser font size.\n    // Set base fontsize in percent as older browsers (or just IE6) behave\n    // weird otherwise.\n    fontSize: unitLess(options.baseFontSize) / 16 * 100 + \"%\",\n    lineHeight: options.baseLineHeight.toString(),\n  }\n}\n\nconst adjustFontSizeTo = function(toSize, lines, fromSize, options) {\n  if (fromSize == null) {\n    fromSize = options.baseFontSize\n  }\n\n  if (unit(toSize) === \"%\") {\n    toSize = unitLess(options.baseFontSize) * (unitLess(toSize) / 100) + \"px\"\n  }\n\n  const convert = convertLength(options.baseFontSize)\n  fromSize = convert(fromSize, \"px\")\n  toSize = convert(toSize, \"px\", fromSize)\n  const r = rhythm(options)\n\n  if (lines === \"auto\") {\n    lines = linesForFontSize(toSize, options)\n  }\n\n  return {\n    fontSize: convert(toSize, options.rhythmUnit, fromSize),\n    lineHeight: r(lines, fromSize),\n  }\n}\n\nmodule.exports = function(options) {\n  // Don't override defaults\n  const defaultsCopy = JSON.parse(JSON.stringify(defaults))\n\n  const mergedOptions = { ...defaultsCopy, ...options }\n\n  // Backwards compatability. If baseLineHeight is in pixels, convert to unitless\n  // value. Also set line height in pixels as it's used several places.\n  const convert = convertLength(mergedOptions.baseFontSize)\n  if (unit(mergedOptions.baseLineHeight)) {\n    const fontSizeInPx = unitLess(convert(mergedOptions.baseFontSize, \"px\"))\n    mergedOptions.baseLineHeightInPx = convert(\n      mergedOptions.baseLineHeight,\n      \"px\"\n    )\n  } else {\n    mergedOptions.baseLineHeightInPx = `${unitLess(mergedOptions.baseFontSize) *\n      mergedOptions.baseLineHeight}px`\n  }\n\n  return {\n    rhythm: rhythm(mergedOptions),\n    establishBaseline() {\n      return establishBaseline(mergedOptions)\n    },\n    linesForFontSize(fontSize) {\n      return linesForFontSize(fontSize, mergedOptions)\n    },\n    adjustFontSizeTo(toSize, lines, fromSize) {\n      if (lines == null) {\n        lines = \"auto\"\n      }\n      return adjustFontSizeTo(toSize, lines, fromSize, mergedOptions)\n    },\n  }\n}\n"],"names":["const","convertLength","require","parseUnit","unit","length","unitLess","defaults","baseFontSize","baseLineHeight","rhythmUnit","defaultRhythmBorderWidth","defaultRhythmBorderStyle","roundToNearestHalfLine","minLinePadding","linesForFontSize","fontSize","options","let","lines","convert","fontSizeInPx","lineHeightInPx","baseLineHeightInPx","Math","ceil","rhythm","offset","rhythmLength","floor","parseFloat","toFixed","module","exports","defaultsCopy","JSON","parse","stringify","mergedOptions","Object","establishBaseline","lineHeight","toString","adjustFontSizeTo","toSize","fromSize","r"],"mappings":"AAAAA,IAAMC,EAAgBC,QAAQ,sBACxBC,EAAYD,QAAQ,cAEpBE,WAAOC,UAAUF,EAAUE,GAAQ,IAEnCC,WAAWD,UAAUF,EAAUE,GAAQ,IAEvCE,GACJC,aAAc,OACdC,eAAgB,IAChBC,WAAY,MACZC,yBAA0B,MAC1BC,yBAA0B,QAC1BC,wBAAwB,EACxBC,eAAgB,OAGZC,EAAmB,SAASC,EAAUC,GAC1CC,IAAIC,EACEC,EAAUnB,EAAcgB,EAAQT,cAChCa,EAAef,EAASc,EAAQJ,EAAU,OAC1CM,EAAiBhB,EAASW,EAAQM,oBAClCT,EAAiBR,EAASc,EAAQH,EAAQH,eAAgB,OAiBhE,OAdEK,EADEF,EAAQJ,uBACFW,KAAKC,KAAK,EAAIJ,EAAeC,GAAkB,EAE/CE,KAAKC,KAAKJ,EAAeC,IAIvBA,EAAiBD,EAAgC,EAAjBP,IAExCK,GADEF,EAAQJ,uBACD,GAEA,GAINM,GAGHO,EAAS,SAAST,GACtBjB,IAAMoB,EAAUnB,EAAcgB,EAAQT,cAEtC,OAAO,SAASW,EAAOH,EAAUW,GAClB,MAATR,IACFA,EAAQ,GAEM,MAAZH,IACFA,EAAWC,EAAQT,cAEP,MAAVmB,IACFA,EAAS,GAEX3B,IAAMK,EAASc,EAAQb,EAASW,EAAQM,oBAAsBI,EAAS,KACnEC,EAAeR,EAAQf,EAAQY,EAAQP,WAAYM,GAMvD,MAL2B,OAAvBZ,EAAKwB,KACPA,EAAeJ,KAAKK,MAAMvB,EAASsB,IAAiBxB,EAAKwB,IAIpDE,WAAWxB,EAASsB,GAAcG,QAAQ,IAAM3B,EAAKwB,KAyChEI,OAAOC,QAAU,SAAShB,GAExBjB,IAAMkC,EAAeC,KAAKC,MAAMD,KAAKE,UAAU9B,IAEzC+B,EAAgBC,iBAAKL,EAAcjB,GAInCG,EAAUnB,EAAcqC,EAAc9B,cAC5C,GAAIJ,EAAKkC,EAAc7B,gBAAiB,CACjBH,EAASc,EAAQkB,EAAc9B,aAAc,OAClE8B,EAAcf,mBAAqBH,EACjCkB,EAAc7B,eACd,WAGF6B,EAAcf,mBAAwBjB,EAASgC,EAAc9B,cAC3D8B,EAAc7B,oBAGlB,OACEiB,OAAQA,EAAOY,GACfE,6BACE,OA5DoB,SAASvB,GACjBhB,EAAcgB,EAAQT,cAGtC,OAIEQ,SAAUV,EAASW,EAAQT,cAAgB,GAAK,IAAM,IACtDiC,WAAYxB,EAAQR,eAAeiC,YAmD1BF,CAAkBF,IAE3BvB,0BAAiBC,GACf,OAAOD,EAAiBC,EAAUsB,IAEpCK,0BAAiBC,EAAQzB,EAAO0B,GAI9B,OAHa,MAAT1B,IACFA,EAAQ,QAtDS,SAASyB,EAAQzB,EAAO0B,EAAU5B,GACzC,MAAZ4B,IACFA,EAAW5B,EAAQT,cAGA,MAAjBJ,EAAKwC,KACPA,EAAStC,EAASW,EAAQT,eAAiBF,EAASsC,GAAU,KAAO,MAGvE5C,IAAMoB,EAAUnB,EAAcgB,EAAQT,cAEtCoC,EAASxB,EAAQwB,EAAQ,KADzBC,EAAWzB,EAAQyB,EAAU,OAE7B7C,IAAM8C,EAAIpB,EAAOT,GAMjB,MAJc,SAAVE,IACFA,EAAQJ,EAAiB6B,EAAQ3B,KAIjCD,SAAUI,EAAQwB,EAAQ3B,EAAQP,WAAYmC,GAC9CJ,WAAYK,EAAE3B,EAAO0B,IAoCZF,CAAiBC,EAAQzB,EAAO0B,EAAUP"}