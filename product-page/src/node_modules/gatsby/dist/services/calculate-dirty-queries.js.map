{"version":3,"sources":["../../src/services/calculate-dirty-queries.ts"],"names":["calculateDirtyQueries","store","firstRun","state","getState","queryIds"],"mappings":";;;;;AAAA;;AAOA;;AAEO,eAAeA,qBAAf,CAAqC;AAC1CC,EAAAA,KAD0C;AAE1CC,EAAAA;AAF0C,CAArC,EAKJ;AACD,gCAAYD,KAAZ;AAEA,QAAME,KAAK,GAAGF,KAAK,CAACG,QAAN,EAAd;AAEA,QAAMC,QAAQ,GAAGH,QAAQ,GACrB,qCAAyBC,KAAzB,CADqB,GAErB,8BAAkBA,KAAlB,CAFJ;AAGA,SAAO;AAAEE,IAAAA,QAAQ,EAAE,0BAAcA,QAAd;AAAZ,GAAP;AACD","sourcesContent":["import {\n  calcInitialDirtyQueryIds,\n  calcDirtyQueryIds,\n  groupQueryIds,\n} from \"../query\"\nimport { IGroupedQueryIds } from \"./\"\nimport { IQueryRunningContext } from \"../state-machines/query-running/types\"\nimport { assertStore } from \"../utils/assert-store\"\n\nexport async function calculateDirtyQueries({\n  store,\n  firstRun,\n}: Partial<IQueryRunningContext>): Promise<{\n  queryIds: IGroupedQueryIds\n}> {\n  assertStore(store)\n\n  const state = store.getState()\n\n  const queryIds = firstRun\n    ? calcInitialDirtyQueryIds(state)\n    : calcDirtyQueryIds(state)\n  return { queryIds: groupQueryIds(queryIds) }\n}\n"],"file":"calculate-dirty-queries.js"}