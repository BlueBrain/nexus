{"version":3,"sources":["../../src/services/recompile.ts"],"names":["recompile","webpackWatching","reporter","panic","Promise","resolve","finish","stats","emitter","off","on","resume","suspend"],"mappings":";;;;;;;AAGA;;AACA;;AAJA;AAMO,eAAeA,SAAf,CAAyB;AAC9BC,EAAAA;AAD8B,CAAzB,EAE2B;AAChC,MAAI,CAACA,eAAL,EAAsB;AACpBC,sBAASC,KAAT,CAAgB,kBAAhB;AACD,GAH+B,CAIhC;AACA;AACA;;;AAEA,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,aAASC,MAAT,CAAgBC,KAAhB,EAAoC;AAClCC,qBAAQC,GAAR,CAAa,kBAAb,EAAgCH,MAAhC;;AACAD,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD;;AACDC,mBAAQE,EAAR,CAAY,kBAAZ,EAA+BJ,MAA/B;;AACAL,IAAAA,eAAe,CAACU,MAAhB,GAN4B,CAO5B;;AACAV,IAAAA,eAAe,CAACW,OAAhB;AACD,GATM,CAAP;AAUD","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { IBuildContext } from \"./types\"\nimport { Stats } from \"webpack\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { emitter } from \"../redux\"\n\nexport async function recompile({\n  webpackWatching,\n}: IBuildContext): Promise<Stats> {\n  if (!webpackWatching) {\n    reporter.panic(`Missing compiler`)\n  }\n  // Promisify the event-based API. We do this using emitter\n  // because you can't \"untap\" a webpack watcher, and we just want\n  // one compilation.\n\n  return new Promise(resolve => {\n    function finish(stats: Stats): void {\n      emitter.off(`COMPILATION_DONE`, finish)\n      resolve(stats)\n    }\n    emitter.on(`COMPILATION_DONE`, finish)\n    webpackWatching.resume()\n    // Suspending is just a flag, so it's safe to re-suspend right away\n    webpackWatching.suspend()\n  })\n}\n"],"file":"recompile.js"}