{"version":3,"sources":["../../src/utils/page-data.ts"],"names":["fixedPagePath","pagePath","getFilePath","publicDir","path","join","readPageData","filePath","rawPageData","fs","readFile","JSON","parse","removePageData","existsSync","remove","Promise","resolve","pageDataExists","writePageData","componentChunkName","matchPath","staticQueryHashes","inputFilePath","replace","outputFilePath","result","readJSON","body","bodyStr","stringify","pageDataSize","Buffer","byteLength","store","dispatch","type","payload","size","outputFile","isFlushPending","isFlushing","isFlushEnqueued","flush","pendingPageDataWrites","components","pages","program","staticQueriesByTemplate","getState","pagePaths","templatePaths","pagesToWrite","Array","from","reduce","set","componentPath","templateComponent","get","forEach","add","bind","Set","values","page","directory","_","websocketManager","emitPageData","id","enqueueFlush"],"mappings":"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","sourcesContent":["import fs from \"fs-extra\"\nimport path from \"path\"\nimport { IGatsbyPage } from \"../redux/types\"\nimport { websocketManager } from \"./websocket-manager\"\nimport { isWebpackStatusPending } from \"./webpack-status\"\nimport { store } from \"../redux\"\n\nimport { IExecutionResult } from \"../query/types\"\n\ninterface IPageData {\n  componentChunkName: IGatsbyPage[\"componentChunkName\"]\n  matchPath?: IGatsbyPage[\"matchPath\"]\n  path: IGatsbyPage[\"path\"]\n  staticQueryHashes: string[]\n}\n\nexport interface IPageDataWithQueryResult extends IPageData {\n  result: IExecutionResult\n}\n\nexport function fixedPagePath(pagePath: string): string {\n  return pagePath === `/` ? `index` : pagePath\n}\n\nfunction getFilePath(publicDir: string, pagePath: string): string {\n  return path.join(\n    publicDir,\n    `page-data`,\n    fixedPagePath(pagePath),\n    `page-data.json`\n  )\n}\n\nexport async function readPageData(\n  publicDir: string,\n  pagePath: string\n): Promise<IPageDataWithQueryResult> {\n  const filePath = getFilePath(publicDir, pagePath)\n  const rawPageData = await fs.readFile(filePath, `utf-8`)\n\n  return JSON.parse(rawPageData)\n}\n\nexport async function removePageData(\n  publicDir: string,\n  pagePath: string\n): Promise<void> {\n  const filePath = getFilePath(publicDir, pagePath)\n\n  if (fs.existsSync(filePath)) {\n    return await fs.remove(filePath)\n  }\n\n  return Promise.resolve()\n}\n\nexport function pageDataExists(publicDir: string, pagePath: string): boolean {\n  return fs.existsSync(getFilePath(publicDir, pagePath))\n}\n\nexport async function writePageData(\n  publicDir: string,\n  {\n    componentChunkName,\n    matchPath,\n    path: pagePath,\n    staticQueryHashes,\n  }: IPageData\n): Promise<IPageDataWithQueryResult> {\n  const inputFilePath = path.join(\n    publicDir,\n    `..`,\n    `.cache`,\n    `json`,\n    `${pagePath.replace(/\\//g, `_`)}.json`\n  )\n  const outputFilePath = getFilePath(publicDir, pagePath)\n  const result = await fs.readJSON(inputFilePath)\n  const body = {\n    componentChunkName,\n    path: pagePath,\n    matchPath,\n    result,\n    staticQueryHashes,\n  }\n  const bodyStr = JSON.stringify(body)\n  // transform asset size to kB (from bytes) to fit 64 bit to numbers\n  const pageDataSize = Buffer.byteLength(bodyStr) / 1000\n\n  store.dispatch({\n    type: `ADD_PAGE_DATA_STATS`,\n    payload: {\n      filePath: outputFilePath,\n      size: pageDataSize,\n    },\n  })\n\n  await fs.outputFile(outputFilePath, bodyStr)\n  return body\n}\n\nlet isFlushPending = false\nlet isFlushing = false\n\nexport function isFlushEnqueued(): boolean {\n  return isFlushPending\n}\n\nexport async function flush(): Promise<void> {\n  if (isFlushing) {\n    // We're already in the middle of a flush\n    return\n  }\n  isFlushPending = false\n  isFlushing = true\n  const {\n    pendingPageDataWrites,\n    components,\n    pages,\n    program,\n    staticQueriesByTemplate,\n  } = store.getState()\n\n  const { pagePaths, templatePaths } = pendingPageDataWrites\n\n  const pagesToWrite = Array.from(templatePaths).reduce(\n    (set, componentPath) => {\n      const templateComponent = components.get(componentPath)\n      if (templateComponent) {\n        templateComponent.pages.forEach(set.add.bind(set))\n      }\n      return set\n    },\n    new Set(pagePaths.values())\n  )\n\n  for (const pagePath of pagesToWrite) {\n    const page = pages.get(pagePath)\n\n    // It's a gloomy day in Bombay, let me tell you a short story...\n    // Once upon a time, writing page-data.json files were atomic\n    // After this change (#24808), they are not and this means that\n    // between adding a pending write for a page and actually flushing\n    // them, a page might not exist anymore щ（ﾟДﾟщ）\n    // This is why we need this check\n    if (page) {\n      const staticQueryHashes =\n        staticQueriesByTemplate.get(page.componentPath) || []\n\n      const result = await writePageData(\n        path.join(program.directory, `public`),\n        {\n          ...page,\n          staticQueryHashes,\n        }\n      )\n\n      if (program?._?.[0] === `develop`) {\n        websocketManager.emitPageData({\n          id: pagePath,\n          result,\n        })\n      }\n    }\n  }\n\n  store.dispatch({\n    type: `CLEAR_PENDING_PAGE_DATA_WRITES`,\n  })\n  isFlushing = false\n  return\n}\n\nexport function enqueueFlush(): void {\n  if (isWebpackStatusPending()) {\n    isFlushPending = true\n  } else {\n    flush()\n  }\n}\n"],"file":"page-data.js"}