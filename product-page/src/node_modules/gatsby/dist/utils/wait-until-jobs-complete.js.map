{"version":3,"sources":["../../src/utils/wait-until-jobs-complete.ts"],"names":["waitUntilAllJobsComplete","jobsV1Promise","Promise","resolve","onEndJob","store","getState","jobs","active","length","emitter","off","on","all"],"mappings":";;;;;AAAA;;AAEA;;AAEO,MAAMA,wBAAwB,GAAG,MAAoB;AAC1D,QAAMC,aAAa,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC3C,UAAMC,QAAQ,GAAG,MAAY;AAC3B,UAAIC,aAAMC,QAAN,GAAiBC,IAAjB,CAAsBC,MAAtB,CAA6BC,MAA7B,KAAwC,CAA5C,EAA+C;AAC7CN,QAAAA,OAAO;;AACPO,uBAAQC,GAAR,CAAa,SAAb,EAAuBP,QAAvB;AACD;AACF,KALD;;AAOAM,mBAAQE,EAAR,CAAY,SAAZ,EAAsBR,QAAtB;;AACAA,IAAAA,QAAQ;AACT,GAVqB,CAAtB;AAYA,SAAOF,OAAO,CAACW,GAAR,CAAY,CAACZ,aAAD,EAAgB,4CAAhB,CAAZ,CAAP;AACD,CAdM","sourcesContent":["import { emitter, store } from \"../redux\"\n\nimport { waitUntilAllJobsComplete as waitUntilAllJobsV2Complete } from \"./jobs-manager\"\n\nexport const waitUntilAllJobsComplete = (): Promise<any> => {\n  const jobsV1Promise = new Promise(resolve => {\n    const onEndJob = (): void => {\n      if (store.getState().jobs.active.length === 0) {\n        resolve()\n        emitter.off(`END_JOB`, onEndJob)\n      }\n    }\n\n    emitter.on(`END_JOB`, onEndJob)\n    onEndJob()\n  })\n\n  return Promise.all([jobsV1Promise, waitUntilAllJobsV2Complete()])\n}\n"],"file":"wait-until-jobs-complete.js"}