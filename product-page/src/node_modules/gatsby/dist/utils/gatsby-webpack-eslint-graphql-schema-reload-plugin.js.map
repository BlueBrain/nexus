{"version":3,"sources":["../../src/utils/gatsby-webpack-eslint-graphql-schema-reload-plugin.ts"],"names":["isEslintRule","rule","options","use","useEslintrc","GatsbyWebpackEslintGraphqlSchemaReload","constructor","plugin","name","schema","findEslintOptions","compiler","module","rules","find","apply","hooks","compile","tap","program","store","getState","directory","Object","assign"],"mappings":";;;;;AAMA;;AACA;;AACA;;AARA;;;;;;AAYA,SAASA,YAAT,CAAsBC,IAAtB,EAAmD;AAAA;;AACjD,QAAMC,OAAO,GAAGD,IAAH,aAAGA,IAAH,oCAAGA,IAAI,CAAEE,GAAT,4DAAG,UAAY,CAAZ,CAAH,+CAAG,WAAgBD,OAAhC;AACA,SAAOA,OAAO,IAAI,OAAOA,OAAO,CAACE,WAAf,KAAgC,WAAlD;AACD;;AAEM,MAAMC,sCAAN,CAA6C;AAIlDC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc;AAAEC,MAAAA,IAAI,EAAG;AAAT,KAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;AAEDC,EAAAA,iBAAiB,CAACC,QAAD,EAA+C;AAAA;;AAC9D,UAAM,CAACV,IAAD,6BAASU,QAAQ,CAACT,OAAT,CAAiBU,MAA1B,oFAAS,sBAAyBC,KAAzB,CAA+BC,IAA/B,CAAoCd,YAApC,CAAT,2DAAS,uBACXG,GADJ;AAEA,WAAOF,IAAI,CAACC,OAAZ;AACD;;AAEDa,EAAAA,KAAK,CAACJ,QAAD,EAA2B;AAC9BA,IAAAA,QAAQ,CAACK,KAAT,CAAeC,OAAf,CAAuBC,GAAvB,CAA2B,KAAKX,MAAL,CAAYC,IAAvC,EAA6C,MAAM;AACjD,YAAM;AAAEC,QAAAA,MAAF;AAAUU,QAAAA;AAAV,UAAsBC,aAAMC,QAAN,EAA5B;;AAEA,UAAI,CAAC,KAAKZ,MAAV,EAAkB;AAChB;AACA,aAAKA,MAAL,GAAcA,MAAd;AACA;AACD;;AAED,UAAI,KAAKA,MAAL,KAAgBA,MAAhB,IAA0B,6CAAeU,OAAO,CAACG,SAAvB,CAA9B,EAAiE;AAC/D;AACD;;AACD,WAAKb,MAAL,GAAcA,MAAd,CAZiD,CAcjD;;AACA,YAAMP,OAAO,GAAG,KAAKQ,iBAAL,CAAuBC,QAAvB,CAAhB,CAfiD,CAiBjD;AACA;;AACAY,MAAAA,MAAM,CAACC,MAAP,CAActB,OAAd,EAAuB,gCAAaO,MAAb,CAAvB;AACD,KApBD;AAqBD;;AArCiD","sourcesContent":["/**\n * The problem: after GraphQL schema rebuilds, eslint loader keeps validating against\n * the old schema.\n *\n * This plugin replaces options of eslint-plugin-graphql during develop\n */\nimport { store } from \"../redux\"\nimport { eslintConfig } from \"./eslint-config\"\nimport { hasLocalEslint } from \"./local-eslint-config-finder\"\nimport { RuleSetRule, Compiler, RuleSetQuery, RuleSetLoader } from \"webpack\"\nimport { GraphQLSchema } from \"graphql\"\n\nfunction isEslintRule(rule?: RuleSetRule): boolean {\n  const options = rule?.use?.[0]?.options\n  return options && typeof options.useEslintrc !== `undefined`\n}\n\nexport class GatsbyWebpackEslintGraphqlSchemaReload {\n  private plugin: { name: string }\n  private schema: GraphQLSchema | null\n\n  constructor() {\n    this.plugin = { name: `GatsbyWebpackEslintGraphqlSchemaReload` }\n    this.schema = null\n  }\n\n  findEslintOptions(compiler: Compiler): RuleSetQuery | undefined {\n    const [rule] = compiler.options.module?.rules.find(isEslintRule)\n      ?.use as RuleSetLoader[]\n    return rule.options\n  }\n\n  apply(compiler: Compiler): void {\n    compiler.hooks.compile.tap(this.plugin.name, () => {\n      const { schema, program } = store.getState()\n\n      if (!this.schema) {\n        // initial build\n        this.schema = schema\n        return\n      }\n\n      if (this.schema === schema || hasLocalEslint(program.directory)) {\n        return\n      }\n      this.schema = schema\n\n      // Original eslint config object from webpack rules\n      const options = this.findEslintOptions(compiler)\n\n      // Hackish but works:\n      // replacing original eslint options object with updated config\n      Object.assign(options, eslintConfig(schema))\n    })\n  }\n}\n"],"file":"gatsby-webpack-eslint-graphql-schema-reload-plugin.js"}