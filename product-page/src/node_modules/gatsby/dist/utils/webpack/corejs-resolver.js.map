{"version":3,"sources":["../../../src/utils/webpack/corejs-resolver.ts"],"names":["coreJs2FileRegex","replaceMap","CoreJSResolver","constructor","_coreJSNodeModulesPath","path","dirname","require","resolve","apply","resolver","target","ensureHook","coreJsModulePath","request","resolveContext","callback","innerRequest","startsWith","coreJsRequest","resolveMessage","test","forEach","search","replace","doResolve","err","result","undefined","getHook","tapAsync"],"mappings":";;;;;;;AACA;;AAEA;AACA,MAAMA,gBAAgB,GAAG,4CAAzB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CACjB,CAAE,OAAF,EAAW,MAAX,CADiB,EAEjB,CAAE,OAAF,EAAW,MAAX,CAFiB,EAGjB,CAAE,OAAF,EAAW,MAAX,CAHiB,EAIjB,CAAE,OAAF,EAAW,MAAX,CAJiB,EAKjB,CAAE,OAAF,EAAW,MAAX,CALiB,EAMjB,CAAE,kBAAF,EAAsB,iCAAtB,CANiB,EAOjB,CAAE,iBAAF,EAAqB,WAArB,CAPiB,EAQjB,CAAE,cAAF,EAAkB,cAAlB,CARiB,EASjB,CAAE,gBAAF,EAAoB,gBAApB,CATiB,EAUjB,CAAE,eAAF,EAAmB,eAAnB,CAViB,EAWjB,CAAE,cAAF,EAAkB,cAAlB,CAXiB,CAAnB;;AAmBA;;;;;;AAMO,MAAMC,cAAN,CAAqB;AAG1BC,EAAAA,WAAW,GAAG;AACZ;AACA;AACA,SAAKC,sBAAL,GAA8BC,cAAKC,OAAL,CAC5BD,cAAKC,OAAL,CAAaC,OAAO,CAACC,OAAR,CAAiB,SAAjB,CAAb,CAD4B,CAA9B;AAGD;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAA2B;AAC9B,UAAMC,MAAM,GAAGD,QAAQ,CAACE,UAAT,CAAqB,SAArB,CAAf;AACA,UAAMC,gBAAgB,GAAG,KAAKT,sBAA9B;;AAEA,aAASI,OAAT,CACEM,OADF,EAEEC,cAFF,EAGEC,QAHF,EAIQ;AACN,YAAMC,YAAY,GAAGH,OAAO,CAACA,OAAR,IAAmBA,OAAO,CAACT,IAAhD,CADM,CAGN;;AACA,UAAI,CAACY,YAAD,IAAiB,CAACA,YAAY,CAACC,UAAb,CAAyB,UAAzB,CAAtB,EAA2D;AACzD,eAAO,KAAKF,QAAQ,EAApB;AACD;;AAED,UAAIG,aAAa,GAAGF,YAApB;AACA,UAAIG,cAAc,GAAI,6CAAtB,CATM,CAWN;;AACA,UAAIpB,gBAAgB,CAACqB,IAAjB,CAAsBF,aAAtB,CAAJ,EAA0C;AACxClB,QAAAA,UAAU,CAACqB,OAAX,CAAmB,CAAC,CAACC,MAAD,EAASC,OAAT,CAAD,KAAuB;AACxCL,UAAAA,aAAa,GAAGA,aAAa,CAACK,OAAd,CAAsBD,MAAtB,EAA8BC,OAA9B,CAAhB;AACD,SAFD;AAIAJ,QAAAA,cAAc,GAAI,iBAAgBH,YAAa,iBAAgBE,aAAc,GAA7E;AACD;;AAED,aAAO,KAAKT,QAAQ,CAACe,SAAT,CACVd,MADU,EAEV,EACE,GAAGG,OADL;AAEEA,QAAAA,OAAO,EAAET,cAAKG,OAAL,CAAaK,gBAAb,EAA+BM,aAA/B;AAFX,OAFU,EAMVC,cANU,EAOVL,cAPU,EAQV,CAACW,GAAD,EAAMC,MAAN,KAAiB;AACf,YAAID,GAAJ,EAAS;AACP,iBAAOV,QAAQ,CAACU,GAAD,CAAf;AACD,SAHc,CAKf;AACA;AACA;;;AACA,YAAIC,MAAM,KAAKC,SAAf,EAA0B;AACxB,iBAAOZ,QAAQ,EAAf;AACD;;AAED,eAAOA,QAAQ,CAAC,IAAD,EAAOW,MAAP,CAAf;AACD,OArBS,CAAZ;AAuBD;;AAEDjB,IAAAA,QAAQ,CAACmB,OAAT,CAAkB,mBAAlB,EAAsCC,QAAtC,CAAgD,gBAAhD,EAAiEtB,OAAjE;AACAE,IAAAA,QAAQ,CAACmB,OAAT,CAAkB,MAAlB,EAAyBC,QAAzB,CAAmC,gBAAnC,EAAoDtB,OAApD;AACD;;AAlEyB","sourcesContent":["import Resolver from \"enhanced-resolve/lib/Resolver\"\nimport path from \"path\"\n\n// Core-js uses es6, es7 & web prefixes, which we'll convert to core-js 3\nconst coreJs2FileRegex = /\\/modules\\/(es6|es7|web)\\.|\\/es6\\/|\\/es7\\//\n\n// Try to replace core-js2 files to core-js@3 to reduce file size\nconst replaceMap = [\n  [`/es6.`, `/es.`],\n  [`/es7.`, `/es.`],\n  [`/es6/`, `/es/`],\n  [`/es7/`, `/es/`],\n  [`/es7/`, `/es/`],\n  [`web.dom.iterable`, `web.dom-collections.iterator.js`],\n  [`typed.data-view`, `data-view`],\n  [`regexp.match`, `string.match`],\n  [`regexp.replace`, `string.replace`],\n  [`regexp.search`, `string.search`],\n  [`regexp.split`, `string.split`],\n]\n\ninterface IRequest {\n  request?: string\n  path: string\n}\n\n/**\n * Babel-preset is set to corejs@3 which will add automatic polyfills. If a project has core-js@2 installed in their root or a package got compiled with core-js@2\n * we need to convert it to corejs@3 because core-js@2 isn't available or we might add multiple polyfills for the same problem.\n *\n * The resolver converts core-js@2 imports to core-js@3 imports to make our bundle as small as possible.\n */\nexport class CoreJSResolver {\n  _coreJSNodeModulesPath: string\n\n  constructor() {\n    // Get the nodemodules directory where core-js of gatsby lives\n    // it might be inside gatsby/node_modules when multiple core-js versions are loaded\n    this._coreJSNodeModulesPath = path.dirname(\n      path.dirname(require.resolve(`core-js`))\n    )\n  }\n\n  apply(resolver: Resolver): void {\n    const target = resolver.ensureHook(`resolve`)\n    const coreJsModulePath = this._coreJSNodeModulesPath\n\n    function resolve(\n      request: IRequest,\n      resolveContext: unknown,\n      callback: (err?: Error | null, result?: unknown) => void\n    ): void {\n      const innerRequest = request.request || request.path\n\n      // we only care about core-js\n      if (!innerRequest || !innerRequest.startsWith(`core-js/`)) {\n        return void callback()\n      }\n\n      let coreJsRequest = innerRequest\n      let resolveMessage = `alias core-js@3 to gatsby's core-js package`\n\n      // preset-env adds packages from modules/ so we rewrite them to our gatsby package\n      if (coreJs2FileRegex.test(coreJsRequest)) {\n        replaceMap.forEach(([search, replace]) => {\n          coreJsRequest = coreJsRequest.replace(search, replace)\n        })\n\n        resolveMessage = `map core-js@2(${innerRequest}) to corejs@3(${coreJsRequest})`\n      }\n\n      return void resolver.doResolve(\n        target,\n        {\n          ...request,\n          request: path.resolve(coreJsModulePath, coreJsRequest),\n        },\n        resolveMessage,\n        resolveContext,\n        (err, result) => {\n          if (err) {\n            return callback(err)\n          }\n\n          // if a rename fails we try to load the original file\n          // this could error when our mapping isn't complete. I've tested this on a couple of sites\n          // and couldn't find anything but you never know.\n          if (result === undefined) {\n            return callback()\n          }\n\n          return callback(null, result)\n        }\n      )\n    }\n\n    resolver.getHook(`described-resolve`).tapAsync(`CoreJSResolver`, resolve)\n    resolver.getHook(`file`).tapAsync(`CoreJSResolver`, resolve)\n  }\n}\n"],"file":"corejs-resolver.js"}