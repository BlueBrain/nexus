"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.startServer = startServer;

var _chokidar = _interopRequireDefault(require("chokidar"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _got = _interopRequireDefault(require("got"));

var _webpack = _interopRequireDefault(require("webpack"));

var _express = _interopRequireDefault(require("express"));

var _expressGraphql = _interopRequireDefault(require("express-graphql"));

var _graphqlPlaygroundMiddlewareExpress = _interopRequireDefault(require("graphql-playground-middleware-express"));

var _gatsbyGraphiqlExplorer = _interopRequireDefault(require("gatsby-graphiql-explorer"));

var _graphql = require("graphql");

var _webpack2 = _interopRequireDefault(require("../utils/webpack.config"));

var _redux = require("../redux");

var _buildHtml = require("../commands/build-html");

var _path = require("../utils/path");

var _reporter = _interopRequireDefault(require("gatsby-cli/lib/reporter"));

var _launchEditor = _interopRequireDefault(require("react-dev-utils/launchEditor"));

var _cors = _interopRequireDefault(require("cors"));

var _gatsbyTelemetry = _interopRequireDefault(require("gatsby-telemetry"));

var WorkerPool = _interopRequireWildcard(require("../utils/worker/pool"));

var _http = _interopRequireDefault(require("http"));

var _developStatic = require("../commands/develop-static");

var _context = _interopRequireDefault(require("../schema/context"));

var _websocketManager = require("../utils/websocket-manager");

var _gatsbyCoreUtils = require("gatsby-core-utils");

var _apiRunnerNode = _interopRequireDefault(require("../utils/api-runner-node"));

var _types = require("../commands/types");

async function startServer(program, app, workerPool = WorkerPool.create()) {
  const indexHTMLActivity = _reporter.default.phantomActivity(`building index.html`, {});

  indexHTMLActivity.start();
  const directory = program.directory;
  const directoryPath = (0, _path.withBasePath)(directory);

  const createIndexHtml = async activity => {
    try {
      await (0, _buildHtml.buildHTML)({
        program,
        stage: _types.Stage.DevelopHTML,
        pagePaths: [`/`],
        workerPool,
        activity
      });
    } catch (err) {
      if (err.name !== `WebpackError`) {
        _reporter.default.panic(err);

        return;
      }

      _reporter.default.panic(_reporter.default.stripIndent`
          There was an error compiling the html.js component for the development server.

          See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html
        `, err);
    }
  };

  await createIndexHtml(indexHTMLActivity);
  indexHTMLActivity.end(); // report.stateUpdate(`webpack`, `IN_PROGRESS`)

  const webpackActivity = _reporter.default.activityTimer(`Building development bundle`, {
    id: `webpack-develop`
  });

  webpackActivity.start();
  const devConfig = await (0, _webpack2.default)(program, directory, `develop`, program.port, {
    parentSpan: webpackActivity.span
  });
  const compiler = (0, _webpack.default)(devConfig);
  /**
   * Set up the express app.
   **/

  app.use(_gatsbyTelemetry.default.expressMiddleware(`DEVELOP`));
  app.use((0, _webpackHotMiddleware.default)(compiler, {
    log: false,
    path: `/__webpack_hmr`,
    heartbeat: 10 * 1000
  }));
  app.use((0, _cors.default)());
  /**
   * Pattern matching all endpoints with graphql or graphiql with 1 or more leading underscores
   */

  const graphqlEndpoint = `/_+graphi?ql`;

  if (process.env.GATSBY_GRAPHQL_IDE === `playground`) {
    app.get(graphqlEndpoint, (0, _graphqlPlaygroundMiddlewareExpress.default)({
      endpoint: `/___graphql`
    }), () => {});
  } else {
    (0, _gatsbyGraphiqlExplorer.default)(app, {
      graphqlEndpoint
    });
  }

  app.use(graphqlEndpoint, (0, _expressGraphql.default)(() => {
    const {
      schema,
      schemaCustomization
    } = _redux.store.getState();

    if (!schemaCustomization.composer) {
      throw new Error(`A schema composer was not created in time. This is likely a gatsby bug. If you experienced this please create an issue.`);
    }

    return {
      schema,
      graphiql: false,

      extensions() {
        return {
          enableRefresh: process.env.ENABLE_GATSBY_REFRESH_ENDPOINT,
          refreshToken: process.env.GATSBY_REFRESH_TOKEN
        };
      },

      context: (0, _context.default)({
        schema,
        schemaComposer: schemaCustomization.composer,
        context: {},
        customContext: schemaCustomization.context
      }),

      customFormatErrorFn(err) {
        return { ...(0, _graphql.formatError)(err),
          stack: err.stack ? err.stack.split(`\n`) : []
        };
      }

    };
  }));
  /**
   * Refresh external data sources.
   * This behavior is disabled by default, but the ENABLE_GATSBY_REFRESH_ENDPOINT env var enables it
   * If no GATSBY_REFRESH_TOKEN env var is available, then no Authorization header is required
   **/

  const REFRESH_ENDPOINT = `/__refresh`;

  const refresh = async req => {
    _redux.emitter.emit(`WEBHOOK_RECEIVED`, {
      webhookBody: req.body
    });
  };

  app.use(REFRESH_ENDPOINT, _express.default.json());
  app.post(REFRESH_ENDPOINT, (req, res) => {
    const enableRefresh = process.env.ENABLE_GATSBY_REFRESH_ENDPOINT;
    const refreshToken = process.env.GATSBY_REFRESH_TOKEN;
    const authorizedRefresh = !refreshToken || req.headers.authorization === refreshToken;

    if (enableRefresh && authorizedRefresh) {
      refresh(req);
    }

    res.end();
  });
  app.get(`/__open-stack-frame-in-editor`, (req, res) => {
    (0, _launchEditor.default)(req.query.fileName, req.query.lineNumber);
    res.end();
  }); // Disable directory indexing i.e. serving index.html from a directory.
  // This can lead to serving stale html files during development.
  //
  // We serve by default an empty index.html that sets up the dev environment.

  app.use((0, _developStatic.developStatic)(`public`, {
    index: false
  }));
  const webpackDevMiddlewareInstance = (0, _webpackDevMiddleware.default)(compiler, {
    logLevel: `silent`,
    publicPath: devConfig.output.publicPath,
    watchOptions: devConfig.devServer ? devConfig.devServer.watchOptions : null,
    stats: `errors-only`
  });
  app.use(webpackDevMiddlewareInstance); // Expose access to app for advanced use cases

  const {
    developMiddleware
  } = _redux.store.getState().config;

  if (developMiddleware) {
    developMiddleware(app, program);
  } // Set up API proxy.


  const {
    proxy
  } = _redux.store.getState().config;

  if (proxy) {
    proxy.forEach(({
      prefix,
      url
    }) => {
      app.use(`${prefix}/*`, (req, res) => {
        const proxiedUrl = url + req.originalUrl;
        const {
          // remove `host` from copied headers
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          headers: {
            host,
            ...headers
          },
          method
        } = req;
        req.pipe(_got.default.stream(proxiedUrl, {
          headers,
          method,
          decompress: false
        }).on(`response`, response => res.writeHead(response.statusCode || 200, response.headers)).on(`error`, (err, _, response) => {
          if (response) {
            res.writeHead(response.statusCode || 400, response.headers);
          } else {
            const message = `Error when trying to proxy request "${req.originalUrl}" to "${proxiedUrl}"`;

            _reporter.default.error(message, err);

            res.sendStatus(500);
          }
        })).pipe(res);
      });
    }, (0, _cors.default)());
  }

  await (0, _apiRunnerNode.default)(`onCreateDevServer`, {
    app,
    deferNodeMutation: true
  }); // In case nothing before handled hot-update - send 404.
  // This fixes "Unexpected token < in JSON at position 0" runtime
  // errors after restarting development server and
  // cause automatic hard refresh in the browser.

  app.use(/.*\.hot-update\.json$/i, (_, res) => {
    res.status(404).end();
  }); // Render an HTML page and serve it.

  app.use((_, res) => {
    res.sendFile(directoryPath(`public/index.html`), err => {
      if (err) {
        res.status(500).end();
      }
    });
  });
  /**
   * Set up the HTTP server and socket.io.
   **/

  const server = new _http.default.Server(app);

  const socket = _websocketManager.websocketManager.init({
    server,
    directory: program.directory
  }); // hardcoded `localhost`, because host should match `target` we set
  // in http proxy in `develop-proxy`


  const listener = server.listen(program.port, `localhost`); // Register watcher that rebuilds index.html every time html.js changes.

  const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path => (0, _gatsbyCoreUtils.slash)(directoryPath(path)));

  _chokidar.default.watch(watchGlobs).on(`change`, async () => {
    await createIndexHtml(indexHTMLActivity); // eslint-disable-next-line no-unused-expressions

    socket === null || socket === void 0 ? void 0 : socket.to(`clients`).emit(`reload`);
  });

  return {
    compiler,
    listener,
    webpackActivity,
    websocketManager: _websocketManager.websocketManager,
    workerPool,
    webpackWatching: webpackDevMiddlewareInstance.context.watching
  };
}
//# sourceMappingURL=start-server.js.map