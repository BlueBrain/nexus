{"version":3,"sources":["../../src/utils/api-runner-error-parser.ts"],"names":["errorParser","err","handlers","regex","cb","match","id","context","sourceMessage","arg","structured","errorMessage","Array","isArray","Error","message","matched","error","undefined"],"mappings":";;;;;AAEA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuC;AACzD,QAAMC,QAAQ,GAAG,CACf;AACEC,IAAAA,KAAK,EAAE,sBADT;AAEEC,IAAAA,EAAE,EAAGC,KAAD,IAAqC;AACvC,aAAO;AACLC,QAAAA,EAAE,EAAG,OADA;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEH,KAAK,CAAC,CAAD,CAAtB;AAA2BI,UAAAA,GAAG,EAAEJ,KAAK,CAAC,CAAD;AAArC;AAFJ,OAAP;AAID;AAPH,GADe,CAAjB;AAYA,MAAIK,UAAJ;AACA,MAAIC,YAAJ,CAdyD,CAgBzD;AACA;AACA;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcZ,GAAd,CAAJ,EAAwB;AACtBA,IAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;AACD;;AACD,MAAIA,GAAG,YAAYa,KAAnB,EAA0B;AACxBH,IAAAA,YAAY,GAAGV,GAAG,CAACc,OAAnB;AACD;;AACD,MAAI,OAAOd,GAAP,KAAgB,QAApB,EAA6B;AAC3BU,IAAAA,YAAY,GAAGV,GAAf;AACD;;AAED,OAAK,MAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAX,IAA4BF,QAA5B,EAAsC;AAAA;;AACpC,UAAMc,OAAO,oBAAGL,YAAH,kDAAG,cAAcN,KAAd,CAAoBF,KAApB,CAAhB;;AACA,QAAIa,OAAJ,EAAa;AACXN,MAAAA,UAAU,GAAG,EACX,GAAGN,EAAE,CAACY,OAAD;AADM,OAAb;AAGA;AACD;AACF,GArCwD,CAuCzD;;;AACA,MAAI,CAACN,UAAL,EAAiB;AACf,WAAO;AACLJ,MAAAA,EAAE,EAAG,OADA;AAELC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEG,YAAY,IAAK;AAAlC,OAFJ;AAGLM,MAAAA,KAAK,EAAEhB,GAAG,YAAYa,KAAf,GAAuBb,GAAvB,GAA6BiB;AAH/B,KAAP;AAKD;;AAED,SAAOR,UAAP;AACD,CAjDD;;eAmDeV,W","sourcesContent":["import { IMatch } from \"../types\"\n\nconst errorParser = ({ err }: { err: unknown }): IMatch => {\n  const handlers = [\n    {\n      regex: /(.+) is not defined/m,\n      cb: (match: RegExpMatchArray): IMatch => {\n        return {\n          id: `11330`,\n          context: { sourceMessage: match[0], arg: match[1] },\n        }\n      },\n    },\n  ]\n\n  let structured: IMatch | undefined\n  let errorMessage: string | undefined\n\n  // try to handle as many type of err as possible.\n  // the err might come from a plugin so we don't\n  // know what we are getting\n  if (Array.isArray(err)) {\n    err = err[0]\n  }\n  if (err instanceof Error) {\n    errorMessage = err.message\n  }\n  if (typeof err === `string`) {\n    errorMessage = err\n  }\n\n  for (const { regex, cb } of handlers) {\n    const matched = errorMessage?.match(regex)\n    if (matched) {\n      structured = {\n        ...cb(matched),\n      }\n      break\n    }\n  }\n\n  // if we haven't found any known error\n  if (!structured) {\n    return {\n      id: `11321`,\n      context: { sourceMessage: errorMessage || `` },\n      error: err instanceof Error ? err : undefined,\n    }\n  }\n\n  return structured\n}\n\nexport default errorParser\n"],"file":"api-runner-error-parser.js"}