{"version":3,"sources":["../../src/utils/prepare-urls.ts"],"names":["prepareUrls","protocol","host","port","formatUrl","hostname","url","format","pathname","prettyPrintUrl","chalk","bold","String","isUnspecifiedHost","prettyHost","lanUrlForConfig","lanUrlForTerminal","address","ip","test","undefined","_e","localUrlForTerminal","localUrlForBrowser"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASO,SAASA,WAAT,CACLC,QADK,EAELC,IAFK,EAGLC,IAHK,EAIU;AACf,QAAMC,SAAS,GAAIC,QAAD,IAChBC,aAAIC,MAAJ,CAAW;AACTN,IAAAA,QADS;AAETI,IAAAA,QAFS;AAGTF,IAAAA,IAHS;AAITK,IAAAA,QAAQ,EAAG;AAJF,GAAX,CADF;;AAOA,QAAMC,cAAc,GAAIJ,QAAD,IACrBC,aAAIC,MAAJ,CAAW;AACTN,IAAAA,QADS;AAETI,IAAAA,QAFS;AAGTF,IAAAA,IAAI,EAAEO,eAAMC,IAAN,CAAWC,MAAM,CAACT,IAAD,CAAjB,CAHG;AAITK,IAAAA,QAAQ,EAAG;AAJF,GAAX,CADF;;AAQA,QAAMK,iBAAiB,GAAGX,IAAI,KAAM,SAAV,IAAsBA,IAAI,KAAM,IAA1D;AACA,MAAIY,UAAU,GAAGZ,IAAjB;AACA,MAAIa,eAAJ;AACA,MAAIC,iBAAJ;;AACA,MAAIH,iBAAJ,EAAuB;AACrBC,IAAAA,UAAU,GAAI,WAAd;;AAEA,QAAI;AACF;AACAC,MAAAA,eAAe,GAAGE,iBAAQC,EAAR,EAAlB;;AACA,UAAIH,eAAJ,EAAqB;AACnB;AACA;AACA,YACE,wDAAwDI,IAAxD,CACEJ,eADF,CADF,EAIE;AACA;AACAC,UAAAA,iBAAiB,GAAGP,cAAc,CAACM,eAAD,CAAlC;AACD,SAPD,MAOO;AACL;AACAA,UAAAA,eAAe,GAAGK,SAAlB;AACD;AACF;AACF,KAlBD,CAkBE,OAAOC,EAAP,EAAW,CACX;AACD;AACF,GA5Cc,CA6Cf;AACA;AACA;;;AACA,QAAMC,mBAAmB,GAAGb,cAAc,CAACK,UAAD,CAA1C;AACA,QAAMS,kBAAkB,GAAGnB,SAAS,CAACU,UAAD,CAApC;AACA,SAAO;AACLC,IAAAA,eADK;AAELC,IAAAA,iBAFK;AAGLM,IAAAA,mBAHK;AAILC,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import address from \"address\"\nimport chalk from \"chalk\"\nimport url from \"url\"\n\nexport interface IPreparedUrls {\n  lanUrlForConfig: string\n  lanUrlForTerminal: string\n  localUrlForTerminal: string\n  localUrlForBrowser: string\n}\n\nexport function prepareUrls(\n  protocol: `http` | `https`,\n  host: string,\n  port: number\n): IPreparedUrls {\n  const formatUrl = (hostname: string): string =>\n    url.format({\n      protocol,\n      hostname,\n      port,\n      pathname: `/`,\n    })\n  const prettyPrintUrl = (hostname: string): string =>\n    url.format({\n      protocol,\n      hostname,\n      port: chalk.bold(String(port)),\n      pathname: `/`,\n    })\n\n  const isUnspecifiedHost = host === `0.0.0.0` || host === `::`\n  let prettyHost = host\n  let lanUrlForConfig\n  let lanUrlForTerminal\n  if (isUnspecifiedHost) {\n    prettyHost = `localhost`\n\n    try {\n      // This can only return an IPv4 address\n      lanUrlForConfig = address.ip()\n      if (lanUrlForConfig) {\n        // Check if the address is a private ip\n        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n        if (\n          /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n            lanUrlForConfig\n          )\n        ) {\n          // Address is private, format it for later use\n          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig)\n        } else {\n          // Address is not private, so we will discard it\n          lanUrlForConfig = undefined\n        }\n      }\n    } catch (_e) {\n      // ignored\n    }\n  }\n  // TODO collect errors (GraphQL + Webpack) in Redux so we\n  // can clear terminal and print them out on every compile.\n  // Borrow pretty printing code from webpack plugin.\n  const localUrlForTerminal = prettyPrintUrl(prettyHost)\n  const localUrlForBrowser = formatUrl(prettyHost)\n  return {\n    lanUrlForConfig,\n    lanUrlForTerminal,\n    localUrlForTerminal,\n    localUrlForBrowser,\n  }\n}\n"],"file":"prepare-urls.js"}