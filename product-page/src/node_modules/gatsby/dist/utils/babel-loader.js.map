{"version":3,"sources":["../../src/utils/babel-loader.js"],"names":["babelLoader","require","prepareOptions","getCustomOptions","mergeConfigItemOptions","module","exports","custom","babel","toReturn","customOptions","stage","options","loader","sourceType","config","partialConfig","reduxPresets","reduxPlugins","requiredPresets","requiredPlugins","fallbackPresets","hasFilesystemConfig","plugins","presets","forEach","preset","items","itemToMerge","type","plugin"],"mappings":";;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAE,cAAF,CAA3B;;AAEA,MAAM;AACJC,EAAAA,cADI;AAEJC,EAAAA,gBAFI;AAGJC,EAAAA;AAHI,IAIFH,OAAO,CAAE,wBAAF,CAJX;AAMA;;;;;;;;;;;;;;;;;AAeAI,MAAM,CAACC,OAAP,GAAiBN,WAAW,CAACO,MAAZ,CAAmBC,KAAK,IAAI;AAC3C,QAAMC,QAAQ,GAAG;AACf;AACAC,IAAAA,aAAa,CAAC;AAAEC,MAAAA,KAAK,GAAI,MAAX;AAAkB,SAAGC;AAArB,KAAD,EAAiC;AAC5C,aAAO;AACLL,QAAAA,MAAM,EAAE;AACNI,UAAAA;AADM,SADH;AAILE,QAAAA,MAAM,EAAE;AACNC,UAAAA,UAAU,EAAG,aADP;AAEN,aAAGX,gBAAgB,CAACQ,KAAD,CAFb;AAGN,aAAGC;AAHG;AAJH,OAAP;AAUD,KAbc;;AAef;AACAG,IAAAA,MAAM,CAACC,aAAD,EAAgB;AAAEN,MAAAA;AAAF,KAAhB,EAAmC;AACvC,UAAI;AAAEE,QAAAA;AAAF,UAAcI,aAAlB;AACA,YAAM,CACJC,YADI,EAEJC,YAFI,EAGJC,eAHI,EAIJC,eAJI,EAKJC,eALI,IAMFnB,cAAc,CAACM,KAAD,EAAQE,aAAR,CANlB,CAFuC,CAUvC;AACA;;AACA,UAAI,CAACM,aAAa,CAACM,mBAAd,EAAL,EAA0C;AACxCV,QAAAA,OAAO,GAAG,EACR,GAAGA,OADK;AAERW,UAAAA,OAAO,EAAEH,eAFD;AAGRI,UAAAA,OAAO,EAAE,CAAC,GAAGH,eAAJ,EAAqB,GAAGF,eAAxB;AAHD,SAAV;AAKD,OAND,MAMO;AACL;AACAP,QAAAA,OAAO,GAAG,EACR,GAAGA,OADK;AAERW,UAAAA,OAAO,EAAE,CAAC,GAAGX,OAAO,CAACW,OAAZ,EAAqB,GAAGH,eAAxB,CAFD;AAGRI,UAAAA,OAAO,EAAE,CAAC,GAAGZ,OAAO,CAACY,OAAZ,EAAqB,GAAGL,eAAxB;AAHD,SAAV;AAKD,OAzBsC,CA2BvC;;;AACAF,MAAAA,YAAY,CAACQ,OAAb,CAAqBC,MAAM,IAAI;AAC7Bd,QAAAA,OAAO,CAACY,OAAR,GAAkBpB,sBAAsB,CAAC;AACvCuB,UAAAA,KAAK,EAAEf,OAAO,CAACY,OADwB;AAEvCI,UAAAA,WAAW,EAAEF,MAF0B;AAGvCG,UAAAA,IAAI,EAAG,QAHgC;AAIvCrB,UAAAA;AAJuC,SAAD,CAAxC;AAMD,OAPD;AASAU,MAAAA,YAAY,CAACO,OAAb,CAAqBK,MAAM,IAAI;AAC7BlB,QAAAA,OAAO,CAACW,OAAR,GAAkBnB,sBAAsB,CAAC;AACvCuB,UAAAA,KAAK,EAAEf,OAAO,CAACW,OADwB;AAEvCK,UAAAA,WAAW,EAAEE,MAF0B;AAGvCD,UAAAA,IAAI,EAAG,QAHgC;AAIvCrB,UAAAA;AAJuC,SAAD,CAAxC;AAMD,OAPD;AASA,aAAOI,OAAP;AACD;;AA/Dc,GAAjB;AAkEA,SAAOH,QAAP;AACD,CApEgB,CAAjB","sourcesContent":["const babelLoader = require(`babel-loader`)\n\nconst {\n  prepareOptions,\n  getCustomOptions,\n  mergeConfigItemOptions,\n} = require(`./babel-loader-helpers`)\n\n/**\n * Gatsby's custom loader for webpack & babel\n *\n * Gatsby allows sites to either use our Babel setup (the default)\n * or to add a .babelrc to take control.\n *\n * Our default setup is defined in the fallbackPlugins/fallbackPresets arrays\n * below.\n *\n * After using either the fallback or user supplied setup, we add on a handful\n * of required plugins and finally merge in any presets/plugins supplied\n * by Gatsby plugins.\n *\n * You can find documentation for the custom loader here: https://babeljs.io/docs/en/next/babel-core.html#loadpartialconfig\n */\nmodule.exports = babelLoader.custom(babel => {\n  const toReturn = {\n    // Passed the loader options.\n    customOptions({ stage = `test`, ...options }) {\n      return {\n        custom: {\n          stage,\n        },\n        loader: {\n          sourceType: `unambiguous`,\n          ...getCustomOptions(stage),\n          ...options,\n        },\n      }\n    },\n\n    // Passed Babel's 'PartialConfig' object.\n    config(partialConfig, { customOptions }) {\n      let { options } = partialConfig\n      const [\n        reduxPresets,\n        reduxPlugins,\n        requiredPresets,\n        requiredPlugins,\n        fallbackPresets,\n      ] = prepareOptions(babel, customOptions)\n\n      // If there is no filesystem babel config present, add our fallback\n      // presets/plugins.\n      if (!partialConfig.hasFilesystemConfig()) {\n        options = {\n          ...options,\n          plugins: requiredPlugins,\n          presets: [...fallbackPresets, ...requiredPresets],\n        }\n      } else {\n        // With a babelrc present, only add our required plugins/presets\n        options = {\n          ...options,\n          plugins: [...options.plugins, ...requiredPlugins],\n          presets: [...options.presets, ...requiredPresets],\n        }\n      }\n\n      // Merge in presets/plugins added from gatsby plugins.\n      reduxPresets.forEach(preset => {\n        options.presets = mergeConfigItemOptions({\n          items: options.presets,\n          itemToMerge: preset,\n          type: `preset`,\n          babel,\n        })\n      })\n\n      reduxPlugins.forEach(plugin => {\n        options.plugins = mergeConfigItemOptions({\n          items: options.plugins,\n          itemToMerge: plugin,\n          type: `plugin`,\n          babel,\n        })\n      })\n\n      return options\n    },\n  }\n\n  return toReturn\n})\n"],"file":"babel-loader.js"}