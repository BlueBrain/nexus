{"version":3,"sources":["../../src/utils/create-schema-customization.ts"],"names":["createSchemaCustomization","refresh","parentSpan","deferNodeMutation","store","dispatch","type","traceId"],"mappings":";;;;;;;AAAA;;AACA;;AAGO,MAAMA,yBAAyB,GAAG,OAAO;AAC9CC,EAAAA,OAAO,GAAG,KADoC;AAE9CC,EAAAA,UAF8C;AAG9CC,EAAAA;AAH8C,CAAP,KAQpB;AACnB,MAAIF,OAAJ,EAAa;AACXG,iBAAMC,QAAN,CAAe;AAAEC,MAAAA,IAAI,EAAG;AAAT,KAAf;AACD;;AACD,QAAM,4BAAe,2BAAf,EAA2C;AAC/CJ,IAAAA,UAD+C;AAE/CC,IAAAA,iBAF+C;AAG/CI,IAAAA,OAAO,EAAE,CAACN,OAAD,GACJ,mCADI,GAEJ;AAL0C,GAA3C,CAAN;AAOD,CAnBM","sourcesContent":["import apiRunnerNode from \"./api-runner-node\"\nimport { store } from \"../redux\"\nimport { Span } from \"opentracing\"\n\nexport const createSchemaCustomization = async ({\n  refresh = false,\n  parentSpan,\n  deferNodeMutation,\n}: {\n  refresh?: boolean\n  parentSpan?: Span\n  deferNodeMutation?: boolean\n}): Promise<void> => {\n  if (refresh) {\n    store.dispatch({ type: `CLEAR_SCHEMA_CUSTOMIZATION` })\n  }\n  await apiRunnerNode(`createSchemaCustomization`, {\n    parentSpan,\n    deferNodeMutation,\n    traceId: !refresh\n      ? `initial-createSchemaCustomization`\n      : `refresh-createSchemaCustomization`,\n  })\n}\n"],"file":"create-schema-customization.js"}