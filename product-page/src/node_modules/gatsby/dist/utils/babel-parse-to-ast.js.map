{"version":3,"sources":["../../src/utils/babel-parse-to-ast.ts"],"names":["PARSER_OPTIONS","allowImportExportEverywhere","allowReturnOutsideFunction","allowSuperOutsideMethod","sourceType","plugins","decoratorsBeforeExport","proposal","getBabelParserOptions","filePath","test","map","plugin","babelParseToAst","contents"],"mappings":";;;;;;AAAA;;AAGA,MAAMA,cAA6B,GAAG;AACpCC,EAAAA,2BAA2B,EAAE,IADO;AAEpCC,EAAAA,0BAA0B,EAAE,IAFQ;AAGpCC,EAAAA,uBAAuB,EAAE,IAHW;AAIpCC,EAAAA,UAAU,EAAG,aAJuB;AAKpCC,EAAAA,OAAO,EAAE,CACN,KADM,EAEN,MAFM,EAGN,eAHM,EAIN,kBAJM,EAKP,CACG,YADH,EAEE;AACEC,IAAAA,sBAAsB,EAAE;AAD1B,GAFF,CALO,EAWN,iBAXM,EAYN,wBAZM,EAaN,qBAbM,EAcN,mBAdM,EAeN,qBAfM,EAgBN,iBAhBM,EAiBN,cAjBM,EAkBN,cAlBM,EAmBN,eAnBM,EAoBN,kBApBM,EAqBN,kBArBM,EAsBN,YAtBM,EAuBN,QAvBM,EAwBN,sBAxBM,EAyBN,kBAzBM,EA0BP,CACG,kBADH,EAEE;AACEC,IAAAA,QAAQ,EAAG;AADb,GAFF,CA1BO,EAgCN,2BAhCM;AAL2B,CAAtC;;AAyCO,SAASC,qBAAT,CAA+BC,QAA/B,EAAgE;AACrE;AACA,MAAI,SAASC,IAAT,CAAcD,QAAd,CAAJ,EAA6B;AAC3B,UAAM;AAAEJ,MAAAA;AAAF,QAAcL,cAApB;AACA,WAAO,EACL,GAAGA,cADE;AAELK,MAAAA,OAAO,EAAEA,OAAO,CAAEM,GAAT,CAAaC,MAAM,IAC1BA,MAAM,KAAM,MAAZ,GAAqB,YAArB,GAAmCA,MAD5B;AAFJ,KAAP;AAMD;;AACD,SAAOZ,cAAP;AACD;;AAEM,SAASa,eAAT,CAAyBC,QAAzB,EAA2CL,QAA3C,EAAmE;AACxE,SAAO,mBAAMK,QAAN,EAAgBN,qBAAqB,CAACC,QAAD,CAArC,CAAP;AACD","sourcesContent":["import { parse, ParserOptions } from \"@babel/parser\"\nimport { File } from \"@babel/types\"\n\nconst PARSER_OPTIONS: ParserOptions = {\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  allowSuperOutsideMethod: true,\n  sourceType: `unambiguous`,\n  plugins: [\n    `jsx`,\n    `flow`,\n    `doExpressions`,\n    `objectRestSpread`,\n    [\n      `decorators`,\n      {\n        decoratorsBeforeExport: true,\n      },\n    ],\n    `classProperties`,\n    `classPrivateProperties`,\n    `classPrivateMethods`,\n    `exportDefaultFrom`,\n    `exportNamespaceFrom`,\n    `asyncGenerators`,\n    `functionBind`,\n    `functionSent`,\n    `dynamicImport`,\n    `numericSeparator`,\n    `optionalChaining`,\n    `importMeta`,\n    `bigInt`,\n    `optionalCatchBinding`,\n    `throwExpressions`,\n    [\n      `pipelineOperator`,\n      {\n        proposal: `minimal`,\n      },\n    ],\n    `nullishCoalescingOperator`,\n  ],\n}\n\nexport function getBabelParserOptions(filePath: string): ParserOptions {\n  // Flow and TypeScript plugins can't be enabled simultaneously\n  if (/\\.tsx?/.test(filePath)) {\n    const { plugins } = PARSER_OPTIONS\n    return {\n      ...PARSER_OPTIONS,\n      plugins: plugins!.map(plugin =>\n        plugin === `flow` ? `typescript` : plugin\n      ),\n    }\n  }\n  return PARSER_OPTIONS\n}\n\nexport function babelParseToAst(contents: string, filePath: string): File {\n  return parse(contents, getBabelParserOptions(filePath))\n}\n"],"file":"babel-parse-to-ast.js"}