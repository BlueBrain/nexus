{"version":3,"sources":["../../src/utils/develop-proxy.ts"],"names":["noop","adminFolder","path","join","__dirname","serveAdmin","url","index","startDevelopProxy","input","shouldServeRestartingScreen","proxy","httpProxy","createProxyServer","target","targetPort","changeOrigin","preserveHeaderKeyCase","autoRewrite","ws","on","app","req","res","process","env","GATSBY_EXPERIMENTAL_ENABLE_ADMIN","wasAdminRequest","program","directory","then","services","setHeader","end","JSON","stringify","fs","readFileSync","require","resolve","restartingScreen","web","server","ssl","https","createServer","http","socket","head","listen","proxyPort","host","serveRestartingScreen","serveSite"],"mappings":"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","sourcesContent":["import http from \"http\"\nimport https from \"https\"\nimport httpProxy from \"http-proxy\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { getServices } from \"gatsby-core-utils/dist/service-lock\"\nimport st from \"st\"\nimport restartingScreen from \"./restarting-screen\"\nimport { IProgram } from \"../commands/types\"\n\ninterface IProxyControls {\n  serveRestartingScreen: () => void\n  serveSite: () => void\n  server: any\n}\n\nconst noop = (): void => {}\n\nconst adminFolder = path.join(__dirname, `..`, `..`, `gatsby-admin-public`)\n\nconst serveAdmin = st({\n  path: adminFolder,\n  url: `/___admin`,\n  index: `index.html`,\n})\n\nexport const startDevelopProxy = (input: {\n  proxyPort: number\n  targetPort: number\n  program: IProgram\n}): IProxyControls => {\n  let shouldServeRestartingScreen = false\n\n  const proxy = httpProxy.createProxyServer({\n    target: `http://localhost:${input.targetPort}`,\n    changeOrigin: true,\n    preserveHeaderKeyCase: true,\n    autoRewrite: true,\n    ws: true,\n  })\n\n  // Noop on proxy errors, as this throws a bunch of \"Socket hang up\"\n  // ones whenever the page is refreshed\n  proxy.on(`error`, noop)\n\n  const app: http.RequestListener = (req, res): void => {\n    if (process.env.GATSBY_EXPERIMENTAL_ENABLE_ADMIN) {\n      const wasAdminRequest = serveAdmin(req, res)\n      if (wasAdminRequest) {\n        return\n      }\n    }\n\n    // Add a route at localhost:8000/___services for service discovery\n    if (req.url === `/___services`) {\n      getServices(input.program.directory).then(services => {\n        res.setHeader(`Content-Type`, `application/json`)\n        res.end(JSON.stringify(services))\n      })\n      return\n    }\n\n    if (req.url === `/socket.io/socket.io.js`) {\n      res.end(\n        fs.readFileSync(require.resolve(`socket.io-client/dist/socket.io.js`))\n      )\n      return\n    }\n\n    if (\n      shouldServeRestartingScreen ||\n      req.url === `/___debug-restarting-screen`\n    ) {\n      res.end(restartingScreen)\n      return\n    }\n\n    proxy.web(req, res)\n  }\n\n  const server = input.program.ssl\n    ? https.createServer(input.program.ssl, app)\n    : http.createServer(app)\n\n  server.on(`upgrade`, function (req, socket, head) {\n    proxy.ws(req, socket, head)\n  })\n\n  server.listen(input.proxyPort, input.program.host)\n\n  return {\n    server,\n    serveRestartingScreen: (): void => {\n      shouldServeRestartingScreen = true\n    },\n    serveSite: (): void => {\n      shouldServeRestartingScreen = false\n    },\n  }\n}\n"],"file":"develop-proxy.js"}