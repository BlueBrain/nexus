{"version":3,"sources":["../../src/utils/mett.ts"],"names":["mett","mettEvents","Map","on","eventName","callback","set","get","add","Set","off","delete","emit","e","setName","forEach","mettEmitEachC","setStar","mettEmitEachStar"],"mappings":";;;;;AAAA;AACA;AACA;AAgBO,SAASA,IAAT,GAAuB;AAC5B,QAAMC,UAGL,GAAG,IAAIC,GAAJ,EAHJ;AAKA,SAAO;AACLC,IAAAA,EAAE,CAACC,SAAD,EAAuBC,QAAvB,EAAwE;AACxE,YAAMC,GAAG,GAAGL,UAAU,CAACM,GAAX,CAAeH,SAAf,CAAZ;;AACA,UAAIE,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACE,GAAJ,CAAQH,QAAR;AACD,OAFD,MAEO;AACLJ,QAAAA,UAAU,CAACK,GAAX,CAAeF,SAAf,EAA0B,IAAIK,GAAJ,CAAQ,CAACJ,QAAD,CAAR,CAA1B;AACD;AACF,KARI;;AASLK,IAAAA,GAAG,CAACN,SAAD,EAAuBC,QAAvB,EAAwE;AACzE,YAAMC,GAAG,GAAGL,UAAU,CAACM,GAAX,CAAeH,SAAf,CAAZ;;AACA,UAAIE,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACK,MAAJ,CAAWN,QAAX;AACD;AACF,KAdI;;AAeLO,IAAAA,IAAI,CAACR,SAAD,EAAuBS,CAAvB,EAAyC;AAC3C,YAAMC,OAAO,GAAGb,UAAU,CAACM,GAAX,CAAeH,SAAf,CAAhB;;AACA,UAAIU,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACC,OAAR,CAAgB,SAASC,aAAT,CAAuBX,QAAvB,EAAiC;AAC/CA,UAAAA,QAAQ,CAACQ,CAAD,EAAIT,SAAJ,CAAR;AACD,SAFD;AAGD;;AACD,YAAMa,OAAO,GAAGhB,UAAU,CAACM,GAAX,CAAgB,GAAhB,CAAhB;;AACA,UAAIU,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACF,OAAR,CAAgB,SAASG,gBAAT,CAA0Bb,QAA1B,EAAoC;AAClDA,UAAAA,QAAQ,CAACQ,CAAD,EAAIT,SAAJ,CAAR;AACD,SAFD;AAGD;AACF;;AA5BI,GAAP;AA8BD","sourcesContent":["// This is a simple event emitter based on mitt.js\n// It mainly changes the data model to use a Map and Set, rather than a\n// regular object and an array.\n\ntype MettHandler<EventName, Payload> = (\n  e: Payload,\n  eventName: EventName\n) => void\n\nexport interface IMett {\n  on(eventName: EventName, callback: MettHandler<EventName, Payload>): void\n  off(eventName: EventName, callback: MettHandler<EventName, Payload>): void\n  emit(eventName: EventName, e: Payload): void\n}\n\ntype EventName = string\ntype Payload = any\n\nexport function mett(): IMett {\n  const mettEvents: Map<\n    EventName,\n    Set<MettHandler<EventName, Payload>>\n  > = new Map()\n\n  return {\n    on(eventName: EventName, callback: MettHandler<EventName, Payload>): void {\n      const set = mettEvents.get(eventName)\n      if (set) {\n        set.add(callback)\n      } else {\n        mettEvents.set(eventName, new Set([callback]))\n      }\n    },\n    off(eventName: EventName, callback: MettHandler<EventName, Payload>): void {\n      const set = mettEvents.get(eventName)\n      if (set) {\n        set.delete(callback)\n      }\n    },\n    emit(eventName: EventName, e: Payload): void {\n      const setName = mettEvents.get(eventName)\n      if (setName) {\n        setName.forEach(function mettEmitEachC(callback) {\n          callback(e, eventName)\n        })\n      }\n      const setStar = mettEvents.get(`*`)\n      if (setStar) {\n        setStar.forEach(function mettEmitEachStar(callback) {\n          callback(e, eventName)\n        })\n      }\n    },\n  }\n}\n"],"file":"mett.js"}