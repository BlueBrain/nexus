{"version":3,"sources":["../../src/utils/merge-gatsby-config.ts"],"names":["normalizePluginEntry","entry","_","isString","resolve","options","isObject","howToMerge","byDefault","a","b","siteMetadata","objA","objB","merge","plugins","uniqWith","concat","isEqual","pick","mapping","mergeGatsbyConfig","allGatsbyConfigKeysWithAValue","uniq","Object","keys","mergedConfig","reduce","config","gatsbyConfigKey","mergeFn"],"mappings":";;;;;;;AAAA;;AAiCA;;;;;;;AAOA,MAAMA,oBAAoB,GAAIC,KAAD,IAC3BC,gBAAEC,QAAF,CAAWF,KAAX,IACI;AACEG,EAAAA,OAAO,EAAEH,KADX;AAEEI,EAAAA,OAAO,EAAE;AAFX,CADJ,GAKIH,gBAAEI,QAAF,CAAWL,KAAX,IACA;AAAEI,EAAAA,OAAO,EAAE,EAAX;AAAe,KAAGJ;AAAlB,CADA,GAEAA,KARN;;AAUA,MAAMM,UAAU,GAAG;AACjB;;;;;AAKAC,EAAAA,SAAS,EAAE,CAACC,CAAD,EAAeC,CAAf,KAA2CA,CAAC,IAAID,CAN1C;AAOjBE,EAAAA,YAAY,EAAE,CAACC,IAAD,EAAiBC,IAAjB,KACZX,gBAAEY,KAAF,CAAQ,EAAR,EAAYF,IAAZ,EAAkBC,IAAlB,CARe;AASjB;AACAE,EAAAA,OAAO,EAAE,CAACN,CAAgB,GAAG,EAApB,EAAwBC,CAAgB,GAAG,EAA3C,KACPR,gBAAEc,QAAF,CAAWP,CAAC,CAACQ,MAAF,CAASP,CAAT,CAAX,EAAwB,CAACD,CAAD,EAAIC,CAAJ,KACtBR,gBAAEgB,OAAF,CACEhB,gBAAEiB,IAAF,CAAOnB,oBAAoB,CAACS,CAAD,CAA3B,EAAgC,CAAE,SAAF,EAAa,SAAb,CAAhC,CADF,EAEEP,gBAAEiB,IAAF,CAAOnB,oBAAoB,CAACU,CAAD,CAA3B,EAAgC,CAAE,SAAF,EAAa,SAAb,CAAhC,CAFF,CADF,CAXe;AAiBjBU,EAAAA,OAAO,EAAE,CAACR,IAAD,EAAgBC,IAAhB,KAA2CX,gBAAEY,KAAF,CAAQ,EAAR,EAAYF,IAAZ,EAAkBC,IAAlB;AAjBnC,CAAnB;AAoBA;;;;AAGO,MAAMQ,iBAAiB,GAAG,CAC/BZ,CAD+B,EAE/BC,CAF+B,KAGR;AACvB;AACA,QAAMY,6BAA6B,GAAGpB,gBAAEqB,IAAF,CACpCC,MAAM,CAACC,IAAP,CAAYhB,CAAZ,EAAeQ,MAAf,CAAsBO,MAAM,CAACC,IAAP,CAAYf,CAAZ,CAAtB,CADoC,CAAtC,CAFuB,CAMvB;;;AACA,QAAMgB,YAAY,GAAGJ,6BAA6B,CAACK,MAA9B,CACnB,CAACC,MAAD,EAASC,eAAT,KAA6B;AAC3B;AACA;AACA,UAAMC,OAAO,GAAGvB,UAAU,CAACsB,eAAD,CAAV,IAA+BtB,UAAU,CAACC,SAA1D;AACA,WAAO,EACL,GAAGoB,MADE;AAEL,OAACC,eAAD,GAAmBC,OAAO,CAACrB,CAAC,CAACoB,eAAD,CAAF,EAAqBnB,CAAC,CAACmB,eAAD,CAAtB;AAFrB,KAAP;AAID,GATkB,EAUnB,EAVmB,CAArB,CAPuB,CAoBvB;;AACA,SAAOH,YAAP;AACD,CAzBM","sourcesContent":["import _ from \"lodash\"\nimport { Express } from \"express\"\n// TODO export it in index.d.ts\ntype PluginEntry =\n  | string\n  | {\n      resolve: string\n      options?: Record<string, unknown>\n    }\n\ninterface INormalizedPluginEntry {\n  resolve: string\n  options: Record<string, unknown>\n}\n\ninterface IGatsbyConfigInput {\n  siteMetadata?: Record<string, unknown>\n  plugins?: Array<PluginEntry>\n  pathPrefix?: string\n  assetPrefix?: string\n  polyfill?: boolean\n  mapping?: Record<string, string>\n  proxy?: {\n    prefix: string\n    url: string\n  }\n  developMiddleware?(app: Express): void\n}\n\ntype ConfigKey = keyof IGatsbyConfigInput\ntype Metadata = IGatsbyConfigInput[\"siteMetadata\"]\ntype Mapping = IGatsbyConfigInput[\"mapping\"]\n\n/**\n * Normalize plugin spec before comparing so\n *  - `gatsby-plugin-name`\n *  - { resolve: `gatsby-plugin-name` }\n *  - { resolve: `gatsby-plugin-name`, options: {} }\n * are all considered equal\n */\nconst normalizePluginEntry = (entry: PluginEntry): INormalizedPluginEntry =>\n  _.isString(entry)\n    ? {\n        resolve: entry,\n        options: {},\n      }\n    : _.isObject(entry)\n    ? { options: {}, ...entry }\n    : entry\n\nconst howToMerge = {\n  /**\n   * pick a truthy value by default.\n   * This makes sure that if a single value is defined, that one it used.\n   * We prefer the \"right\" value, because the user's config will be \"on the right\"\n   */\n  byDefault: (a: ConfigKey, b: ConfigKey): ConfigKey => b || a,\n  siteMetadata: (objA: Metadata, objB: Metadata): Metadata =>\n    _.merge({}, objA, objB),\n  // plugins are concatenated and uniq'd, so we don't get two of the same plugin value\n  plugins: (a: PluginEntry[] = [], b: PluginEntry[] = []): PluginEntry[] =>\n    _.uniqWith(a.concat(b), (a, b) =>\n      _.isEqual(\n        _.pick(normalizePluginEntry(a), [`resolve`, `options`]),\n        _.pick(normalizePluginEntry(b), [`resolve`, `options`])\n      )\n    ),\n  mapping: (objA: Mapping, objB: Mapping): Mapping => _.merge({}, objA, objB),\n} as const\n\n/**\n * Defines how a theme object is merged with the user's config\n */\nexport const mergeGatsbyConfig = (\n  a: IGatsbyConfigInput,\n  b: IGatsbyConfigInput\n): IGatsbyConfigInput => {\n  // a and b are gatsby configs, If they have keys, that means there are values to merge\n  const allGatsbyConfigKeysWithAValue = _.uniq(\n    Object.keys(a).concat(Object.keys(b))\n  ) as ConfigKey[]\n\n  // reduce the array of mergable keys into a single gatsby config object\n  const mergedConfig = allGatsbyConfigKeysWithAValue.reduce(\n    (config, gatsbyConfigKey) => {\n      // choose a merge function for the config key if there's one defined,\n      // otherwise use the default value merge function\n      const mergeFn = howToMerge[gatsbyConfigKey] || howToMerge.byDefault\n      return {\n        ...config,\n        [gatsbyConfigKey]: mergeFn(a[gatsbyConfigKey], b[gatsbyConfigKey]),\n      }\n    },\n    {} as IGatsbyConfigInput\n  )\n\n  // return the fully merged config\n  return mergedConfig\n}\n"],"file":"merge-gatsby-config.js"}