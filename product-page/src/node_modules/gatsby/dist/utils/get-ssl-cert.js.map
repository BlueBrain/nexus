{"version":3,"sources":["../../src/utils/get-ssl-cert.ts"],"names":["absoluteOrDirectory","directory","filePath","path","isAbsolute","join","getWindowsEncryptionPassword","report","info","results","type","name","message","validate","input","length","value","getSslCert","certFile","keyFile","caFile","panic","id","context","keyPath","certPath","process","env","NODE_EXTRA_CA_CERTS","key","fs","readFileSync","cert","includes","os","platform","HOME","mkdtemp","mkdtempSync","tmpdir","getDevCert","require","certificateFor","caPath","getCaPath","skipCertutilInstall","ui","err","error"],"mappings":"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","sourcesContent":["import report from \"gatsby-cli/lib/reporter\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport os from \"os\"\nimport { ICert } from \"../commands/types\"\nimport prompts from \"prompts\"\n\nconst absoluteOrDirectory = (directory: string, filePath: string): string => {\n  // Support absolute paths\n  if (path.isAbsolute(filePath)) {\n    return filePath\n  }\n  return path.join(directory, filePath)\n}\n\nconst getWindowsEncryptionPassword = async (): Promise<string> => {\n  report.info(\n    [\n      `A password is required to access the secure certificate authority key`,\n      `used for signing certificates.`,\n      ``,\n      `If this is the first time this has run, then this is to set the password`,\n      `for future use.  If any new certificates are signed later, you will need`,\n      `to use this same password.`,\n      ``,\n    ].join(`\\n`)\n  )\n  const results = await prompts({\n    type: `password`,\n    name: `value`,\n    message: `Please enter the CA password`,\n    validate: input => input.length > 0 || `You must enter a password.`,\n  })\n  return results.value\n}\n\nexport interface IGetSslCertArgs {\n  name: string\n  certFile?: string\n  keyFile?: string\n  caFile?: string\n  directory: string\n}\n\nexport async function getSslCert({\n  name,\n  certFile,\n  keyFile,\n  caFile,\n  directory,\n}: IGetSslCertArgs): Promise<ICert | false> {\n  // check that cert file and key file are both true or both false, if they are both\n  // false, it defaults to the automatic ssl\n  if (certFile ? !keyFile : keyFile) {\n    report.panic({\n      id: `11521`,\n      context: {},\n    })\n  }\n\n  if (certFile && keyFile) {\n    const keyPath = absoluteOrDirectory(directory, keyFile)\n    const certPath = absoluteOrDirectory(directory, certFile)\n\n    process.env.NODE_EXTRA_CA_CERTS = caFile\n      ? absoluteOrDirectory(directory, caFile)\n      : certPath\n    return {\n      key: fs.readFileSync(keyPath),\n      cert: fs.readFileSync(certPath),\n    }\n  }\n\n  report.info(\n    `setting up automatic SSL certificate (may require elevated permissions/sudo)\\n`\n  )\n  try {\n    if ([`linux`, `darwin`].includes(os.platform()) && !process.env.HOME) {\n      // this is a total hack to ensure process.env.HOME is set on linux and mac\n      // devcert creates config path at import time (hence we import devcert after setting dummy value):\n      // - https://github.com/davewasmer/devcert/blob/2b1b8d40eda251616bf74fd69f00ae8222ca1171/src/constants.ts#L15\n      // - https://github.com/LinusU/node-application-config-path/blob/ae49ff6748b68b29ec76c00ce4a28ba8e9161d9b/index.js#L13\n      // if HOME is not set, we will get:\n      // \"The \"path\" argument must be of type s tring. Received type undefined\"\n      // fatal error. This still likely will result in fatal error, but at least it's not on import time\n      const mkdtemp = fs.mkdtempSync(path.join(os.tmpdir(), `home-`))\n      process.env.HOME = mkdtemp\n    }\n    const getDevCert = require(`devcert`).certificateFor\n    const { caPath, key, cert } = await getDevCert(name, {\n      getCaPath: true,\n      skipCertutilInstall: false,\n      ui: {\n        getWindowsEncryptionPassword,\n      },\n    })\n    if (caPath) {\n      process.env.NODE_EXTRA_CA_CERTS = caPath\n    }\n    return {\n      key,\n      cert,\n    }\n  } catch (err) {\n    report.panic({\n      id: `11522`,\n      error: err,\n      context: {\n        message: err.message,\n      },\n    })\n  }\n\n  return false\n}\n"],"file":"get-ssl-cert.js"}