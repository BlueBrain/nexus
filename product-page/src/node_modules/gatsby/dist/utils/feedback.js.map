{"version":3,"sources":["../../src/utils/feedback.ts"],"names":["feedbackKey","lastDateKey","setFeedbackDisabledValue","enabled","set","showFeedbackRequest","Date","now","report","log","randomChanceToBeTrue","currentQuarter","Math","floor","getMonth","randomNumber","random","randomNumberWithinQuarter","userPassesFeedbackRequestHeuristic","randomlyPassingHeuristic","get","process","env","GATSBY_FEEDBACK_DISABLED","lastDateValue","lastDate","threeMonthsAgo","setMonth","versionPoints","split","latestVersionPoints","e","versionsMatchOnMajorAndMinor"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,MAAMA,WAAW,GAAI,mBAArB;AACA,MAAMC,WAAW,GAAI,0BAArB,C,CAEA;AACA;AACA;;AACO,SAASC,wBAAT,CAAkCC,OAAlC,EAA0D;AAC/D,yCAAiBC,GAAjB,CAAqBJ,WAArB,EAAkCG,OAAlC;AACD,C,CAED;;;AACO,SAASE,mBAAT,GAAqC;AAC1C,yCAAiBD,GAAjB,CAAqBH,WAArB,EAAkCK,IAAI,CAACC,GAAL,EAAlC;;AACAC,oBAAOC,GAAP,CACG,8JADH;;AAGAD,oBAAOC,GAAP,CAAY,+DAAZ;AACD;;AAED,MAAMC,oBAAoB,GAAG,MAAe;AAC1C;AACA;AACA;AACA,QAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAIP,IAAJ,GAAWQ,QAAX,KAAwB,CAAzB,IAA8B,CAAzC,CAAvB;AACA,QAAMC,YAAY,GAAGH,IAAI,CAACC,KAAL,CACnBD,IAAI,CAACI,MAAL,OACE;AACC,OAAK,CAFR,CADmB,CAArB;AAKA,QAAMC,yBAAyB,GAAGF,YAAY,GAAG,KAAK,CAAL,IAAUJ,cAAc,GAAG,CAA3B,CAAjD;AAEA,SAAOM,yBAAyB,KAAK,2BAAa,IAAIX,IAAJ,EAAb,CAArC;AACD,CAbD,C,CAeA;AACA;AACA;AACA;AACA;AACA;;;AACO,eAAeY,kCAAf,GAAsE;AAC3E;AACA;AACA;AACA;AACA,QAAMC,wBAAwB,GAC5BT,oBAAoB,MACpBA,oBAAoB,EADpB,IAEAA,oBAAoB,EAFpB,IAGAA,oBAAoB,EAHpB,IAIAA,oBAAoB,EALtB;;AAOA,MAAI,CAACS,wBAAL,EAA+B;AAC7B,WAAO,KAAP;AACD,GAd0E,CAgB3E;;;AACA,MAAI,uCAAiBC,GAAjB,CAAqBpB,WAArB,MAAsC,IAA1C,EAAgD;AAC9C,WAAO,KAAP;AACD,GAnB0E,CAqB3E;;;AACA,MAAIqB,OAAO,CAACC,GAAR,CAAYC,wBAAZ,KAA0C,GAA9C,EAAkD;AAChD,WAAO,KAAP;AACD,GAxB0E,CA0B3E;;;AACA,QAAMC,aAAa,GAAG,uCAAiBJ,GAAjB,CAAqBnB,WAArB,CAAtB,CA3B2E,CA4B3E;AACA;AACA;;AACA,MAAIuB,aAAJ,EAAmB;AACjB,UAAMC,QAAQ,GAAG,IAAInB,IAAJ,CAASkB,aAAT,CAAjB;AACA,UAAME,cAAc,GAAG,IAAIpB,IAAJ,EAAvB;AACAoB,IAAAA,cAAc,CAACC,QAAf,CAAwBD,cAAc,CAACZ,QAAf,KAA4B,CAApD;;AAEA,QAAIW,QAAQ,GAAGC,cAAf,EAA+B;AAC7B,aAAO,KAAP;AACD;AACF,GAvC0E,CAyC3E;;;AACA,QAAME,aAAa,GAAG,yCAAmBC,KAAnB,CAA0B,GAA1B,CAAtB;AACA,MAAIC,mBAA6B,GAAG,EAApC;;AACA,MAAI;AACFA,IAAAA,mBAAmB,GAAG,CAAC,MAAM,4BAAe,QAAf,CAAP,EAAgCD,KAAhC,CAAuC,GAAvC,CAAtB;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU,CACV;AACA;AACA;AACA;AACD,GAnD0E,CAqD3E;AACA;AACA;;;AACA,QAAMC,4BAA4B,GAChCJ,aAAa,CAAC,CAAD,CAAb,KAAqBE,mBAAmB,CAAC,CAAD,CAAxC,IACAF,aAAa,CAAC,CAAD,CAAb,KAAqBE,mBAAmB,CAAC,CAAD,CAF1C;;AAIA,MAAIE,4BAA4B,KAAK,KAArC,EAA4C;AAC1C,WAAO,KAAP;AACD,GA9D0E,CAgE3E;AACA;;;AACA,SAAO,IAAP;AACD","sourcesContent":["import report from \"gatsby-cli/lib/reporter\"\nimport { getConfigStore, getGatsbyVersion } from \"gatsby-core-utils\"\nimport latestVersion from \"latest-version\"\nimport getDayOfYear from \"date-fns/getDayOfYear\"\n\nconst feedbackKey = `feedback.disabled`\nconst lastDateKey = `feedback.lastRequestDate`\n\n// This function is designed to be used by `gatsby feedback --disable`\n// and `gatsby feedback --enable`. This key is used to determine\n// if a user is allowed to be solicited for feedback\nexport function setFeedbackDisabledValue(enabled: boolean): void {\n  getConfigStore().set(feedbackKey, enabled)\n}\n\n// Print the feedback request to the user\nexport function showFeedbackRequest(): void {\n  getConfigStore().set(lastDateKey, Date.now())\n  report.log(\n    `\\n\\nHello! Will you help Gatsby improve by taking a four question survey?\\nIt takes less than five minutes and your ideas and feedback will be very helpful.`\n  )\n  report.log(`\\nGive us your feedback here: https://gatsby.dev/feedback\\n\\n`)\n}\n\nconst randomChanceToBeTrue = (): boolean => {\n  // This is spreading the request volume over the quarter.\n  // We are grabbing a randomNumber within the spread of a first day\n  // of a quarter, to the last day\n  const currentQuarter = Math.floor((new Date().getMonth() + 3) / 3)\n  const randomNumber = Math.floor(\n    Math.random() *\n      // One quarter year in days (roughly)\n      (30 * 3)\n  )\n  const randomNumberWithinQuarter = randomNumber + 30 * 3 * (currentQuarter - 1)\n\n  return randomNumberWithinQuarter === getDayOfYear(new Date())\n}\n\n// We are only showing feedback requests to users in if they pass a few checks:\n// 1. They pass a Math.random() check. This is a skateboard version of not sending out all requests in one day.\n// 2. They haven't disabled the feedback mechanism\n// 3. They don't have the environment variable to disable feedback present\n// 4. It's been at least 3 months since the last feedback request\n// 5. They are on the most recent version of Gatsby\nexport async function userPassesFeedbackRequestHeuristic(): Promise<boolean> {\n  // Heuristic 1\n  // We originally wrote this to have a single chance of hitting.\n  // We wanted to up the chance by 5x, so this is our crude - temporary -\n  // way of giving the user 5 chances to passing.\n  const randomlyPassingHeuristic =\n    randomChanceToBeTrue() ||\n    randomChanceToBeTrue() ||\n    randomChanceToBeTrue() ||\n    randomChanceToBeTrue() ||\n    randomChanceToBeTrue()\n\n  if (!randomlyPassingHeuristic) {\n    return false\n  }\n\n  // Heuristic 2\n  if (getConfigStore().get(feedbackKey) === true) {\n    return false\n  }\n\n  // Heuristic 3\n  if (process.env.GATSBY_FEEDBACK_DISABLED === `1`) {\n    return false\n  }\n\n  // Heuristic 4\n  const lastDateValue = getConfigStore().get(lastDateKey)\n  // 4.a if the user has never received the feedback request, this is undefined\n  //     Which is effectively a pass, because it's been ~infinity~ since they last\n  //     received a request from us.\n  if (lastDateValue) {\n    const lastDate = new Date(lastDateValue)\n    const threeMonthsAgo = new Date()\n    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3)\n\n    if (lastDate > threeMonthsAgo) {\n      return false\n    }\n  }\n\n  // Heuristic 5\n  const versionPoints = getGatsbyVersion().split(`.`)\n  let latestVersionPoints: string[] = []\n  try {\n    latestVersionPoints = (await latestVersion(`gatsby`)).split(`.`)\n  } catch (e) {\n    // do nothing.\n    // if the request fails, then we should just not show the feedback request\n    // because this in theory could happen often and we don't want to be spammy.\n    // In this case, we are guaranteed to have `versionsMatchOnMajorAndMinor` === false\n  }\n\n  // Since we push versions very frequently. So thinking that users will\n  // be on the latest patch is potentially unrealistic. So we are just\n  // comparing on major and minor version points.\n  const versionsMatchOnMajorAndMinor =\n    versionPoints[0] === latestVersionPoints[0] &&\n    versionPoints[1] === latestVersionPoints[1]\n\n  if (versionsMatchOnMajorAndMinor === false) {\n    return false\n  }\n\n  // If all of the above passed, then the user is able to be prompted\n  // for feedback\n  return true\n}\n"],"file":"feedback.js"}