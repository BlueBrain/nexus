import { Server as HTTPSServer } from "https";
import { Server as HTTPServer } from "http";
import { IPageDataWithQueryResult } from "../utils/page-data";
import socketIO from "socket.io";
export interface IPageQueryResult {
    id: string;
    result?: IPageDataWithQueryResult;
}
export interface IStaticQueryResult {
    id: string;
    result: unknown;
}
declare type PageResultsMap = Map<string, IPageQueryResult>;
declare type QueryResultsMap = Map<string, IStaticQueryResult>;
export declare class WebsocketManager {
    activePaths: Set<string>;
    connectedClients: number;
    errors: Map<string, string>;
    pageResults: PageResultsMap;
    staticQueryResults: QueryResultsMap;
    websocket: socketIO.Server | undefined;
    init: ({ directory, server, }: {
        directory: string;
        server: HTTPSServer | HTTPServer;
    }) => socketIO.Server;
    getSocket: () => socketIO.Server | undefined;
    emitStaticQueryData: (data: IStaticQueryResult) => void;
    emitPageData: (data: IPageQueryResult) => void;
    emitError: (id: string, message?: string | undefined) => void;
}
export declare const websocketManager: WebsocketManager;
export {};
