{"version":3,"sources":["../../../src/state-machines/waiting/actions.ts"],"names":["addNodeMutation","nodeMutationBatch","payload","push","extractQueries","waitingActions"],"mappings":";;;;;AAAA;;AAUA;;;;AAIO,MAAMA,eAAyD,GAAG,oBACvE;AACEC,EAAAA,iBAAiB,EAAE,CAAC;AAAEA,IAAAA,iBAAiB,GAAG;AAAtB,GAAD,EAA6B;AAAEC,IAAAA;AAAF,GAA7B,KAA6C;AAC9D;AACAD,IAAAA,iBAAiB,CAACE,IAAlB,CAAuBD,OAAvB;AACA,WAAOD,iBAAP;AACD;AALH,CADuE,CAAlE;;AAUA,MAAMG,cAAc,GAAG,wBAC3B,qBAD2B,CAAvB;;AAIA,MAAMC,cAA6D,GAAG;AAC3EL,EAAAA,eAD2E;AAE3EI,EAAAA;AAF2E,CAAtE","sourcesContent":["import {\n  AssignAction,\n  assign,\n  ActionFunctionMap,\n  sendParent,\n  AnyEventObject,\n} from \"xstate\"\nimport { IWaitingContext } from \"./types\"\nimport { AnyAction } from \"redux\"\n\n/**\n * Event handler used when we're not ready to process node mutations.\n * Instead we add it to a batch to process when we're next idle\n */\nexport const addNodeMutation: AssignAction<IWaitingContext, AnyAction> = assign(\n  {\n    nodeMutationBatch: ({ nodeMutationBatch = [] }, { payload }) => {\n      // It's not pretty, but it's much quicker than concat\n      nodeMutationBatch.push(payload)\n      return nodeMutationBatch\n    },\n  }\n)\n\nexport const extractQueries = sendParent<IWaitingContext, AnyEventObject>(\n  `EXTRACT_QUERIES_NOW`\n)\n\nexport const waitingActions: ActionFunctionMap<IWaitingContext, AnyAction> = {\n  addNodeMutation,\n  extractQueries,\n}\n"],"file":"actions.js"}