"use strict";

exports.__esModule = true;
exports.recreatePagesMachine = exports.reloadDataMachine = exports.initializeDataMachine = void 0;

var _xstate = require("xstate");

var _actions = require("./actions");

var _services = require("./services");

const loadDataStates = {
  customizingSchema: {
    invoke: {
      src: `customizeSchema`,
      id: `customizing-schema`,
      onDone: {
        target: `sourcingNodes`
      }
    }
  },
  sourcingNodes: {
    invoke: {
      src: `sourceNodes`,
      id: `sourcing-nodes`,
      onDone: {
        target: `buildingSchema`,
        actions: `assignChangedPages`
      }
    }
  }
};
const initialCreatePagesStates = {
  buildingSchema: {
    invoke: {
      id: `building-schema`,
      src: `buildSchema`,
      onDone: {
        target: `creatingPages`,
        actions: `assignGraphQLRunners`
      }
    }
  },
  creatingPages: {
    on: {
      ADD_NODE_MUTATION: {
        actions: [`markNodesDirty`, `callApi`]
      }
    },
    invoke: {
      id: `creating-pages`,
      src: `createPages`,
      onDone: {
        target: `creatingPagesStatefully`,
        actions: `assignChangedPages`
      }
    }
  },
  creatingPagesStatefully: {
    invoke: {
      src: `createPagesStatefully`,
      id: `creating-pages-statefully`,
      onDone: {
        target: `rebuildingSchemaWithSitePage`
      }
    }
  },
  rebuildingSchemaWithSitePage: {
    invoke: {
      src: `rebuildSchemaWithSitePage`,
      onDone: {
        target: `writingOutRedirects`
      }
    }
  },
  writingOutRedirects: {
    invoke: {
      src: `writeOutRedirectsAndWatch`,
      onDone: {
        target: `done`
      }
    }
  }
};
const recreatePagesStates = {
  buildingSchema: {
    invoke: {
      id: `building-schema`,
      src: `buildSchema`,
      onDone: {
        target: `creatingPages`,
        actions: `assignGraphQLRunners`
      }
    }
  },
  creatingPages: {
    on: {
      ADD_NODE_MUTATION: {
        actions: [`markNodesDirty`, `callApi`]
      }
    },
    invoke: {
      id: `creating-pages`,
      src: `createPages`,
      onDone: {
        target: `rebuildingSchemaWithSitePage`,
        actions: `assignChangedPages`
      }
    }
  },
  rebuildingSchemaWithSitePage: {
    invoke: {
      src: `rebuildSchemaWithSitePage`,
      onDone: {
        target: `done`
      }
    }
  }
};
const doneState = {
  done: {
    type: `final`,
    data: ({
      gatsbyNodeGraphQLFunction,
      graphqlRunner,
      pagesToBuild,
      pagesToDelete
    }) => {
      return {
        gatsbyNodeGraphQLFunction,
        graphqlRunner,
        pagesToBuild,
        pagesToDelete
      };
    }
  }
};
const options = {
  actions: _actions.dataLayerActions,
  services: _services.dataLayerServices
};
/**
 * Machine used during first run
 */

const initializeDataMachine = (0, _xstate.Machine)({
  id: `initializeDataMachine`,
  context: {},
  initial: `customizingSchema`,
  states: { ...loadDataStates,
    ...initialCreatePagesStates,
    ...doneState
  }
}, options);
/**
 * Machine used when we need to source nodes again
 */

exports.initializeDataMachine = initializeDataMachine;
const reloadDataMachine = (0, _xstate.Machine)({
  id: `reloadDataMachine`,
  context: {},
  initial: `customizingSchema`,
  states: { ...loadDataStates,
    ...recreatePagesStates,
    ...doneState
  }
}, options);
/**
 * Machine used when we need to re-create pages after a
 * node mutation outside of sourceNodes
 */

exports.reloadDataMachine = reloadDataMachine;
const recreatePagesMachine = (0, _xstate.Machine)({
  id: `recreatePagesMachine`,
  context: {},
  initial: `buildingSchema`,
  states: { ...recreatePagesStates,
    ...doneState
  }
}, options);
exports.recreatePagesMachine = recreatePagesMachine;
//# sourceMappingURL=index.js.map