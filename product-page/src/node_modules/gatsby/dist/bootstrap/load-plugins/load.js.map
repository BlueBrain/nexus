{"version":3,"sources":["../../../src/bootstrap/load-plugins/load.ts"],"names":["createFileContentHash","root","globPattern","hash","crypto","createHash","files","glob","sync","nodir","forEach","filepath","update","fs","readFileSync","digest","createPluginId","name","pluginObject","JSON","stringify","options","resolvePlugin","pluginName","rootDir","resolvedPath","path","resolve","packageJSON","parse","id","version","Error","requireSource","require","dirname","isAbsolute","err","loadPlugins","config","plugins","processPlugin","plugin","_","isString","info","pluginOptions","isEmpty","option","subplugins","p","push","parentDir","merge","internalPlugins","relPath","absPath","join","__dirname","pathCheck","process","cwd","program","store","getState","pageCreatorOptions","directory","pageCreatorPlugin","find","typescriptPlugin","undefined"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { slash } from \"gatsby-core-utils\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport crypto from \"crypto\"\nimport glob from \"glob\"\nimport { warnOnIncompatiblePeerDependency } from \"./validate\"\nimport { store } from \"../../redux\"\nimport { sync as existsSync } from \"fs-exists-cached\"\nimport { createNodeId } from \"../../utils/create-node-id\"\nimport { createRequireFromPath } from \"gatsby-core-utils\"\nimport {\n  IPluginInfo,\n  PluginRef,\n  IPluginRefObject,\n  IPluginRefOptions,\n  ISiteConfig,\n} from \"./types\"\nimport { PackageJson } from \"../../..\"\n\nfunction createFileContentHash(root: string, globPattern: string): string {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * Make sure key is unique to plugin options. E.g. there could\n * be multiple source-filesystem plugins, with different names\n * (docs, blogs).\n *\n * @param name Name of the plugin\n */\nconst createPluginId = (\n  name: string,\n  pluginObject: IPluginRefObject | null = null\n): string =>\n  createNodeId(\n    name + (pluginObject ? JSON.stringify(pluginObject.options) : ``),\n    `Plugin`\n  )\n\n/**\n * @param pluginName\n * This can be a name of a local plugin, the name of a plugin located in\n * node_modules, or a Gatsby internal plugin. In the last case the pluginName\n * will be an absolute path.\n * @param rootDir\n * This is the project location, from which are found the plugins\n */\nexport function resolvePlugin(\n  pluginName: string,\n  rootDir: string | null\n): IPluginInfo {\n  // Only find plugins when we're not given an absolute path\n  if (!existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (existsSync(resolvedPath)) {\n      if (existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        ) as PackageJson\n        const name = packageJSON.name || pluginName\n        warnOnIncompatiblePeerDependency(name, packageJSON)\n\n        return {\n          resolve: resolvedPath,\n          name,\n          id: createPluginId(name),\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const requireSource =\n      rootDir !== null\n        ? createRequireFromPath(`${rootDir}/:internal:`)\n        : require\n\n    // If the path is absolute, resolve the directory of the internal plugin,\n    // otherwise resolve the directory containing the package.json\n    const resolvedPath = slash(\n      path.dirname(\n        requireSource.resolve(\n          path.isAbsolute(pluginName)\n            ? pluginName\n            : `${pluginName}/package.json`\n        )\n      )\n    )\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n    warnOnIncompatiblePeerDependency(packageJSON.name, packageJSON)\n\n    return {\n      resolve: resolvedPath,\n      id: createPluginId(packageJSON.name),\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    throw new Error(\n      `Unable to find plugin \"${pluginName}\". Perhaps you need to install its package?`\n    )\n  }\n}\n\nexport function loadPlugins(\n  config: ISiteConfig = {},\n  rootDir: string | null = null\n): IPluginInfo[] {\n  // Instantiate plugins.\n  const plugins: IPluginInfo[] = []\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  function processPlugin(plugin: PluginRef): IPluginInfo {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin, rootDir)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      plugin.options = plugin.options || {}\n\n      // Throw an error if there is an \"option\" key.\n      if (\n        _.isEmpty(plugin.options) &&\n        !_.isEmpty((plugin as { option?: unknown }).option)\n      ) {\n        throw new Error(\n          `Plugin \"${plugin.resolve}\" has an \"option\" key in the configuration. Did you mean \"options\"?`\n        )\n      }\n\n      // Plugins can have plugins.\n      const subplugins: IPluginInfo[] = []\n      if (plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        const name = `TEST`\n\n        return {\n          id: createPluginId(name, plugin),\n          name,\n          version: `0.0.0-test`,\n          pluginOptions: {\n            plugins: [],\n          },\n          resolve: `__TEST__`,\n        }\n      }\n\n      const info = resolvePlugin(plugin.resolve, plugin.parentDir || rootDir)\n\n      return {\n        ...info,\n        id: createPluginId(info.name, plugin),\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404`,\n    `../../internal-plugins/webpack-theme-component-shadowing`,\n  ]\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      plugins.push(processPlugin(plugin))\n    })\n  }\n\n  // the order of all of these page-creators matters. The \"last plugin wins\",\n  // so the user's site comes last, and each page-creator instance has to\n  // match the plugin definition order before that. This works fine for themes\n  // because themes have already been added in the proper order to the plugins\n  // array\n  plugins.forEach(plugin => {\n    plugins.push(\n      processPlugin({\n        resolve: require.resolve(`gatsby-plugin-page-creator`),\n        options: {\n          path: slash(path.join(plugin.resolve, `src/pages`)),\n          pathCheck: false,\n        },\n      })\n    )\n  })\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: createPluginId(`default-site-plugin`),\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const program = store.getState().program\n\n  // default options for gatsby-plugin-page-creator\n  let pageCreatorOptions: IPluginRefOptions | undefined = {\n    path: slash(path.join(program.directory, `src/pages`)),\n    pathCheck: false,\n  }\n\n  if (config.plugins) {\n    const pageCreatorPlugin = config.plugins.find(\n      (plugin): plugin is IPluginRefObject =>\n        typeof plugin !== `string` &&\n        plugin.resolve === `gatsby-plugin-page-creator` &&\n        slash((plugin.options && plugin.options.path) || ``) ===\n          slash(path.join(program.directory, `src/pages`))\n    )\n    if (pageCreatorPlugin) {\n      // override the options if there are any user specified options\n      pageCreatorOptions = pageCreatorPlugin.options\n    }\n  }\n\n  // TypeScript support by default! use the user-provided one if it exists\n  const typescriptPlugin = (config.plugins || []).find(\n    plugin =>\n      (plugin as IPluginRefObject).resolve === `gatsby-plugin-typescript` ||\n      plugin === `gatsby-plugin-typescript`\n  )\n\n  if (typescriptPlugin === undefined) {\n    plugins.push(\n      processPlugin({\n        resolve: require.resolve(`gatsby-plugin-typescript`),\n      })\n    )\n  }\n\n  plugins.push(\n    processPlugin({\n      resolve: require.resolve(`gatsby-plugin-page-creator`),\n      options: pageCreatorOptions,\n    })\n  )\n\n  return plugins\n}\n"],"file":"load.js"}