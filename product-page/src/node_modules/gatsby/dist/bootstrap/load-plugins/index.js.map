{"version":3,"sources":["../../../src/bootstrap/load-plugins/index.ts"],"names":["getAPI","api","_","keys","reduce","merged","key","flattenPlugins","plugins","flattened","extractPlugins","plugin","pluginOptions","forEach","subPlugin","push","loadPlugins","config","rootDir","currentAPIs","browser","browserAPIs","node","nodeAPIs","ssr","ssrAPIs","pluginInfos","pluginArray","x","flattenedPlugins","badExports","store","dispatch","type","payload"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AASA,MAAMA,MAAM,GACVC,GADa,IAGbC,gBAAEC,IAAF,CAAOF,GAAP,EAAYG,MAAZ,CAA0C,CAACC,MAAD,EAASC,GAAT,KAAiB;AACzDD,EAAAA,MAAM,CAACC,GAAD,CAAN,GAAcJ,gBAAEC,IAAF,CAAOF,GAAG,CAACK,GAAD,CAAV,CAAd;AACA,SAAOD,MAAP;AACD,CAHD,EAGG,EAHH,CAHF,C,CAQA;AACA;AACA;;;AACA,MAAME,cAAc,GAAIC,OAAD,IAA2C;AAChE,QAAMC,SAAwB,GAAG,EAAjC;;AACA,QAAMC,cAAc,GAAIC,MAAD,IAA+B;AACpD,QAAIA,MAAM,CAACC,aAAP,IAAwBD,MAAM,CAACC,aAAP,CAAqBJ,OAAjD,EAA0D;AACxDG,MAAAA,MAAM,CAACC,aAAP,CAAqBJ,OAArB,CAA6BK,OAA7B,CAAqCC,SAAS,IAAI;AAChDL,QAAAA,SAAS,CAACM,IAAV,CAAeD,SAAf;AACAJ,QAAAA,cAAc,CAACI,SAAD,CAAd;AACD,OAHD;AAID;AACF,GAPD;;AASAN,EAAAA,OAAO,CAACK,OAAR,CAAgBF,MAAM,IAAI;AACxBF,IAAAA,SAAS,CAACM,IAAV,CAAeJ,MAAf;AACAD,IAAAA,cAAc,CAACC,MAAD,CAAd;AACD,GAHD;AAKA,SAAOF,SAAP;AACD,CAjBD;;AAmBO,eAAeO,WAAf,CACLC,MAAmB,GAAG,EADjB,EAELC,OAAsB,GAAG,IAFpB,EAGwB;AAC7B,QAAMC,WAAW,GAAGnB,MAAM,CAAC;AACzBoB,IAAAA,OAAO,EAAEC,WADgB;AAEzBC,IAAAA,IAAI,EAAEC,QAFmB;AAGzBC,IAAAA,GAAG,EAAEC;AAHoB,GAAD,CAA1B,CAD6B,CAO7B;;AACA,QAAMC,WAAW,GAAG,uBAAoBT,MAApB,EAA4BC,OAA5B,CAApB,CAR6B,CAU7B;;AACA,QAAMS,WAAW,GAAGpB,cAAc,CAACmB,WAAD,CAAlC,CAX6B,CAa7B;AACA;;AACA,QAAME,CAAC,GAAG,iCAAkB;AAAET,IAAAA,WAAF;AAAeU,IAAAA,gBAAgB,EAAEF;AAAjC,GAAlB,CAAV,CAf6B,CAiB7B;;AACA,MAAIE,gBAAgB,GAAGD,CAAC,CAACC,gBAAzB;AACA,QAAMC,UAAU,GAAGF,CAAC,CAACE,UAArB,CAnB6B,CAqB7B;;AACA,QAAM,gCAAiB;AAAEX,IAAAA,WAAF;AAAeW,IAAAA;AAAf,GAAjB,CAAN,CAtB6B,CAwB7B;;AACAD,EAAAA,gBAAgB,GAAG,8CAA+B;AAChDA,IAAAA;AADgD,GAA/B,CAAnB,CAzB6B,CA6B7B;;AACAE,eAAMC,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAG,4BADM;AAEbC,IAAAA,OAAO,EAAEL;AAFI,GAAf;;AAKA,SAAOA,gBAAP;AACD","sourcesContent":["import _ from \"lodash\"\n\nimport { store } from \"../../redux\"\nimport * as nodeAPIs from \"../../utils/api-node-docs\"\nimport * as browserAPIs from \"../../utils/api-browser-docs\"\nimport ssrAPIs from \"../../../cache-dir/api-ssr-docs\"\nimport { loadPlugins as loadPluginsInternal } from \"./load\"\nimport {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n  ExportType,\n  ICurrentAPIs,\n} from \"./validate\"\nimport { IPluginInfo, IFlattenedPlugin, ISiteConfig } from \"./types\"\n\nconst getAPI = (\n  api: { [exportType in ExportType]: { [api: string]: boolean } }\n): ICurrentAPIs =>\n  _.keys(api).reduce<Partial<ICurrentAPIs>>((merged, key) => {\n    merged[key] = _.keys(api[key])\n    return merged\n  }, {}) as ICurrentAPIs\n\n// Create a \"flattened\" array of plugins with all subplugins\n// brought to the top-level. This simplifies running gatsby-* files\n// for subplugins.\nconst flattenPlugins = (plugins: IPluginInfo[]): IPluginInfo[] => {\n  const flattened: IPluginInfo[] = []\n  const extractPlugins = (plugin: IPluginInfo): void => {\n    if (plugin.pluginOptions && plugin.pluginOptions.plugins) {\n      plugin.pluginOptions.plugins.forEach(subPlugin => {\n        flattened.push(subPlugin)\n        extractPlugins(subPlugin)\n      })\n    }\n  }\n\n  plugins.forEach(plugin => {\n    flattened.push(plugin)\n    extractPlugins(plugin)\n  })\n\n  return flattened\n}\n\nexport async function loadPlugins(\n  config: ISiteConfig = {},\n  rootDir: string | null = null\n): Promise<IFlattenedPlugin[]> {\n  const currentAPIs = getAPI({\n    browser: browserAPIs,\n    node: nodeAPIs,\n    ssr: ssrAPIs,\n  })\n\n  // Collate internal plugins, site config plugins, site default plugins\n  const pluginInfos = loadPluginsInternal(config, rootDir)\n\n  // Create a flattened array of the plugins\n  const pluginArray = flattenPlugins(pluginInfos)\n\n  // Work out which plugins use which APIs, including those which are not\n  // valid Gatsby APIs, aka 'badExports'\n  const x = collatePluginAPIs({ currentAPIs, flattenedPlugins: pluginArray })\n\n  // From this point on, these are fully-resolved plugins.\n  let flattenedPlugins = x.flattenedPlugins\n  const badExports = x.badExports\n\n  // Show errors for any non-Gatsby APIs exported from plugins\n  await handleBadExports({ currentAPIs, badExports })\n\n  // Show errors when ReplaceRenderer has been implemented multiple times\n  flattenedPlugins = handleMultipleReplaceRenderers({\n    flattenedPlugins,\n  })\n\n  // If we get this far, everything looks good. Update the store\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins,\n  })\n\n  return flattenedPlugins\n}\n"],"file":"index.js"}