{"version":3,"sources":["../../../src/bootstrap/load-plugins/validate.ts"],"names":["getGatsbyUpgradeVersion","entries","reduce","version","entry","api","semver","gt","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","_","difference","map","e","exportName","pluginName","name","pluginVersion","getErrorContext","exportType","currentAPIs","latestAPIs","ex","gatsbyUpgradeVersion","errors","fixes","forEach","similarities","stringSimilarity","findBestMatch","isDefaultPlugin","message","push","bestMatch","rating","target","sourceMessage","length","filter","Boolean","join","handleBadExports","hasBadExports","Object","keys","find","toPairs","badItem","context","reporter","error","id","collatePluginAPIs","flattenedPlugins","node","browser","ssr","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolve","mode","pluginBrowserExports","pluginSSRExports","intersection","handleMultipleReplaceRenderers","rendererPlugins","includes","warn","console","log","process","env","NODE_ENV","exit","ignorable","slice","messages","fp","i","skipSSR","m","warnOnIncompatiblePeerDependency","packageJSON","gatsbyPeerDependency","get","satisfies","gatsbyVersion","includePrerelease"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport * as semver from \"semver\"\nimport * as stringSimilarity from \"string-similarity\"\nimport { version as gatsbyVersion } from \"gatsby/package.json\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { resolveModuleExports } from \"../resolve-module-exports\"\nimport { getLatestAPIs } from \"../../utils/get-latest-apis\"\nimport { IPluginInfo, IFlattenedPlugin } from \"./types\"\n\ninterface IApi {\n  version?: string\n}\n\nexport interface IEntry {\n  exportName: string\n  pluginName: string\n  pluginVersion: string\n  api?: IApi\n}\n\nexport type ExportType = \"node\" | \"browser\" | \"ssr\"\n\ntype IEntryMap = {\n  [exportType in ExportType]: IEntry[]\n}\n\nexport type ICurrentAPIs = {\n  [exportType in ExportType]: string[]\n}\n\nconst getGatsbyUpgradeVersion = (entries: readonly IEntry[]): string =>\n  entries.reduce((version, entry) => {\n    if (entry.api && entry.api.version) {\n      return semver.gt(entry.api.version, version || `0.0.0`)\n        ? entry.api.version\n        : version\n    }\n    return version\n  }, ``)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nfunction getBadExports(\n  plugin: IPluginInfo,\n  pluginAPIKeys: readonly string[],\n  apis: readonly string[]\n): IEntry[] {\n  let badExports: IEntry[] = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nfunction getErrorContext(\n  badExports: IEntry[],\n  exportType: ExportType,\n  currentAPIs: ICurrentAPIs,\n  latestAPIs: { [exportType in ExportType]: { [exportName: string]: IApi } }\n): {\n  errors: string[]\n  entries: IEntry[]\n  exportType: ExportType\n  fixes: string[]\n  sourceMessage: string\n} {\n  const entries = badExports.map(ex => {\n    return {\n      ...ex,\n      api: latestAPIs[exportType][ex.exportName],\n    }\n  })\n\n  const gatsbyUpgradeVersion = getGatsbyUpgradeVersion(entries)\n  const errors: string[] = []\n  const fixes = gatsbyUpgradeVersion\n    ? [`npm install gatsby@^${gatsbyUpgradeVersion}`]\n    : []\n\n  entries.forEach(entry => {\n    const similarities = stringSimilarity.findBestMatch(\n      entry.exportName,\n      currentAPIs[exportType]\n    )\n    const isDefaultPlugin = entry.pluginName == `default-site-plugin`\n\n    const message = entry.api\n      ? entry.api.version\n        ? `was introduced in gatsby@${entry.api.version}`\n        : `is not available in your version of Gatsby`\n      : `is not a known API`\n\n    if (isDefaultPlugin) {\n      errors.push(\n        `- Your local gatsby-${exportType}.js is using the API \"${entry.exportName}\" which ${message}.`\n      )\n    } else {\n      errors.push(\n        `- The plugin ${entry.pluginName}@${entry.pluginVersion} is using the API \"${entry.exportName}\" which ${message}.`\n      )\n    }\n\n    if (similarities.bestMatch.rating > 0.5) {\n      fixes.push(\n        `Rename \"${entry.exportName}\" -> \"${similarities.bestMatch.target}\"`\n      )\n    }\n  })\n\n  return {\n    errors,\n    entries,\n    exportType,\n    fixes,\n    // note: this is a fallback if gatsby-cli is not updated with structured error\n    sourceMessage: [\n      `Your plugins must export known APIs from their gatsby-node.js.`,\n    ]\n      .concat(errors)\n      .concat(\n        fixes.length > 0\n          ? [`\\n`, `Some of the following may help fix the error(s):`, ...fixes]\n          : []\n      )\n      .filter(Boolean)\n      .join(`\\n`),\n  }\n}\n\nexport async function handleBadExports({\n  currentAPIs,\n  badExports,\n}: {\n  currentAPIs: ICurrentAPIs\n  badExports: { [api in ExportType]: IEntry[] }\n}): Promise<void> {\n  const hasBadExports = Object.keys(badExports).find(\n    api => badExports[api].length > 0\n  )\n  if (hasBadExports) {\n    const latestAPIs = await getLatestAPIs()\n    // Output error messages for all bad exports\n    _.toPairs(badExports).forEach(badItem => {\n      const [exportType, entries] = badItem\n      if (entries.length > 0) {\n        const context = getErrorContext(\n          entries,\n          exportType as keyof typeof badExports,\n          currentAPIs,\n          latestAPIs\n        )\n        reporter.error({\n          id: `11329`,\n          context,\n        })\n      }\n    })\n  }\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nexport function collatePluginAPIs({\n  currentAPIs,\n  flattenedPlugins,\n}: {\n  currentAPIs: ICurrentAPIs\n  flattenedPlugins: (IPluginInfo & Partial<IFlattenedPlugin>)[]\n}): { flattenedPlugins: IFlattenedPlugin[]; badExports: IEntryMap } {\n  // Get a list of bad exports\n  const badExports: IEntryMap = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-node`,\n      {\n        mode: `require`,\n      }\n    )\n    const pluginBrowserExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`\n    )\n    const pluginSSRExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, currentAPIs.node)\n      badExports.node = badExports.node.concat(\n        getBadExports(plugin, pluginNodeExports, currentAPIs.node)\n      ) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(\n        pluginBrowserExports,\n        currentAPIs.browser\n      )\n      badExports.browser = badExports.browser.concat(\n        getBadExports(plugin, pluginBrowserExports, currentAPIs.browser)\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, currentAPIs.ssr)\n      badExports.ssr = badExports.ssr.concat(\n        getBadExports(plugin, pluginSSRExports, currentAPIs.ssr)\n      ) // Collate any bad exports\n    }\n  })\n\n  return {\n    flattenedPlugins: flattenedPlugins as IFlattenedPlugin[],\n    badExports,\n  }\n}\n\nexport const handleMultipleReplaceRenderers = ({\n  flattenedPlugins,\n}: {\n  flattenedPlugins: IFlattenedPlugin[]\n}): IFlattenedPlugin[] => {\n  // multiple replaceRenderers may cause problems at build time\n  const rendererPlugins = flattenedPlugins\n    .filter(plugin => plugin.ssrAPIs.includes(`replaceRenderer`))\n    .map(plugin => plugin.name)\n  if (rendererPlugins.length > 1) {\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages: string[] = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${fp.name}`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nexport function warnOnIncompatiblePeerDependency(\n  name: string,\n  packageJSON: object\n): void {\n  // Note: In the future the peer dependency should be enforced for all plugins.\n  const gatsbyPeerDependency = _.get(packageJSON, `peerDependencies.gatsby`)\n  if (\n    gatsbyPeerDependency &&\n    !semver.satisfies(gatsbyVersion, gatsbyPeerDependency, {\n      includePrerelease: true,\n    })\n  ) {\n    reporter.warn(\n      `Plugin ${name} is not compatible with your gatsby version ${gatsbyVersion} - It requires gatsby@${gatsbyPeerDependency}`\n    )\n  }\n}\n"],"file":"validate.js"}