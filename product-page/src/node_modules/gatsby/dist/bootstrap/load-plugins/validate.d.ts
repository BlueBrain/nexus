import { IPluginInfo, IFlattenedPlugin } from "./types";
interface IApi {
    version?: string;
}
export interface IEntry {
    exportName: string;
    pluginName: string;
    pluginVersion: string;
    api?: IApi;
}
export declare type ExportType = "node" | "browser" | "ssr";
declare type IEntryMap = {
    [exportType in ExportType]: IEntry[];
};
export declare type ICurrentAPIs = {
    [exportType in ExportType]: string[];
};
export declare function handleBadExports({ currentAPIs, badExports, }: {
    currentAPIs: ICurrentAPIs;
    badExports: {
        [api in ExportType]: IEntry[];
    };
}): Promise<void>;
/**
 * Identify which APIs each plugin exports
 */
export declare function collatePluginAPIs({ currentAPIs, flattenedPlugins, }: {
    currentAPIs: ICurrentAPIs;
    flattenedPlugins: (IPluginInfo & Partial<IFlattenedPlugin>)[];
}): {
    flattenedPlugins: IFlattenedPlugin[];
    badExports: IEntryMap;
};
export declare const handleMultipleReplaceRenderers: ({ flattenedPlugins, }: {
    flattenedPlugins: IFlattenedPlugin[];
}) => IFlattenedPlugin[];
export declare function warnOnIncompatiblePeerDependency(name: string, packageJSON: object): void;
export {};
