{"version":3,"sources":["../../src/commands/repl.ts"],"names":["module","exports","program","schema","config","babelrc","pages","components","staticQueryComponents","store","getState","nodes","query","result","console","log","JSON","stringify","_","repl","start","prompt","context","getNode","getNodes","getNodesByType","loadNodeContent","entries","graphql","siteConfig","staticQueries","on","process","exit"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGAA,MAAM,CAACC,OAAP,GAAiB,MAAOC,OAAP,IAA4C;AAC3D,iCAAU,YAAV,EAD2D,CAE3D;;AACA,QAAM,0BAAU;AAAEA,IAAAA;AAAF,GAAV,CAAN,CAH2D,CAK3D;;AACA,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFC,aAAMC,QAAN,EAPJ;;AASA,QAAMC,KAAK,GAAG,sBAAd;;AAEA,QAAMC,KAAK,GAAG,MAAOA,KAAP,IAAwC;AACpD,UAAMC,MAAM,GAAG,MAAM,sBAAQV,MAAR,EAAgBS,KAAhB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,CAArB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAuB,EAApD;AACD,GAHD,CAjB2D,CAsB3D;;;AACA,QAAMK,CAAC,GAAGC,cAAKC,KAAL,CAAW;AACnBC,IAAAA,MAAM,EAAG;AADU,GAAX,CAAV,CAvB2D,CA2B3D;;;AACAH,EAAAA,CAAC,CAACI,OAAF,CAAUjB,OAAV,GAAoBA,OAApB;AACAa,EAAAA,CAAC,CAACI,OAAF,CAAUf,UAAV,GAAuBA,UAAvB;AACAW,EAAAA,CAAC,CAACI,OAAF,CAAUC,OAAV,GAAoBA,cAApB;AACAL,EAAAA,CAAC,CAACI,OAAF,CAAUE,QAAV,GAAqBA,eAArB;AACAN,EAAAA,CAAC,CAACI,OAAF,CAAUG,cAAV,GAA2BA,qBAA3B;AACAP,EAAAA,CAAC,CAACI,OAAF,CAAUI,eAAV,GAA4BA,uBAA5B;AACAR,EAAAA,CAAC,CAACI,OAAF,CAAUX,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACgB,OAAN,EAAJ,CAAlB;AACAT,EAAAA,CAAC,CAACI,OAAF,CAAUhB,KAAV,GAAkB,CAAC,GAAGA,KAAK,CAACqB,OAAN,EAAJ,CAAlB;AACAT,EAAAA,CAAC,CAACI,OAAF,CAAUM,OAAV,GAAoBhB,KAApB;AACAM,EAAAA,CAAC,CAACI,OAAF,CAAUnB,MAAV,GAAmBA,MAAnB;AACAe,EAAAA,CAAC,CAACI,OAAF,CAAUO,UAAV,GAAuBzB,MAAvB;AACAc,EAAAA,CAAC,CAACI,OAAF,CAAUQ,aAAV,GAA0BtB,qBAA1B;;AAEAU,EAAAA,CAAC,CAACa,EAAF,CAAM,MAAN,EAAa,MAAM;AACjB,mCAAU,WAAV;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD,GAHD;AAID,CA7CD","sourcesContent":["import repl from \"repl\"\nimport { graphql } from \"graphql\"\nimport { bootstrap } from \"../bootstrap\"\nimport { trackCli } from \"gatsby-telemetry\"\nimport { getNodes, getNode, getNodesByType } from \"../redux/nodes\"\nimport { loadNodeContent } from \"../db/nodes\"\nimport { store } from \"../redux\"\nimport { IProgram } from \"./types\"\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  trackCli(`REPL_START`)\n  // run bootstrap\n  await bootstrap({ program })\n\n  // get all the goodies from the store\n  const {\n    schema,\n    config,\n    babelrc,\n    pages,\n    components,\n    staticQueryComponents,\n  } = store.getState()\n\n  const nodes = getNodes()\n\n  const query = async (query: string): Promise<void> => {\n    const result = await graphql(schema, query, {}, {}, {})\n    console.log(`query result: ${JSON.stringify(result)}`)\n  }\n\n  // init new repl\n  const _ = repl.start({\n    prompt: `gatsby > `,\n  })\n\n  // set some globals to make life easier\n  _.context.babelrc = babelrc\n  _.context.components = components\n  _.context.getNode = getNode\n  _.context.getNodes = getNodes\n  _.context.getNodesByType = getNodesByType\n  _.context.loadNodeContent = loadNodeContent\n  _.context.nodes = [...nodes.entries()]\n  _.context.pages = [...pages.entries()]\n  _.context.graphql = query\n  _.context.schema = schema\n  _.context.siteConfig = config\n  _.context.staticQueries = staticQueryComponents\n\n  _.on(`exit`, () => {\n    trackCli(`REPL_STOP`)\n    process.exit(0)\n  })\n}\n"],"file":"repl.js"}