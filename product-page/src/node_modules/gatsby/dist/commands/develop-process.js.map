{"version":3,"sources":["../../src/commands/develop-process.ts"],"names":["tracer","setTimeout","process","send","setInterval","type","telemetry","trackCli","on","msg","action","exit","payload","openDebuggerPort","debugInfo","break","inspector","open","port","undefined","module","exports","program","reporter","setVerbose","verbose","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","panic","chalk","yellow","cyan","openTracingConfigFile","pendingActivity","id","startBackgroundUpdate","parseInt","e","message","app","parentSpan","startSpan","machine","developMachine","withContext","service","start"],"mappings":"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","sourcesContent":["import { syncStaticDir } from \"../utils/get-static-dir\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport chalk from \"chalk\"\nimport telemetry from \"gatsby-telemetry\"\nimport express from \"express\"\nimport inspector from \"inspector\"\nimport { initTracer } from \"../utils/tracer\"\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport onExit from \"signal-exit\"\nimport {\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n} from \"../utils/feedback\"\nimport { markWebpackStatusAsPending } from \"../utils/webpack-status\"\n\nimport { IProgram, IDebugInfo } from \"./types\"\nimport { interpret } from \"xstate\"\nimport { globalTracer } from \"opentracing\"\nimport { developMachine } from \"../state-machines/develop\"\nimport { logTransitions } from \"../utils/state-machine-logging\"\n\nconst tracer = globalTracer()\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfere with the regular\n// bootstrap.\nsetTimeout(() => {\n  syncStaticDir()\n}, 10000)\n\n// Time for another story...\n// When the parent process is killed by SIGKILL, Node doesm't kill spawned child processes\n// Hence, we peiodically send a heart beat to the parent to check if it is still alive\n// This will crash with Error [ERR_IPC_CHANNEL_CLOSED]: Channel closed\n// and kill the orphaned child process as a result\nif (process.send) {\n  setInterval(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    process.send!({\n      type: `HEARTBEAT`,\n    })\n  }, 1000)\n}\n\nonExit(() => {\n  telemetry.trackCli(`DEVELOP_STOP`)\n})\n\nprocess.on(`message`, msg => {\n  if (msg.type === `COMMAND` && msg.action.type === `EXIT`) {\n    process.exit(msg.action.payload)\n  }\n})\n\ninterface IDevelopArgs extends IProgram {\n  debugInfo: IDebugInfo | null\n}\n\nconst openDebuggerPort = (debugInfo: IDebugInfo): void => {\n  if (debugInfo.break) {\n    inspector.open(debugInfo.port, undefined, true)\n    // eslint-disable-next-line no-debugger\n    debugger\n  } else {\n    inspector.open(debugInfo.port)\n  }\n}\n\nmodule.exports = async (program: IDevelopArgs): Promise<void> => {\n  reporter.setVerbose(program.verbose)\n\n  if (program.debugInfo) {\n    openDebuggerPort(program.debugInfo)\n  }\n\n  // We want to prompt the feedback request when users quit develop\n  // assuming they pass the heuristic check to know they are a user\n  // we want to request feedback from, and we're not annoying them.\n  process.on(\n    `SIGINT`,\n    async (): Promise<void> => {\n      if (await userPassesFeedbackRequestHeuristic()) {\n        showFeedbackRequest()\n      }\n      process.exit(0)\n    }\n  )\n\n  if (process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES) {\n    reporter.panic(\n      `The flag ${chalk.yellow(\n        `GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES`\n      )} is not available with ${chalk.cyan(\n        `gatsby develop`\n      )}, please retry using ${chalk.cyan(`gatsby build`)}`\n    )\n  }\n  initTracer(program.openTracingConfigFile)\n  markWebpackStatusAsPending()\n  reporter.pendingActivity({ id: `webpack-develop` })\n  telemetry.trackCli(`DEVELOP_START`)\n  telemetry.startBackgroundUpdate()\n\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  try {\n    program.port = await detectPortInUseAndPrompt(port)\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      process.exit(0)\n    }\n\n    throw e\n  }\n\n  const app = express()\n  const parentSpan = tracer.startSpan(`bootstrap`)\n\n  const machine = developMachine.withContext({\n    program,\n    parentSpan,\n    app,\n  })\n\n  const service = interpret(machine)\n\n  if (program.verbose) {\n    logTransitions(service)\n  }\n\n  service.start()\n}\n"],"file":"develop-process.js"}