{"version":3,"sources":["../../src/commands/develop.ts"],"names":["requireUncached","file","require","cache","resolve","e","doesConfigChangeRequireRestart","lastConfig","newConfig","replacer","_","v","RegExp","toString","oldConfigString","JSON","stringify","siteMetadata","newConfigString","getDebugPort","port","getDebugInfo","program","hasOwnProperty","inspect","break","inspectBrk","ControllableScript","constructor","script","debugInfo","start","tmpFileName","tmp","tmpNameSync","tmpdir","path","join","process","cwd","fs","outputFileSync","isRunning","args","push","env","stdio","stop","signal","code","Error","kill","send","type","action","payload","Promise","on","removeAllListeners","undefined","onMessage","callback","onExit","msg","isRestarting","REGEX_IP","module","exports","parseInt","developProcessPath","message","exit","proxyPort","statusServerPort","developPort","all","https","reporter","panic","sslHost","host","test","ssl","name","caFile","certFile","keyFile","directory","proxy","targetPort","developProcess","unlocks","statusUnlock","developUnlock","sitePackageJson","sitePath","pid","lastRun","Date","now","then","unlock","data","console","error","concat","statusServer","http","createServer","listen","io","handleChildProcessIPC","serveSite","emit","socket","serveRestartingScreen","rootFile","files","watcher","chokidar","watch","filePath","basename","warn","dirtyFile","close","map","server"],"mappings":"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","sourcesContent":["// NOTE(@mxstbr): Do not use the reporter in this file, as that has side-effects on import which break structured logging\nimport path from \"path\"\nimport http from \"http\"\nimport tmp from \"tmp\"\nimport { spawn, ChildProcess } from \"child_process\"\nimport chokidar from \"chokidar\"\nimport getRandomPort from \"detect-port\"\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport socket from \"socket.io\"\nimport fs from \"fs-extra\"\nimport { isCI, slash } from \"gatsby-core-utils\"\nimport {\n  createServiceLock,\n  getService,\n} from \"gatsby-core-utils/dist/service-lock\"\nimport { UnlockFn } from \"gatsby-core-utils/src/service-lock\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { getSslCert } from \"../utils/get-ssl-cert\"\nimport { startDevelopProxy } from \"../utils/develop-proxy\"\nimport { IProgram, IDebugInfo } from \"./types\"\n\n// Adapted from https://stackoverflow.com/a/16060619\nconst requireUncached = (file: string): any => {\n  try {\n    delete require.cache[require.resolve(file)]\n  } catch (e) {\n    return null\n  }\n\n  try {\n    return require(file)\n  } catch (e) {\n    return null\n  }\n}\n\n// Heuristics for gatsby-config.js, as not all changes to it require a full restart to take effect\nconst doesConfigChangeRequireRestart = (\n  lastConfig: Record<string, any>,\n  newConfig: Record<string, any>\n): boolean => {\n  // Ignore changes to siteMetadata\n  const replacer = (_, v): string | void => {\n    if (typeof v === `function` || v instanceof RegExp) {\n      return v.toString()\n    } else {\n      return v\n    }\n  }\n\n  const oldConfigString = JSON.stringify(\n    { ...lastConfig, siteMetadata: null },\n    replacer\n  )\n  const newConfigString = JSON.stringify(\n    { ...newConfig, siteMetadata: null },\n    replacer\n  )\n\n  if (oldConfigString === newConfigString) return false\n\n  return true\n}\n\n// Return a user-supplied port otherwise the default Node.js debugging port\nconst getDebugPort = (port?: number): number => port ?? 9229\n\nexport const getDebugInfo = (program: IProgram): IDebugInfo | null => {\n  if (program.hasOwnProperty(`inspect`)) {\n    return {\n      port: getDebugPort(program.inspect),\n      break: false,\n    }\n  } else if (program.hasOwnProperty(`inspectBrk`)) {\n    return {\n      port: getDebugPort(program.inspectBrk),\n      break: true,\n    }\n  } else {\n    return null\n  }\n}\n\nclass ControllableScript {\n  private process?: ChildProcess\n  private script\n  private debugInfo: IDebugInfo | null\n  public isRunning\n  constructor(script, debugInfo: IDebugInfo | null) {\n    this.script = script\n    this.debugInfo = debugInfo\n  }\n  start(): void {\n    const tmpFileName = tmp.tmpNameSync({\n      tmpdir: path.join(process.cwd(), `.cache`),\n    })\n    fs.outputFileSync(tmpFileName, this.script)\n    this.isRunning = true\n    const args = [tmpFileName]\n    // Passing --inspect isn't necessary for the child process to launch a port but it allows some editors to automatically attach\n    if (this.debugInfo) {\n      args.push(\n        this.debugInfo.break\n          ? `--inspect-brk=${this.debugInfo.port}`\n          : `--inspect=${this.debugInfo.port}`\n      )\n    }\n\n    this.process = spawn(`node`, args, {\n      env: process.env,\n      stdio: [`inherit`, `inherit`, `inherit`, `ipc`],\n    })\n  }\n  async stop(\n    signal: NodeJS.Signals | null = null,\n    code?: number\n  ): Promise<void> {\n    if (!this.process) {\n      throw new Error(`Trying to stop the process before starting it`)\n    }\n    this.isRunning = false\n    if (signal) {\n      this.process.kill(signal)\n    } else {\n      this.process.send({\n        type: `COMMAND`,\n        action: {\n          type: `EXIT`,\n          payload: code,\n        },\n      })\n    }\n\n    return new Promise(resolve => {\n      if (!this.process) {\n        throw new Error(`Trying to stop the process before starting it`)\n      }\n      this.process.on(`exit`, () => {\n        if (this.process) {\n          this.process.removeAllListeners()\n        }\n        this.process = undefined\n        resolve()\n      })\n    })\n  }\n  onMessage(callback: (msg: any) => void): void {\n    if (!this.process) {\n      throw new Error(`Trying to attach message handler before process started`)\n    }\n    this.process.on(`message`, callback)\n  }\n  onExit(\n    callback: (code: number | null, signal: NodeJS.Signals | null) => void\n  ): void {\n    if (!this.process) {\n      throw new Error(`Trying to attach exit handler before process started`)\n    }\n    this.process.on(`exit`, callback)\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  send(msg: any): void {\n    if (!this.process) {\n      throw new Error(`Trying to send a message before process started`)\n    }\n\n    this.process.send(msg)\n  }\n}\n\nlet isRestarting\n\n// checks if a string is a valid ip\nconst REGEX_IP = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$/\n\nmodule.exports = async (program: IProgram): Promise<void> => {\n  // In some cases, port can actually be a string. But our codebase is expecting it to be a number.\n  // So we want to early just force it to a number to ensure we always act on a correct type.\n  program.port = parseInt(program.port + ``, 10)\n  const developProcessPath = slash(require.resolve(`./develop-process`))\n\n  try {\n    program.port = await detectPortInUseAndPrompt(program.port)\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      process.exit(0)\n    }\n\n    throw e\n  }\n\n  // Run the actual develop server on a random port, and the proxy on the program port\n  // which users will access\n  const proxyPort = program.port\n  const debugInfo = getDebugInfo(program)\n  const [statusServerPort, developPort] = await Promise.all([\n    getRandomPort(),\n    getRandomPort(),\n  ])\n\n  // In order to enable custom ssl, --cert-file --key-file and -https flags must all be\n  // used together\n  if ((program[`cert-file`] || program[`key-file`]) && !program.https) {\n    reporter.panic(\n      `for custom ssl --https, --cert-file, and --key-file must be used together`\n    )\n  }\n\n  // Check if https is enabled, then create or get SSL cert.\n  // Certs are named 'devcert' and issued to the host.\n  // NOTE(@mxstbr): We mutate program.ssl _after_ passing it\n  // to the develop process controllable script above because\n  // that would mean we double SSL browser => proxy => server\n  if (program.https) {\n    const sslHost =\n      program.host === `0.0.0.0` || program.host === `::`\n        ? `localhost`\n        : program.host\n\n    if (REGEX_IP.test(sslHost)) {\n      reporter.panic(\n        `You're trying to generate a ssl certificate for an IP (${sslHost}). Please use a hostname instead.`\n      )\n    }\n\n    const ssl = await getSslCert({\n      name: sslHost,\n      caFile: program[`ca-file`],\n      certFile: program[`cert-file`],\n      keyFile: program[`key-file`],\n      directory: program.directory,\n    })\n\n    if (ssl) {\n      program.ssl = ssl\n    }\n  }\n\n  // NOTE(@mxstbr): We need to start the develop proxy before the develop process to ensure\n  // codesandbox detects the right port to expose by default\n  const proxy = startDevelopProxy({\n    proxyPort: proxyPort,\n    targetPort: developPort,\n    program,\n  })\n\n  const developProcess = new ControllableScript(\n    `\n    const cmd = require(${JSON.stringify(developProcessPath)});\n    const args = ${JSON.stringify({\n      ...program,\n      port: developPort,\n      proxyPort,\n      // Don't pass SSL options down to the develop process, it should always use HTTP\n      ssl: null,\n      debugInfo,\n    })};\n    cmd(args);\n  `,\n    debugInfo\n  )\n\n  let unlocks: Array<UnlockFn> = []\n  if (!isCI()) {\n    const statusUnlock = await createServiceLock(\n      program.directory,\n      `developstatusserver`,\n      {\n        port: statusServerPort,\n      }\n    )\n    const developUnlock = await createServiceLock(\n      program.directory,\n      `developproxy`,\n      {\n        port: proxyPort,\n      }\n    )\n    // We don't need to keep a lock on this, as it's just site metadata\n    await createServiceLock(program.directory, `metadata`, {\n      name: program.sitePackageJson.name,\n      sitePath: program.directory,\n      pid: process.pid,\n      lastRun: Date.now(),\n    }).then(unlock => unlock?.())\n\n    if (!statusUnlock || !developUnlock) {\n      const data = await getService(program.directory, `developproxy`)\n      const port = data?.port || 8000\n      console.error(\n        `Looks like develop for this site is already running. Try visiting http://localhost:${port}/ maybe?`\n      )\n      process.exit(1)\n    }\n\n    unlocks = unlocks.concat([statusUnlock, developUnlock])\n  }\n\n  const statusServer = http.createServer().listen(statusServerPort)\n  const io = socket(statusServer)\n\n  const handleChildProcessIPC = (msg): void => {\n    if (msg.type === `HEARTBEAT`) return\n    if (process.send) {\n      // Forward IPC\n      process.send(msg)\n    }\n\n    if (\n      msg.type === `LOG_ACTION` &&\n      msg.action.type === `SET_STATUS` &&\n      msg.action.payload === `SUCCESS`\n    ) {\n      proxy.serveSite()\n      io.emit(`develop:started`)\n    }\n  }\n\n  io.on(`connection`, socket => {\n    socket.on(`develop:restart`, async () => {\n      isRestarting = true\n      proxy.serveRestartingScreen()\n      io.emit(`develop:is-starting`)\n      await developProcess.stop()\n      developProcess.start()\n      developProcess.onMessage(handleChildProcessIPC)\n      isRestarting = false\n    })\n  })\n\n  developProcess.start()\n  developProcess.onMessage(handleChildProcessIPC)\n\n  // Plugins can call `process.exit` which would be sent to `develop-process` (child process)\n  // This needs to be propagated back to the parent process\n  developProcess.onExit(\n    (code: number | null, signal: NodeJS.Signals | null) => {\n      if (isRestarting) return\n      if (signal !== null) {\n        process.kill(process.pid, signal)\n        return\n      }\n      if (code !== null) {\n        process.exit(code)\n      }\n\n      // This should not happen:\n      // https://nodejs.org/api/child_process.html#child_process_event_exit\n      // The 'exit' event is emitted after the child process ends. If the process\n      // exited, code is the final exit code of the process, otherwise null.\n      // If the process terminated due to receipt of a signal, signal is the\n      // string name of the signal, otherwise null. One of the two will always be\n      // non - null.\n      //\n      // but just in case let do non-zero exit, because we are in situation\n      // we don't expect to be possible\n      process.exit(1)\n    }\n  )\n\n  const rootFile = (file: string): string => path.join(program.directory, file)\n\n  const files = [rootFile(`gatsby-config.js`), rootFile(`gatsby-node.js`)]\n  let lastConfig = requireUncached(rootFile(`gatsby-config.js`))\n\n  let watcher\n\n  if (!isCI()) {\n    chokidar.watch(files).on(`change`, filePath => {\n      const file = path.basename(filePath)\n\n      if (file === `gatsby-config.js`) {\n        const newConfig = requireUncached(rootFile(`gatsby-config.js`))\n\n        if (!doesConfigChangeRequireRestart(lastConfig, newConfig)) {\n          lastConfig = newConfig\n          return\n        }\n\n        lastConfig = newConfig\n      }\n\n      console.warn(\n        `develop process needs to be restarted to apply the changes to ${file}`\n      )\n      io.emit(`develop:needs-restart`, {\n        dirtyFile: file,\n      })\n    })\n  }\n\n  // route ipc messaging to the original develop process\n  process.on(`message`, msg => {\n    developProcess.send(msg)\n  })\n\n  process.on(`beforeExit`, async () => {\n    await Promise.all([\n      watcher?.close(),\n      ...unlocks.map(unlock => unlock()),\n      new Promise(resolve => {\n        statusServer.close(resolve)\n      }),\n      new Promise(resolve => {\n        proxy.server.close(resolve)\n      }),\n    ])\n  })\n\n  process.on(`SIGINT`, async () => {\n    await developProcess.stop(`SIGINT`)\n    process.exit()\n  })\n\n  process.on(`SIGTERM`, async () => {\n    await developProcess.stop(`SIGTERM`)\n    process.exit()\n  })\n}\n"],"file":"develop.js"}