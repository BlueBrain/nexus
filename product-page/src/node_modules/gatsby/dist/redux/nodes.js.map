{"version":3,"sources":["../../src/redux/nodes.ts"],"names":["getNodes","nodes","store","getState","Array","from","values","getNode","id","get","getNodesByType","type","nodesByType","getTypes","keys","hasNodeChanged","digest","node","internal","contentDigest","getNodeAndSavePathDependency","path","console","error","undefined","nodeId","saveResolvedNodes","nodeTypeNames","resolver","typeName","resolvedNodes","Map","resolved","set","dispatch","payload","key","getResolvedNode","resolvedNodesCache","__gatsby_resolved","postIndexingMetaSetup","filterCache","op","bucket","byValue","sort","a","b","counter","postIndexingMetaSetupNeNin","includes","postIndexingMetaSetupLtLteGtGte","arr","meta","nodesUnordered","forEach","v","push","entriesNullable","entries","filter","orderedNodes","orderedValues","offsets","length","valuesAsc","nodesByValueAsc","valueRangesAsc","valuesDesc","nodesByValueDesc","valueRangesDesc","ensureIndexByQuery","filterCacheKey","filterPath","filtersCache","state","addNodeToFilterCache","ensureEmptyFilterCache","orderedByCounter","chain","valueOffset","i","nextProp","isArray","markNodeForValue","value","ensureIndexByElemMatch","addNodeToBucketWithElemMatch","valueAtCurrentStep","nestedQuery","elem","binarySearchAsc","needle","min","max","pivot","Math","floor","binarySearchDesc","getNodesFromCacheByValue","filterValue","wasElemMatch","arrNull","arrUndef","unionNodesByCounter","Error","filterValueArr","A","B","expensiveDedupeInline","Set","removeBucketFromSet","RegExp","regex","test","String","ranges","range","slice","point","pivotMin","pivotMax","pivotValue","exclPivot","inclPivot","until","reverse","cache","delete","intersectNodesByCounter","pointerA","pointerB","result","maxA","maxB","lastAdded","nodeA","nodeB","counterA","counterB","prev","j"],"mappings":"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","sourcesContent":["import { store } from \"./\"\nimport { IGatsbyNode } from \"./types\"\nimport { createPageDependency } from \"./actions/add-page-dependency\"\nimport { IDbQueryElemMatch } from \"../db/common/query\"\n\n// Only list supported ops here. \"CacheableFilterOp\"\nexport type FilterOp =  // TODO: merge with DbComparator ?\n  | \"$eq\"\n  | \"$ne\"\n  | \"$lt\"\n  | \"$lte\"\n  | \"$gt\"\n  | \"$gte\"\n  | \"$in\"\n  | \"$nin\"\n  | \"$regex\" // Note: this includes $glob\n// Note: `undefined` is an encoding for a property that does not exist\nexport type FilterValueNullable =  // TODO: merge with DbComparatorValue\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | RegExp // Only valid for $regex\n  | Array<string | number | boolean | null | undefined>\n// This is filter value in most cases\ntype FilterValue =\n  | string\n  | number\n  | boolean\n  | RegExp // Only valid for $regex\n  | Array<string | number | boolean>\nexport type FilterCacheKey = string\nexport interface IFilterCache {\n  op: FilterOp\n  // In this map `undefined` values represent nodes that did not have the path\n  // The individual arrays are ordered asc by internal.counter which will\n  // preserve insertion order and guarantee uniqueness and it's a number so our\n  // .sort() calls can subtract one from the other which is nice :)\n  // This arrays may contain duplicates (!) because those only get filtered in the\n  // last step.\n  // TODO: We might decide to make sure these buckets _are_ deduped for eq perf\n  byValue: Map<FilterValueNullable, Array<IGatsbyNode>>\n  meta: {\n    // Used by ne/nin, which will create a Set from this array and then remove another set(s) and sort\n    nodesUnordered?: Array<IGatsbyNode>\n    // Flat list of all nodes by requested types, ordered by counter (cached for empty filters)\n    orderedByCounter?: Array<IGatsbyNode>\n    // Ordered list of all values (by `<`) found by this filter. No null / undefs\n    valuesAsc?: Array<FilterValue>\n    // Flat list of nodes, ordered by valueAsc\n    nodesByValueAsc?: Array<IGatsbyNode>\n    // Ranges of nodes per value, maps to the nodesByValueAsc array\n    valueRangesAsc?: Map<FilterValue, [number, number]>\n    // Ordered list of all values (by `>`) found by this filter. No null / undefs\n    valuesDesc?: Array<FilterValue>\n    // Flat list of nodes, ordered by valueDesc\n    nodesByValueDesc?: Array<IGatsbyNode>\n    // Ranges of nodes per value, maps to the nodesByValueDesc array\n    valueRangesDesc?: Map<FilterValue, [number, number]>\n  }\n}\nexport type FiltersCache = Map<FilterCacheKey, IFilterCache>\n\n/**\n * Get all nodes from redux store.\n */\nexport const getNodes = (): IGatsbyNode[] => {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\n/**\n * Get node by id from store.\n */\nexport const getNode = (id: string): IGatsbyNode | undefined =>\n  store.getState().nodes.get(id)\n\n/**\n * Get all nodes of type from redux store.\n */\nexport const getNodesByType = (type: string): IGatsbyNode[] => {\n  const nodes = store.getState().nodesByType.get(type)\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\n/**\n * Get all type names from redux store.\n */\nexport const getTypes = (): string[] =>\n  Array.from(store.getState().nodesByType.keys())\n\n/**\n * Determine if node has changed.\n */\nexport const hasNodeChanged = (id: string, digest: string): boolean => {\n  const node = store.getState().nodes.get(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get node and save path dependency.\n */\nexport const getNodeAndSavePathDependency = (\n  id: string,\n  path: string\n): IGatsbyNode | undefined => {\n  const node = getNode(id)\n\n  if (!node) {\n    console.error(\n      `getNodeAndSavePathDependency failed for node id: ${id} as it was not found in cache`\n    )\n    return undefined\n  }\n\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n\ntype Resolver = (node: IGatsbyNode) => Promise<any> // TODO\n\nexport const saveResolvedNodes = async (\n  nodeTypeNames: string[],\n  resolver: Resolver\n): Promise<void> => {\n  for (const typeName of nodeTypeNames) {\n    const nodes = store.getState().nodesByType.get(typeName)\n    if (!nodes) return\n\n    const resolvedNodes = new Map()\n    for (const node of nodes.values()) {\n      const resolved = await resolver(node)\n      resolvedNodes.set(node.id, resolved)\n    }\n    store.dispatch({\n      type: `SET_RESOLVED_NODES`,\n      payload: {\n        key: typeName,\n        nodes: resolvedNodes,\n      },\n    })\n  }\n}\n\n/**\n * Get node and save path dependency.\n */\nexport const getResolvedNode = (\n  typeName: string,\n  id: string\n): IGatsbyNode | null => {\n  const { nodesByType, resolvedNodesCache } = store.getState()\n  const nodes = nodesByType.get(typeName)\n\n  if (!nodes) {\n    return null\n  }\n\n  const node = nodes.get(id)\n\n  if (!node) {\n    return null\n  }\n\n  const resolvedNodes = resolvedNodesCache.get(typeName)\n\n  if (resolvedNodes) {\n    node.__gatsby_resolved = resolvedNodes.get(id)\n  }\n\n  return node\n}\n\nexport function postIndexingMetaSetup(\n  filterCache: IFilterCache,\n  op: FilterOp\n): void {\n  // Loop through byValue and make sure the buckets are sorted by counter\n  // Since we don't do insertion sort, we have to do it afterwards\n  for (const bucket of filterCache.byValue) {\n    bucket[1].sort((a, b) => a.internal.counter - b.internal.counter)\n  }\n\n  if (op === `$ne` || op === `$nin`) {\n    postIndexingMetaSetupNeNin(filterCache)\n  } else if ([`$lt`, `$lte`, `$gt`, `$gte`].includes(op)) {\n    postIndexingMetaSetupLtLteGtGte(filterCache, op)\n  }\n}\n\nfunction postIndexingMetaSetupNeNin(filterCache: IFilterCache): void {\n  // Note: edge cases regarding `null` and `undefined`. Here `undefined` signals\n  // that the property did not exist as the filters do not support actual\n  // `undefined` values.\n  // For $ne, `null` only returns nodes that actually have the property\n  // and in that case the property cannot be `null` either. For any other value,\n  // $ne will return all nodes where the value is not actually the needle,\n  // including nodes where the value is null.\n  // A $nin does the same as an $ne except it filters multiple values instead\n  // of just one.\n\n  // For `$ne` we will take the list of all targeted nodes and eliminate the\n  // bucket of nodes with a particular value, if it exists at all..\n\n  const arr: Array<IGatsbyNode> = []\n  filterCache.meta.nodesUnordered = arr\n  filterCache.byValue.forEach(v => {\n    v.forEach(node => {\n      arr.push(node)\n    })\n  })\n}\n\nfunction postIndexingMetaSetupLtLteGtGte(\n  filterCache: IFilterCache,\n  op: FilterOp\n): void {\n  // Create an ordered array of individual nodes, ordered (grouped) by the\n  // value to which the filter resolves. Nodes per value are ordered by\n  // internal.counter, asc.\n  // This way non-eq ops can simply slice the array to get a range.\n\n  const entriesNullable: Array<[FilterValueNullable, Array<IGatsbyNode>]> = [\n    ...filterCache.byValue.entries(),\n  ]\n\n  // These range checks never return `null` or `undefined` so filter those out\n  // By filtering them out early, the sort should be faster. Could be ...\n  const entries: Array<[\n    FilterValue,\n    Array<IGatsbyNode>\n  ]> = entriesNullable.filter(([v]) => v != null) as Array<\n    [FilterValue, Array<IGatsbyNode>]\n  >\n\n  // Sort all arrays by its value, asc. Ignore/allow potential type casting.\n  // Note: while `<` is the inverse of `>=`, the ordering might coerce values.\n  // This coercion makes the op no longer idempotent (normally the result of\n  // `a < b` is the opposite of `b >= a` for any a or b of the same type). The\n  // exception is a number that is `NaN`, which we're ignoring here as it's most\n  // likely a bug in the user code. However, when coercing the ops may end up\n  // comparing against `NaN`, too. For example: `(\"abc\" <= 12) !== (12 > \"abc\")`\n  // which ends up doing `NaN <= 12` and `NaN > \"abc\"`, which will both yield\n  // false.\n  // So instead we potentially track two ordered lists; ascending and descending\n  // and the only difference when comparing the inverse of one to the other\n  // should be how these `NaN` cases end up getting ordered.\n  // It's fine for `lt` and `lte` to use the same ordered list. Same for gt/gte.\n  if (op === `$lt` || op === `$lte`) {\n    // Order ascending; first value is lowest\n    entries.sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0))\n  } else if (op === `$gt` || op === `$gte`) {\n    // Order descending; first value is highest\n    entries.sort(([a], [b]) => (a > b ? -1 : a < b ? 1 : 0))\n  }\n\n  const orderedNodes: Array<IGatsbyNode> = []\n  const orderedValues: Array<FilterValue> = []\n  const offsets: Map<FilterValue, [number, number]> = new Map()\n  entries.forEach(([v, bucket]: [FilterValue, Array<IGatsbyNode>]) => {\n    // Record the range containing all nodes with as filter value v\n    // The last value of the range should be the offset of the next value\n    // (So you should be able to do `nodes.slice(start, stop)` to get them)\n    offsets.set(v, [orderedNodes.length, orderedNodes.length + bucket.length])\n    // We could do `arr.push(...bucket)` here but that's not safe with very\n    // large sets, so we use a regular loop\n    bucket.forEach(node => orderedNodes.push(node))\n    orderedValues.push(v)\n  })\n\n  if (op === `$lt` || op === `$lte`) {\n    filterCache.meta.valuesAsc = orderedValues\n    filterCache.meta.nodesByValueAsc = orderedNodes\n    // The nodesByValueAsc is ordered by value, but multiple nodes per value are\n    // not ordered. To make lt as fast as lte, we must know the start and stop\n    // index for each value. Similarly useful for for `ne`.\n    filterCache.meta.valueRangesAsc = offsets\n  } else if (op === `$gt` || op === `$gte`) {\n    filterCache.meta.valuesDesc = orderedValues\n    filterCache.meta.nodesByValueDesc = orderedNodes\n    // The nodesByValueDesc is ordered by value, but multiple nodes per value are\n    // not ordered. To make gt as fast as gte, we must know the start and stop\n    // index for each value. Similarly useful for for `ne`.\n    filterCache.meta.valueRangesDesc = offsets\n  }\n}\n\n/**\n * Given a single non-elemMatch filter path, a list of node types, and a\n * cache, create a cache that for each resulting value of the filter contains\n * all the Nodes in a list.\n * This cache is used for applying the filter and is a massive improvement over\n * looping over all the nodes, when the number of pages (/nodes) scales up.\n */\nexport const ensureIndexByQuery = (\n  op: FilterOp,\n  filterCacheKey: FilterCacheKey,\n  filterPath: string[],\n  nodeTypeNames: string[],\n  filtersCache: FiltersCache\n): void => {\n  const state = store.getState()\n  const resolvedNodesCache = state.resolvedNodesCache\n\n  const filterCache: IFilterCache = {\n    op,\n    byValue: new Map<FilterValueNullable, Array<IGatsbyNode>>(),\n    meta: {},\n  } as IFilterCache\n  filtersCache.set(filterCacheKey, filterCache)\n\n  // We cache the subsets of nodes by type, but only one type. So if searching\n  // through one node type we can prevent a search through all nodes, otherwise\n  // it's probably faster to loop through all nodes. Perhaps. Maybe.\n\n  if (nodeTypeNames.length === 1) {\n    getNodesByType(nodeTypeNames[0]).forEach(node => {\n      addNodeToFilterCache(node, filterPath, filterCache, resolvedNodesCache)\n    })\n  } else {\n    // Here we must first filter for the node type\n    // This loop is expensive at scale (!)\n    state.nodes.forEach(node => {\n      if (!nodeTypeNames.includes(node.internal.type)) {\n        return\n      }\n\n      addNodeToFilterCache(node, filterPath, filterCache, resolvedNodesCache)\n    })\n  }\n\n  postIndexingMetaSetup(filterCache, op)\n}\n\nexport function ensureEmptyFilterCache(\n  filterCacheKey,\n  nodeTypeNames: string[],\n  filtersCache: FiltersCache\n): void {\n  // This is called for queries without any filters\n  // We want to cache the result since it's basically a list of nodes by type(s)\n  // There are sites that have multiple queries which are empty\n\n  const state = store.getState()\n  const resolvedNodesCache = state.resolvedNodesCache\n  const orderedByCounter: Array<IGatsbyNode> = []\n\n  filtersCache.set(filterCacheKey, {\n    op: `$eq`, // Ignore.\n    byValue: new Map<FilterValueNullable, Array<IGatsbyNode>>(),\n    meta: {\n      orderedByCounter, // This is what we want\n    },\n  })\n\n  if (nodeTypeNames.length === 1) {\n    getNodesByType(nodeTypeNames[0]).forEach(node => {\n      if (!node.__gatsby_resolved) {\n        const typeName = node.internal.type\n        const resolvedNodes = resolvedNodesCache.get(typeName)\n        const resolved = resolvedNodes?.get(node.id)\n        if (resolved !== undefined) {\n          node.__gatsby_resolved = resolved\n        }\n      }\n      orderedByCounter.push(node)\n    })\n  } else {\n    // Here we must first filter for the node type\n    // This loop is expensive at scale (!)\n    state.nodes.forEach(node => {\n      if (nodeTypeNames.includes(node.internal.type)) {\n        if (!node.__gatsby_resolved) {\n          const typeName = node.internal.type\n          const resolvedNodes = resolvedNodesCache.get(typeName)\n          const resolved = resolvedNodes?.get(node.id)\n          if (resolved !== undefined) {\n            node.__gatsby_resolved = resolved\n          }\n        }\n        orderedByCounter.push(node)\n      }\n    })\n  }\n\n  // Since each node can only have one type, we shouldn't have to be concerned\n  // about duplicates in this array. Just make sure they're sorted.\n  orderedByCounter.sort((a, b) => a.internal.counter - b.internal.counter)\n}\n\nfunction addNodeToFilterCache(\n  node: IGatsbyNode,\n  chain: Array<string>,\n  filterCache: IFilterCache,\n  resolvedNodesCache,\n  valueOffset: any = node\n): void {\n  // There can be a filter that targets `__gatsby_resolved` so fix that first\n  if (!node.__gatsby_resolved) {\n    const typeName = node.internal.type\n    const resolvedNodes = resolvedNodesCache.get(typeName)\n    node.__gatsby_resolved = resolvedNodes?.get(node.id)\n  }\n\n  // - for plain query, valueOffset === node\n  // - for elemMatch, valueOffset is sub-tree of the node to continue matching\n  let v = valueOffset as any\n  let i = 0\n  while (i < chain.length && v) {\n    const nextProp = chain[i++]\n    v = v[nextProp]\n  }\n\n  if (\n    (typeof v !== `string` &&\n      typeof v !== `number` &&\n      typeof v !== `boolean` &&\n      v !== null) ||\n    i !== chain.length\n  ) {\n    if (i === chain.length && Array.isArray(v)) {\n      // The op resolved to an array\n      // Add an entry for each element of the array. This would work for ops\n      // like eq and ne, but not sure about range ops like lt,lte,gt,gte.\n\n      v.forEach(v => markNodeForValue(filterCache, node, v))\n\n      return\n    }\n\n    // This means that either\n    // - The filter resolved to `undefined`, or\n    // - The filter resolved to something other than a primitive\n    // Set the value to `undefined` to mark \"path does not (fully) exist\"\n    v = undefined\n  }\n\n  markNodeForValue(filterCache, node, v)\n}\n\nfunction markNodeForValue(\n  filterCache: IFilterCache,\n  node: IGatsbyNode,\n  value: FilterValueNullable\n): void {\n  let arr = filterCache.byValue.get(value)\n  if (!arr) {\n    arr = []\n    filterCache.byValue.set(value, arr)\n  }\n  arr.push(node)\n}\n\nexport const ensureIndexByElemMatch = (\n  op: FilterOp,\n  filterCacheKey: FilterCacheKey,\n  filter: IDbQueryElemMatch,\n  nodeTypeNames: Array<string>,\n  filtersCache: FiltersCache\n): void => {\n  // Given an elemMatch filter, generate the cache that contains all nodes that\n  // matches a given value for that sub-query\n\n  const state = store.getState()\n  const { resolvedNodesCache } = state\n\n  const filterCache: IFilterCache = {\n    op,\n    byValue: new Map<FilterValueNullable, Array<IGatsbyNode>>(),\n    meta: {},\n  } as IFilterCache\n  filtersCache.set(filterCacheKey, filterCache)\n\n  if (nodeTypeNames.length === 1) {\n    getNodesByType(nodeTypeNames[0]).forEach(node => {\n      addNodeToBucketWithElemMatch(\n        node,\n        node,\n        filter,\n        filterCache,\n        resolvedNodesCache\n      )\n    })\n  } else {\n    // Expensive at scale\n    state.nodes.forEach(node => {\n      if (!nodeTypeNames.includes(node.internal.type)) {\n        return\n      }\n\n      addNodeToBucketWithElemMatch(\n        node,\n        node,\n        filter,\n        filterCache,\n        resolvedNodesCache\n      )\n    })\n  }\n\n  postIndexingMetaSetup(filterCache, op)\n}\n\nfunction addNodeToBucketWithElemMatch(\n  node: IGatsbyNode,\n  valueAtCurrentStep: any, // Arbitrary step on the path inside the node\n  filter: IDbQueryElemMatch,\n  filterCache: IFilterCache,\n  resolvedNodesCache\n): void {\n  // There can be a filter that targets `__gatsby_resolved` so fix that first\n  if (!node.__gatsby_resolved) {\n    const typeName = node.internal.type\n    const resolvedNodes = resolvedNodesCache.get(typeName)\n    node.__gatsby_resolved = resolvedNodes?.get(node.id)\n  }\n\n  const { path, nestedQuery } = filter\n\n  // Find the value to apply elemMatch to\n  let i = 0\n  while (i < path.length && valueAtCurrentStep) {\n    const nextProp = path[i++]\n    valueAtCurrentStep = valueAtCurrentStep[nextProp]\n  }\n\n  if (path.length !== i) {\n    // Found undefined before the end of the path\n    return\n  }\n\n  // `v` should now be an elemMatch target, probably an array (but maybe not)\n  if (!Array.isArray(valueAtCurrentStep)) {\n    // It's possible to `elemMatch` on a non-array so let's support that too\n    valueAtCurrentStep = [valueAtCurrentStep]\n  }\n\n  // Note: We need to check all elements because the node may need to be added\n  // to multiple buckets (`{a:[{b:3},{b:4}]}`, for `a.elemMatch.b/eq` that\n  // node ends up in buckets for value 3 and 4. This may lead to duplicate\n  // work when elements resolve to the same value, but that can't be helped.\n  valueAtCurrentStep.forEach(elem => {\n    if (nestedQuery.type === `elemMatch`) {\n      addNodeToBucketWithElemMatch(\n        node,\n        elem,\n        nestedQuery,\n        filterCache,\n        resolvedNodesCache\n      )\n    } else {\n      // Now take same route as non-elemMatch filters would take\n      addNodeToFilterCache(\n        node,\n        nestedQuery.path,\n        filterCache,\n        resolvedNodesCache,\n        elem\n      )\n    }\n  })\n}\n\nconst binarySearchAsc = (\n  values: Array<FilterValue>, // Assume ordered asc\n  needle: FilterValue\n): [number, number] | undefined => {\n  let min = 0\n  let max = values.length - 1\n  let pivot = Math.floor(values.length / 2)\n  while (min <= max) {\n    const value = values[pivot]\n    if (needle < value) {\n      // Move pivot to middle of nodes left of current pivot\n      // assert pivot < max\n      max = pivot\n    } else if (needle > value) {\n      // Move pivot to middle of nodes right of current pivot\n      // assert pivot > min\n      min = pivot\n    } else {\n      // This means needle === value\n      // TODO: except for NaN ... and potentially certain type casting cases\n      return [pivot, pivot]\n    }\n\n    if (max - min <= 1) {\n      // End of search. Needle not found (as expected). Use pivot as index.\n      // If the needle was not found, max-min==1 and max is returned.\n      return [min, max]\n    }\n\n    pivot = min + Math.floor((max - min) / 2)\n  }\n\n  // Shouldn't be reachable\n  return undefined\n}\nconst binarySearchDesc = (\n  values: Array<FilterValue>, // Assume ordered desc\n  needle: FilterValue\n): [number, number] | undefined => {\n  let min = 0\n  let max = values.length - 1\n  let pivot = Math.floor(values.length / 2)\n  while (min <= max) {\n    const value = values[pivot]\n    if (needle < value) {\n      // Move pivot to middle of nodes right of current pivot\n      // assert pivot < min\n      min = pivot\n    } else if (needle > value) {\n      // Move pivot to middle of nodes left of current pivot\n      // assert pivot > max\n      max = pivot\n    } else {\n      // This means needle === value\n      // TODO: except for NaN ... and potentially certain type casting cases\n      return [pivot, pivot]\n    }\n\n    if (max - min <= 1) {\n      // End of search. Needle not found (as expected). Use pivot as index.\n      // If the needle was not found, max-min==1 and max is returned.\n      return [min, max]\n    }\n\n    pivot = min + Math.floor((max - min) / 2)\n  }\n\n  // Shouldn't be reachable\n  return undefined\n}\n\n/**\n * Given the cache key for a filter and a target value return the list of nodes\n * that resolve to this value. The returned array should be ordered by id.\n * This returns `undefined` if there is no such node\n *\n * Basically if the filter was {a: {b: {slug: {eq: \"foo/bar\"}}}} then it will\n * return all the nodes that have `node.slug === \"foo/bar\"`. That usually (but\n * not always) at most one node for slug, but this filter can apply to anything.\n *\n * Arrays returned by this function must be ordered by internal.counter and\n * not contain duplicate nodes (!)\n */\nexport const getNodesFromCacheByValue = (\n  filterCacheKey: FilterCacheKey,\n  filterValue: FilterValueNullable,\n  filtersCache: FiltersCache,\n  wasElemMatch\n): Array<IGatsbyNode> | undefined => {\n  const filterCache = filtersCache.get(filterCacheKey)\n  if (!filterCache) {\n    return undefined\n  }\n\n  const op = filterCache.op\n\n  if (op === `$eq`) {\n    // Arrays in byValue are assumed to be ordered by counter\n\n    if (filterValue == null) {\n      // Edge case for null; fetch all nodes for `null` and `undefined` because\n      // `$eq` also returns nodes without the path when searching for `null`.\n      // Not all ops do so, so we map non-existing paths to `undefined`.\n\n      const arrNull = filterCache.byValue.get(null) ?? []\n      const arrUndef = filterCache.byValue.get(undefined) ?? []\n\n      // Merge the two (ordered) arrays and return an ordered deduped array\n      // TODO: is there a reason left why we cant just cache this merged list?\n      return unionNodesByCounter(arrNull, arrUndef)\n    }\n\n    return filterCache.byValue.get(filterValue)\n  }\n\n  if (op === `$in`) {\n    if (!Array.isArray(filterValue)) {\n      throw new Error(\"The argument to the `in` comparator should be an array\")\n    }\n    const filterValueArr: Array<FilterValueNullable> = filterValue\n\n    const arr: Array<IGatsbyNode> = []\n\n    // TODO: we can also mergeSort for every step. this may perform worse because of how memory in js works.\n    // For every value in the needle array, find the bucket of nodes for\n    // that value, add this bucket of nodes to one list, return the list.\n    filterValueArr.forEach((v: FilterValueNullable) =>\n      filterCache.byValue.get(v)?.forEach(v => arr.push(v))\n    )\n\n    arr.sort((A, B) => A.internal.counter - B.internal.counter)\n\n    // Note: it's very unlikely that the list of filter values is big so .includes should be fine here\n    if (filterValueArr.includes(null)) {\n      // Like all other ops, `in: [null]` behaves weirdly, allowing all nodes\n      // that do not actually have a (complete) path (v=undefined)\n      const nodes = filterCache.byValue.get(undefined)\n      if (nodes) {\n        // This will also dedupe so don't do that immediately\n        return unionNodesByCounter(nodes, arr)\n      }\n    }\n\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe first\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n\n    return arr\n  }\n\n  if (op === `$nin`) {\n    // This is essentially the same as the $ne operator, just with multiple\n    // values to exclude.\n\n    if (!Array.isArray(filterValue)) {\n      throw new Error(`The $nin operator expects an array as value`)\n    }\n\n    const values: Set<FilterValueNullable> = new Set(filterValue)\n    const set = new Set(filterCache.meta.nodesUnordered)\n\n    // Do the action for \"$ne\" for each element in the set of values\n    values.forEach(filterValue => {\n      removeBucketFromSet(filterValue, filterCache, set)\n    })\n\n    // TODO: there's probably a more efficient algorithm to do set\n    //       subtraction in such a way that we dont have to re-sort\n    return [...set].sort((A, B) => A.internal.counter - B.internal.counter)\n  }\n\n  if (op === `$ne`) {\n    const set = new Set(filterCache.meta.nodesUnordered)\n\n    removeBucketFromSet(filterValue, filterCache, set)\n\n    // TODO: there's probably a more efficient algorithm to do set\n    //       subtraction in such a way that we dont have to resort here\n    return [...set].sort((A, B) => A.internal.counter - B.internal.counter)\n  }\n\n  if (op === `$regex`) {\n    // Note: $glob is converted to $regex so $glob filters go through here, too\n    // Aside from the input pattern format, further behavior is exactly the same.\n\n    // The input to the filter must be a string (including leading/trailing slash and regex flags)\n    // By the time the filter reaches this point, the filterValue has to be a regex.\n\n    if (!(filterValue instanceof RegExp)) {\n      throw new Error(\n        `The value for the $regex comparator must be an instance of RegExp`\n      )\n    }\n    const regex = filterValue\n\n    const arr: Array<IGatsbyNode> = []\n    filterCache.byValue.forEach((nodes, value) => {\n      // TODO: does the value have to be a string for $regex? Can we auto-ignore any non-strings? Or does it coerce.\n      // Note: for legacy reasons partial paths should also be included for regex\n      if (value !== undefined && regex.test(String(value))) {\n        nodes.forEach(node => arr.push(node))\n      }\n    })\n\n    // TODO: we _can_ cache this list as well. Might make sense if it turns out that $regex is mostly used with literals\n    // TODO: it may make sense to first collect all buckets and then to .concat them, or merge sort them\n\n    arr.sort((A, B) => A.internal.counter - B.internal.counter)\n\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n\n    return arr\n  }\n\n  if (filterValue == null) {\n    if (op === `$lt` || op === `$gt`) {\n      // Nothing is lt/gt null\n      return undefined\n    }\n\n    // This is an edge case and this value should be directly indexed\n    // For `lte`/`gte` this should only return nodes for `null`, not a \"range\"\n    return filterCache.byValue.get(filterValue)\n  }\n\n  if (Array.isArray(filterValue)) {\n    throw new Error(\n      \"Array is an invalid filter value for the `\" + op + \"` comparator\"\n    )\n  }\n\n  if (filterValue instanceof RegExp) {\n    // This is most likely an internal error, although it is possible for\n    // users to talk to this API more directly.\n    throw new Error(\n      `A RegExp instance is only valid for $regex and $glob comparators`\n    )\n  }\n\n  if (op === `$lt`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesAsc\n    const nodes = filterCache.meta.nodesByValueAsc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[0])\n      arr.sort((A, B) => A.internal.counter - B.internal.counter)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for lte, the valueAsc array must be list at this point\n    const values = filterCache.meta.valuesAsc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchAsc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do lte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue > filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 <= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue < filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until)\n    arr.sort((A, B) => A.internal.counter - B.internal.counter)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  if (op === `$lte`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesAsc\n    const nodes = filterCache.meta.nodesByValueAsc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[1])\n      arr.sort((A, B) => A.internal.counter - B.internal.counter)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for lte, the valueAsc array must be list at this point\n    const values = filterCache.meta.valuesAsc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchAsc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do lte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue > filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 <= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue <= filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until)\n    arr.sort((A, B) => A.internal.counter - B.internal.counter)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  if (op === `$gt`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesDesc\n    const nodes = filterCache.meta.nodesByValueDesc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[0]).reverse()\n      arr.sort((A, B) => A.internal.counter - B.internal.counter)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for gte, the valueDesc array must be list at this point\n    const values = filterCache.meta.valuesDesc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchDesc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do gte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue < filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 >= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue > filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until).reverse()\n    arr.sort((A, B) => A.internal.counter - B.internal.counter)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  if (op === `$gte`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesDesc\n    const nodes = filterCache.meta.nodesByValueDesc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[1]).reverse()\n      arr.sort((A, B) => A.internal.counter - B.internal.counter)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for gte, the valueDesc array must be list at this point\n    const values = filterCache.meta.valuesDesc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchDesc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do gte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue < filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 >= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue >= filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until).reverse()\n    arr.sort((A, B) => A.internal.counter - B.internal.counter)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  // Unreachable because we checked all values of FilterOp (which op is)\n  return undefined\n}\n\nfunction removeBucketFromSet(\n  filterValue: FilterValueNullable,\n  filterCache: IFilterCache,\n  set: Set<IGatsbyNode>\n): void {\n  if (filterValue === null) {\n    // Edge case: $ne with `null` returns only the nodes that contain the full\n    // path and that don't resolve to null, so drop `undefined` as well.\n    let cache = filterCache.byValue.get(undefined)\n    if (cache) cache.forEach(node => set.delete(node))\n    cache = filterCache.byValue.get(null)\n    if (cache) cache.forEach(node => set.delete(node))\n  } else {\n    // Not excluding null so it should include undefined leafs or leafs where\n    // only the partial path exists for whatever reason.\n    const cache = filterCache.byValue.get(filterValue)\n    if (cache) cache.forEach(node => set.delete(node))\n  }\n}\n\n/**\n * Finds the intersection of two arrays in O(n) with n = min(a.length, b.length)\n * The returned set should not contain duplicate nodes.\n *\n * The input should be ordered by node.internal.counter and it will return a\n * list that is also ordered by node.internal.counter\n */\nexport function intersectNodesByCounter(\n  a: Array<IGatsbyNode>,\n  b: Array<IGatsbyNode>\n): Array<IGatsbyNode> {\n  let pointerA = 0\n  let pointerB = 0\n  // TODO: perf check: is it helpful to init the array to min(maxA,maxB) items?\n  const result: Array<IGatsbyNode> = []\n  const maxA = a.length\n  const maxB = b.length\n  let lastAdded: IGatsbyNode | undefined = undefined // Used to dedupe the list\n\n  while (pointerA < maxA && pointerB < maxB) {\n    const nodeA = a[pointerA]\n    const nodeB = b[pointerB]\n    const counterA = nodeA.internal.counter\n    const counterB = nodeB.internal.counter\n\n    if (counterA < counterB) {\n      pointerA++\n    } else if (counterA > counterB) {\n      pointerB++\n    } else {\n      // nodeA===nodeB. Make sure we didn't just add this node already.\n      // Since input arrays are sorted, the same node should be grouped\n      // back to back, so even if both input arrays contained the same node\n      // twice, this check would prevent the result from getting duplicate nodes\n      if (lastAdded !== nodeA) {\n        result.push(nodeA)\n        lastAdded = nodeA\n      }\n      pointerA++\n      pointerB++\n    }\n  }\n\n  return result\n}\n\n/**\n * Merge two lists of nodes.\n * The returned set should not contain duplicate nodes.\n *\n * The input should be ordered by node.internal.counter and it will return a\n * list that is also ordered by node.internal.counter\n */\nexport function unionNodesByCounter(\n  a: Array<IGatsbyNode>,\n  b: Array<IGatsbyNode>\n): Array<IGatsbyNode> {\n  // TODO: perf check: is it helpful to init the array to max(maxA,maxB) items?\n  const arr: Array<IGatsbyNode> = []\n  let lastAdded: IGatsbyNode | undefined = undefined // Used to dedupe the list\n\n  let pointerA = 0\n  let pointerB = 0\n  const maxA = a.length\n  const maxB = b.length\n\n  while (pointerA < maxA && pointerB < maxB) {\n    const nodeA = a[pointerA]\n    const nodeB = b[pointerB]\n    const counterA = nodeA.internal.counter\n    const counterB = nodeB.internal.counter\n\n    if (counterA < counterB) {\n      if (lastAdded !== nodeA) {\n        arr.push(nodeA)\n        lastAdded = nodeA\n      }\n      pointerA++\n    } else if (counterA > counterB) {\n      if (lastAdded !== nodeB) {\n        arr.push(nodeB)\n        lastAdded = nodeB\n      }\n      pointerB++\n    } else {\n      if (lastAdded !== nodeA) {\n        arr.push(nodeA)\n        lastAdded = nodeA\n      }\n      pointerA++\n      pointerB++\n    }\n  }\n\n  while (pointerA < maxA) {\n    const nodeA = a[pointerA]\n    if (lastAdded !== nodeA) {\n      arr.push(nodeA)\n      lastAdded = nodeA\n    }\n    pointerA++\n  }\n\n  while (pointerB < maxB) {\n    const nodeB = b[pointerB]\n    if (lastAdded !== nodeB) {\n      arr.push(nodeB)\n      lastAdded = nodeB\n    }\n    pointerB++\n  }\n\n  return arr\n}\n\nfunction expensiveDedupeInline(arr: Array<IGatsbyNode>): void {\n  // An elemMatch filter may cause duplicates to appear in a bucket.\n  // Since the bucket is sorted those should now be back to back\n  // Worst case this is a fast O(n) loop that does nothing.\n  let prev: IGatsbyNode | undefined = undefined\n\n  // We copy-on-find because a splice is expensive and we can't use Sets\n\n  let j = 0\n  for (let i = 0; i < arr.length; ++i) {\n    const node = arr[i]\n    if (node !== prev) {\n      // Only start copying the remainder of the list once a dupe is found\n      if (i !== j) {\n        arr[j] = node\n      }\n      ++j\n      prev = node\n    }\n  }\n  arr.length = j\n}\n"],"file":"nodes.js"}