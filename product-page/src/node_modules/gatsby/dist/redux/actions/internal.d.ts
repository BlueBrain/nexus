import { IGatsbyPlugin, ProgramStatus, ICreatePageDependencyAction, IDeleteComponentDependenciesAction, IReplaceComponentQueryAction, IReplaceStaticQueryAction, IQueryExtractedAction, IQueryExtractionGraphQLErrorAction, IQueryExtractedBabelSuccessAction, IQueryExtractionBabelErrorAction, ISetProgramStatusAction, IPageQueryRunAction, IRemoveStaleJobAction, ISetSiteConfig } from "../types";
/**
 * Create a dependency between a page and data. Probably for
 * internal use only.
 * @private
 */
export declare const createPageDependency: ({ path, nodeId, connection, }: {
    path: string;
    nodeId?: string | undefined;
    connection?: string | undefined;
}, plugin?: string) => ICreatePageDependencyAction;
/**
 * Delete dependencies between an array of pages and data. Probably for
 * internal use only. Used when deleting pages.
 * @private
 */
export declare const deleteComponentsDependencies: (paths: string[]) => IDeleteComponentDependenciesAction;
/**
 * When the query watcher extracts a GraphQL query, it calls
 * this to store the query with its component.
 * @private
 */
export declare const replaceComponentQuery: ({ query, componentPath, }: {
    query: string;
    componentPath: string;
}) => IReplaceComponentQueryAction;
/**
 * When the query watcher extracts a "static" GraphQL query from <StaticQuery>
 * components, it calls this to store the query with its component.
 * @private
 */
export declare const replaceStaticQuery: (args: any, plugin?: IGatsbyPlugin | null | undefined) => IReplaceStaticQueryAction;
/**
 *
 * Report that a query has been extracted from a component. Used by
 * query-compiler.js.
 * @private
 */
export declare const queryExtracted: ({ componentPath, query }: {
    componentPath: string;
    query: string;
}, plugin: IGatsbyPlugin, traceId?: string | undefined) => IQueryExtractedAction;
/**
 *
 * Report that the Relay Compiler found a graphql error when attempting to extract a query
 * @private
 */
export declare const queryExtractionGraphQLError: ({ componentPath, error }: {
    componentPath: string;
    error: string;
}, plugin: IGatsbyPlugin, traceId?: string | undefined) => IQueryExtractionGraphQLErrorAction;
/**
 *
 * Report that babel was able to extract the graphql query.
 * Indicates that the file is free of JS errors.
 * @private
 */
export declare const queryExtractedBabelSuccess: ({ componentPath }: {
    componentPath: any;
}, plugin: IGatsbyPlugin, traceId?: string | undefined) => IQueryExtractedBabelSuccessAction;
/**
 *
 * Report that the Relay Compiler found a babel error when attempting to extract a query
 * @private
 */
export declare const queryExtractionBabelError: ({ componentPath, error }: {
    componentPath: string;
    error: Error;
}, plugin: IGatsbyPlugin, traceId?: string | undefined) => IQueryExtractionBabelErrorAction;
/**
 * Set overall program status e.g. `BOOTSTRAPING` or `BOOTSTRAP_FINISHED`.
 * @private
 */
export declare const setProgramStatus: (status: ProgramStatus, plugin: IGatsbyPlugin, traceId?: string | undefined) => ISetProgramStatusAction;
/**
 * Broadcast that a page's query was run.
 * @private
 */
export declare const pageQueryRun: ({ path, componentPath, isPage }: {
    path: any;
    componentPath: any;
    isPage: any;
}, plugin: IGatsbyPlugin, traceId?: string | undefined) => IPageQueryRunAction;
/**
 * Remove jobs which are marked as stale (inputPath doesn't exists)
 * @private
 */
export declare const removeStaleJob: (contentDigest: string, plugin?: IGatsbyPlugin | undefined, traceId?: string | undefined) => IRemoveStaleJobAction;
/**
 * Set gatsby config
 * @private
 */
export declare const setSiteConfig: (config?: unknown) => ISetSiteConfig;
