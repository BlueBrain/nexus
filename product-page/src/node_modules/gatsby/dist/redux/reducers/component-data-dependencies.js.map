{"version":3,"sources":["../../../src/redux/reducers/component-data-dependencies.ts"],"names":["componentDataDependenciesReducer","state","nodes","Map","connections","action","type","payload","path","nodeId","existingPaths","Set","has","get","add","set","connection","forEach","val","paths","delete"],"mappings":";;;;;AAEO,MAAMA,gCAAgC,GAAG,CAC9CC,KAAgD,GAAG;AACjDC,EAAAA,KAAK,EAAE,IAAIC,GAAJ,EAD0C;AAEjDC,EAAAA,WAAW,EAAE,IAAID,GAAJ;AAFoC,CADL,EAK9CE,MAL8C,KAMA;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,cAAN;AACE,aAAO;AAAEJ,QAAAA,KAAK,EAAE,IAAIC,GAAJ,EAAT;AAAoBC,QAAAA,WAAW,EAAE,IAAID,GAAJ;AAAjC,OAAP;;AACF,SAAM,6BAAN;AACE,UAAIE,MAAM,CAACE,OAAP,CAAeC,IAAf,KAAyB,EAA7B,EAAgC;AAC9B,eAAOP,KAAP;AACD,OAHH,CAKE;;;AACA,UAAII,MAAM,CAACE,OAAP,CAAeE,MAAnB,EAA2B;AACzB,YAAIC,aAA0B,GAAG,IAAIC,GAAJ,EAAjC;;AACA,YAAIV,KAAK,CAACC,KAAN,CAAYU,GAAZ,CAAgBP,MAAM,CAACE,OAAP,CAAeE,MAA/B,CAAJ,EAA4C;AAC1CC,UAAAA,aAAa,GAAGT,KAAK,CAACC,KAAN,CAAYW,GAAZ,CAAgBR,MAAM,CAACE,OAAP,CAAeE,MAA/B,CAAhB;AACD;;AACD,YAAI,CAACC,aAAa,CAACE,GAAd,CAAkBP,MAAM,CAACE,OAAP,CAAeC,IAAjC,CAAL,EAA6C;AAC3CE,UAAAA,aAAa,CAACI,GAAd,CAAkBT,MAAM,CAACE,OAAP,CAAeC,IAAjC;AACD;;AACDP,QAAAA,KAAK,CAACC,KAAN,CAAYa,GAAZ,CAAgBV,MAAM,CAACE,OAAP,CAAeE,MAA/B,EAAuCC,aAAvC;AACD,OAfH,CAiBE;;;AACA,UAAIL,MAAM,CAACE,OAAP,CAAeS,UAAnB,EAA+B;AAC7B,YAAIN,aAA0B,GAAG,IAAIC,GAAJ,EAAjC;;AACA,YAAIV,KAAK,CAACG,WAAN,CAAkBQ,GAAlB,CAAsBP,MAAM,CAACE,OAAP,CAAeS,UAArC,CAAJ,EAAsD;AACpDN,UAAAA,aAAa,GAAGT,KAAK,CAACG,WAAN,CAAkBS,GAAlB,CAAsBR,MAAM,CAACE,OAAP,CAAeS,UAArC,CAAhB;AACD;;AACD,YAAI,CAACN,aAAa,CAACE,GAAd,CAAkBP,MAAM,CAACE,OAAP,CAAeC,IAAjC,CAAL,EAA6C;AAC3CE,UAAAA,aAAa,CAACI,GAAd,CAAkBT,MAAM,CAACE,OAAP,CAAeC,IAAjC;AACD;;AACDP,QAAAA,KAAK,CAACG,WAAN,CAAkBW,GAAlB,CAAsBV,MAAM,CAACE,OAAP,CAAeS,UAArC,EAAiDN,aAAjD;AACD;;AAED,aAAOT,KAAP;;AACF,SAAM,gCAAN;AACEA,MAAAA,KAAK,CAACC,KAAN,CAAYe,OAAZ,CAAoBC,GAAG,IAAI;AACzB,aAAK,MAAMV,IAAX,IAAmBH,MAAM,CAACE,OAAP,CAAeY,KAAlC,EAAyC;AACvCD,UAAAA,GAAG,CAACE,MAAJ,CAAWZ,IAAX;AACD;AACF,OAJD;AAKAP,MAAAA,KAAK,CAACG,WAAN,CAAkBa,OAAlB,CAA0BC,GAAG,IAAI;AAC/B,aAAK,MAAMV,IAAX,IAAmBH,MAAM,CAACE,OAAP,CAAeY,KAAlC,EAAyC;AACvCD,UAAAA,GAAG,CAACE,MAAJ,CAAWZ,IAAX;AACD;AACF,OAJD;AAMA,aAAOP,KAAP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACE,aAAOA,KAAP;AA1DJ;AA4DD,CAnEM","sourcesContent":["import { IGatsbyState, ActionsUnion } from \"../types\"\n\nexport const componentDataDependenciesReducer = (\n  state: IGatsbyState[\"componentDataDependencies\"] = {\n    nodes: new Map(),\n    connections: new Map(),\n  },\n  action: ActionsUnion\n): IGatsbyState[\"componentDataDependencies\"] => {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return { nodes: new Map(), connections: new Map() }\n    case `CREATE_COMPONENT_DEPENDENCY`:\n      if (action.payload.path === ``) {\n        return state\n      }\n\n      // If this nodeId not set yet.\n      if (action.payload.nodeId) {\n        let existingPaths: Set<string> = new Set()\n        if (state.nodes.has(action.payload.nodeId)) {\n          existingPaths = state.nodes.get(action.payload.nodeId)!\n        }\n        if (!existingPaths.has(action.payload.path)) {\n          existingPaths.add(action.payload.path)\n        }\n        state.nodes.set(action.payload.nodeId, existingPaths)\n      }\n\n      // If this connection not set yet.\n      if (action.payload.connection) {\n        let existingPaths: Set<string> = new Set()\n        if (state.connections.has(action.payload.connection)) {\n          existingPaths = state.connections.get(action.payload.connection)!\n        }\n        if (!existingPaths.has(action.payload.path)) {\n          existingPaths.add(action.payload.path)\n        }\n        state.connections.set(action.payload.connection, existingPaths)\n      }\n\n      return state\n    case `DELETE_COMPONENTS_DEPENDENCIES`:\n      state.nodes.forEach(val => {\n        for (const path of action.payload.paths) {\n          val.delete(path)\n        }\n      })\n      state.connections.forEach(val => {\n        for (const path of action.payload.paths) {\n          val.delete(path)\n        }\n      })\n\n      return state\n    // Don't delete data dependencies as we're now deleting transformed nodes\n    // when their parent is changed. WIth the code below as stands, this\n    // would delete the connection between the page and the transformed\n    // node which will be recreated after its deleted meaning the query\n    // won't be re-run.\n    // case `DELETE_NODE`:\n    // delete state.nodes[action.payload]\n    // return state\n    // case `DELETE_NODES`:\n    // action.payload.forEach(n => delete state.nodes[n])\n    // return state\n    default:\n      return state\n  }\n}\n"],"file":"component-data-dependencies.js"}