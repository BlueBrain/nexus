{"version":3,"sources":["../../../src/redux/reducers/jobs.ts"],"names":["jobsReducer","state","active","done","action","type","payload","id","Error","index","_","findIndex","j","mergedJob","merge","createdAt","Date","now","plugin","push","completedAt","get","job","splice","runTime","diff"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIO,MAAMA,WAAW,GAAG,CACzBC,KAA2B,GAAG;AAAEC,EAAAA,MAAM,EAAE,EAAV;AAAcC,EAAAA,IAAI,EAAE;AAApB,CADL,EAEzBC,MAFyB,KAGA;AACzB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,YAAN;AACA,SAAM,SAAN;AAAgB;AACd,YAAI,CAACD,MAAM,CAACE,OAAP,CAAeC,EAApB,EAAwB;AACtB,gBAAM,IAAIC,KAAJ,CAAW,qDAAX,CAAN;AACD;;AACD,cAAMC,KAAK,GAAGC,gBAAEC,SAAF,CAAYV,KAAK,CAACC,MAAlB,EAA0BU,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASH,MAAM,CAACE,OAAP,CAAeC,EAAvD,CAAd;;AACA,YAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,gBAAMI,SAAS,GAAGH,gBAAEI,KAAF,CAAQb,KAAK,CAACC,MAAN,CAAaO,KAAb,CAAR,EAA6B,EAC7C,GAAGL,MAAM,CAACE,OADmC;AAE7CS,YAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFkC;AAG7CC,YAAAA,MAAM,EAAEd,MAAM,CAACc;AAH8B,WAA7B,CAAlB;;AAMAjB,UAAAA,KAAK,CAACC,MAAN,CAAaO,KAAb,IAAsBI,SAAtB;AACA,iBAAOZ,KAAP;AACD,SATD,MASO;AACLA,UAAAA,KAAK,CAACC,MAAN,CAAaiB,IAAb,CAAkB,EAChB,GAAGf,MAAM,CAACE,OADM;AAEhBS,YAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFK;AAGhBC,YAAAA,MAAM,EAAEd,MAAM,CAACc;AAHC,WAAlB;AAKA,iBAAOjB,KAAP;AACD;AACF;;AACD,SAAM,SAAN;AAAgB;AACd,YAAI,CAACG,MAAM,CAACE,OAAP,CAAeC,EAApB,EAAwB;AACtB,gBAAM,IAAIC,KAAJ,CAAW,0CAAX,CAAN;AACD;;AACD,cAAMY,WAAW,GAAGJ,IAAI,CAACC,GAAL,EAApB;;AACA,cAAMR,KAAK,GAAGC,gBAAEC,SAAF,CAAYV,KAAK,CAACC,MAAlB,EAA0BU,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASH,MAAM,CAACE,OAAP,CAAeC,EAAvD,CAAd;;AACA,YAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,gBAAM,IAAID,KAAJ,CAAU,wBAAQ;wBACRE,gBAAEW,GAAF,CAAMjB,MAAN,EAAe,aAAf,EAA8B,WAA9B,CAA0C;4CACtBA,MAAM,CAACE,OAAP,CAAeC,EAAG;wEAFhD,CAAN;AAID;;AACD,cAAMe,GAAG,GAAGrB,KAAK,CAACC,MAAN,CAAaqB,MAAb,CAAoBd,KAApB,EAA2B,CAA3B,EAA8B,CAA9B,CAAZ;AACAR,QAAAA,KAAK,CAACE,IAAN,CAAWgB,IAAX,CAAgB,EACd,GAAGG,GADW;AAEdF,UAAAA,WAFc;AAGdI,UAAAA,OAAO,EAAE,qBAAOJ,WAAP,EAAoBK,IAApB,CAAyB,qBAAOH,GAAG,CAACP,SAAX,CAAzB;AAHK,SAAhB;AAMA,eAAOd,KAAP;AACD;AA7CH;;AAgDA,SAAOA,KAAP;AACD,CArDM","sourcesContent":["import _ from \"lodash\"\nimport { oneLine } from \"common-tags\"\nimport moment from \"moment\"\n\nimport { IGatsbyState, ActionsUnion } from \"../types\"\n\nexport const jobsReducer = (\n  state: IGatsbyState[\"jobs\"] = { active: [], done: [] },\n  action: ActionsUnion\n): IGatsbyState[\"jobs\"] => {\n  switch (action.type) {\n    case `CREATE_JOB`:\n    case `SET_JOB`: {\n      if (!action.payload.id) {\n        throw new Error(`An ID must be provided when creating or setting job`)\n      }\n      const index = _.findIndex(state.active, j => j.id === action.payload.id)\n      if (index !== -1) {\n        const mergedJob = _.merge(state.active[index], {\n          ...action.payload,\n          createdAt: Date.now(),\n          plugin: action.plugin,\n        })\n\n        state.active[index] = mergedJob\n        return state\n      } else {\n        state.active.push({\n          ...action.payload,\n          createdAt: Date.now(),\n          plugin: action.plugin,\n        })\n        return state\n      }\n    }\n    case `END_JOB`: {\n      if (!action.payload.id) {\n        throw new Error(`An ID must be provided when ending a job`)\n      }\n      const completedAt = Date.now()\n      const index = _.findIndex(state.active, j => j.id === action.payload.id)\n      if (index === -1) {\n        throw new Error(oneLine`\n          The plugin \"${_.get(action, `plugin.name`, `anonymous`)}\"\n          tried to end a job with the id \"${action.payload.id}\"\n          that either hasn't yet been created or has already been ended`)\n      }\n      const job = state.active.splice(index, 1)[0]\n      state.done.push({\n        ...job,\n        completedAt,\n        runTime: moment(completedAt).diff(moment(job.createdAt)),\n      })\n\n      return state\n    }\n  }\n\n  return state\n}\n"],"file":"jobs.js"}