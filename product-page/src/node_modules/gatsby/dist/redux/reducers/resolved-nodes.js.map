{"version":3,"sources":["../../../src/redux/reducers/resolved-nodes.ts"],"names":["resolvedNodesCacheReducer","state","Map","action","type","key","nodes","payload","set"],"mappings":";;;;;AAEO,MAAMA,yBAAyB,GAAG,CACvCC,KAAyC,GAAG,IAAIC,GAAJ,EADL,EAEvCC,MAFuC,KAGA;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,cAAN;AACA,SAAM,aAAN;AACA,SAAM,aAAN;AACA,SAAM,cAAN;AACE,aAAO,IAAIF,GAAJ,EAAP;;AAEF,SAAM,oBAAN;AAA2B;AACzB,cAAM;AAAEG,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAiBH,MAAM,CAACI,OAA9B;AACAN,QAAAA,KAAK,CAACO,GAAN,CAAUH,GAAV,EAAeC,KAAf;AACA,eAAOL,KAAP;AACD;;AAED;AACE,aAAOA,KAAP;AAdJ;AAgBD,CApBM","sourcesContent":["import { IGatsbyState, ActionsUnion } from \"../types\"\n\nexport const resolvedNodesCacheReducer = (\n  state: IGatsbyState[\"resolvedNodesCache\"] = new Map(),\n  action: ActionsUnion\n): IGatsbyState[\"resolvedNodesCache\"] => {\n  switch (action.type) {\n    case `DELETE_CACHE`:\n    case `CREATE_NODE`:\n    case `DELETE_NODE`:\n    case `DELETE_NODES`:\n      return new Map()\n\n    case `SET_RESOLVED_NODES`: {\n      const { key, nodes } = action.payload\n      state.set(key, nodes)\n      return state\n    }\n\n    default:\n      return state\n  }\n}\n"],"file":"resolved-nodes.js"}