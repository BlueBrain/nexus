{"version":3,"sources":["../../../src/redux/reducers/redirects.ts"],"names":["redirects","Map","exists","newRedirect","fromPathRedirects","get","fromPath","some","redirect","_","isEqual","add","samePathRedirects","set","push","redirectsReducer","state","action","type","payload"],"mappings":";;;;;;;AAAA;;AAGA,MAAMA,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AAEA,SAASC,MAAT,CAAgBC,WAAhB,EAAiD;AAC/C,QAAMC,iBAAiB,GAAGJ,SAAS,CAACK,GAAV,CAAcF,WAAW,CAACG,QAA1B,CAA1B;AAEA,MAAI,CAACF,iBAAL,EAAwB,OAAO,KAAP;AAExB,SAAOA,iBAAiB,CAACG,IAAlB,CAAuBC,QAAQ,IAAIC,gBAAEC,OAAF,CAAUF,QAAV,EAAoBL,WAApB,CAAnC,CAAP;AACD;;AAED,SAASQ,GAAT,CAAaH,QAAb,EAAwC;AACtC,MAAII,iBAAiB,GAAGZ,SAAS,CAACK,GAAV,CAAcG,QAAQ,CAACF,QAAvB,CAAxB;;AAEA,MAAI,CAACM,iBAAL,EAAwB;AACtBA,IAAAA,iBAAiB,GAAG,EAApB;AACAZ,IAAAA,SAAS,CAACa,GAAV,CAAcL,QAAQ,CAACF,QAAvB,EAAiCM,iBAAjC;AACD;;AAEDA,EAAAA,iBAAiB,CAACE,IAAlB,CAAuBN,QAAvB;AACD;;AAEM,MAAMO,gBAAgB,GAAG,CAC9BC,KAAgC,GAAG,EADL,EAE9BC,MAF8B,KAGA;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,iBAAN;AAAwB;AACtB,cAAMV,QAAQ,GAAGS,MAAM,CAACE,OAAxB,CADsB,CAGtB;;AACA,YAAI,CAACjB,MAAM,CAACM,QAAD,CAAX,EAAuB;AACrBG,UAAAA,GAAG,CAACH,QAAD,CAAH;AAEAQ,UAAAA,KAAK,CAACF,IAAN,CAAWN,QAAX;AACD;;AAED,eAAOQ,KAAP;AACD;;AAED;AACE,aAAOA,KAAP;AAfJ;AAiBD,CArBM","sourcesContent":["import _ from \"lodash\"\nimport { IGatsbyState, IRedirect, ICreateRedirectAction } from \"../types\"\n\nconst redirects = new Map<string, IRedirect[]>()\n\nfunction exists(newRedirect: IRedirect): boolean {\n  const fromPathRedirects = redirects.get(newRedirect.fromPath)\n\n  if (!fromPathRedirects) return false\n\n  return fromPathRedirects.some(redirect => _.isEqual(redirect, newRedirect))\n}\n\nfunction add(redirect: IRedirect): void {\n  let samePathRedirects = redirects.get(redirect.fromPath)\n\n  if (!samePathRedirects) {\n    samePathRedirects = []\n    redirects.set(redirect.fromPath, samePathRedirects)\n  }\n\n  samePathRedirects.push(redirect)\n}\n\nexport const redirectsReducer = (\n  state: IGatsbyState[\"redirects\"] = [],\n  action: ICreateRedirectAction\n): IGatsbyState[\"redirects\"] => {\n  switch (action.type) {\n    case `CREATE_REDIRECT`: {\n      const redirect = action.payload\n\n      // Add redirect only if it wasn't yet added to prevent duplicates\n      if (!exists(redirect)) {\n        add(redirect)\n\n        state.push(redirect)\n      }\n\n      return state\n    }\n\n    default:\n      return state\n  }\n}\n"],"file":"redirects.js"}