{"version":3,"sources":["../../../src/redux/reducers/jobsv2.ts"],"names":["jobsV2Reducer","state","incomplete","Map","complete","action","type","job","plugin","payload","set","contentDigest","jobContentDigest","result","get","Error","delete","inputPaths"],"mappings":";;;;;AAOO,MAAMA,aAAa,GAAG,CAC3BC,KAA6B,GAAG;AAC9BC,EAAAA,UAAU,EAAE,IAAIC,GAAJ,EADkB;AAE9BC,EAAAA,QAAQ,EAAE,IAAID,GAAJ;AAFoB,CADL,EAK3BE,MAL2B,KAMA;AAC3B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAM,eAAN;AAAsB;AACpB,cAAM;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAkBH,MAAM,CAACI,OAA/B;AAEAR,QAAAA,KAAK,CAACC,UAAN,CAAiBQ,GAAjB,CAAqBH,GAAG,CAACI,aAAzB,EAAwC;AACtCJ,UAAAA,GADsC;AAEtCC,UAAAA;AAFsC,SAAxC;AAKA,eAAOP,KAAP;AACD;;AAED,SAAM,YAAN;AAAmB;AACjB,cAAM;AAAEW,UAAAA,gBAAF;AAAoBC,UAAAA;AAApB,YAA+BR,MAAM,CAACI,OAA5C;AACA,cAAM;AAAEF,UAAAA;AAAF,YAAUN,KAAK,CAACC,UAAN,CAAiBY,GAAjB,CACdF,gBADc,CAAhB;;AAIA,YAAI,CAACL,GAAL,EAAU;AACR,gBAAM,IAAIQ,KAAJ,CACH,2GADG,CAAN;AAGD;;AAEDd,QAAAA,KAAK,CAACC,UAAN,CAAiBc,MAAjB,CAAwBT,GAAG,CAACI,aAA5B,EAZiB,CAcjB;;AACAV,QAAAA,KAAK,CAACG,QAAN,CAAeM,GAAf,CAAmBH,GAAG,CAACI,aAAvB,EAAsC;AACpCE,UAAAA,MADoC;AAEpCI,UAAAA,UAAU,EAAEV,GAAG,CAACU;AAFoB,SAAtC;AAKA,eAAOhB,KAAP;AACD;;AAED,SAAM,qBAAN;AAA4B;AAC1B,cAAM;AAAEU,UAAAA;AAAF,YAAoBN,MAAM,CAACI,OAAjC;AACAR,QAAAA,KAAK,CAACC,UAAN,CAAiBc,MAAjB,CAAwBL,aAAxB;AACAV,QAAAA,KAAK,CAACG,QAAN,CAAeY,MAAf,CAAsBL,aAAtB;AAEA,eAAOV,KAAP;AACD;AAzCH;;AA4CA,SAAOA,KAAP;AACD,CApDM","sourcesContent":["import {\n  ActionsUnion,\n  IGatsbyState,\n  IGatsbyIncompleteJobV2,\n  IGatsbyCompleteJobV2,\n} from \"../types\"\n\nexport const jobsV2Reducer = (\n  state: IGatsbyState[\"jobsV2\"] = {\n    incomplete: new Map(),\n    complete: new Map(),\n  },\n  action: ActionsUnion\n): IGatsbyState[\"jobsV2\"] => {\n  switch (action.type) {\n    case `CREATE_JOB_V2`: {\n      const { job, plugin } = action.payload\n\n      state.incomplete.set(job.contentDigest, {\n        job,\n        plugin,\n      } as IGatsbyIncompleteJobV2)\n\n      return state\n    }\n\n    case `END_JOB_V2`: {\n      const { jobContentDigest, result } = action.payload\n      const { job } = state.incomplete.get(\n        jobContentDigest\n      ) as IGatsbyIncompleteJobV2\n\n      if (!job) {\n        throw new Error(\n          `If you encounter this error, it's probably a Gatsby internal bug. Please open an issue reporting us this.`\n        )\n      }\n\n      state.incomplete.delete(job.contentDigest)\n\n      // inputPaths is used to make sure the job is not stale\n      state.complete.set(job.contentDigest, {\n        result,\n        inputPaths: job.inputPaths,\n      } as IGatsbyCompleteJobV2)\n\n      return state\n    }\n\n    case `REMOVE_STALE_JOB_V2`: {\n      const { contentDigest } = action.payload\n      state.incomplete.delete(contentDigest)\n      state.complete.delete(contentDigest)\n\n      return state\n    }\n  }\n\n  return state\n}\n"],"file":"jobsv2.js"}