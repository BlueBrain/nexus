{"version":3,"sources":["../../src/redux/plugin-runner.ts"],"names":["startPluginRunner","emitter","on","action","page","payload","traceId","parentSpan","pluginSource","plugin","name","activity"],"mappings":";;;;;;;AACA;;AACA;;AAuCO,MAAMA,iBAAiB,GAAG,MAAY;AAC3CC,iBAAQC,EAAR,CAAY,aAAZ,EAA2BC,MAAD,IAA+B;AACvD,UAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACA,gCACG,cADH,EAEE;AAAED,MAAAA,IAAF;AAAQE,MAAAA,OAAO,EAAEH,MAAM,CAACG,OAAxB;AAAiCC,MAAAA,UAAU,EAAEJ,MAAM,CAACI;AAApD,KAFF,EAGE;AAAEC,MAAAA,YAAY,EAAEL,MAAM,CAACM,MAAP,CAAcC,IAA9B;AAAoCC,MAAAA,QAAQ,EAAER,MAAM,CAACQ;AAArD,KAHF;AAKD,GAPD;AAQD,CATM","sourcesContent":["import { Span } from \"opentracing\"\nimport { emitter } from \"./index\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { ActivityTracker } from \"../../\"\n\ntype Plugin = any // TODO\n\n// This might make sense to live somewhere else\ninterface ICreatePageAction {\n  graphql<TData, TVariables = any>(\n    query: string,\n    variables?: TVariables\n  ): Promise<{\n    errors?: any\n    data?: TData\n  }>\n  traceId: \"initial-createPages\"\n  waitForCascadingActions: boolean\n  parentSpan: Span\n  activity: ActivityTracker\n  type: `CREATE_PAGE`\n  contextModified: boolean\n  plugin: Plugin\n  payload: {\n    internalComponentName: string\n    path: string\n    matchPath: string | undefined\n    component: string\n    componentChunkName: string\n    isCreatedByStatefulCreatePages: boolean\n    context: {\n      slug: string\n      id: string\n    }\n    updatedAt: number\n    pluginCreator___NODE: string\n    pluginCreatorId: string\n    componentPath: string\n  }\n}\n\nexport const startPluginRunner = (): void => {\n  emitter.on(`CREATE_PAGE`, (action: ICreatePageAction) => {\n    const page = action.payload\n    apiRunnerNode(\n      `onCreatePage`,\n      { page, traceId: action.traceId, parentSpan: action.parentSpan },\n      { pluginSource: action.plugin.name, activity: action.activity }\n    )\n  })\n}\n"],"file":"plugin-runner.js"}