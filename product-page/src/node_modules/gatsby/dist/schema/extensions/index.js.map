{"version":3,"sources":["../../../src/schema/extensions/index.js"],"names":["GraphQLDirective","DirectiveLocation","specifiedDirectives","require","link","fileByPath","inferExtensionName","dontInferExtensionName","typeExtensions","description","args","noDefaultResolvers","type","deprecationReason","mimeTypes","types","defaultValue","childOf","many","nodeInterface","locations","INTERFACE","builtInFieldExtensions","dateformat","name","formatString","locale","fromNow","difference","extend","fieldConfig","by","from","on","schemaComposer","typeMapper","getWrapped","resolve","fileByRelativePath","proxy","fromNode","options","source","context","info","resolver","defaultFieldResolver","internalExtensionNames","map","directive","reservedExtensionNames","Object","keys","toDirectives","extensions","defaultLocations","extension","createTC","normalizedArgs","convertArgConfigMap","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","forEach","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","fieldName","getFieldExtensions","filter","includes","prevFieldConfig","getFieldConfig","extendField","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLDirective,\n  DirectiveLocation,\n  specifiedDirectives,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nimport { getDateResolver } from \"../types/date\"\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig, ComposeOutputType } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  type?: ComposeOutputType;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst inferExtensionName = `infer`\nconst dontInferExtensionName = `dontInfer`\n\nconst typeExtensions = {\n  [inferExtensionName]: {\n    description: `Infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: `Boolean`,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  [dontInferExtensionName]: {\n    description: `Do not infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: `Boolean`,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  mimeTypes: {\n    description: `Define the mime-types handled by this type.`,\n    args: {\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `The mime-types handled by this type.`,\n      },\n    },\n  },\n  childOf: {\n    description:\n      `Define parent-child relations between types. This is used to add ` +\n      `\\`child*\\` or \\`children*\\` convenience fields like \\`childImageSharp\\`.`,\n    args: {\n      mimeTypes: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of mime-types this type is a child of. Usually these are ` +\n          `the mime-types handled by a transformer plugin.`,\n      },\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of types this type is a child of. Usually these are the ` +\n          `types handled by a transformer plugin.`,\n      },\n      many: {\n        type: `Boolean!`,\n        defaultValue: false,\n        description: `Specifies whether a parent can have multiple children of this type or not.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formatting options.`,\n    args: {\n      formatString: `String`,\n      locale: `String`,\n      fromNow: `Boolean`,\n      difference: `String`,\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: `String!`,\n        defaultValue: `id`,\n      },\n      from: `String`,\n      on: `String`,\n    },\n    extend(args, fieldConfig, schemaComposer) {\n      const type = args.on && schemaComposer.typeMapper.getWrapped(args.on)\n      return {\n        resolve: link({ ...args, type }, fieldConfig),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args, fieldConfig),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: `String!`,\n      fromNode: {\n        type: `Boolean!`,\n        defaultValue: false,\n      },\n    },\n    extend(options, fieldConfig) {\n      return {\n        resolve(source, args, context, info) {\n          const resolver = fieldConfig.resolve || context.defaultFieldResolver\n          return resolver(source, args, context, {\n            ...info,\n            from: options.from || info.from,\n            fromNode: options.from ? options.fromNode : info.fromNode,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n  ...specifiedDirectives.map(directive => directive.name),\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description, locations, type } = extension\n    // Allow field extensions to register a return type\n    if (type) {\n      schemaComposer.createTC(type)\n    }\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig, schemaComposer)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n  inferExtensionName,\n  dontInferExtensionName,\n}\n"],"file":"index.js"}