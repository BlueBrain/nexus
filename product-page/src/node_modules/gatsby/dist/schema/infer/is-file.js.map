{"version":3,"sources":["../../../src/schema/infer/is-file.ts"],"names":["getFirstValueAt","node","selector","value","Array","isArray","withBaseDir","dir","p","path","posix","join","findAncestorNode","childNode","predicate","parent","undefined","getBaseDir","internal","type","getAbsolutePath","relativePath","withDir","map","getFilePath","fieldPath","typeName","split","looksLikeFile","isAbsolute","mime","getType","normalizedPath","find","isFile","filePath","filePathExists","some","absolutePath"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport { slash } from \"gatsby-core-utils\"\nimport mime from \"mime\"\nimport isRelative from \"is-relative\"\nimport isRelativeUrl from \"is-relative-url\"\nimport { getValueAt } from \"../../utils/get-value-at\"\nimport { getNode, getNodesByType } from \"../../redux/nodes\"\nimport { IGatsbyNode } from \"../../redux/types\"\n\nconst getFirstValueAt = (\n  node: IGatsbyNode,\n  selector: string | string[]\n): string => {\n  let value = getValueAt(node, selector)\n  while (Array.isArray(value)) {\n    value = value[0]\n  }\n  return value\n}\n\nconst withBaseDir = (dir: string) => (p: string): string =>\n  path.posix.join(dir, slash(p))\n\nconst findAncestorNode = (\n  childNode: IGatsbyNode,\n  predicate: (n: IGatsbyNode) => boolean\n): IGatsbyNode | null => {\n  let node: IGatsbyNode | undefined = childNode\n  do {\n    if (predicate(node)) {\n      return node\n    }\n    node = getNode(node.parent)\n  } while (node !== undefined)\n  return null\n}\n\nconst getBaseDir = (node: IGatsbyNode): string | null => {\n  if (node) {\n    const { dir } = findAncestorNode(\n      node,\n      node => node.internal.type === `File`\n    ) || { dir: `` }\n    return typeof dir === `string` ? dir : null\n  }\n  return null\n}\n\nconst getAbsolutePath = (\n  node: IGatsbyNode,\n  relativePath: string\n): string | string[] | null => {\n  const dir = getBaseDir(node)\n  const withDir = withBaseDir(dir ?? ``)\n  return dir\n    ? Array.isArray(relativePath)\n      ? relativePath.map(withDir)\n      : withDir(relativePath)\n    : null\n}\n\nconst getFilePath = (\n  fieldPath: string,\n  relativePath: string\n): string | string[] | null => {\n  const [typeName, ...selector] = Array.isArray(fieldPath)\n    ? fieldPath\n    : fieldPath.split(`.`)\n\n  if (typeName === `File`) return null\n\n  const looksLikeFile =\n    !path.isAbsolute(relativePath) &&\n    mime.getType(relativePath) !== null &&\n    // FIXME: Do we need all of this?\n    mime.getType(relativePath) !== `application/x-msdownload` &&\n    isRelative(relativePath) &&\n    isRelativeUrl(relativePath)\n\n  if (!looksLikeFile) return null\n\n  const normalizedPath = slash(relativePath)\n  const node = getNodesByType(typeName).find(\n    node => getFirstValueAt(node, selector) === normalizedPath\n  )\n\n  return node ? getAbsolutePath(node, normalizedPath) : null\n}\n\nexport const isFile = (fieldPath: string, relativePath: string): boolean => {\n  const filePath = getFilePath(fieldPath, relativePath)\n  if (!filePath) return false\n  const filePathExists = getNodesByType(`File`).some(\n    node => node.absolutePath === filePath\n  )\n  return filePathExists\n}\n"],"file":"is-file.js"}