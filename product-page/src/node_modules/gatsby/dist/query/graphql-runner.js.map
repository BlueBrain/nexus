{"version":3,"sources":["../../src/query/graphql-runner.ts"],"names":["GraphQLRunner","constructor","store","collectStats","graphqlTracing","schema","schemaCustomization","getState","nodeModel","LocalNodeModel","schemaComposer","composer","createPageDependency","parseCache","Map","validDocuments","WeakSet","scheduleClearCache","clearCache","bind","stats","totalQueries","uniqueOperations","Set","uniqueQueries","totalRunQuery","totalPluralRunQuery","totalIndexHits","totalSiftHits","totalNonSingleFilters","comparatorsUsed","uniqueFilterPaths","uniqueSorts","clear","parse","query","has","set","get","validate","document","errors","length","add","getStats","comparatorsUsedObj","forEach","value","key","push","comparator","amount","size","context","parentSpan","queryName","statsQuery","body","crypto","createHash","update","digest","tracer","GraphQLSpanTracer","tags","start","result","rootValue","contextValue","customContext","variableValues","Promise","resolve","end"],"mappings":"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","sourcesContent":["import crypto from \"crypto\"\nimport { Span } from \"opentracing\"\nimport {\n  parse,\n  validate,\n  execute,\n  DocumentNode,\n  GraphQLSchema,\n  Source,\n  GraphQLError,\n  ExecutionResult,\n} from \"graphql\"\nimport { debounce } from \"lodash\"\nimport { createPageDependency } from \"../redux/actions/add-page-dependency\"\n\nimport withResolverContext from \"../schema/context\"\nimport { LocalNodeModel } from \"../schema/node-model\"\nimport { Store } from \"redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IGraphQLRunnerStatResults, IGraphQLRunnerStats } from \"./types\"\nimport GraphQLSpanTracer from \"./graphql-span-tracer\"\n\ntype Query = string | Source\n\nexport interface IGraphQLRunnerOptions {\n  collectStats?: boolean\n  graphqlTracing?: boolean\n}\n\nexport class GraphQLRunner {\n  parseCache: Map<Query, DocumentNode>\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  nodeModel: any // TODO: convert \"../schema/node-model\" from Flow\n\n  schema: GraphQLSchema\n\n  validDocuments: WeakSet<DocumentNode>\n  scheduleClearCache: () => void\n\n  stats: IGraphQLRunnerStats | null\n  graphqlTracing: boolean\n\n  constructor(\n    protected store: Store<IGatsbyState>,\n    { collectStats, graphqlTracing }: IGraphQLRunnerOptions = {}\n  ) {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    this.nodeModel = new LocalNodeModel({\n      schema,\n      schemaComposer: schemaCustomization.composer,\n      createPageDependency,\n    })\n    this.schema = schema\n    this.parseCache = new Map()\n    this.validDocuments = new WeakSet()\n    this.scheduleClearCache = debounce(this.clearCache.bind(this), 5000)\n\n    this.graphqlTracing = graphqlTracing || false\n\n    if (collectStats) {\n      this.stats = {\n        totalQueries: 0,\n        uniqueOperations: new Set(),\n        uniqueQueries: new Set(),\n        totalRunQuery: 0,\n        totalPluralRunQuery: 0,\n        totalIndexHits: 0,\n        totalSiftHits: 0,\n        totalNonSingleFilters: 0,\n        comparatorsUsed: new Map(),\n        uniqueFilterPaths: new Set(),\n        uniqueSorts: new Set(),\n      }\n    } else {\n      this.stats = null\n    }\n  }\n\n  clearCache(): void {\n    this.parseCache.clear()\n    this.validDocuments = new WeakSet()\n  }\n\n  parse(query: Query): DocumentNode {\n    if (!this.parseCache.has(query)) {\n      this.parseCache.set(query, parse(query))\n    }\n    return this.parseCache.get(query) as DocumentNode\n  }\n\n  validate(\n    schema: GraphQLSchema,\n    document: DocumentNode\n  ): readonly GraphQLError[] {\n    if (!this.validDocuments.has(document)) {\n      const errors = validate(schema, document)\n      if (!errors.length) {\n        this.validDocuments.add(document)\n      }\n      return errors as Array<GraphQLError>\n    }\n    return []\n  }\n\n  getStats(): IGraphQLRunnerStatResults | null {\n    if (this.stats) {\n      const comparatorsUsedObj: Array<{\n        comparator: string\n        amount: number\n      }> = []\n      this.stats.comparatorsUsed.forEach((value, key) => {\n        comparatorsUsedObj.push({ comparator: key, amount: value })\n      })\n      return {\n        totalQueries: this.stats.totalQueries,\n        uniqueOperations: this.stats.uniqueOperations.size,\n        uniqueQueries: this.stats.uniqueQueries.size,\n        totalRunQuery: this.stats.totalRunQuery,\n        totalPluralRunQuery: this.stats.totalPluralRunQuery,\n        totalIndexHits: this.stats.totalIndexHits,\n        totalSiftHits: this.stats.totalSiftHits,\n        totalNonSingleFilters: this.stats.totalNonSingleFilters,\n        comparatorsUsed: comparatorsUsedObj,\n        uniqueFilterPaths: this.stats.uniqueFilterPaths.size,\n        uniqueSorts: this.stats.uniqueSorts.size,\n      }\n    } else {\n      return null\n    }\n  }\n\n  query(\n    query: Query,\n    context: Record<string, unknown>,\n    {\n      parentSpan,\n      queryName,\n    }: { parentSpan: Span | undefined; queryName: string }\n  ): Promise<ExecutionResult> {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    if (this.schema !== schema) {\n      this.schema = schema\n      this.clearCache()\n    }\n\n    if (this.stats) {\n      this.stats.totalQueries++\n      let statsQuery = query\n      if (typeof statsQuery !== `string`) {\n        statsQuery = statsQuery.body\n      }\n\n      this.stats.uniqueQueries.add(\n        crypto.createHash(`sha1`).update(statsQuery).digest(`hex`)\n      )\n    }\n\n    const document = this.parse(query)\n    const errors = this.validate(schema, document)\n\n    let tracer\n    if (this.graphqlTracing && parentSpan) {\n      tracer = new GraphQLSpanTracer(`GraphQL Query`, {\n        parentSpan,\n        tags: {\n          queryName: queryName,\n        },\n      })\n\n      tracer.start()\n    }\n\n    try {\n      const result =\n        errors.length > 0\n          ? { errors }\n          : execute({\n              schema,\n              document,\n              rootValue: context,\n              contextValue: withResolverContext({\n                schema,\n                schemaComposer: schemaCustomization.composer,\n                context,\n                customContext: schemaCustomization.context,\n                nodeModel: this.nodeModel,\n                stats: this.stats,\n                tracer,\n              }),\n              variableValues: context,\n            })\n\n      // Queries are usually executed in batch. But after the batch is finished\n      // cache just wastes memory without much benefits.\n      // TODO: consider a better strategy for cache purging/invalidation\n      this.scheduleClearCache()\n\n      return Promise.resolve(result)\n    } finally {\n      if (tracer) {\n        tracer.end()\n      }\n    }\n  }\n}\n"],"file":"graphql-runner.js"}