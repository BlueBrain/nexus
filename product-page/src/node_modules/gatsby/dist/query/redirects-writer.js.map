{"version":3,"sources":["../../src/query/redirects-writer.ts"],"names":["lastHash","bootstrapFinished","writeRedirects","program","redirects","store","getState","browserRedirects","filter","r","redirectInBrowser","newHash","crypto","createHash","update","JSON","stringify","digest","Promise","resolve","fs","writeFile","directory","oldRedirects","debouncedWriteRedirects","_","debounce","isEqual","emitter","on"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAIA,QAAuB,GAAG,IAA9B;AACA,IAAIC,iBAAiB,GAAG,KAAxB;;AAEO,MAAMC,cAAc,GAAG,YAA2B;AACvDD,EAAAA,iBAAiB,GAAG,IAApB;;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBC,aAAMC,QAAN,EAA/B,CAHuD,CAKvD;;;AACA,QAAMC,gBAAgB,GAAGH,SAAS,CAACI,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACC,iBAAxB,CAAzB;;AAEA,QAAMC,OAAO,GAAGC,gBACbC,UADa,CACD,KADC,EAEbC,MAFa,CAENC,IAAI,CAACC,SAAL,CAAeT,gBAAf,CAFM,EAGbU,MAHa,CAGL,KAHK,CAAhB;;AAKA,MAAIN,OAAO,KAAKX,QAAhB,EAA0B;AACxB,WAAOkB,OAAO,CAACC,OAAR,EAAP;AACD;;AAEDnB,EAAAA,QAAQ,GAAGW,OAAX;AAEA,SAAO,MAAMS,iBAAGC,SAAH,CACX,+BAASlB,OAAO,CAACmB,SAAjB,EAA6B,uBAA7B,CADW,EAEXP,IAAI,CAACC,SAAL,CAAeT,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAFW,CAAb;AAID,CAvBM;;;AAyBP,IAAIgB,YAAJ;;AACA,MAAMC,uBAAuB,GAAGC,gBAAEC,QAAF,CAAW,MAAM;AAC/C;AACA,MACEzB,iBAAiB,IACjB,CAACwB,gBAAEE,OAAF,CAAUJ,YAAV,EAAwBlB,aAAMC,QAAN,GAAiBF,SAAzC,CAFH,EAGE;AACAF,IAAAA,cAAc;AACdqB,IAAAA,YAAY,GAAGlB,aAAMC,QAAN,GAAiBF,SAAhC;AACD;AACF,CAT+B,EAS7B,GAT6B,CAAhC;;AAWAwB,eAAQC,EAAR,CAAY,iBAAZ,EAA8B,MAAM;AAClCL,EAAAA,uBAAuB;AACxB,CAFD","sourcesContent":["import _ from \"lodash\"\nimport crypto from \"crypto\"\nimport fs from \"fs-extra\"\nimport { store, emitter } from \"../redux\"\nimport { joinPath } from \"gatsby-core-utils\"\n\nlet lastHash: string | null = null\nlet bootstrapFinished = false\n\nexport const writeRedirects = async (): Promise<void> => {\n  bootstrapFinished = true\n\n  const { program, redirects } = store.getState()\n\n  // Filter for redirects that are meant for the browser.\n  const browserRedirects = redirects.filter(r => r.redirectInBrowser)\n\n  const newHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(browserRedirects))\n    .digest(`hex`)\n\n  if (newHash === lastHash) {\n    return Promise.resolve()\n  }\n\n  lastHash = newHash\n\n  return await fs.writeFile(\n    joinPath(program.directory, `.cache/redirects.json`),\n    JSON.stringify(browserRedirects, null, 2)\n  )\n}\n\nlet oldRedirects\nconst debouncedWriteRedirects = _.debounce(() => {\n  // Don't write redirects again until bootstrap has finished.\n  if (\n    bootstrapFinished &&\n    !_.isEqual(oldRedirects, store.getState().redirects)\n  ) {\n    writeRedirects()\n    oldRedirects = store.getState().redirects\n  }\n}, 250)\n\nemitter.on(`CREATE_REDIRECT`, () => {\n  debouncedWriteRedirects()\n})\n"],"file":"redirects-writer.js"}