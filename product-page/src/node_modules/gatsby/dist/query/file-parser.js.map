{"version":3,"sources":["../../src/query/file-parser.js"],"names":["fs","require","crypto","_","slugify","getGraphQLTag","StringInterpolationNotAllowedError","EmptyGraphQLTagError","GraphQLSyntaxError","report","apiRunnerNode","boundActionCreators","generateQueryName","def","hash","file","name","value","slugified","replacement","lower","camelCase","kind","followVariableDeclarations","binding","node","path","type","id","init","scope","getBinding","isUseStaticQuery","callee","property","get","referencesImport","warnForUnknownQueryVariable","varName","usageFunction","warn","parseToAst","filePath","fileStr","parentSpan","addError","ast","transpiled","filename","contents","length","item","tmp","error","queryExtractionGraphQLError","componentPath","undefined","context","queryExtractionBabelError","warnForGlobalTag","findGraphQLTags","text","Promise","resolve","reject","then","documents","documentLocations","WeakMap","extractStaticQuery","taggedTemplateExpressPath","isHook","gqlAst","isGlobal","definitions","forEach","templateLoc","traverse","TemplateElement","templateElementPath","loc","docInFile","doc","isStaticQuery","set","start","push","JSXElement","openingElement","JSXAttribute","jsxPath","TaggedTemplateExpression","templatePath","Identifier","identifierPath","found","VariableDeclarator","varPath","CallExpression","hookPath","firstArg","isTaggedTemplateExpression","isIdentifier","innerPath","ExportNamedDeclaration","state","source","ExportSpecifier","local","uniqueQueries","uniqBy","q","catch","cache","FileParser","constructor","parseFile","readFile","err","includes","createHash","update","digest","astDefinitions","queryExtractedBabelSuccess","structuredError","location","interpolationStart","end","interpolationEnd","codeFrame","highlightCode","process","env","FORCE_COLOR","originalError","locations","message","sourceMessage","parseFiles","files","all","map","docs"],"mappings":"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","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\nconst _ = require(`lodash`)\nconst slugify = require(`slugify`)\n\n// Traverse is a es6 module...\nimport traverse from \"@babel/traverse\"\nconst {\n  getGraphQLTag,\n  StringInterpolationNotAllowedError,\n  EmptyGraphQLTagError,\n  GraphQLSyntaxError,\n} = require(`babel-plugin-remove-graphql-queries`)\n\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport type { DocumentNode } from \"graphql\"\nimport { babelParseToAst } from \"../utils/babel-parse-to-ast\"\nimport { codeFrameColumns } from \"@babel/code-frame\"\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { boundActionCreators } = require(`../redux/actions`)\nimport { locInGraphQlToLocInFile } from \"./error-parser\"\n/**\n * Add autogenerated query name if it wasn't defined by user.\n */\nconst generateQueryName = ({ def, hash, file }) => {\n  if (!def.name || !def.name.value) {\n    const slugified = slugify(file, {\n      replacement: ` `,\n      lower: false,\n    })\n    def.name = {\n      value: `${_.camelCase(slugified)}${hash}`,\n      kind: `Name`,\n    }\n  }\n  return def\n}\n\n// taken from `babel-plugin-remove-graphql-queries`, in the future import from\n// there\nfunction followVariableDeclarations(binding) {\n  const node = binding.path?.node\n  if (\n    node?.type === `VariableDeclarator` &&\n    node?.id.type === `Identifier` &&\n    node?.init?.type === `Identifier`\n  ) {\n    return followVariableDeclarations(\n      binding.path.scope.getBinding(node.init.name)\n    )\n  }\n  return binding\n}\n\nfunction isUseStaticQuery(path) {\n  return (\n    (path.node.callee.type === `MemberExpression` &&\n      path.node.callee.property.name === `useStaticQuery` &&\n      path.get(`callee`).get(`object`).referencesImport(`gatsby`)) ||\n    (path.node.callee.name === `useStaticQuery` &&\n      path.get(`callee`).referencesImport(`gatsby`))\n  )\n}\n\nconst warnForUnknownQueryVariable = (varName, file, usageFunction) =>\n  report.warn(\n    `\\nWe were unable to find the declaration of variable \"${varName}\", which you passed as the \"query\" prop into the ${usageFunction} declaration in \"${file}\".\n\nPerhaps the variable name has a typo?\n\nAlso note that we are currently unable to use queries defined in files other than the file where the ${usageFunction} is defined. If you're attempting to import the query, please move it into \"${file}\". If being able to import queries from another file is an important capability for you, we invite your help fixing it.\\n`\n  )\n\nasync function parseToAst(filePath, fileStr, { parentSpan, addError } = {}) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n    parentSpan: parentSpan,\n  })\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babelParseToAst(item, filePath)\n        ast = tmp\n        break\n      } catch (error) {\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        continue\n      }\n    }\n    if (ast === undefined) {\n      addError({\n        id: `85912`,\n        filePath,\n        context: {\n          filePath,\n        },\n      })\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: filePath,\n      })\n\n      return null\n    }\n  } else {\n    try {\n      ast = babelParseToAst(fileStr, filePath)\n    } catch (error) {\n      boundActionCreators.queryExtractionBabelError({\n        componentPath: filePath,\n        error,\n      })\n\n      addError({\n        id: `85911`,\n        filePath,\n        context: {\n          filePath,\n        },\n      })\n\n      return null\n    }\n  }\n\n  return ast\n}\n\nconst warnForGlobalTag = file =>\n  report.warn(\n    `Using the global \\`graphql\\` tag is deprecated, and will not be supported in v3.\\n` +\n      `Import it instead like:  import { graphql } from 'gatsby' in file:\\n` +\n      file\n  )\n\ntype GraphQLDocumentInFile = {\n  filePath: string,\n  doc: DocumentNode,\n  templateLoc: string,\n  text: string,\n  hash: string,\n  isHook: boolean,\n  isStaticQuery: boolean,\n}\n\nasync function findGraphQLTags(\n  file,\n  text,\n  { parentSpan, addError } = {}\n): Promise<Array<GraphQLDocumentInFile>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text, { parentSpan, addError })\n      .then(ast => {\n        const documents = []\n        if (!ast) {\n          resolve(documents)\n          return\n        }\n\n        /**\n         * A map of graphql documents to unique locations.\n         *\n         * A graphql document's unique location is made of:\n         *\n         *  - the location of the graphql template literal that contains the document, and\n         *  - the document's location within the graphql template literal\n         *\n         * This is used to prevent returning duplicated documents.\n         */\n        const documentLocations = new WeakMap()\n\n        const extractStaticQuery = (\n          taggedTemplateExpressPath,\n          isHook = false\n        ) => {\n          const { ast: gqlAst, text, hash, isGlobal } = getGraphQLTag(\n            taggedTemplateExpressPath\n          )\n          if (!gqlAst) return\n\n          if (isGlobal) warnForGlobalTag(file)\n\n          gqlAst.definitions.forEach(def => {\n            generateQueryName({\n              def,\n              hash,\n              file,\n            })\n          })\n\n          let templateLoc\n\n          taggedTemplateExpressPath.traverse({\n            TemplateElement(templateElementPath) {\n              templateLoc = templateElementPath.node.loc\n            },\n          })\n\n          const docInFile = {\n            filePath: file,\n            doc: gqlAst,\n            text: text,\n            hash: hash,\n            isStaticQuery: true,\n            isHook,\n            templateLoc,\n          }\n\n          documentLocations.set(\n            docInFile,\n            `${taggedTemplateExpressPath.node.start}-${gqlAst.loc.start}`\n          )\n\n          documents.push(docInFile)\n        }\n\n        // Look for queries in <StaticQuery /> elements.\n        traverse(ast, {\n          JSXElement(path) {\n            if (path.node.openingElement.name.name !== `StaticQuery`) {\n              return\n            }\n\n            // astexplorer.com link I (@kyleamathews) used when prototyping this algorithm\n            // https://astexplorer.net/#/gist/ab5d71c0f08f287fbb840bf1dd8b85ff/2f188345d8e5a4152fe7c96f0d52dbcc6e9da466\n            path.traverse({\n              JSXAttribute(jsxPath) {\n                if (jsxPath.node.name.name !== `query`) {\n                  return\n                }\n                jsxPath.traverse({\n                  // Assume the query is inline in the component and extract that.\n                  TaggedTemplateExpression(templatePath) {\n                    extractStaticQuery(templatePath)\n                  },\n                  // Also see if it's a variable that's passed in as a prop\n                  // and if it is, go find it.\n                  Identifier(identifierPath) {\n                    if (identifierPath.node.name !== `graphql`) {\n                      const varName = identifierPath.node.name\n                      let found = false\n                      traverse(ast, {\n                        VariableDeclarator(varPath) {\n                          if (\n                            varPath.node.id.name === varName &&\n                            varPath.node.init.type ===\n                              `TaggedTemplateExpression`\n                          ) {\n                            varPath.traverse({\n                              TaggedTemplateExpression(templatePath) {\n                                found = true\n                                extractStaticQuery(templatePath)\n                              },\n                            })\n                          }\n                        },\n                      })\n                      if (!found) {\n                        warnForUnknownQueryVariable(\n                          varName,\n                          file,\n                          `<StaticQuery>`\n                        )\n                      }\n                    }\n                  },\n                })\n              },\n            })\n            return\n          },\n        })\n\n        // Look for queries in useStaticQuery hooks.\n        traverse(ast, {\n          CallExpression(hookPath) {\n            if (!isUseStaticQuery(hookPath)) return\n\n            const firstArg = hookPath.get(`arguments`)[0]\n\n            // Assume the query is inline in the component and extract that.\n            if (firstArg.isTaggedTemplateExpression()) {\n              extractStaticQuery(firstArg, true)\n              // Also see if it's a variable that's passed in as a prop\n              // and if it is, go find it.\n            } else if (firstArg.isIdentifier()) {\n              if (\n                firstArg.node.name !== `graphql` &&\n                firstArg.node.name !== `useStaticQuery`\n              ) {\n                const varName = firstArg.node.name\n                let found = false\n                traverse(ast, {\n                  VariableDeclarator(varPath) {\n                    if (\n                      varPath.node.id.name === varName &&\n                      varPath.node.init.type === `TaggedTemplateExpression`\n                    ) {\n                      varPath.traverse({\n                        TaggedTemplateExpression(templatePath) {\n                          found = true\n                          extractStaticQuery(templatePath, true)\n                        },\n                      })\n                    }\n                  },\n                })\n                if (!found) {\n                  warnForUnknownQueryVariable(varName, file, `useStaticQuery`)\n                }\n              }\n            }\n          },\n        })\n\n        function TaggedTemplateExpression(innerPath) {\n          const { ast: gqlAst, isGlobal, hash, text } = getGraphQLTag(innerPath)\n          if (!gqlAst) return\n\n          if (isGlobal) warnForGlobalTag(file)\n\n          gqlAst.definitions.forEach(def => {\n            generateQueryName({\n              def,\n              hash,\n              file,\n            })\n          })\n\n          let templateLoc\n          innerPath.traverse({\n            TemplateElement(templateElementPath) {\n              templateLoc = templateElementPath.node.loc\n            },\n          })\n\n          const docInFile = {\n            filePath: file,\n            doc: gqlAst,\n            text: text,\n            hash: hash,\n            isStaticQuery: false,\n            isHook: false,\n            templateLoc,\n          }\n\n          documentLocations.set(\n            docInFile,\n            `${innerPath.node.start}-${gqlAst.loc.start}`\n          )\n\n          documents.push(docInFile)\n        }\n\n        // When a component has a StaticQuery we scan all of its exports and follow those exported variables\n        // to determine if they lead to this static query (via tagged template literal)\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            // Skipping the edge case of re-exporting (i.e. \"export { bar } from 'Bar'\")\n            // (it is handled elsewhere for queries, see usages of warnForUnknownQueryVariable)\n            if (path.node.source) {\n              return\n            }\n            path.traverse({\n              TaggedTemplateExpression,\n              ExportSpecifier(path) {\n                const binding = followVariableDeclarations(\n                  path.scope.getBinding(path.node.local.name)\n                )\n                binding.path.traverse({ TaggedTemplateExpression })\n              },\n            })\n          },\n        })\n\n        // Remove duplicate queries\n        const uniqueQueries = _.uniqBy(documents, q => documentLocations.get(q))\n\n        resolve(uniqueQueries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  constructor({ parentSpan } = {}) {\n    this.parentSpan = parentSpan\n  }\n\n  async parseFile(file: string, addError): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      addError({\n        id: `85913`,\n        filePath: file,\n        context: {\n          filePath: file,\n        },\n        error: err,\n      })\n\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: file,\n      })\n      return null\n    }\n\n    if (!text.includes(`graphql`)) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      const astDefinitions =\n        cache[hash] ||\n        (cache[hash] = await findGraphQLTags(file, text, {\n          parentSpan: this.parentSpan,\n          addError,\n        }))\n\n      // If any AST definitions were extracted, report success.\n      // This can mean there is none or there was a babel error when\n      // we tried to extract the graphql AST.\n      if (astDefinitions.length > 0) {\n        boundActionCreators.queryExtractedBabelSuccess({\n          componentPath: file,\n        })\n      }\n\n      return astDefinitions\n    } catch (err) {\n      // default error\n      let structuredError = {\n        id: `85915`,\n        context: {\n          filePath: file,\n        },\n      }\n\n      if (err instanceof StringInterpolationNotAllowedError) {\n        const location = {\n          start: err.interpolationStart,\n          end: err.interpolationEnd,\n        }\n        structuredError = {\n          id: `85916`,\n          location,\n          context: {\n            codeFrame: codeFrameColumns(text, location, {\n              highlightCode: process.env.FORCE_COLOR !== `0`,\n            }),\n          },\n        }\n      } else if (err instanceof EmptyGraphQLTagError) {\n        const location = err.templateLoc\n          ? {\n              start: err.templateLoc.start,\n              end: err.templateLoc.end,\n            }\n          : null\n\n        structuredError = {\n          id: `85917`,\n          location,\n          context: {\n            codeFrame: location\n              ? codeFrameColumns(text, location, {\n                  highlightCode: process.env.FORCE_COLOR !== `0`,\n                })\n              : null,\n          },\n        }\n      } else if (err instanceof GraphQLSyntaxError) {\n        const location = {\n          start: locInGraphQlToLocInFile(\n            err.templateLoc,\n            err.originalError.locations[0]\n          ),\n        }\n\n        structuredError = {\n          id: `85918`,\n          location,\n          context: {\n            codeFrame: location\n              ? codeFrameColumns(text, location, {\n                  highlightCode: process.env.FORCE_COLOR !== `0`,\n                  message: err.originalError.message,\n                })\n              : null,\n            sourceMessage: err.originalError.message,\n          },\n        }\n      }\n\n      addError({\n        ...structuredError,\n        filePath: file,\n      })\n\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: file,\n      })\n      return null\n    }\n  }\n\n  async parseFiles(\n    files: Array<string>,\n    addError\n  ): Promise<Array<DocumentNode>> {\n    const documents = []\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file, addError).then(docs => {\n          documents.push(...(docs || []))\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"],"file":"file-parser.js"}