{"version":3,"sources":["../../src/query/query-compiler.js"],"names":["_","require","path","normalize","glob","validate","print","visit","visitWithTypeInfo","TypeInfo","isAbstractType","Kind","FragmentsOnCompositeTypesRule","LoneAnonymousOperationRule","PossibleFragmentSpreadsRule","ScalarLeafsRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","store","default","FileParser","graphqlError","multipleRootQueriesError","duplicateFragmentError","unknownFragmentError","report","errorParser","locInGraphQlToLocInFile","overlayErrorID","compile","parentSpan","program","schema","themes","flattenedPlugins","getState","activity","activityTimer","id","start","errors","addError","push","bind","parsedQueries","parseQueries","base","directory","additional","resolveThemes","map","plugin","themeDir","pluginFilepath","queries","processQueries","length","structuredErrors","panicOnBuild","process","env","gatsby_executing_command","websocketManager","emitError","end","reduce","merged","theme","filesRegex","pathRegex","modulesThatUseGatsby","files","join","module","folderPath","sync","nodir","filter","d","match","concat","Array","from","components","keys","c","uniq","parser","parseFiles","definitionsByName","operations","extractOperations","processDefinitions","preValidationRules","Map","filePath","text","templateLoc","hash","doc","isHook","isStaticQuery","error","location","locations","message","dispatch","actions","queryExtractionGraphQLError","componentPath","definitions","forEach","def","name","value","printedAst","kind","OPERATION_DEFINITION","FRAGMENT_DEFINITION","has","otherDef","get","leftDefinition","rightDefinition","delete","set","isFragment","processedQueries","fragmentsUsedByFragment","fragmentNames","entries","operation","originalDefinition","otherQuery","usedFragments","missingFragments","determineUsedFragmentsForDefinition","definition","node","document","DOCUMENT","values","formattedMessage","addExtraFields","query","originalText","kebabCase","relative","NODE_ENV","useContext","traversalPath","cachedUsedFragments","Set","FRAGMENT_SPREAD","fragmentDefinition","includes","add","usedFragmentsForFragment","missingFragmentsForFragment","pop","fragmentName","typeInfo","contextStack","transformer","enter","SELECTION_SET","hasTypename","FIELD","context","alias","leave","parentType","getParentType","extraFields","NAME","selections","undefined"],"mappings":";;;;;;;;AA8BA;;AAEA;;AACA;;AA/BA;;;;AAKA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAAE,MAAF,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAE,gBAAF,CAAzB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAE,MAAF,CAApB;;AAEA,MAAM;AACJI,EAAAA,QADI;AAEJC,EAAAA,KAFI;AAGJC,EAAAA,KAHI;AAIJC,EAAAA,iBAJI;AAKJC,EAAAA,QALI;AAMJC,EAAAA,cANI;AAOJC,EAAAA,IAPI;AAQJC,EAAAA,6BARI;AASJC,EAAAA,0BATI;AAUJC,EAAAA,2BAVI;AAWJC,EAAAA,eAXI;AAYJC,EAAAA,uBAZI;AAaJC,EAAAA,0BAbI;AAcJC,EAAAA;AAdI,IAeFjB,OAAO,CAAE,SAAF,CAfX;;AAkBA,MAAM;AAAEkB,EAAAA;AAAF,IAAYlB,OAAO,CAAE,UAAF,CAAzB;;AAGA,MAAM;AAAEmB,EAAAA,OAAO,EAAEC;AAAX,IAA0BpB,OAAO,CAAE,eAAF,CAAvC;;AACA,MAAM;AACJqB,EAAAA,YADI;AAEJC,EAAAA,wBAFI;AAGJC,EAAAA,sBAHI;AAIJC,EAAAA;AAJI,IAKFxB,OAAO,CAAE,kBAAF,CALX;;AAMA,MAAMyB,MAAM,GAAGzB,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAM;AACJmB,EAAAA,OAAO,EAAEO,WADL;AAEJC,EAAAA;AAFI,IAGF3B,OAAO,CAAE,gBAAF,CAHX;;AAKA,MAAM4B,cAAc,GAAI,kBAAxB;;AAEe,eAAeC,OAAf,CAAuB;AAAEC,EAAAA;AAAF,IAAiB,EAAxC,EAEb;AACA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA,MAAnB;AAA2BC,IAAAA;AAA3B,MAAgDhB,KAAK,CAACiB,QAAN,EAAtD;AAEA,QAAMC,QAAQ,GAAGX,MAAM,CAACY,aAAP,CAAsB,iCAAtB,EAAwD;AACvEP,IAAAA,UADuE;AAEvEQ,IAAAA,EAAE,EAAG;AAFkE,GAAxD,CAAjB;AAIAF,EAAAA,QAAQ,CAACG,KAAT;AAEA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAGD,MAAM,CAACE,IAAP,CAAYC,IAAZ,CAAiBH,MAAjB,CAAjB;AAEA,QAAMI,aAAa,GAAG,MAAMC,YAAY,CAAC;AACvCC,IAAAA,IAAI,EAAEf,OAAO,CAACgB,SADyB;AAEvCC,IAAAA,UAAU,EAAEC,aAAa,CACvBhB,MAAM,CAACA,MAAP,GACIA,MAAM,CAACA,MADX,GAEIC,gBAAgB,CAACgB,GAAjB,CAAqBC,MAAM,IAAI;AAC7B,aAAO;AACLC,QAAAA,QAAQ,EAAED,MAAM,CAACE;AADZ,OAAP;AAGD,KAJD,CAHmB,CAFc;AAWvCZ,IAAAA,QAXuC;AAYvCX,IAAAA;AAZuC,GAAD,CAAxC;AAeA,QAAMwB,OAAO,GAAGC,cAAc,CAAC;AAC7BvB,IAAAA,MAD6B;AAE7BY,IAAAA,aAF6B;AAG7BH,IAAAA,QAH6B;AAI7BX,IAAAA;AAJ6B,GAAD,CAA9B;;AAOA,MAAIU,MAAM,CAACgB,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAMC,gBAAgB,GAAGrB,QAAQ,CAACsB,YAAT,CAAsBlB,MAAtB,CAAzB;;AACA,QAAImB,OAAO,CAACC,GAAR,CAAYC,wBAAZ,KAA0C,SAA9C,EAAwD;AACtDC,yCAAiBC,SAAjB,CAA2BnC,cAA3B,EAA2C6B,gBAA3C;AACD;AACF,GALD,MAKO;AACL,QAAIE,OAAO,CAACC,GAAR,CAAYC,wBAAZ,KAA0C,SAA9C,EAAwD;AACtD;AACAC,yCAAiBC,SAAjB,CAA2BnC,cAA3B,EAA2C,IAA3C;AACD;AACF;;AACDQ,EAAAA,QAAQ,CAAC4B,GAAT;AAEA,SAAOV,OAAP;AACD;;AAEM,MAAML,aAAa,GAAG,CAAChB,MAAM,GAAG,EAAV,KAC3BA,MAAM,CAACgC,MAAP,CAAc,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC/BD,EAAAA,MAAM,CAACxB,IAAP,CAAYyB,KAAK,CAACf,QAAlB;AACA,SAAOc,MAAP;AACD,CAHD,EAGG,EAHH,CADK;;;;AAMA,MAAMrB,YAAY,GAAG,OAAO;AACjCC,EAAAA,IADiC;AAEjCE,EAAAA,UAFiC;AAGjCP,EAAAA,QAHiC;AAIjCX,EAAAA;AAJiC,CAAP,KAKtB;AACJ,QAAMsC,UAAU,GAAI,eAApB,CADI,CAEJ;AACA;AACA;;AACA,QAAMC,SAAS,GAAI,KAAID,UAAW,uBAAsBA,UAAW,GAAnE;AAEA,QAAME,oBAAoB,GAAG,MAAM,4CAAnC;AAEA,MAAIC,KAAK,GAAG,CACVtE,IAAI,CAACuE,IAAL,CAAU1B,IAAV,EAAiB,KAAjB,CADU,EAEV7C,IAAI,CAACuE,IAAL,CAAU1B,IAAV,EAAiB,QAAjB,EAA2B,WAA3B,CAFU,EAGV,GAAGE,UAAU,CAACE,GAAX,CAAeF,UAAU,IAAI/C,IAAI,CAACuE,IAAL,CAAUxB,UAAV,EAAuB,KAAvB,CAA7B,CAHO,EAIV,GAAGsB,oBAAoB,CAACpB,GAArB,CAAyBuB,MAAM,IAAIA,MAAM,CAACxE,IAA1C,CAJO,EAKVgE,MALU,CAKH,CAACC,MAAD,EAASQ,UAAT,KAAwB;AAC/BR,IAAAA,MAAM,CAACxB,IAAP,CACE,GAAGvC,IAAI,CAACwE,IAAL,CAAU1E,IAAI,CAACuE,IAAL,CAAUE,UAAV,EAAsBL,SAAtB,CAAV,EAA4C;AAC7CO,MAAAA,KAAK,EAAE;AADsC,KAA5C,CADL;AAKA,WAAOV,MAAP;AACD,GAZW,EAYT,EAZS,CAAZ;AAcAK,EAAAA,KAAK,GAAGA,KAAK,CAACM,MAAN,CAAaC,CAAC,IAAI,CAACA,CAAC,CAACC,KAAF,CAAQ,UAAR,CAAnB,CAAR;AAEAR,EAAAA,KAAK,GAAGA,KAAK,CAACrB,GAAN,CAAUhD,SAAV,CAAR,CAzBI,CA2BJ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAqE,EAAAA,KAAK,GAAGA,KAAK,CAACS,MAAN,CACNC,KAAK,CAACC,IAAN,CAAWhE,KAAK,CAACiB,QAAN,GAAiBgD,UAAjB,CAA4BC,IAA5B,EAAX,EAA+CC,CAAC,IAAInF,SAAS,CAACmF,CAAD,CAA7D,CADM,CAAR;AAIAd,EAAAA,KAAK,GAAGxE,CAAC,CAACuF,IAAF,CAAOf,KAAP,CAAR;AAEA,QAAMgB,MAAM,GAAG,IAAInE,UAAJ,CAAe;AAAEU,IAAAA,UAAU,EAAEA;AAAd,GAAf,CAAf;AAEA,SAAO,MAAMyD,MAAM,CAACC,UAAP,CAAkBjB,KAAlB,EAAyB9B,QAAzB,CAAb;AACD,CApDM;;;;AAsDA,MAAMc,cAAc,GAAG,CAAC;AAC7BvB,EAAAA,MAD6B;AAE7BY,EAAAA,aAF6B;AAG7BH,EAAAA,QAH6B;AAI7BX,EAAAA;AAJ6B,CAAD,KAKxB;AACJ,QAAM;AAAE2D,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAAoCC,iBAAiB,CACzD3D,MADyD,EAEzDY,aAFyD,EAGzDH,QAHyD,EAIzDX,UAJyD,CAA3D;AAOA,SAAO8D,kBAAkB,CAAC;AACxB5D,IAAAA,MADwB;AAExB0D,IAAAA,UAFwB;AAGxBD,IAAAA,iBAHwB;AAIxBhD,IAAAA,QAJwB;AAKxBX,IAAAA;AALwB,GAAD,CAAzB;AAOD,CApBM;;;AAsBP,MAAM+D,kBAAkB,GAAG,CACzBjF,0BADyB,EAEzBD,6BAFyB,EAGzBK,0BAHyB,EAIzBF,eAJyB,EAKzBD,2BALyB,EAMzBE,uBANyB,EAOzBE,8BAPyB,CAA3B;;AAUA,MAAM0E,iBAAiB,GAAG,CAAC3D,MAAD,EAASY,aAAT,EAAwBH,QAAxB,EAAkCX,UAAlC,KAAiD;AACzE,QAAM2D,iBAAiB,GAAG,IAAIK,GAAJ,EAA1B;AACA,QAAMJ,UAAU,GAAG,EAAnB;;AAEA,OAAK,MAAM;AACTK,IAAAA,QADS;AAETC,IAAAA,IAFS;AAGTC,IAAAA,WAHS;AAITC,IAAAA,IAJS;AAKTC,IAAAA,GALS;AAMTC,IAAAA,MANS;AAOTC,IAAAA;AAPS,GAAX,IAQKzD,aARL,EAQoB;AAClB,UAAMJ,MAAM,GAAGpC,QAAQ,CAAC4B,MAAD,EAASmE,GAAT,EAAcN,kBAAd,CAAvB;;AAEA,QAAIrD,MAAM,IAAIA,MAAM,CAACgB,MAArB,EAA6B;AAC3Bf,MAAAA,QAAQ,CACN,GAAGD,MAAM,CAACU,GAAP,CAAWoD,KAAK,IAAI;AACrB,cAAMC,QAAQ,GAAG;AACfhE,UAAAA,KAAK,EAAEZ,uBAAuB,CAACsE,WAAD,EAAcK,KAAK,CAACE,SAAN,CAAgB,CAAhB,CAAd;AADf,SAAjB;AAGA,eAAO9E,WAAW,CAAC;AAAE+E,UAAAA,OAAO,EAAEH,KAAK,CAACG,OAAjB;AAA0BV,UAAAA,QAA1B;AAAoCQ,UAAAA;AAApC,SAAD,CAAlB;AACD,OALE,CADG,CAAR;AASArF,MAAAA,KAAK,CAACwF,QAAN,CACEC,OAAO,CAACC,2BAAR,CAAoC;AAClCC,QAAAA,aAAa,EAAEd;AADmB,OAApC,CADF,EAV2B,CAe3B;;AACA;AACD;;AAEDI,IAAAA,GAAG,CAACW,WAAJ,CAAgBC,OAAhB,CAAyBC,GAAD,IAAc;AACpC,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAJ,CAASC,KAAtB;AACA,UAAIC,UAAU,GAAG,IAAjB;;AACA,UAAIH,GAAG,CAACI,IAAJ,KAAa1G,IAAI,CAAC2G,oBAAtB,EAA4C;AAC1C3B,QAAAA,UAAU,CAAChD,IAAX,CAAgBsE,GAAhB;AACD,OAFD,MAEO,IAAIA,GAAG,CAACI,IAAJ,KAAa1G,IAAI,CAAC4G,mBAAtB,EAA2C;AAChD;AACAH,QAAAA,UAAU,GAAG9G,KAAK,CAAC2G,GAAD,CAAlB;;AACA,YAAIvB,iBAAiB,CAAC8B,GAAlB,CAAsBN,IAAtB,CAAJ,EAAiC;AAC/B,gBAAMO,QAAQ,GAAG/B,iBAAiB,CAACgC,GAAlB,CAAsBR,IAAtB,CAAjB,CAD+B,CAE/B;AACA;;AACA,cAAIE,UAAU,KAAKK,QAAQ,CAACL,UAA5B,EAAwC;AACtC1E,YAAAA,QAAQ,CACNlB,sBAAsB,CAAC;AACrB0F,cAAAA,IADqB;AAErBS,cAAAA,cAAc,EAAE;AACdV,gBAAAA,GADc;AAEdjB,gBAAAA,QAFc;AAGdC,gBAAAA,IAHc;AAIdC,gBAAAA;AAJc,eAFK;AAQrB0B,cAAAA,eAAe,EAAEH;AARI,aAAD,CADhB,CAAR,CADsC,CAatC;AACA;;AACA/B,YAAAA,iBAAiB,CAACmC,MAAlB,CAAyBX,IAAzB;AACD;;AACD;AACD;AACF;;AAEDxB,MAAAA,iBAAiB,CAACoC,GAAlB,CAAsBZ,IAAtB,EAA4B;AAC1BA,QAAAA,IAD0B;AAE1BD,QAAAA,GAF0B;AAG1BjB,QAAAA,QAH0B;AAI1BC,QAAAA,IAAI,EAAEA,IAJoB;AAK1BC,QAAAA,WAL0B;AAM1BkB,QAAAA,UAN0B;AAO1Bf,QAAAA,MAP0B;AAQ1BC,QAAAA,aAR0B;AAS1ByB,QAAAA,UAAU,EAAEd,GAAG,CAACI,IAAJ,KAAa1G,IAAI,CAAC4G,mBATJ;AAU1BpB,QAAAA,IAAI,EAAEA;AAVoB,OAA5B;AAYD,KA7CD;AA8CD;;AAED,SAAO;AACLT,IAAAA,iBADK;AAELC,IAAAA;AAFK,GAAP;AAID,CAtFD;;AAwFA,MAAME,kBAAkB,GAAG,CAAC;AAC1B5D,EAAAA,MAD0B;AAE1B0D,EAAAA,UAF0B;AAG1BD,EAAAA,iBAH0B;AAI1BhD,EAAAA,QAJ0B;AAK1BX,EAAAA;AAL0B,CAAD,KAMrB;AACJ,QAAMiG,gBAAyB,GAAG,IAAIjC,GAAJ,EAAlC;AAEA,QAAMkC,uBAAuB,GAAG,IAAIlC,GAAJ,EAAhC;AAEA,QAAMmC,aAAa,GAAGhD,KAAK,CAACC,IAAN,CAAWO,iBAAiB,CAACyC,OAAlB,EAAX,EACnBrD,MADmB,CACZ,CAAC,CAAC9E,CAAD,EAAIiH,GAAJ,CAAD,KAAcA,GAAG,CAACc,UADN,EAEnB5E,GAFmB,CAEf,CAAC,CAAC+D,IAAD,EAAOlH,CAAP,CAAD,KAAekH,IAFA,CAAtB;;AAIA,OAAK,MAAMkB,SAAX,IAAwBzC,UAAxB,EAAoC;AAClC,UAAMuB,IAAI,GAAGkB,SAAS,CAAClB,IAAV,CAAeC,KAA5B;AACA,UAAMkB,kBAAkB,GAAG3C,iBAAiB,CAACgC,GAAlB,CAAsBR,IAAtB,CAA3B;AACA,UAAMlB,QAAQ,GAAGN,iBAAiB,CAACgC,GAAlB,CAAsBR,IAAtB,EAA4BlB,QAA7C;;AACA,QAAIgC,gBAAgB,CAACR,GAAjB,CAAqBxB,QAArB,CAAJ,EAAoC;AAClC,YAAMsC,UAAU,GAAGN,gBAAgB,CAACN,GAAjB,CAAqB1B,QAArB,CAAnB;AAEAtD,MAAAA,QAAQ,CACNnB,wBAAwB,CACtByE,QADsB,EAEtBqC,kBAAkB,CAACpB,GAFG,EAGtBqB,UAAU,IAAI5C,iBAAiB,CAACgC,GAAlB,CAAsBY,UAAU,CAACpB,IAAjC,EAAuCD,GAH/B,CADlB,CAAR;AAQA9F,MAAAA,KAAK,CAACwF,QAAN,CACEC,OAAO,CAACC,2BAAR,CAAoC;AAClCC,QAAAA,aAAa,EAAEd;AADmB,OAApC,CADF;AAKA;AACD;;AAED,UAAM;AACJuC,MAAAA,aADI;AAEJC,MAAAA;AAFI,QAGFC,mCAAmC,CACrCJ,kBADqC,EAErC3C,iBAFqC,EAGrCuC,uBAHqC,CAHvC;;AASA,QAAIO,gBAAgB,CAAC/E,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,WAAK,MAAM;AAAEuC,QAAAA,QAAF;AAAY0C,QAAAA,UAAZ;AAAwBC,QAAAA;AAAxB,OAAX,IAA6CH,gBAA7C,EAA+D;AAC7DrH,QAAAA,KAAK,CAACwF,QAAN,CACEC,OAAO,CAACC,2BAAR,CAAoC;AAClCC,UAAAA,aAAa,EAAEd;AADmB,SAApC,CADF;AAKAtD,QAAAA,QAAQ,CACNjB,oBAAoB,CAAC;AACnByG,UAAAA,aADmB;AAEnBlC,UAAAA,QAFmB;AAGnB0C,UAAAA,UAHmB;AAInBC,UAAAA;AAJmB,SAAD,CADd,CAAR;AAQD;;AACD;AACD;;AAED,QAAIC,QAAQ,GAAG;AACbvB,MAAAA,IAAI,EAAE1G,IAAI,CAACkI,QADE;AAEb9B,MAAAA,WAAW,EAAE7B,KAAK,CAACC,IAAN,CAAWoD,aAAa,CAACO,MAAd,EAAX,EACV3F,GADU,CACN+D,IAAI,IAAIxB,iBAAiB,CAACgC,GAAlB,CAAsBR,IAAtB,EAA4BD,GAD9B,EAEVhC,MAFU,CAEH,CAACmD,SAAD,CAFG;AAFA,KAAf;AAOA,UAAM3F,MAAM,GAAGpC,QAAQ,CAAC4B,MAAD,EAAS2G,QAAT,CAAvB;;AACA,QAAInG,MAAM,IAAIA,MAAM,CAACgB,MAArB,EAA6B;AAC3B,WAAK,MAAM8C,KAAX,IAAoB9D,MAApB,EAA4B;AAC1B,cAAM;AAAEsG,UAAAA,gBAAF;AAAoBrC,UAAAA;AAApB,YAAgCpF,YAAY,CAChDoE,iBADgD,EAEhDa,KAFgD,CAAlD;AAKA,cAAMP,QAAQ,GAAGqC,kBAAkB,CAACrC,QAApC;AACA7E,QAAAA,KAAK,CAACwF,QAAN,CACEC,OAAO,CAACC,2BAAR,CAAoC;AAClCC,UAAAA,aAAa,EAAEd,QADmB;AAElCO,UAAAA,KAAK,EAAEwC;AAF2B,SAApC,CADF;AAMA,cAAMvC,QAAQ,GAAG5E,uBAAuB,CACtCyG,kBAAkB,CAACnC,WADmB,EAEtCK,KAAK,CAACE,SAAN,CAAgB,CAAhB,CAFsC,CAAxC;AAIA/D,QAAAA,QAAQ,CACNf,WAAW,CAAC;AACV6E,UAAAA,QAAQ,EAAE;AACRhE,YAAAA,KAAK,EAAEgE,QADC;AAERvC,YAAAA,GAAG,EAAEuC;AAFG,WADA;AAKVE,UAAAA,OALU;AAMVV,UAAAA;AANU,SAAD,CADL,CAAR;AAUD;;AACD;AACD;;AAED4C,IAAAA,QAAQ,GAAGI,cAAc,CAACJ,QAAD,EAAW3G,MAAX,CAAzB;AAEA,UAAMgH,KAAK,GAAG;AACZ/B,MAAAA,IADY;AAEZjB,MAAAA,IAAI,EAAE3F,KAAK,CAACsI,QAAD,CAFC;AAGZM,MAAAA,YAAY,EAAEb,kBAAkB,CAACpC,IAHrB;AAIZ/F,MAAAA,IAAI,EAAE8F,QAJM;AAKZK,MAAAA,MAAM,EAAEgC,kBAAkB,CAAChC,MALf;AAMZC,MAAAA,aAAa,EAAE+B,kBAAkB,CAAC/B,aANtB;AAOZH,MAAAA,IAAI,EAAEkC,kBAAkB,CAAClC;AAPb,KAAd;;AAUA,QAAI8C,KAAK,CAAC3C,aAAV,EAAyB;AACvB2C,MAAAA,KAAK,CAAC1G,EAAN,GACG,MAAD,GACAvC,CAAC,CAACmJ,SAAF,CACG,GAAEjJ,IAAI,CAACkJ,QAAL,CAAcjI,KAAK,CAACiB,QAAN,GAAiBJ,OAAjB,CAAyBgB,SAAvC,EAAkDgD,QAAlD,CAA4D,EADjE,CAFF;AAKD;;AAED,QACEiD,KAAK,CAAC5C,MAAN,IACAzC,OAAO,CAACC,GAAR,CAAYwF,QAAZ,KAA0B,YAD1B,IAEA,OAAOpJ,OAAO,CAAE,OAAF,CAAP,CAAiBqJ,UAAxB,KAAwC,UAH1C,EAIE;AACA5H,MAAAA,MAAM,CAACiC,YAAP,CACG,qEAAD,GACG,qFAFL;AAID;;AAEDqE,IAAAA,gBAAgB,CAACF,GAAjB,CAAqB9B,QAArB,EAA+BiD,KAA/B;AACD;;AAED,SAAOjB,gBAAP;AACD,CA7ID;;AA+IA,MAAMS,mCAAmC,GAAG,CAC1CC,UAD0C,EAE1ChD,iBAF0C,EAG1CuC,uBAH0C,EAI1CsB,aAAa,GAAG,EAJ0B,KAKvC;AACH,QAAM;AAAEtC,IAAAA,GAAF;AAAOC,IAAAA,IAAP;AAAaa,IAAAA,UAAb;AAAyB/B,IAAAA;AAAzB,MAAsC0C,UAA5C;AACA,QAAMc,mBAAmB,GAAGvB,uBAAuB,CAACP,GAAxB,CAA4BR,IAA5B,CAA5B;;AACA,MAAIsC,mBAAJ,EAAyB;AACvB,WAAO;AAAEjB,MAAAA,aAAa,EAAEiB,mBAAjB;AAAsChB,MAAAA,gBAAgB,EAAE;AAAxD,KAAP;AACD,GAFD,MAEO;AACL,UAAMD,aAAa,GAAG,IAAIkB,GAAJ,EAAtB;AACA,UAAMjB,gBAAgB,GAAG,EAAzB;AACAjI,IAAAA,KAAK,CAAC0G,GAAD,EAAM;AACT,OAACtG,IAAI,CAAC+I,eAAN,GAAwBf,IAAI,IAAI;AAC9B,cAAMzB,IAAI,GAAGyB,IAAI,CAACzB,IAAL,CAAUC,KAAvB;AACA,cAAMwC,kBAAkB,GAAGjE,iBAAiB,CAACgC,GAAlB,CAAsBR,IAAtB,CAA3B;;AACA,YAAIyC,kBAAJ,EAAwB;AACtB,cAAIJ,aAAa,CAACK,QAAd,CAAuB1C,IAAvB,CAAJ,EAAkC;AAChC;AACA;AACA;AACD;;AACDqC,UAAAA,aAAa,CAAC5G,IAAd,CAAmBuE,IAAnB;AACAqB,UAAAA,aAAa,CAACsB,GAAd,CAAkB3C,IAAlB;AACA,gBAAM;AACJqB,YAAAA,aAAa,EAAEuB,wBADX;AAEJtB,YAAAA,gBAAgB,EAAEuB;AAFd,cAGFtB,mCAAmC,CACrCkB,kBADqC,EAErCjE,iBAFqC,EAGrCuC,uBAHqC,EAIrCsB,aAJqC,CAHvC;AASAA,UAAAA,aAAa,CAACS,GAAd;AACAF,UAAAA,wBAAwB,CAAC9C,OAAzB,CAAiCiD,YAAY,IAC3C1B,aAAa,CAACsB,GAAd,CAAkBI,YAAlB,CADF;AAGAzB,UAAAA,gBAAgB,CAAC7F,IAAjB,CAAsB,GAAGoH,2BAAzB;AACD,SAtBD,MAsBO;AACLvB,UAAAA,gBAAgB,CAAC7F,IAAjB,CAAsB;AACpBqD,YAAAA,QADoB;AAEpB0C,YAAAA,UAFoB;AAGpBC,YAAAA;AAHoB,WAAtB;AAKD;AACF;AAjCQ,KAAN,CAAL;;AAmCA,QAAIZ,UAAJ,EAAgB;AACdE,MAAAA,uBAAuB,CAACH,GAAxB,CAA4BZ,IAA5B,EAAkCqB,aAAlC;AACD;;AACD,WAAO;AAAEA,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAP;AACD;AACF,CArDD;AAuDA;;;;;;;;AAMA,MAAMQ,cAAc,GAAG,CAACJ,QAAD,EAAW3G,MAAX,KAAsB;AAC3C,QAAMiI,QAAQ,GAAG,IAAIzJ,QAAJ,CAAawB,MAAb,CAAjB;AACA,QAAMkI,YAAY,GAAG,EAArB;AAEA,QAAMC,WAAW,GAAG5J,iBAAiB,CAAC0J,QAAD,EAAW;AAC9CG,IAAAA,KAAK,EAAE;AACL,OAAC1J,IAAI,CAAC2J,aAAN,GAAsB3B,IAAI,IAAI;AAC5B;AACA;AACAwB,QAAAA,YAAY,CAACxH,IAAb,CAAkB;AAAE4H,UAAAA,WAAW,EAAE;AAAf,SAAlB;AACD,OALI;AAML,OAAC5J,IAAI,CAAC6J,KAAN,GAAc7B,IAAI,IAAI;AAAA;;AACpB;AACA;AACA,cAAM8B,OAAO,GAAGN,YAAY,CAACA,YAAY,CAAC1G,MAAb,GAAsB,CAAvB,CAA5B;;AACA,YACEkF,IAAI,CAACzB,IAAL,CAAUC,KAAV,KAAqB,YAArB,IACA,CAAAwB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,2BAAAA,IAAI,CAAE+B,KAAN,4DAAavD,KAAb,MAAwB,YAF1B,EAGE;AACAsD,UAAAA,OAAO,CAACF,WAAR,GAAsB,IAAtB;AACD;AACF;AAhBI,KADuC;AAmB9CI,IAAAA,KAAK,EAAE;AACL,OAAChK,IAAI,CAAC2J,aAAN,GAAsB3B,IAAI,IAAI;AAC5B;AACA,cAAM8B,OAAO,GAAGN,YAAY,CAACH,GAAb,EAAhB;AACA,cAAMY,UAAU,GAAGV,QAAQ,CAACW,aAAT,EAAnB;AACA,cAAMC,WAAW,GAAG,EAApB,CAJ4B,CAM5B;;AACA,YAAI,CAACL,OAAO,CAACF,WAAT,IAAwB7J,cAAc,CAACkK,UAAD,CAA1C,EAAwD;AACtDE,UAAAA,WAAW,CAACnI,IAAZ,CAAiB;AACf0E,YAAAA,IAAI,EAAE1G,IAAI,CAAC6J,KADI;AAEftD,YAAAA,IAAI,EAAE;AAAEG,cAAAA,IAAI,EAAE1G,IAAI,CAACoK,IAAb;AAAmB5D,cAAAA,KAAK,EAAG;AAA3B;AAFS,WAAjB;AAID;;AACD,eAAO2D,WAAW,CAACrH,MAAZ,GAAqB,CAArB,GACH,EAAE,GAAGkF,IAAL;AAAWqC,UAAAA,UAAU,EAAE,CAAC,GAAGF,WAAJ,EAAiB,GAAGnC,IAAI,CAACqC,UAAzB;AAAvB,SADG,GAEHC,SAFJ;AAGD;AAjBI;AAnBuC,GAAX,CAArC;AAwCA,SAAO1K,KAAK,CAACqI,QAAD,EAAWwB,WAAX,CAAZ;AACD,CA7CD","sourcesContent":["// @flow\n\n/** Query compiler extracts queries and fragments from all files, validates them\n * and then collocates them with fragments they require. This way fragments\n * have global scope and can be used in any other query or fragment.\n */\n\nconst _ = require(`lodash`)\n\nconst path = require(`path`)\nconst normalize = require(`normalize-path`)\nconst glob = require(`glob`)\n\nconst {\n  validate,\n  print,\n  visit,\n  visitWithTypeInfo,\n  TypeInfo,\n  isAbstractType,\n  Kind,\n  FragmentsOnCompositeTypesRule,\n  LoneAnonymousOperationRule,\n  PossibleFragmentSpreadsRule,\n  ScalarLeafsRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule,\n} = require(`graphql`)\n\nimport { getGatsbyDependents } from \"../utils/gatsby-dependents\"\nconst { store } = require(`../redux`)\nimport * as actions from \"../redux/actions/internal\"\nimport { websocketManager } from \"../utils/websocket-manager\"\nconst { default: FileParser } = require(`./file-parser`)\nconst {\n  graphqlError,\n  multipleRootQueriesError,\n  duplicateFragmentError,\n  unknownFragmentError,\n} = require(`./graphql-errors`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst {\n  default: errorParser,\n  locInGraphQlToLocInFile,\n} = require(`./error-parser`)\n\nconst overlayErrorID = `graphql-compiler`\n\nexport default async function compile({ parentSpan } = {}): Promise<\n  Map<string, RootQuery>\n> {\n  // TODO: swap plugins to themes\n  const { program, schema, themes, flattenedPlugins } = store.getState()\n\n  const activity = report.activityTimer(`extract queries from components`, {\n    parentSpan,\n    id: `query-extraction`,\n  })\n  activity.start()\n\n  const errors = []\n  const addError = errors.push.bind(errors)\n\n  const parsedQueries = await parseQueries({\n    base: program.directory,\n    additional: resolveThemes(\n      themes.themes\n        ? themes.themes\n        : flattenedPlugins.map(plugin => {\n            return {\n              themeDir: plugin.pluginFilepath,\n            }\n          })\n    ),\n    addError,\n    parentSpan,\n  })\n\n  const queries = processQueries({\n    schema,\n    parsedQueries,\n    addError,\n    parentSpan,\n  })\n\n  if (errors.length !== 0) {\n    const structuredErrors = activity.panicOnBuild(errors)\n    if (process.env.gatsby_executing_command === `develop`) {\n      websocketManager.emitError(overlayErrorID, structuredErrors)\n    }\n  } else {\n    if (process.env.gatsby_executing_command === `develop`) {\n      // emitError with `null` as 2nd param to clear browser error overlay\n      websocketManager.emitError(overlayErrorID, null)\n    }\n  }\n  activity.end()\n\n  return queries\n}\n\nexport const resolveThemes = (themes = []) =>\n  themes.reduce((merged, theme) => {\n    merged.push(theme.themeDir)\n    return merged\n  }, [])\n\nexport const parseQueries = async ({\n  base,\n  additional,\n  addError,\n  parentSpan,\n}) => {\n  const filesRegex = `*.+(t|j)s?(x)`\n  // Pattern that will be appended to searched directories.\n  // It will match any .js, .jsx, .ts, and .tsx files, that are not\n  // inside <searched_directory>/node_modules.\n  const pathRegex = `/{${filesRegex},!(node_modules)/**/${filesRegex}}`\n\n  const modulesThatUseGatsby = await getGatsbyDependents()\n\n  let files = [\n    path.join(base, `src`),\n    path.join(base, `.cache`, `fragments`),\n    ...additional.map(additional => path.join(additional, `src`)),\n    ...modulesThatUseGatsby.map(module => module.path),\n  ].reduce((merged, folderPath) => {\n    merged.push(\n      ...glob.sync(path.join(folderPath, pathRegex), {\n        nodir: true,\n      })\n    )\n    return merged\n  }, [])\n\n  files = files.filter(d => !d.match(/\\.d\\.ts$/))\n\n  files = files.map(normalize)\n\n  // We should be able to remove the following and preliminary tests do suggest\n  // that they aren't needed anymore since we transpile node_modules now\n  // However, there could be some cases (where a page is outside of src for example)\n  // that warrant keeping this and removing later once we have more confidence (and tests)\n\n  // Ensure all page components added as they're not necessarily in the\n  // pages directory e.g. a plugin could add a page component. Plugins\n  // *should* copy their components (if they add a query) to .cache so that\n  // our babel plugin to remove the query on building is active.\n  // Otherwise the component will throw an error in the browser of\n  // \"graphql is not defined\".\n  files = files.concat(\n    Array.from(store.getState().components.keys(), c => normalize(c))\n  )\n\n  files = _.uniq(files)\n\n  const parser = new FileParser({ parentSpan: parentSpan })\n\n  return await parser.parseFiles(files, addError)\n}\n\nexport const processQueries = ({\n  schema,\n  parsedQueries,\n  addError,\n  parentSpan,\n}) => {\n  const { definitionsByName, operations } = extractOperations(\n    schema,\n    parsedQueries,\n    addError,\n    parentSpan\n  )\n\n  return processDefinitions({\n    schema,\n    operations,\n    definitionsByName,\n    addError,\n    parentSpan,\n  })\n}\n\nconst preValidationRules = [\n  LoneAnonymousOperationRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  PossibleFragmentSpreadsRule,\n  ValuesOfCorrectTypeRule,\n  VariablesInAllowedPositionRule,\n]\n\nconst extractOperations = (schema, parsedQueries, addError, parentSpan) => {\n  const definitionsByName = new Map()\n  const operations = []\n\n  for (const {\n    filePath,\n    text,\n    templateLoc,\n    hash,\n    doc,\n    isHook,\n    isStaticQuery,\n  } of parsedQueries) {\n    const errors = validate(schema, doc, preValidationRules)\n\n    if (errors && errors.length) {\n      addError(\n        ...errors.map(error => {\n          const location = {\n            start: locInGraphQlToLocInFile(templateLoc, error.locations[0]),\n          }\n          return errorParser({ message: error.message, filePath, location })\n        })\n      )\n\n      store.dispatch(\n        actions.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n      )\n      // Something is super wrong with this document, so we report it and skip\n      continue\n    }\n\n    doc.definitions.forEach((def: any) => {\n      const name = def.name.value\n      let printedAst = null\n      if (def.kind === Kind.OPERATION_DEFINITION) {\n        operations.push(def)\n      } else if (def.kind === Kind.FRAGMENT_DEFINITION) {\n        // Check if we already registered a fragment with this name\n        printedAst = print(def)\n        if (definitionsByName.has(name)) {\n          const otherDef = definitionsByName.get(name)\n          // If it's not an accidental duplicate fragment, but is a different\n          // one - we report an error\n          if (printedAst !== otherDef.printedAst) {\n            addError(\n              duplicateFragmentError({\n                name,\n                leftDefinition: {\n                  def,\n                  filePath,\n                  text,\n                  templateLoc,\n                },\n                rightDefinition: otherDef,\n              })\n            )\n            // We won't know which one to use, so it's better to fail both of\n            // them.\n            definitionsByName.delete(name)\n          }\n          return\n        }\n      }\n\n      definitionsByName.set(name, {\n        name,\n        def,\n        filePath,\n        text: text,\n        templateLoc,\n        printedAst,\n        isHook,\n        isStaticQuery,\n        isFragment: def.kind === Kind.FRAGMENT_DEFINITION,\n        hash: hash,\n      })\n    })\n  }\n\n  return {\n    definitionsByName,\n    operations,\n  }\n}\n\nconst processDefinitions = ({\n  schema,\n  operations,\n  definitionsByName,\n  addError,\n  parentSpan,\n}) => {\n  const processedQueries: Queries = new Map()\n\n  const fragmentsUsedByFragment = new Map()\n\n  const fragmentNames = Array.from(definitionsByName.entries())\n    .filter(([_, def]) => def.isFragment)\n    .map(([name, _]) => name)\n\n  for (const operation of operations) {\n    const name = operation.name.value\n    const originalDefinition = definitionsByName.get(name)\n    const filePath = definitionsByName.get(name).filePath\n    if (processedQueries.has(filePath)) {\n      const otherQuery = processedQueries.get(filePath)\n\n      addError(\n        multipleRootQueriesError(\n          filePath,\n          originalDefinition.def,\n          otherQuery && definitionsByName.get(otherQuery.name).def\n        )\n      )\n\n      store.dispatch(\n        actions.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n      )\n      continue\n    }\n\n    const {\n      usedFragments,\n      missingFragments,\n    } = determineUsedFragmentsForDefinition(\n      originalDefinition,\n      definitionsByName,\n      fragmentsUsedByFragment\n    )\n\n    if (missingFragments.length > 0) {\n      for (const { filePath, definition, node } of missingFragments) {\n        store.dispatch(\n          actions.queryExtractionGraphQLError({\n            componentPath: filePath,\n          })\n        )\n        addError(\n          unknownFragmentError({\n            fragmentNames,\n            filePath,\n            definition,\n            node,\n          })\n        )\n      }\n      continue\n    }\n\n    let document = {\n      kind: Kind.DOCUMENT,\n      definitions: Array.from(usedFragments.values())\n        .map(name => definitionsByName.get(name).def)\n        .concat([operation]),\n    }\n\n    const errors = validate(schema, document)\n    if (errors && errors.length) {\n      for (const error of errors) {\n        const { formattedMessage, message } = graphqlError(\n          definitionsByName,\n          error\n        )\n\n        const filePath = originalDefinition.filePath\n        store.dispatch(\n          actions.queryExtractionGraphQLError({\n            componentPath: filePath,\n            error: formattedMessage,\n          })\n        )\n        const location = locInGraphQlToLocInFile(\n          originalDefinition.templateLoc,\n          error.locations[0]\n        )\n        addError(\n          errorParser({\n            location: {\n              start: location,\n              end: location,\n            },\n            message,\n            filePath,\n          })\n        )\n      }\n      continue\n    }\n\n    document = addExtraFields(document, schema)\n\n    const query = {\n      name,\n      text: print(document),\n      originalText: originalDefinition.text,\n      path: filePath,\n      isHook: originalDefinition.isHook,\n      isStaticQuery: originalDefinition.isStaticQuery,\n      hash: originalDefinition.hash,\n    }\n\n    if (query.isStaticQuery) {\n      query.id =\n        `sq--` +\n        _.kebabCase(\n          `${path.relative(store.getState().program.directory, filePath)}`\n        )\n    }\n\n    if (\n      query.isHook &&\n      process.env.NODE_ENV === `production` &&\n      typeof require(`react`).useContext !== `function`\n    ) {\n      report.panicOnBuild(\n        `You're likely using a version of React that doesn't support Hooks\\n` +\n          `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n      )\n    }\n\n    processedQueries.set(filePath, query)\n  }\n\n  return processedQueries\n}\n\nconst determineUsedFragmentsForDefinition = (\n  definition,\n  definitionsByName,\n  fragmentsUsedByFragment,\n  traversalPath = []\n) => {\n  const { def, name, isFragment, filePath } = definition\n  const cachedUsedFragments = fragmentsUsedByFragment.get(name)\n  if (cachedUsedFragments) {\n    return { usedFragments: cachedUsedFragments, missingFragments: [] }\n  } else {\n    const usedFragments = new Set()\n    const missingFragments = []\n    visit(def, {\n      [Kind.FRAGMENT_SPREAD]: node => {\n        const name = node.name.value\n        const fragmentDefinition = definitionsByName.get(name)\n        if (fragmentDefinition) {\n          if (traversalPath.includes(name)) {\n            // Already visited this fragment during current traversal.\n            //   Visiting it again will cause a stack overflow\n            return\n          }\n          traversalPath.push(name)\n          usedFragments.add(name)\n          const {\n            usedFragments: usedFragmentsForFragment,\n            missingFragments: missingFragmentsForFragment,\n          } = determineUsedFragmentsForDefinition(\n            fragmentDefinition,\n            definitionsByName,\n            fragmentsUsedByFragment,\n            traversalPath\n          )\n          traversalPath.pop()\n          usedFragmentsForFragment.forEach(fragmentName =>\n            usedFragments.add(fragmentName)\n          )\n          missingFragments.push(...missingFragmentsForFragment)\n        } else {\n          missingFragments.push({\n            filePath,\n            definition,\n            node,\n          })\n        }\n      },\n    })\n    if (isFragment) {\n      fragmentsUsedByFragment.set(name, usedFragments)\n    }\n    return { usedFragments, missingFragments }\n  }\n}\n\n/**\n * Automatically add:\n *   `__typename` field to abstract types (unions, interfaces)\n *   `id` field to all object/interface types having an id\n * TODO: Remove this in v3.0 as it is a legacy from Relay compiler\n */\nconst addExtraFields = (document, schema) => {\n  const typeInfo = new TypeInfo(schema)\n  const contextStack = []\n\n  const transformer = visitWithTypeInfo(typeInfo, {\n    enter: {\n      [Kind.SELECTION_SET]: node => {\n        // Entering selection set:\n        //   selection sets can be nested, so keeping their metadata stacked\n        contextStack.push({ hasTypename: false })\n      },\n      [Kind.FIELD]: node => {\n        // Entering a field of the current selection-set:\n        //   mark which fields already exist in this selection set to avoid duplicates\n        const context = contextStack[contextStack.length - 1]\n        if (\n          node.name.value === `__typename` ||\n          node?.alias?.value === `__typename`\n        ) {\n          context.hasTypename = true\n        }\n      },\n    },\n    leave: {\n      [Kind.SELECTION_SET]: node => {\n        // Modify the selection-set AST on leave (add extra fields unless they already exist)\n        const context = contextStack.pop()\n        const parentType = typeInfo.getParentType()\n        const extraFields = []\n\n        // Adding __typename to unions and interfaces (if required)\n        if (!context.hasTypename && isAbstractType(parentType)) {\n          extraFields.push({\n            kind: Kind.FIELD,\n            name: { kind: Kind.NAME, value: `__typename` },\n          })\n        }\n        return extraFields.length > 0\n          ? { ...node, selections: [...extraFields, ...node.selections] }\n          : undefined\n      },\n    },\n  })\n\n  return visit(document, transformer)\n}\n"],"file":"query-compiler.js"}