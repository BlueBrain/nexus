{"version":3,"sources":["../../src/query/index.js"],"names":["_","require","Queue","store","emitter","boundActionCreators","report","queryQueue","GraphQLRunner","pageDataUtil","seenIdsWithoutDataDependencies","Set","queuedDirtyActions","extractedQueryIds","on","action","delete","payload","path","push","popExtractedQueries","queries","clear","findIdsWithoutDataDependencies","state","allTrackedIds","boundAddToTrackedIds","add","bind","componentDataDependencies","nodes","forEach","dependenciesOnNode","connections","dependenciesOnConnection","notTrackedIds","Array","from","pages","values","p","staticQueryComponents","map","c","id","filter","x","has","notTrackedId","popNodeQueries","actions","uniq","a","uniqDirties","reduce","dirtyIds","node","internal","type","get","n","deleteComponentsDependencies","popNodeAndDepQueries","nodeQueries","noDepQueries","calcDirtyQueryIds","union","calcInitialDirtyQueryIds","nodeAndNoDepQueries","extractedQueriesThatNeedRunning","intersection","groupQueryIds","queryIds","grouped","groupBy","slice","staticQueryIds","static","pageQueryIds","page","processQueries","queryJobs","activity","graphqlRunner","graphqlTracing","queue","createAppropriateQueue","processBatch","createStaticQueryJob","queryId","component","hash","query","componentPath","context","createQueryRunningActivity","queryJobsCount","parentSpan","createProgress","start","done","completeActivity","tick","processStaticQueries","getState","processPageQueries","createPageQueryJob","components","isPage","listenerQueue","runQueuedQueries","startListeningToDevelopQueue","developQueue","createDevelopQueue","callback","length","onFinish","arg","enqueueFlush","then","catch","pendingActivity","eventType","event","enqueueExtractedQueryId","pathname","getPagesForComponent","enqueueExtractedPageComponent","module","exports"],"mappings":";;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAE,cAAF,CAArB,C,CACA;;;AACA,MAAM;AAAEE,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAqBH,OAAO,CAAE,UAAF,CAAlC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAA0BJ,OAAO,CAAE,kBAAF,CAAvC;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAE,SAAF,CAA1B;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAoBP,OAAO,CAAE,kBAAF,CAAjC;;AACA,MAAMQ,YAAY,GAAGR,OAAO,CAAE,oBAAF,CAA5B;;AAEA,MAAMS,8BAA8B,GAAG,IAAIC,GAAJ,EAAvC;AACA,IAAIC,kBAAkB,GAAG,EAAzB;AACA,MAAMC,iBAAiB,GAAG,IAAIF,GAAJ,EAA1B,C,CAEA;AACA;;AACAP,OAAO,CAACU,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClCL,EAAAA,8BAA8B,CAACM,MAA/B,CAAsCD,MAAM,CAACE,OAAP,CAAeC,IAArD;AACD,CAFD;AAIAd,OAAO,CAACU,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClCH,EAAAA,kBAAkB,CAACO,IAAnB,CAAwBJ,MAAxB;AACD,CAFD;AAIAX,OAAO,CAACU,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClCH,EAAAA,kBAAkB,CAACO,IAAnB,CAAwB;AAAEF,IAAAA,OAAO,EAAEF,MAAM,CAACE;AAAlB,GAAxB;AACD,CAFD,E,CAIA;AACA;;AAEA,MAAMG,mBAAmB,GAAG,MAAM;AAChC,QAAMC,OAAO,GAAG,CAAC,GAAGR,iBAAJ,CAAhB;AACAA,EAAAA,iBAAiB,CAACS,KAAlB;AACA,SAAOD,OAAP;AACD,CAJD;;AAMA,MAAME,8BAA8B,GAAGC,KAAK,IAAI;AAC9C,QAAMC,aAAa,GAAG,IAAId,GAAJ,EAAtB;AACA,QAAMe,oBAAoB,GAAGD,aAAa,CAACE,GAAd,CAAkBC,IAAlB,CAAuBH,aAAvB,CAA7B;AACAD,EAAAA,KAAK,CAACK,yBAAN,CAAgCC,KAAhC,CAAsCC,OAAtC,CAA8CC,kBAAkB,IAAI;AAClEA,IAAAA,kBAAkB,CAACD,OAAnB,CAA2BL,oBAA3B;AACD,GAFD;AAGAF,EAAAA,KAAK,CAACK,yBAAN,CAAgCI,WAAhC,CAA4CF,OAA5C,CACEG,wBAAwB,IAAI;AAC1BA,IAAAA,wBAAwB,CAACH,OAAzB,CAAiCL,oBAAjC;AACD,GAHH,EAN8C,CAY9C;AACA;;AACA,QAAMS,aAAa,GAAG,IAAIxB,GAAJ,CACpB,CACE,GAAGyB,KAAK,CAACC,IAAN,CAAWb,KAAK,CAACc,KAAN,CAAYC,MAAZ,EAAX,EAAiCC,CAAC,IAAIA,CAAC,CAACtB,IAAxC,CADL,EAEE,GAAG,CAAC,GAAGM,KAAK,CAACiB,qBAAN,CAA4BF,MAA5B,EAAJ,EAA0CG,GAA1C,CAA8CC,CAAC,IAAIA,CAAC,CAACC,EAArD,CAFL,EAGEC,MAHF,CAIEC,CAAC,IAAI,CAACrB,aAAa,CAACsB,GAAd,CAAkBD,CAAlB,CAAD,IAAyB,CAACpC,8BAA8B,CAACqC,GAA/B,CAAmCD,CAAnC,CAJjC,CADoB,CAAtB,CAd8C,CAuB9C;AACA;;AACA,OAAK,MAAME,YAAX,IAA2Bb,aAA3B,EAA0C;AACxCzB,IAAAA,8BAA8B,CAACiB,GAA/B,CAAmCqB,YAAnC;AACD;;AAED,SAAOb,aAAP;AACD,CA9BD;;AAgCA,MAAMc,cAAc,GAAGzB,KAAK,IAAI;AAC9B,QAAM0B,OAAO,GAAGlD,CAAC,CAACmD,IAAF,CAAOvC,kBAAP,EAA2BwC,CAAC,IAAIA,CAAC,CAACnC,OAAF,CAAU2B,EAA1C,CAAhB;;AACA,QAAMS,WAAW,GAAGH,OAAO,CAACI,MAAR,CAAe,CAACC,QAAD,EAAWxC,MAAX,KAAsB;AACvD,UAAMyC,IAAI,GAAGzC,MAAM,CAACE,OAApB;AAEA,QAAI,CAACuC,IAAD,IAAS,CAACA,IAAI,CAACZ,EAAf,IAAqB,CAACY,IAAI,CAACC,QAAL,CAAcC,IAAxC,EAA8C,OAAOH,QAAP,CAHS,CAKvD;;AACA,QAAI/B,KAAK,CAACK,yBAAN,CAAgCC,KAAhC,CAAsCiB,GAAtC,CAA0CS,IAAI,CAACZ,EAA/C,CAAJ,EAAwD;AACtDpB,MAAAA,KAAK,CAACK,yBAAN,CAAgCC,KAAhC,CAAsC6B,GAAtC,CAA0CH,IAAI,CAACZ,EAA/C,EAAmDb,OAAnD,CAA2D6B,CAAC,IAAI;AAC9D,YAAIA,CAAJ,EAAO;AACLL,UAAAA,QAAQ,CAAC5B,GAAT,CAAaiC,CAAb;AACD;AACF,OAJD;AAKD,KAZsD,CAcvD;;;AACA,QAAIpC,KAAK,CAACK,yBAAN,CAAgCI,WAAhC,CAA4Cc,GAA5C,CAAgDS,IAAI,CAACC,QAAL,CAAcC,IAA9D,CAAJ,EAAyE;AACvElC,MAAAA,KAAK,CAACK,yBAAN,CAAgCI,WAAhC,CACG0B,GADH,CACOH,IAAI,CAACC,QAAL,CAAcC,IADrB,EAEG3B,OAFH,CAEW6B,CAAC,IAAI;AACZ,YAAIA,CAAJ,EAAO;AACLL,UAAAA,QAAQ,CAAC5B,GAAT,CAAaiC,CAAb;AACD;AACF,OANH;AAOD;;AAED,WAAOL,QAAP;AACD,GA1BmB,EA0BjB,IAAI5C,GAAJ,EA1BiB,CAApB;AA4BAN,EAAAA,mBAAmB,CAACwD,4BAApB,CAAiD,CAAC,GAAGR,WAAJ,CAAjD;AAEAzC,EAAAA,kBAAkB,GAAG,EAArB;AACA,SAAOyC,WAAP;AACD,CAlCD;;AAoCA,MAAMS,oBAAoB,GAAGtC,KAAK,IAAI;AACpC,QAAMuC,WAAW,GAAGd,cAAc,CAACzB,KAAD,CAAlC;AAEA,QAAMwC,YAAY,GAAGzC,8BAA8B,CAACC,KAAD,CAAnD;AAEA,SAAOxB,CAAC,CAACmD,IAAF,CAAO,CAAC,GAAGY,WAAJ,EAAiB,GAAGC,YAApB,CAAP,CAAP;AACD,CAND;AAQA;;;;;;;;;;;;;;;;AAeA,MAAMC,iBAAiB,GAAGzC,KAAK,IAC7BxB,CAAC,CAACkE,KAAF,CAAQJ,oBAAoB,CAACtC,KAAD,CAA5B,EAAqCJ,mBAAmB,EAAxD,CADF;AAGA;;;;;;;;;;AAQA,MAAM+C,wBAAwB,GAAG3C,KAAK,IAAI;AACxC,QAAM4C,mBAAmB,GAAGN,oBAAoB,CAACtC,KAAD,CAAhD;;AAEA,QAAM6C,+BAA+B,GAAGrE,CAAC,CAACsE,YAAF,CACtClD,mBAAmB,EADmB,EAEtCgD,mBAFsC,CAAxC;;AAIA,SAAOpE,CAAC,CAACkE,KAAF,CAAQG,+BAAR,EAAyCD,mBAAzC,CAAP;AACD,CARD;AAUA;;;;;AAGA,MAAMG,aAAa,GAAGC,QAAQ,IAAI;AAChC,QAAMC,OAAO,GAAGzE,CAAC,CAAC0E,OAAF,CAAUF,QAAV,EAAoBhC,CAAC,IACnCA,CAAC,CAACmC,KAAF,CAAQ,CAAR,EAAW,CAAX,MAAmB,MAAnB,GAA4B,QAA5B,GAAuC,MADzB,CAAhB;;AAGA,SAAO;AACLC,IAAAA,cAAc,EAAEH,OAAO,CAACI,MAAR,IAAkB,EAD7B;AAELC,IAAAA,YAAY,EAAEL,OAAO,CAACM,IAAR,IAAgB;AAFzB,GAAP;AAID,CARD;;AAUA,MAAMC,cAAc,GAAG,OACrBC,SADqB,EAErB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,aAAZ;AAA2BC,EAAAA;AAA3B,CAFqB,KAGlB;AACH,QAAMC,KAAK,GAAG9E,UAAU,CAAC+E,sBAAX,CAAkCH,aAAlC,EAAiD;AAC7DC,IAAAA;AAD6D,GAAjD,CAAd;AAGA,SAAO7E,UAAU,CAACgF,YAAX,CAAwBF,KAAxB,EAA+BJ,SAA/B,EAA0CC,QAA1C,CAAP;AACD,CARD;;AAUA,MAAMM,oBAAoB,GAAG,CAAChE,KAAD,EAAQiE,OAAR,KAAoB;AAC/C,QAAMC,SAAS,GAAGlE,KAAK,CAACiB,qBAAN,CAA4BkB,GAA5B,CAAgC8B,OAAhC,CAAlB;AACA,QAAM;AAAEE,IAAAA,IAAF;AAAQ/C,IAAAA,EAAR;AAAYgD,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,MAAqCH,SAA3C;AACA,SAAO;AACL9C,IAAAA,EAAE,EAAE+C,IADC;AAELA,IAAAA,IAFK;AAGLC,IAAAA,KAHK;AAILC,IAAAA,aAJK;AAKLC,IAAAA,OAAO,EAAE;AAAE5E,MAAAA,IAAI,EAAE0B;AAAR;AALJ,GAAP;AAOD,CAVD;AAYA;;;;;;;AAKA,MAAMmD,0BAA0B,GAAG,CAACC,cAAD,EAAiBC,UAAjB,KAAgC;AACjE,MAAID,cAAJ,EAAoB;AAClB,UAAMd,QAAQ,GAAG5E,MAAM,CAAC4F,cAAP,CAAuB,aAAvB,EAAqCF,cAArC,EAAqD,CAArD,EAAwD;AACvEpD,MAAAA,EAAE,EAAG,eADkE;AAEvEqD,MAAAA;AAFuE,KAAxD,CAAjB;AAIAf,IAAAA,QAAQ,CAACiB,KAAT;AACA,WAAOjB,QAAP;AACD,GAPD,MAOO;AACL,WAAO;AACLkB,MAAAA,IAAI,EAAE,MAAM;AACV9F,QAAAA,MAAM,CAAC+F,gBAAP,CAAyB,eAAzB;AACD,OAHI;AAILC,MAAAA,IAAI,EAAE,MAAM,CAAE;AAJT,KAAP;AAMD;AACF,CAhBD;;AAkBA,MAAMC,oBAAoB,GAAG,OAC3B/B,QAD2B,EAE3B;AAAEhD,EAAAA,KAAF;AAAS0D,EAAAA,QAAT;AAAmBC,EAAAA,aAAnB;AAAkCC,EAAAA;AAAlC,CAF2B,KAGxB;AACH5D,EAAAA,KAAK,GAAGA,KAAK,IAAIrB,KAAK,CAACqG,QAAN,EAAjB;AACA,QAAMxB,cAAc,CAClBR,QAAQ,CAAC9B,GAAT,CAAaE,EAAE,IAAI4C,oBAAoB,CAAChE,KAAD,EAAQoB,EAAR,CAAvC,CADkB,EAElB;AACEsC,IAAAA,QADF;AAEEC,IAAAA,aAFF;AAGEC,IAAAA;AAHF,GAFkB,CAApB;AAQD,CAbD;;AAeA,MAAMqB,kBAAkB,GAAG,OACzBjC,QADyB,EAEzB;AAAEhD,EAAAA,KAAF;AAAS0D,EAAAA,QAAT;AAAmBC,EAAAA,aAAnB;AAAkCC,EAAAA;AAAlC,CAFyB,KAGtB;AACH5D,EAAAA,KAAK,GAAGA,KAAK,IAAIrB,KAAK,CAACqG,QAAN,EAAjB,CADG,CAEH;AACA;AACA;AACA;;AACA,QAAMlE,KAAK,GAAGtC,CAAC,CAAC6C,MAAF,CAAS2B,QAAQ,CAAC9B,GAAT,CAAaE,EAAE,IAAIpB,KAAK,CAACc,KAAN,CAAYqB,GAAZ,CAAgBf,EAAhB,CAAnB,CAAT,CAAd;;AACA,QAAMoC,cAAc,CAClB1C,KAAK,CAACI,GAAN,CAAUqC,IAAI,IAAI2B,kBAAkB,CAAClF,KAAD,EAAQuD,IAAR,CAApC,CADkB,EAElB;AACEG,IAAAA,QADF;AAEEC,IAAAA,aAFF;AAGEC,IAAAA;AAHF,GAFkB,CAApB;AAQD,CAlBD;;AAoBA,MAAMsB,kBAAkB,GAAG,CAAClF,KAAD,EAAQuD,IAAR,KAAiB;AAC1C,QAAMW,SAAS,GAAGlE,KAAK,CAACmF,UAAN,CAAiBhD,GAAjB,CAAqBoB,IAAI,CAACc,aAA1B,CAAlB;AACA,QAAM;AAAE3E,IAAAA,IAAF;AAAQ2E,IAAAA,aAAR;AAAuBC,IAAAA;AAAvB,MAAmCf,IAAzC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAYF,SAAlB;AACA,SAAO;AACL9C,IAAAA,EAAE,EAAE1B,IADC;AAEL0E,IAAAA,KAFK;AAGLgB,IAAAA,MAAM,EAAE,IAHH;AAILf,IAAAA,aAJK;AAKLC,IAAAA,OAAO,EAAE,EACP,GAAGf,IADI;AAEP,SAAGe;AAFI;AALJ,GAAP;AAUD,CAdD,C,CAgBA;AACA;AAEA;;;AACA,IAAIe,aAAJ;AAEA;;;;;AAIA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,MAAID,aAAJ,EAAmB;AACjB,UAAMrF,KAAK,GAAGrB,KAAK,CAACqG,QAAN,EAAd;AACA,UAAM;AAAE5B,MAAAA,cAAF;AAAkBE,MAAAA;AAAlB,QAAmCP,aAAa,CACpDN,iBAAiB,CAACzC,KAAD,CADmC,CAAtD;;AAGA,UAAMc,KAAK,GAAGtC,CAAC,CAAC6C,MAAF,CAASiC,YAAY,CAACpC,GAAb,CAAiBE,EAAE,IAAIpB,KAAK,CAACc,KAAN,CAAYqB,GAAZ,CAAgBf,EAAhB,CAAvB,CAAT,CAAd;;AACA,UAAMqC,SAAS,GAAG,CAChB,GAAGL,cAAc,CAAClC,GAAf,CAAmBE,EAAE,IAAI4C,oBAAoB,CAAChE,KAAD,EAAQoB,EAAR,CAA7C,CADa,EAEhB,GAAGN,KAAK,CAACI,GAAN,CAAUqC,IAAI,IAAI2B,kBAAkB,CAAClF,KAAD,EAAQuD,IAAR,CAApC,CAFa,CAAlB;AAIA8B,IAAAA,aAAa,CAAC1F,IAAd,CAAmB8D,SAAnB;AACD;AACF,CAbD;AAeA;;;;;;;;;;;;;AAYA,MAAM8B,4BAA4B,GAAG,CAAC;AAAE3B,EAAAA;AAAF,IAAqB,EAAtB,KAA6B;AAChE;AACA;AACA,MAAID,aAAa,GAAG,IAApB;AACA,QAAM6B,YAAY,GAAGzG,UAAU,CAAC0G,kBAAX,CAA8B,MAAM;AACvD,QAAI,CAAC9B,aAAL,EAAoB;AAClBA,MAAAA,aAAa,GAAG,IAAI3E,aAAJ,CAAkBL,KAAlB,EAAyB;AAAEiF,QAAAA;AAAF,OAAzB,CAAhB;AACD;;AACD,WAAOD,aAAP;AACD,GALoB,CAArB;AAMA0B,EAAAA,aAAa,GAAG,IAAI3G,KAAJ,CAAU,CAAC+E,SAAD,EAAYiC,QAAZ,KAAyB;AACjD,UAAMhC,QAAQ,GAAGa,0BAA0B,CAACd,SAAS,CAACkC,MAAX,CAA3C;;AAEA,UAAMC,QAAQ,GAAG,CAAC,GAAGC,GAAJ,KAAY;AAC3B5G,MAAAA,YAAY,CAAC6G,YAAb;AACApC,MAAAA,QAAQ,CAACkB,IAAT;AACA,aAAOc,QAAQ,CAAC,GAAGG,GAAJ,CAAf;AACD,KAJD;;AAMA,WAAO9G,UAAU,CACdgF,YADI,CACSyB,YADT,EACuB/B,SADvB,EACkCC,QADlC,EAEJqC,IAFI,CAEC,MAAMH,QAAQ,CAAC,IAAD,CAFf,EAGJI,KAHI,CAGEJ,QAHF,CAAP;AAID,GAbe,CAAhB;AAeAhH,EAAAA,OAAO,CAACU,EAAR,CAAY,mBAAZ,EAAgC,MAAM;AACpCR,IAAAA,MAAM,CAACmH,eAAP,CAAuB;AAAE7E,MAAAA,EAAE,EAAG;AAAP,KAAvB;AACD,GAFD;AAIAxC,EAAAA,OAAO,CAACU,EAAR,CAAY,yBAAZ,EAAsCgG,gBAAtC;AACC,GACE,cADF,EAEE,aAFF,EAGE,aAHF,EAIE,cAJF,EAKE,qBALF,EAME,YANF,EAOE,mBAPF,EAQE,+BARF,EASC/E,OATD,CASS2F,SAAS,IAAI;AACrBtH,IAAAA,OAAO,CAACU,EAAR,CAAW4G,SAAX,EAAsBC,KAAK,IAAI;AAC7BxC,MAAAA,aAAa,GAAG,IAAhB;AACD,KAFD;AAGD,GAbA;AAcF,CA5CD;;AA8CA,MAAMyC,uBAAuB,GAAGC,QAAQ,IAAI;AAC1ChH,EAAAA,iBAAiB,CAACc,GAAlB,CAAsBkG,QAAtB;AACD,CAFD;;AAIA,MAAMC,oBAAoB,GAAGjC,aAAa,IAAI;AAC5C,QAAMrE,KAAK,GAAGrB,KAAK,CAACqG,QAAN,EAAd;AACA,SAAO,CAAC,GAAGhF,KAAK,CAACc,KAAN,CAAYC,MAAZ,EAAJ,EAA0BM,MAA1B,CACLL,CAAC,IAAIA,CAAC,CAACqD,aAAF,KAAoBA,aADpB,CAAP;AAGD,CALD;;AAOA,MAAMkC,6BAA6B,GAAGlC,aAAa,IAAI;AACrD,QAAMvD,KAAK,GAAGwF,oBAAoB,CAACjC,aAAD,CAAlC,CADqD,CAErD;AACA;AACA;;AACAxF,EAAAA,mBAAmB,CAACwD,4BAApB,CACEvB,KAAK,CAACI,GAAN,CAAUF,CAAC,IAAIA,CAAC,CAACtB,IAAF,IAAUsB,CAAC,CAACI,EAA3B,CADF;AAGAN,EAAAA,KAAK,CAACP,OAAN,CAAcgD,IAAI,IAAI6C,uBAAuB,CAAC7C,IAAI,CAAC7D,IAAN,CAA7C;AACA4F,EAAAA,gBAAgB;AACjB,CAVD;;AAYAkB,MAAM,CAACC,OAAP,GAAiB;AACf9D,EAAAA,wBADe;AAEfF,EAAAA,iBAFe;AAGfwC,EAAAA,kBAHe;AAIfF,EAAAA,oBAJe;AAKfhC,EAAAA,aALe;AAMfwC,EAAAA,4BANe;AAOfD,EAAAA,gBAPe;AAQfc,EAAAA,uBARe;AASfG,EAAAA;AATe,CAAjB","sourcesContent":["// @flow\n\nconst _ = require(`lodash`)\nconst Queue = require(`better-queue`)\n// const convertHrtime = require(`convert-hrtime`)\nconst { store, emitter } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst queryQueue = require(`./queue`)\nconst { GraphQLRunner } = require(`./graphql-runner`)\nconst pageDataUtil = require(`../utils/page-data`)\n\nconst seenIdsWithoutDataDependencies = new Set()\nlet queuedDirtyActions = []\nconst extractedQueryIds = new Set()\n\n// Remove pages from seenIdsWithoutDataDependencies when they're deleted\n// so their query will be run again if they're created again.\nemitter.on(`DELETE_PAGE`, action => {\n  seenIdsWithoutDataDependencies.delete(action.payload.path)\n})\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.payload })\n})\n\n// ///////////////////////////////////////////////////////////////////\n// Calculate dirty static/page queries\n\nconst popExtractedQueries = () => {\n  const queries = [...extractedQueryIds]\n  extractedQueryIds.clear()\n  return queries\n}\n\nconst findIdsWithoutDataDependencies = state => {\n  const allTrackedIds = new Set()\n  const boundAddToTrackedIds = allTrackedIds.add.bind(allTrackedIds)\n  state.componentDataDependencies.nodes.forEach(dependenciesOnNode => {\n    dependenciesOnNode.forEach(boundAddToTrackedIds)\n  })\n  state.componentDataDependencies.connections.forEach(\n    dependenciesOnConnection => {\n      dependenciesOnConnection.forEach(boundAddToTrackedIds)\n    }\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = new Set(\n    [\n      ...Array.from(state.pages.values(), p => p.path),\n      ...[...state.staticQueryComponents.values()].map(c => c.id),\n    ].filter(\n      x => !allTrackedIds.has(x) && !seenIdsWithoutDataDependencies.has(x)\n    )\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages without queries can't be tracked.\n  for (const notTrackedId of notTrackedIds) {\n    seenIdsWithoutDataDependencies.add(notTrackedId)\n  }\n\n  return notTrackedIds\n}\n\nconst popNodeQueries = state => {\n  const actions = _.uniq(queuedDirtyActions, a => a.payload.id)\n  const uniqDirties = actions.reduce((dirtyIds, action) => {\n    const node = action.payload\n\n    if (!node || !node.id || !node.internal.type) return dirtyIds\n\n    // Find components that depend on this node so are now dirty.\n    if (state.componentDataDependencies.nodes.has(node.id)) {\n      state.componentDataDependencies.nodes.get(node.id).forEach(n => {\n        if (n) {\n          dirtyIds.add(n)\n        }\n      })\n    }\n\n    // Find connections that depend on this node so are now invalid.\n    if (state.componentDataDependencies.connections.has(node.internal.type)) {\n      state.componentDataDependencies.connections\n        .get(node.internal.type)\n        .forEach(n => {\n          if (n) {\n            dirtyIds.add(n)\n          }\n        })\n    }\n\n    return dirtyIds\n  }, new Set())\n\n  boundActionCreators.deleteComponentsDependencies([...uniqDirties])\n\n  queuedDirtyActions = []\n  return uniqDirties\n}\n\nconst popNodeAndDepQueries = state => {\n  const nodeQueries = popNodeQueries(state)\n\n  const noDepQueries = findIdsWithoutDataDependencies(state)\n\n  return _.uniq([...nodeQueries, ...noDepQueries])\n}\n\n/**\n * Calculates the set of dirty query IDs (page.paths, or\n * staticQuery.hash's). These are queries that:\n *\n * - depend on nodes or node collections (via\n *   `actions.createPageDependency`) that have changed.\n * - do NOT have node dependencies. Since all queries should return\n *   data, then this implies that node dependencies have not been\n *   tracked, and therefore these queries haven't been run before\n * - have been recently extracted (see `./query-watcher.js`)\n *\n * Note, this function pops queries off internal queues, so it's up\n * to the caller to reference the results\n */\n\nconst calcDirtyQueryIds = state =>\n  _.union(popNodeAndDepQueries(state), popExtractedQueries())\n\n/**\n * Same as `calcDirtyQueryIds`, except that we only include extracted\n * queries that depend on nodes or haven't been run yet. We do this\n * because the page component reducer/machine always enqueues\n * extractedQueryIds but during bootstrap we may not want to run those\n * page queries if their data hasn't changed since the last time we\n * ran Gatsby.\n */\nconst calcInitialDirtyQueryIds = state => {\n  const nodeAndNoDepQueries = popNodeAndDepQueries(state)\n\n  const extractedQueriesThatNeedRunning = _.intersection(\n    popExtractedQueries(),\n    nodeAndNoDepQueries\n  )\n  return _.union(extractedQueriesThatNeedRunning, nodeAndNoDepQueries)\n}\n\n/**\n * groups queryIds by whether they are static or page queries.\n */\nconst groupQueryIds = queryIds => {\n  const grouped = _.groupBy(queryIds, p =>\n    p.slice(0, 4) === `sq--` ? `static` : `page`\n  )\n  return {\n    staticQueryIds: grouped.static || [],\n    pageQueryIds: grouped.page || [],\n  }\n}\n\nconst processQueries = async (\n  queryJobs,\n  { activity, graphqlRunner, graphqlTracing }\n) => {\n  const queue = queryQueue.createAppropriateQueue(graphqlRunner, {\n    graphqlTracing,\n  })\n  return queryQueue.processBatch(queue, queryJobs, activity)\n}\n\nconst createStaticQueryJob = (state, queryId) => {\n  const component = state.staticQueryComponents.get(queryId)\n  const { hash, id, query, componentPath } = component\n  return {\n    id: hash,\n    hash,\n    query,\n    componentPath,\n    context: { path: id },\n  }\n}\n\n/**\n * Creates activity object which:\n *  - creates actual progress activity if there are any queries that need to be run\n *  - creates activity-like object that just cancels pending activity if there are no queries to run\n */\nconst createQueryRunningActivity = (queryJobsCount, parentSpan) => {\n  if (queryJobsCount) {\n    const activity = report.createProgress(`run queries`, queryJobsCount, 0, {\n      id: `query-running`,\n      parentSpan,\n    })\n    activity.start()\n    return activity\n  } else {\n    return {\n      done: () => {\n        report.completeActivity(`query-running`)\n      },\n      tick: () => {},\n    }\n  }\n}\n\nconst processStaticQueries = async (\n  queryIds,\n  { state, activity, graphqlRunner, graphqlTracing }\n) => {\n  state = state || store.getState()\n  await processQueries(\n    queryIds.map(id => createStaticQueryJob(state, id)),\n    {\n      activity,\n      graphqlRunner,\n      graphqlTracing,\n    }\n  )\n}\n\nconst processPageQueries = async (\n  queryIds,\n  { state, activity, graphqlRunner, graphqlTracing }\n) => {\n  state = state || store.getState()\n  // Make sure we filter out pages that don't exist. An example is\n  // /dev-404-page/, whose SitePage node is created via\n  // `internal-data-bridge`, but the actual page object is only\n  // created during `gatsby develop`.\n  const pages = _.filter(queryIds.map(id => state.pages.get(id)))\n  await processQueries(\n    pages.map(page => createPageQueryJob(state, page)),\n    {\n      activity,\n      graphqlRunner,\n      graphqlTracing,\n    }\n  )\n}\n\nconst createPageQueryJob = (state, page) => {\n  const component = state.components.get(page.componentPath)\n  const { path, componentPath, context } = page\n  const { query } = component\n  return {\n    id: path,\n    query,\n    isPage: true,\n    componentPath,\n    context: {\n      ...page,\n      ...context,\n    },\n  }\n}\n\n// ///////////////////////////////////////////////////////////////////\n// Listener for gatsby develop\n\n// Initialized via `startListening`\nlet listenerQueue\n\n/**\n * Run any dirty queries. See `calcQueries` for what constitutes a\n * dirty query\n */\nconst runQueuedQueries = () => {\n  if (listenerQueue) {\n    const state = store.getState()\n    const { staticQueryIds, pageQueryIds } = groupQueryIds(\n      calcDirtyQueryIds(state)\n    )\n    const pages = _.filter(pageQueryIds.map(id => state.pages.get(id)))\n    const queryJobs = [\n      ...staticQueryIds.map(id => createStaticQueryJob(state, id)),\n      ...pages.map(page => createPageQueryJob(state, page)),\n    ]\n    listenerQueue.push(queryJobs)\n  }\n}\n\n/**\n * Starts a background process that processes any dirty queries\n * whenever one of the following occurs:\n *\n * 1. A node has changed (but only after the api call has finished\n * running)\n * 2. A component query (e.g. by editing a React Component) has\n * changed\n *\n * For what constitutes a dirty query, see `calcQueries`\n */\n\nconst startListeningToDevelopQueue = ({ graphqlTracing } = {}) => {\n  // We use a queue to process batches of queries so that they are\n  // processed consecutively\n  let graphqlRunner = null\n  const developQueue = queryQueue.createDevelopQueue(() => {\n    if (!graphqlRunner) {\n      graphqlRunner = new GraphQLRunner(store, { graphqlTracing })\n    }\n    return graphqlRunner\n  })\n  listenerQueue = new Queue((queryJobs, callback) => {\n    const activity = createQueryRunningActivity(queryJobs.length)\n\n    const onFinish = (...arg) => {\n      pageDataUtil.enqueueFlush()\n      activity.done()\n      return callback(...arg)\n    }\n\n    return queryQueue\n      .processBatch(developQueue, queryJobs, activity)\n      .then(() => onFinish(null))\n      .catch(onFinish)\n  })\n\n  emitter.on(`API_RUNNING_START`, () => {\n    report.pendingActivity({ id: `query-running` })\n  })\n\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedQueries)\n  ;[\n    `DELETE_CACHE`,\n    `CREATE_NODE`,\n    `DELETE_NODE`,\n    `DELETE_NODES`,\n    `SET_SCHEMA_COMPOSER`,\n    `SET_SCHEMA`,\n    `ADD_FIELD_TO_NODE`,\n    `ADD_CHILD_NODE_TO_PARENT_NODE`,\n  ].forEach(eventType => {\n    emitter.on(eventType, event => {\n      graphqlRunner = null\n    })\n  })\n}\n\nconst enqueueExtractedQueryId = pathname => {\n  extractedQueryIds.add(pathname)\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages.values()].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nconst enqueueExtractedPageComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  pages.forEach(page => enqueueExtractedQueryId(page.path))\n  runQueuedQueries()\n}\n\nmodule.exports = {\n  calcInitialDirtyQueryIds,\n  calcDirtyQueryIds,\n  processPageQueries,\n  processStaticQueries,\n  groupQueryIds,\n  startListeningToDevelopQueue,\n  runQueuedQueries,\n  enqueueExtractedQueryId,\n  enqueueExtractedPageComponent,\n}\n"],"file":"index.js"}