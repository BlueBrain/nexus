import { DocumentNode } from 'graphql';
import { CombinedError, OperationContext, RequestPolicy, Operation } from '@urql/core';
export interface UseQueryArgs<V> {
    query: string | DocumentNode;
    variables?: V;
    requestPolicy?: RequestPolicy;
    pollInterval?: number;
    context?: Partial<OperationContext>;
    pause?: boolean;
}
export interface UseQueryState<T> {
    fetching: boolean;
    stale: boolean;
    data?: T;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation;
}
export declare type UseQueryResponse<T> = [UseQueryState<T>, (opts?: Partial<OperationContext>) => void];
export declare function useQuery<T = any, V = object>(args: UseQueryArgs<V>): UseQueryResponse<T>;
