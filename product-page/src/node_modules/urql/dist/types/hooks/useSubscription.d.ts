import { DocumentNode } from 'graphql';
import { CombinedError, OperationContext, Operation } from '@urql/core';
export interface UseSubscriptionArgs<V> {
    query: DocumentNode | string;
    variables?: V;
    pause?: boolean;
    context?: Partial<OperationContext>;
}
export declare type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;
export interface UseSubscriptionState<T> {
    fetching: boolean;
    stale: boolean;
    data?: T;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation;
}
export declare type UseSubscriptionResponse<T> = [UseSubscriptionState<T>, (opts?: Partial<OperationContext>) => void];
export declare function useSubscription<T = any, R = T, V = object>(args: UseSubscriptionArgs<V>, handler?: SubscriptionHandler<T, R>): UseSubscriptionResponse<R>;
