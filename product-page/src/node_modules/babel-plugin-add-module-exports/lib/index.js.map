{"version":3,"sources":["../src/index.js"],"names":["module","exports","template","pluginOptions","ExportsDefaultVisitor","AssignmentExpression","path","get","matchesPattern","finder","ExportsFinder","isOnlyExportsDefault","isAmd","rootPath","getRootPath","node","body","push","addDefaultProperty","visitor","Program","state","opts","post","fileMap","traverse","exportsDefaultPath","hasExportsDefault","hasExportsNamed","hasModuleExports","parentPath","forEach","isVariableDeclaration","findExports","isExpressionStatement","isAssignmentExpression","findExportsInCallExpression","property","objectName","propertyName","self","CallExpression","identifier","prop","hasntAmdRoot","amdRoot","isCallExpression"],"mappings":"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","file":"index.js","sourcesContent":["// 1. find to `exports.default`\n// 2. find to all Expression(`exports.default`, `exports.foo` etc)\n// 3. add `module.exports` if exists only `exports.default` assignment\n// The above works after executing `preset-env`(transform-es2015-modules-*) in `Plugin.post`\n\nmodule.exports = ({ template }) => {\n  let pluginOptions\n  const ExportsDefaultVisitor = {\n    AssignmentExpression(path) {\n      if (path.get('left').matchesPattern('exports.default')) {\n        const finder = new ExportsFinder(path)\n        if (!finder.isOnlyExportsDefault()) {\n          return\n        }\n        if (finder.isAmd()) {\n          return\n        }\n        const rootPath = finder.getRootPath()\n\n        // HACK: `path.node.body.push` instead of path.pushContainer(due doesn't work in Plugin.post)\n        rootPath.node.body.push(template('module.exports = exports.default')())\n        if (pluginOptions.addDefaultProperty) {\n          rootPath.node.body.push(template('module.exports.default = exports.default')())\n        }\n      }\n    }\n  }\n\n  return {\n    visitor: {\n      Program(path, state) {\n        // HACK: can't get plugin options in Plugin.post\n        pluginOptions = state.opts\n      }\n    },\n    post(fileMap) {\n      fileMap.path.traverse(ExportsDefaultVisitor)\n    }\n  }\n}\n\nclass ExportsFinder {\n  constructor(exportsDefaultPath) {\n    this.path = exportsDefaultPath\n    this.hasExportsDefault = false\n    this.hasExportsNamed = false\n    this.hasModuleExports = false\n  }\n\n  getRootPath() {\n    return this.path.parentPath.parentPath\n  }\n\n  isOnlyExportsDefault() {\n    this.getRootPath()\n      .get('body')\n      .forEach(path => {\n        if (path.isVariableDeclaration()) {\n          this.findExports(path.get('declarations.0'), 'init')\n        } else if (\n          path.isExpressionStatement() &&\n          path.get('expression').isAssignmentExpression()\n        ) {\n          this.findExports(path)\n        } else {\n          this.findExportsInCallExpression(path)\n        }\n      })\n    return this.hasExportsDefault && !this.hasExportsNamed && !this.hasModuleExports\n  }\n\n  findExports(path, property = 'expression') {\n    // Not `exports.anything`, skip\n    if (\n      !path.get(`${property}`).node ||\n      !path.get(`${property}.left`).node ||\n      !path.get(`${property}.left.object`).node\n    ) {\n      return\n    }\n\n    const objectName = path.get(`${property}.left.object.name`).node\n    const propertyName = path.get(`${property}.left.property.name`).node\n    if (objectName === 'exports') {\n      if (propertyName === 'default') {\n        this.hasExportsDefault = true\n      } else if (propertyName !== '__esModule') {\n        this.hasExportsNamed = true\n      }\n    }\n    if (`${objectName}.${propertyName}` === 'module.exports') {\n      this.hasModuleExports = true\n    }\n  }\n\n  findExportsInCallExpression(path) {\n    const self = this\n    path.traverse({\n      CallExpression(path) {\n        if (!path.get('callee').matchesPattern('Object.defineProperty')) {\n          return\n        }\n\n        const [identifier, prop] = path.get('arguments')\n        const objectName = identifier.get('name').node\n        const propertyName = prop.get('value').node\n        if (objectName === 'exports' && propertyName !== '__esModule') {\n          self.hasExportsNamed = true\n        }\n      }\n    })\n  }\n\n  isAmd() {\n    const rootPath = this.getRootPath()\n    const hasntAmdRoot = !(rootPath.parentPath && rootPath.parentPath.parentPath)\n    if (hasntAmdRoot) {\n      return false\n    }\n\n    const amdRoot = rootPath.parentPath.parentPath\n    if (!amdRoot.isCallExpression()) {\n      return false\n    }\n    if (amdRoot.get('callee.name').node === 'define') {\n      return true\n    }\n    return false\n  }\n}\n"]}