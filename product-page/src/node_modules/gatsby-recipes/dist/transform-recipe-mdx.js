"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _pluginTransformReactJsx = _interopRequireDefault(require("@babel/plugin-transform-react-jsx"));

var _pluginProposalOptionalChaining = _interopRequireDefault(require("@babel/plugin-proposal-optional-chaining"));

var _mdx = _interopRequireDefault(require("@mdx-js/mdx"));

var _babelPluginRemoveShortcodes = _interopRequireDefault(require("./renderer/babel-plugin-remove-shortcodes"));

var _babelPluginCopyKeyProp = _interopRequireDefault(require("./renderer/babel-plugin-copy-key-prop"));

var _babelPluginMoveExportKeywords = _interopRequireDefault(require("./renderer/babel-plugin-move-export-keywords"));

const mdxCache = new Map();
const jsxCache = new Map();

const transformJsx = (jsx, isRenderer) => {
  delete require.cache[require.resolve(`@babel/standalone`)];

  const {
    transform
  } = require(`@babel/standalone`);

  const options = {
    parserOpts: {
      // We want to return outside of a function because the output from
      // Babel will be evaluated inline as part of the render process.
      allowReturnOutsideFunction: true
    },
    plugins: [_babelPluginCopyKeyProp.default, _babelPluginMoveExportKeywords.default, // TODO figure out how to use preset-env
    _pluginProposalOptionalChaining.default, [_pluginTransformReactJsx.default, {
      useBuiltIns: true
    }]]
  };

  if (isRenderer) {
    options.plugins.push(_babelPluginRemoveShortcodes.default);
  }

  const {
    code
  } = transform(jsx, options);
  return code;
};

var _default = (mdxSrc, isRenderer = false) => {
  let jsxFromMdx;

  if (mdxCache.has(mdxSrc)) {
    jsxFromMdx = mdxCache.get(mdxSrc);
  } else {
    jsxFromMdx = _mdx.default.sync(mdxSrc, {
      skipExport: true,
      commonmark: true
    });
    mdxCache.set(mdxSrc, jsxFromMdx);
  }

  let srcCode;

  if (jsxCache.has(jsxFromMdx)) {
    srcCode = jsxCache.get(jsxFromMdx);
  } else {
    srcCode = transformJsx(jsxFromMdx, isRenderer);
    jsxCache.set(jsxFromMdx, srcCode);
  }

  return srcCode;
};

exports.default = _default;