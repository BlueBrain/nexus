"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _react = _interopRequireWildcard(require("react"));

var _pQueue = _interopRequireDefault(require("p-queue"));

var _lodash = _interopRequireDefault(require("lodash"));

var _resources = _interopRequireDefault(require("../resources"));

var _reconciler = _interopRequireDefault(require("./reconciler"));

var _errorBoundary = _interopRequireDefault(require("./error-boundary"));

var _transformToPlanStructure = _interopRequireDefault(require("./transform-to-plan-structure"));

var _parentResourceProvider = require("./parent-resource-provider");

var _stepComponent = require("./step-component");

var _inputProvider = require("./input-provider");

var _resourceProvider = require("./resource-provider");

const queue = new _pQueue.default({
  concurrency: 5,
  autoStart: false
});
const resultCache = new Map();
const inFlightCache = new Map();

const ModeContext = _react.default.createContext({});

const useMode = () => (0, _react.useContext)(ModeContext);

const ModeProvider = ModeContext.Provider;

const getUserProps = props => {
  // eslint-disable-next-line
  const {
    mdxType,
    children,
    ...userProps
  } = props;
  return userProps;
};

const SetResourcesProvider = _react.default.createContext();

let resourcesCache;

const Wrapper = ({
  children,
  inputs,
  isApply
}) => {
  // eslint-disable-next-line
  const [resourcesList, setResources] = (0, _react.useState)(resourcesCache || []);
  resourcesCache = resourcesList;
  return /*#__PURE__*/_react.default.createElement(_errorBoundary.default, null, /*#__PURE__*/_react.default.createElement(ModeProvider, {
    value: {
      mode: isApply ? `apply` : `plan`
    }
  }, /*#__PURE__*/_react.default.createElement(SetResourcesProvider.Provider, {
    value: setResources
  }, /*#__PURE__*/_react.default.createElement(_resourceProvider.ResourceProvider, {
    value: resourcesList
  }, /*#__PURE__*/_react.default.createElement(_inputProvider.InputProvider, {
    value: inputs
  }, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement("p", null, "Loading recipe...")
  }, children))))));
};

const ResourceComponent = ({
  _resourceName: Resource,
  _uuid,
  _type,
  children,
  ...props
}) => {
  const {
    mode
  } = useMode();
  const step = (0, _stepComponent.useRecipeStep)();
  const parentResourceContext = (0, _parentResourceProvider.useParentResourceContext)(); // TODO add provider onto context

  const resourceData = handleResource(Resource, { ...parentResourceContext,
    root: process.cwd(),
    _uuid,
    mode
  }, props);
  return /*#__PURE__*/_react.default.createElement(_parentResourceProvider.ParentResourceProvider, {
    data: {
      [Resource]: resourceData
    }
  }, /*#__PURE__*/_react.default.createElement(Resource, null, JSON.stringify({ ...resourceData,
    _props: props,
    _stepMetadata: step,
    _uuid,
    _type
  }), children));
};

const validateResource = (resourceName, context, props) => {
  const userProps = getUserProps(props);

  const {
    error
  } = _resources.default[resourceName].validate(userProps);

  if (error) {
    error.resourceUuid = context._uuid;
  }

  return error;
};

const handleResource = (resourceName, context, props) => {
  // Initialize
  const {
    mode
  } = context;
  const trueKey = props._key ? props._key : context._uuid;
  let cacheKey; // Only run apply once per resource

  if (mode === `apply`) {
    cacheKey = mode + ` ` + resourceName + ` ` + trueKey;
  } else {
    cacheKey = JSON.stringify({
      resourceName,
      ...props,
      mode
    });
  } // update global context when results come in.


  const updateResource = result => {
    allResources = allResources.filter(a => a.resourceDefinitions._key);
    const resourceMap = new Map();
    allResources.forEach(r => resourceMap.set(r.resourceDefinitions._key, r));
    const newResource = {
      resourceName,
      resourceDefinitions: props,
      ...result
    };

    if (!_lodash.default.isEqual(newResource, resourceMap.get(trueKey))) {
      resourceMap.set(trueKey, newResource); // TODO Do we need this? It's causing infinite loops
      // setResources([...resourceMap.values()])
    }
  };

  let allResources = (0, _resourceProvider.useResourceContext)();
  const error = validateResource(resourceName, context, props);

  if (error) {
    const result = {
      error: `Validation error: ${error.details[0].message}`
    };
    updateResource(result);
    resultCache.set(cacheKey, result);
    return result;
  }

  const cachedResult = resultCache.get(cacheKey);
  const inFlightPromise = inFlightCache.get(cacheKey);

  if (cachedResult) {
    updateResource(cachedResult);
    return cachedResult;
  }

  if (inFlightPromise) {
    throw inFlightPromise;
  }

  const fn = mode === `apply` ? `create` : `plan`;
  let promise;

  try {
    promise = new Promise((resolve, reject) => {
      // Multiple of the same promises can be queued due to re-rendering
      // so this first checks for the cached result again before executing
      // the request.
      const cachedValue = resultCache.get(cacheKey);

      if (cachedValue) {
        resolve(cachedValue);
        updateResource(cachedValue);
      } else {
        _resources.default[resourceName][fn](context, props).then(result => {
          updateResource(result);
          inFlightCache.set(cacheKey, false);
          return result;
        }).then(result => resultCache.set(cacheKey, result)).then(resolve).catch(e => {
          console.log(e);

          if (e.name === `MissingInfoError`) {
            inFlightCache.delete(cacheKey);
          }

          reject(e);
        });
      }
    });
  } catch (e) {
    throw e;
  }

  inFlightCache.set(cacheKey, promise);
  queue.add(() => promise);
  throw promise;
};

const render = async (recipe, cb, inputs = {}, isApply) => {
  const plan = {};

  const recipeWithWrapper = /*#__PURE__*/_react.default.createElement(Wrapper, {
    inputs: inputs,
    isApply: isApply
  }, recipe);

  const renderResources = async () => {
    queue.pause();

    _reconciler.default.render(recipeWithWrapper, plan);

    if (!queue.size) {
      return undefined;
    }

    queue.start();
    await queue.onIdle();
    return await renderResources();
  };

  try {
    // Begin the "render loop" until there are no more resources being queued.
    await renderResources(); // Rerender with the resources and resolve the data from the cache

    const result = _reconciler.default.render(recipeWithWrapper, plan);

    return (0, _transformToPlanStructure.default)(result);
  } catch (e) {
    throw e;
  }
};

module.exports.render = render;
module.exports.ResourceComponent = ResourceComponent;