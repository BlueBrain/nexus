"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _themeUi = require("theme-ui");

var _md = require("react-icons/md");

var _core = require("@emotion/core");

var _mdx = _interopRequireDefault(require("./components/mdx"));

var _inputProvider = require("./renderer/input-provider");

var _resourceProvider = require("./renderer/resource-provider");

/** @jsx jsx */
const lodash = require(`lodash`); // eslint-disable-next-line


const React = require(`react`);

const {
  useState
} = require(`react`);

const ansi2HTML = require(`ansi-html`);

const remove = require(`unist-util-remove`);

const {
  Global
} = require(`@emotion/core`); // const ws = require(`ws`)


const fetch = require(`isomorphic-fetch`);

const {
  Button,
  ThemeProvider,
  TextAreaField,
  TextAreaFieldControl,
  getTheme,
  BaseAnchor,
  Heading,
  SuccessIcon,
  InputField,
  InputFieldLabel,
  InputFieldControl
} = require(`gatsby-interface`);

const {
  createClient,
  useMutation,
  useSubscription,
  Provider,
  defaultExchanges,
  subscriptionExchange
} = require(`urql`);

const UrqlProvider = Provider;

const {
  SubscriptionClient
} = require(`subscriptions-transport-ws`);

const slugify = require(`slugify`);

require(`normalize.css`);

const theme = getTheme();
ansi2HTML.setColors({
  red: theme.tones.DANGER.medium.slice(1),
  green: theme.tones.SUCCESS.medium.slice(1),
  yellow: theme.tones.WARNING.medium.slice(1)
}); // const InputFieldBlock = React.forwardRef((props, ref) => {
// const {
// id,
// label,
// labelSize,
// error,
// hint,
// className,
// validationMode,
// layout,
// ...rest
// } = props
// const hasError = false
// return (
// <FormFieldContainer
// layout={layout}
// className={className}
// sx={{ fontFamily: theme.fonts.body }}
// >
// <InputField id={id} hasError={!!error} hasHint={!!hint}>
// <InputFieldLabel size={labelSize} isRequired={!!rest.required}>
// {label}
// </InputFieldLabel>
// <input
// type="text"
// ref={ref}
// {...rest}
// sx={{
// border: hasError
// ? `1px solid ${theme.colors.red[60]}`
// : `2px solid ${theme.tones.BRAND.dark}`,
// background: theme.colors.white,
// borderRadius: theme.radii[2],
// color: theme.colors.grey[90],
// fontFamily: theme.fonts.system,
// fontSize: theme.fontSizes[2],
// height: `2.25rem`,
// padding: `0 ${theme.space[3]}`,
// position: `relative`,
// width: `66%`,
// zIndex: 1,
// WebkitAppearance: `none`,
// ":focus": {
// outline: `0`,
// transition: `box-shadow 0.15s ease-in-out`,
// boxShadow: `0 0 0 3px ${
// hasError ? theme.colors.red[10] : theme.colors.purple[20]
// }`,
// borderColor: hasError
// ? theme.colors.red[30]
// : theme.colors.purple[60],
// },
// ":disabled": {
// background: theme.colors.grey[10],
// cursor: `not-allowed`,
// },
// "&:disabled::placeholder": {
// color: theme.colors.grey[40],
// },
// "&::placeholder": {
// color: theme.colors.grey[50],
// },
// }}
// />
// <InputFieldHint>{hint}</InputFieldHint>
// <InputFieldError validationMode={validationMode}>
// {error}
// </InputFieldError>
// </InputField>
// </FormFieldContainer>
// )
// })

const makeResourceId = res => {
  if (!res.describe) {
    res.describe = ``;
  }

  const id = encodeURIComponent(`${res.resourceName}-${slugify(res.describe)}`);
  return id;
};

let sendEvent;
const PROJECT_ROOT = `/Users/kylemathews/programs/recipes-test` && `/Users/johno-mini/c/gatsby/starters/blog`;

const Spinner = () => (0, _themeUi.jsx)("span", null, "Loading...");

const escapeTags = str => str.replace(/</g, `&lt;`);

const DiffPre = ({
  resourcePlan,
  ...props
}) => (0, _themeUi.jsx)(_themeUi.Styled.pre, (0, _extends2.default)({}, props, {
  sx: {
    background: theme => theme.tones.BRAND.superLight,
    borderRadius: 2,
    padding: 4
  },
  dangerouslySetInnerHTML: {
    __html: ansi2HTML(escapeTags(resourcePlan.diff))
  }
}));

const Diff = ({
  resourcePlan,
  ...props
}) => {
  if (!resourcePlan.diff) {
    return null;
  }

  if (resourcePlan.resourceName === `File`) {
    return (0, _themeUi.jsx)("div", {
      sx: {
        background: theme => theme.tones.BRAND.superLight,
        border: theme => `1px solid ${theme.tones.BRAND.lighter}`,
        borderRadius: 2
      }
    }, (0, _themeUi.jsx)(Heading, {
      as: "h6",
      sx: {
        px: 4,
        py: 3,
        fontWeight: `normal`,
        borderBottom: theme => `1px solid ${theme.tones.BRAND.lighter}`
      }
    }, resourcePlan.resourceDefinitions.path), (0, _themeUi.jsx)(DiffPre, {
      resourcePlan: resourcePlan,
      sx: {
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0
      }
    }));
  }

  return (0, _themeUi.jsx)(DiffPre, (0, _extends2.default)({}, props, {
    resourcePlan: resourcePlan,
    sx: {
      border: theme => `1px solid ${theme.tones.BRAND.lighter}`
    }
  }));
};

const WelcomeMessage = () => (0, _themeUi.jsx)("div", {
  sx: {
    marginTop: 8,
    marginBottom: 8,
    background: theme => theme.tones.BRAND.superLight,
    border: theme => `1px solid ${theme.tones.BRAND.light}`,
    padding: 4
  }
}, (0, _themeUi.jsx)(_themeUi.Styled.p, null, "Thank you for trying the experimental version of Gatsby Recipes! \uD83E\uDD17"), (0, _themeUi.jsx)(_themeUi.Styled.p, {
  sx: {
    margin: 0
  }
}, "Please ask questions, share your recipes, report bugs, and subscribe for updates in our umbrella issue at", ` `, (0, _themeUi.jsx)(BaseAnchor, {
  href: "https://github.com/gatsbyjs/gatsby/issues/22991"
}, "https://github.com/gatsbyjs/gatsby/issues/22991")));

const RecipesList = ({
  setRecipe
}) => {
  const items = [{
    label: `Add a custom ESLint config`,
    value: `eslint.mdx`
  }, {
    label: `Add Jest`,
    value: `jest.mdx`
  }, {
    label: `Add Gatsby Theme Blog`,
    value: `gatsby-theme-blog`
  }, {
    label: `Add persistent layout component with gatsby-plugin-layout`,
    value: `gatsby-plugin-layout`
  }, {
    label: `Add Theme UI`,
    value: `theme-ui.mdx`
  }, {
    label: `Add Emotion`,
    value: `emotion.mdx`
  }, {
    label: `Add support for MDX Pages`,
    value: `mdx-pages.mdx`
  }, {
    label: `Add support for MDX Pages with images`,
    value: `mdx-images.mdx`
  }, {
    label: `Add Styled Components`,
    value: `styled-components.mdx`
  }, {
    label: `Add Tailwind`,
    value: `tailwindcss.mdx`
  }, {
    label: `Add Sass`,
    value: `sass.mdx`
  }, {
    label: `Add Typescript`,
    value: `typescript.mdx`
  }, {
    label: `Add Cypress testing`,
    value: `cypress.mdx`
  }, {
    label: `Add animated page transition support`,
    value: `animated-page-transitions.mdx`
  }, {
    label: `Add plugins to make site a PWA`,
    value: `pwa.mdx`
  }, {
    label: `Add React Helmet`,
    value: `gatsby-plugin-react-helmet.mdx`
  }, {
    label: `Add Storybook - JavaScript`,
    value: `storybook-js.mdx`
  }, {
    label: `Add Storybook - TypeScript`,
    value: `storybook-ts.mdx`
  } // TODO remaining recipes
  ];
  return (0, _themeUi.jsx)("select", {
    onChange: e => setRecipe(e.target.value)
  }, items.map(item => (0, _themeUi.jsx)("option", {
    key: item.value,
    value: item.value
  }, item.label)));
};

const components = {
  Config: () => null,
  GatsbyPlugin: () => null,
  NPMPackageJson: () => null,
  NPMPackage: () => null,
  File: () => null,
  Input: () => null,
  Directory: () => null,
  GatsbyShadowFile: () => null,
  NPMScript: () => null,
  RecipeIntroduction: props => (0, _themeUi.jsx)("div", null, props.children),
  RecipeStep: props => (0, _themeUi.jsx)("div", null, props.children),
  ContentfulSpace: () => null,
  ContentfulEnvironment: () => null,
  ContentfulType: () => null
};

const log = (label, textOrObj) => {
  console.log(label, textOrObj);
};

log(`started client`, `======================================= ${new Date().toJSON()}`);

const removeJsx = () => tree => {
  remove(tree, `export`, () => true);
  return tree;
};

const recipe = `styled-components.mdx`; // recipe = `jest.mdx`,
// recipe,

const graphqlPort = 50400;
const projectRoot = PROJECT_ROOT;
const API_ENDPOINT = `http://localhost:${graphqlPort}`;
const GRAPHQL_ENDPOINT = `${API_ENDPOINT}/graphql`;
const subscriptionClient = new SubscriptionClient(`ws://localhost:${graphqlPort}/graphql`, {
  reconnect: true
} // ws
);
let isSubscriptionConnected = false;
let isRecipeStarted = false;
let sessionId;

subscriptionClient.connectionCallback = async () => {
  isSubscriptionConnected = true;
};

const checkServerSession = async () => {
  const response = await fetch(`${API_ENDPOINT}/session`);
  const newSessionId = await response.text();

  if (!sessionId) {
    sessionId = newSessionId;
  } else if (newSessionId !== sessionId) {
    window.location.reload();
  }
};

let showRecipesList = false;

if (!recipe) {
  showRecipesList = true;
}

const client = createClient({
  fetch,
  url: GRAPHQL_ENDPOINT,
  exchanges: [...defaultExchanges, subscriptionExchange({
    forwardSubscription(operation) {
      return subscriptionClient.request(operation);
    }

  })]
});

const ResourcePlan = ({
  resourcePlan,
  isLastPlan
}) => (0, _themeUi.jsx)("div", {
  id: makeResourceId(resourcePlan),
  sx: {}
}, (0, _themeUi.jsx)("div", null, (0, _themeUi.jsx)(_themeUi.Styled.p, {
  sx: {
    mb: resourcePlan.diff ? 6 : 0
  }
}, (0, _themeUi.jsx)(_themeUi.Styled.em, null, resourcePlan.resourceName), ` `, "\u2014", ` `, resourcePlan.describe)), (0, _themeUi.jsx)(Diff, {
  resourcePlan: resourcePlan
}), resourcePlan.resourceChildren ? resourcePlan.resourceChildren.map(resource => (0, _themeUi.jsx)(ResourcePlan, {
  key: resource._uuid,
  resourcePlan: resource
})) : null);

const Step = ({
  state,
  step,
  i
}) => {
  var _state$context, _state$context$plan, _state$context$export;

  const stepResources = (_state$context = state.context) === null || _state$context === void 0 ? void 0 : (_state$context$plan = _state$context.plan) === null || _state$context$plan === void 0 ? void 0 : _state$context$plan.filter(p => parseInt(p._stepMetadata.step, 10) === i + 1);
  return (0, _themeUi.jsx)("div", {
    key: `step-${i}`,
    sx: {
      position: `relative`,
      borderRadius: 2,
      border: theme => `1px solid ${theme.tones.BRAND.light}`,
      marginBottom: 7
    }
  }, (0, _themeUi.jsx)("div", {
    sx: {
      position: `absolute`,
      backgroundColor: `white`,
      color: theme => theme.tones.BRAND.dark,
      right: `6px`,
      top: `6px`,
      border: theme => `1px solid ${theme.tones.BRAND.light}`,
      borderRadius: 9999,
      height: 30,
      width: 30,
      display: `flex`,
      alignContent: `center`,
      justifyContent: `center`,
      lineHeight: `28px`
    }
  }, i + 1), (0, _themeUi.jsx)("div", {
    sx: {
      display: `flex`,
      "& > *": {
        marginY: 0
      },
      borderTopLeftRadius: 2,
      borderTopRightRadius: 2,
      borderBottom: theme => `1px solid ${theme.tones.BRAND.light}`,
      background: theme => theme.tones.BRAND.lighter,
      padding: 4
    }
  }, (0, _themeUi.jsx)("div", {
    sx: {
      // marginTop: 2,
      "p:last-child": {
        margin: 0
      }
    }
  }, (0, _themeUi.jsx)(_mdx.default, {
    key: "DOC",
    components: components,
    scope: {
      sendEvent
    },
    remarkPlugins: [removeJsx]
  }, ((_state$context$export = state.context.exports) === null || _state$context$export === void 0 ? void 0 : _state$context$export.join(`\n`)) + `\n\n` + step))), (stepResources === null || stepResources === void 0 ? void 0 : stepResources.length) > 0 && (0, _themeUi.jsx)("div", null, (0, _themeUi.jsx)("div", {
    sx: {
      px: 6,
      pt: 3
    }
  }, stepResources === null || stepResources === void 0 ? void 0 : stepResources.map((res, i) => {
    if (res.resourceName === `Input`) {
      if (res.type === `textarea`) {
        return (0, _themeUi.jsx)("div", {
          sx: {
            pt: 3,
            width: `30%`,
            maxWidth: `100%`
          }
        }, (0, _themeUi.jsx)(TextAreaField, null, (0, _themeUi.jsx)("div", null, (0, _themeUi.jsx)(InputFieldLabel, null, res.label)), (0, _themeUi.jsx)(TextAreaFieldControl, {
          onInput: e => {
            sendInputEvent({
              uuid: res._uuid,
              key: res._key,
              value: e.target.value
            });
          }
        })));
      }

      return (0, _themeUi.jsx)("div", {
        sx: {
          pt: 3,
          width: `30%`,
          maxWidth: `100%`
        }
      }, (0, _themeUi.jsx)(InputField, {
        sx: {
          pt: 3
        }
      }, (0, _themeUi.jsx)("div", null, (0, _themeUi.jsx)(InputFieldLabel, null, res.label)), (0, _themeUi.jsx)(InputFieldControl, {
        type: res.type,
        onInput: e => {
          sendInputEvent({
            uuid: res._uuid,
            key: res._key,
            value: e.target.value
          });
        }
      })));
    }

    return null;
  })), (0, _themeUi.jsx)("div", {
    sx: {
      padding: 6
    }
  }, (0, _themeUi.jsx)(Heading, {
    sx: {
      mb: 4,
      mt: 0,
      color: theme => theme.tones.NEUTRAL.darker,
      fontWeight: 500
    },
    as: `h3`
  }, "Proposed changes"), stepResources === null || stepResources === void 0 ? void 0 : stepResources.map((res, i) => {
    if (res.resourceName !== `Input`) {
      return (0, _themeUi.jsx)(ResourcePlan, {
        key: `res-plan-${i}`,
        resourcePlan: res,
        isLastPlan: i === stepResources.length - 1
      });
    }

    return null;
  }))));
};

const sendInputEvent = event => {
  sendEvent({
    event: `INPUT_ADDED`,
    input: event
  });
};

const ResourceMessage = ({
  state,
  resource
}) => {
  let icon = (0, _themeUi.jsx)(_md.MdBrightness1, {
    sx: {
      height: `10px`,
      width: `15px`,
      display: `inline-block`
    }
  });
  let message = resource.describe;

  if (state.value === `applyingPlan` && resource.isDone) {
    icon = (0, _themeUi.jsx)(SuccessIcon, null);
  } else if (state.value === `applyingPlan`) {
    const keyframe = (0, _core.keyframes)`
  0% {
    transform: rotate(0);
  }
  100% {
    transform: rotate(360deg);
  }
`;
    icon = (0, _themeUi.jsx)(_md.MdRefresh, {
      sx: {
        display: `inline-block`,
        animation: `${keyframe} 1s linear infinite`,
        height: `15px`,
        width: `15px`,
        top: `3px`,
        position: `relative`
      }
    });
    message = resource.describe;
  } else if (state.value === `done`) {
    icon = (0, _themeUi.jsx)(SuccessIcon, {
      height: "15px",
      width: "15px"
    });
    message = resource._message;
  }

  return (0, _themeUi.jsx)(React.Fragment, null, icon, ` `, (0, _themeUi.jsx)(BaseAnchor, {
    href: `#${makeResourceId(resource)}`,
    onClick: e => {
      e.preventDefault();
      const target = document.getElementById(e.currentTarget.hash.slice(1));
      target.scrollIntoView({
        behavior: `smooth`,
        // smooth scroll
        block: `start` // the upper border of the element will be aligned at the top of the visible part of the window of the scrollable area.

      });
    }
  }, message));
};

const ButtonText = state => {
  if (state.value === `done`) {
    return `Refresh State`;
  }

  return `Install Recipe`;
};

const ResourceChildren = ({
  resourceChildren,
  state
}) => {
  if (!resourceChildren || !resourceChildren.length) {
    return null;
  }

  return (0, _themeUi.jsx)(_themeUi.Styled.ul, {
    sx: {
      ml: 0,
      mt: 0,
      pl: 0
    }
  }, resourceChildren.map(resource => (0, _themeUi.jsx)(_themeUi.Styled.li, {
    sx: {
      listStyleType: `none`
    },
    key: resource._uuid
  }, (0, _themeUi.jsx)(ResourceMessage, {
    state: state,
    resource: resource
  }), (0, _themeUi.jsx)(ResourceChildren, {
    state: state,
    resourceChildren: resource.resourceChildren
  }))));
};

function Wrapper({
  children
}) {
  return (0, _themeUi.jsx)("div", {
    sx: {
      maxWidth: 1000,
      margin: `0 auto`
    }
  }, children);
}

const RecipeInterpreter = () => {
  var _state$context$plan2, _state$context$plan3, _state$context$export2;

  // eslint-disable-next-line
  const [localRecipe, setRecipe] = useState(recipe);
  const [subscriptionResponse] = useSubscription({
    query: `
          subscription {
            operation {
              state
            }
          }
        `
  }, (_prev, now) => now); // eslint-disable-next-line

  const [_, createOperation] = useMutation(`
        mutation ($recipePath: String!, $projectRoot: String!) {
          createOperation(recipePath: $recipePath, projectRoot: $projectRoot)
        }
      `); // eslint-disable-next-line

  const [__, _sendEvent] = useMutation(`
        mutation($event: String!, $input: String) {
          sendEvent(event: $event, input: $input)
        }
      `);

  sendEvent = ({
    event,
    input
  }) => {
    if (input) {
      _sendEvent({
        event,
        input: JSON.stringify(input)
      });
    } else {
      _sendEvent({
        event
      });
    }
  };

  const startRecipe = async () => {
    if (!showRecipesList) {
      log(`createOperation`);

      if (!isRecipeStarted) {
        isRecipeStarted = true;

        try {
          await createOperation({
            recipePath: localRecipe,
            projectRoot
          });
        } catch (e) {
          log(`error creating operation`, e);
          isRecipeStarted = false;
        }
      }

      checkServerSession();
    }
  };

  subscriptionClient.connectionCallback = async () => {
    checkServerSession();
    startRecipe();
  };

  if (isSubscriptionConnected) {
    startRecipe();
  }

  const state = subscriptionResponse.data && JSON.parse(subscriptionResponse.data.operation.state);

  if (showRecipesList) {
    return (0, _themeUi.jsx)(Wrapper, null, (0, _themeUi.jsx)(WelcomeMessage, null), (0, _themeUi.jsx)(_themeUi.Styled.p, null, "Select a recipe to run"), (0, _themeUi.jsx)(RecipesList, {
      setRecipe: async recipeItem => {
        showRecipesList = false;

        try {
          await createOperation({
            recipePath: recipeItem,
            projectRoot
          });
        } catch (e) {
          log(`error creating operation`, e);
        }
      }
    }));
  }

  if (!state) {
    return (0, _themeUi.jsx)(Wrapper, null, (0, _themeUi.jsx)(Spinner, null), " Loading recipe");
  }

  const isDone = state.value === `done`;

  if (state.value === `doneError`) {
    console.log(`doneError state`, state);
  }

  log(`state`, state);
  log(`plan`, state.context.plan);
  log(`stepResources`, state.context.stepResources);
  const staticMessages = {};

  for (let step = 0; step < state.context.currentStep; step++) {
    staticMessages[step] = [{
      type: `mdx`,
      key: `mdx-${step}`,
      value: state.context.steps[step]
    }];
  }

  lodash.flattenDeep(state.context.stepResources).forEach((res, i) => {
    staticMessages[res._currentStep].push({
      type: `resource`,
      key: `finished-stuff-${i}`,
      value: res._message
    });
  });
  log(`staticMessages`, staticMessages);
  log(`renderTime`, new Date());

  if (isDone) {
    process.nextTick(() => {
      subscriptionClient.close();
      log(`The recipe finished successfully`);
      lodash.flattenDeep(state.context.stepResources).forEach((res, i) => {
        log(`✅ ${res._message}\n`);
      });
    });
  }

  const plansWithoutInputs = (_state$context$plan2 = state.context.plan) === null || _state$context$plan2 === void 0 ? void 0 : _state$context$plan2.filter(p => p.resourceName !== `Input`);
  const groupedPlans = lodash.groupBy(plansWithoutInputs, p => p.resourceName);
  return (0, _themeUi.jsx)(React.Fragment, null, (0, _themeUi.jsx)(_themeUi.Styled.p, null, ` `), (0, _themeUi.jsx)(_resourceProvider.ResourceProvider, {
    value: ((_state$context$plan3 = state.context.plan) === null || _state$context$plan3 === void 0 ? void 0 : _state$context$plan3.filter(p => {
      var _p$resourceDefinition;

      return p.resourceName !== `Input` && ((_p$resourceDefinition = p.resourceDefinitions) === null || _p$resourceDefinition === void 0 ? void 0 : _p$resourceDefinition._key);
    })) || []
  }, (0, _themeUi.jsx)(_inputProvider.InputProvider, {
    value: state.context.inputs || {}
  }, (0, _themeUi.jsx)(Wrapper, null, (0, _themeUi.jsx)(WelcomeMessage, null), (0, _themeUi.jsx)("div", {
    sx: {
      mb: 8,
      display: `flex`,
      alignItems: `flex-start`,
      justifyContent: `space-between`
    }
  }, (0, _themeUi.jsx)("div", {
    sx: {
      "*:last-child": {
        mb: 0
      }
    }
  }, (0, _themeUi.jsx)(_mdx.default, {
    components: components,
    scope: {
      sendEvent
    },
    remarkPlugins: [removeJsx]
  }, ((_state$context$export2 = state.context.exports) === null || _state$context$export2 === void 0 ? void 0 : _state$context$export2.join(`\n`)) + `\n\n` + state.context.steps[0])), (0, _themeUi.jsx)(Button, {
    onClick: () => sendEvent({
      event: `CONTINUE`
    }),
    loading: state.value === `applyingPlan` ? true : false,
    loadingLabel: `Installing`,
    sx: {
      width: `140px`,
      ml: 6
    }
  }, (0, _themeUi.jsx)(ButtonText, {
    state: state
  }))), (0, _themeUi.jsx)("div", {
    sx: {
      marginBottom: 14
    }
  }, (0, _themeUi.jsx)(Heading, {
    sx: {
      marginBottom: 6
    }
  }, plansWithoutInputs === null || plansWithoutInputs === void 0 ? void 0 : plansWithoutInputs.length, ` `, "Changes"), Object.entries(groupedPlans).map(([resourceName, plans]) => (0, _themeUi.jsx)("div", {
    key: `key-${resourceName}`
  }, (0, _themeUi.jsx)(Heading, {
    as: "h3",
    sx: {
      mb: 3,
      fontWeight: 400,
      fontStyle: `italic`
    }
  }, resourceName), (0, _themeUi.jsx)(_themeUi.Styled.ul, {
    sx: {
      pl: 3,
      marginTop: 0,
      mb: 5
    }
  }, plans.filter(p => p.resourceName !== `Input`).map((p, i) => (0, _themeUi.jsx)(_themeUi.Styled.li, {
    sx: {
      listStyleType: `none`
    },
    key: `${resourceName}-plan-${i}`
  }, (0, _themeUi.jsx)(ResourceMessage, {
    state: state,
    resource: p
  }), (0, _themeUi.jsx)(ResourceChildren, {
    state: state,
    resourceChildren: p.resourceChildren
  }))))))), (0, _themeUi.jsx)(Heading, {
    sx: {
      mb: 6
    }
  }, state.context.steps.length - 1, " Steps"), state.context.steps.slice(1).map((step, i) => (0, _themeUi.jsx)(Step, {
    state: state,
    step: step,
    key: `step-${i}`,
    i: i
  }))))));
};

const WithProviders = ({
  children
}) => {
  const baseTheme = getTheme();
  const theme = { ...baseTheme,
    colors: { ...baseTheme.colors,
      background: `white`
    },
    fontWeights: { ...baseTheme.fontWeights
    },
    styles: {
      h1: {
        fontSize: 6,
        fontFamily: `heading`,
        fontWeight: `heading`,
        mt: 0,
        mb: 4
      },
      h2: {
        fontSize: 5,
        fontFamily: `heading`,
        fontWeight: `heading`,
        mt: 0,
        mb: 4
      },
      p: {
        color: baseTheme.tones.NEUTRAL.dark,
        fontSize: 2,
        fontFamily: `body`,
        fontWeight: `body`,
        mt: 0,
        mb: 4,
        lineHeight: 1.45
      },
      pre: {
        fontFamily: baseTheme.fonts.monospace,
        fontSize: 0,
        lineHeight: 1.45,
        mt: 0,
        mb: 6,
        whiteSpace: `pre-wrap`
      },
      inlineCode: {
        backgroundColor: `hsla(0,0%,0%,0.06)`,
        color: baseTheme.tones.NEUTRAL.darker,
        borderRadius: `3px`,
        py: `0.2em`,
        px: `0.2em`,
        fontSize: `90%`
      },
      ol: {
        color: baseTheme.tones.NEUTRAL.dark,
        paddingLeft: 8,
        mt: 0,
        mb: 6,
        fontFamily: `body`,
        fontWeight: `body`
      },
      ul: {
        color: baseTheme.tones.NEUTRAL.dark,
        paddingLeft: 8,
        mt: 0,
        mb: 6,
        fontFamily: `body`,
        fontWeight: `body`
      },
      li: {
        color: baseTheme.tones.NEUTRAL.dark,
        mb: 2,
        fontFamily: `body`,
        fontWeight: `body`,
        lineHeight: 1.6
      }
    }
  };
  return (0, _themeUi.jsx)(UrqlProvider, {
    value: client
  }, (0, _themeUi.jsx)(_themeUi.ThemeProvider, {
    theme: theme
  }, (0, _themeUi.jsx)(ThemeProvider, {
    theme: theme
  }, (0, _themeUi.jsx)("main", null, children))));
};

const GlobalStyles = () => (0, _themeUi.jsx)(Global, {
  styles: {
    body: {
      fontFamily: `-apple-system, system-ui, sans-serif`
    },
    h1: {
      fontWeight: 700,
      fontFamily: `Futura PT,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif!`
    }
  }
});

var _default = () => (0, _themeUi.jsx)(WithProviders, null, (0, _themeUi.jsx)(GlobalStyles, null), (0, _themeUi.jsx)(RecipeInterpreter, null));

exports.default = _default;