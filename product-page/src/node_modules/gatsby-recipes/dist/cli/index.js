"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _inkSelectInput = _interopRequireDefault(require("ink-select-input"));

var _ink = require("ink");

var _inkSpinner = _interopRequireDefault(require("ink-spinner"));

var _mdx = _interopRequireDefault(require("../components/mdx"));

var _resourceProvider = require("../renderer/resource-provider");

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const React = require(`react`);

const {
  useState,
  useEffect
} = require(`react`);

const hicat = require(`hicat`);

const {
  trackCli
} = require(`gatsby-telemetry`);

const {
  createClient,
  useMutation,
  useSubscription,
  Provider,
  defaultExchanges,
  subscriptionExchange
} = require(`urql`);

const {
  SubscriptionClient
} = require(`subscriptions-transport-ws`);

const fetch = require(`node-fetch`);

const ws = require(`ws`);

const semver = require(`semver`);

const remove = require(`unist-util-remove`);

const removeJsx = () => tree => {
  remove(tree, `export`, () => true);
  return tree;
}; // Inline ink-link as it's not upgraded to v3 yet


const Link = props => /*#__PURE__*/React.createElement(_ink.Transform, {
  transform: children => (0, _terminalLink.default)(children, props.url, {
    fallback: props.fallback
  })
}, /*#__PURE__*/React.createElement(_ink.Text, null, props.children));

Link.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]).isRequired,
  url: _propTypes.default.string,
  fallback: _propTypes.default.bool
};
Link.defaultProps = {
  url: ``,
  fallback: true
}; // Check for what version of React is loaded & warn if it's too low.

if (semver.lt(React.version, `16.8.0`)) {
  console.log(`Recipes works best with newer versions of React. Please file a bug report if you see this warning.`);
}

const WelcomeMessage = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_ink.Box, {
  borderStyle: "double",
  borderColor: "magentaBright",
  padding: 1,
  marginBottom: 1,
  marginLeft: 2,
  marginRight: 2
}, /*#__PURE__*/React.createElement(_ink.Text, null, "Thank you for trying the experimental version of Gatsby Recipes!")), /*#__PURE__*/React.createElement(Div, {
  marginBottom: 2,
  alignItems: "center"
}, /*#__PURE__*/React.createElement(_ink.Text, null, "Please ask questions, share your recipes, report bugs, and subscribe for updates in our umbrella issue at https://github.com/gatsbyjs/gatsby/issues/22991")));

const RecipesList = ({
  setRecipe
}) => {
  const items = [{
    label: `Add a custom ESLint config`,
    value: `eslint.mdx`
  }, {
    label: `Add Jest`,
    value: `jest.mdx`
  }, // Waiting on joi2graphql support for Joi.object().unknown()
  // with a JSON type.
  // {
  // label: "Automatically run Prettier on commits",
  // value: "prettier-git-hook.mdx",
  // },
  {
    label: `Add Gatsby Theme Blog`,
    value: `gatsby-theme-blog`
  }, {
    label: `Add Gatsby Theme Blog Core`,
    value: `gatsby-theme-blog-core`
  }, {
    label: `Add Gatsby Theme Notes`,
    value: `gatsby-theme-notes`
  }, {
    label: `Add persistent layout component with gatsby-plugin-layout`,
    value: `gatsby-plugin-layout`
  }, {
    label: `Add Theme UI`,
    value: `theme-ui.mdx`
  }, {
    label: `Add Emotion`,
    value: `emotion.mdx`
  }, {
    label: `Add support for MDX Pages`,
    value: `mdx-pages.mdx`
  }, {
    label: `Add support for MDX Pages with images`,
    value: `mdx-images.mdx`
  }, {
    label: `Add Styled Components`,
    value: `styled-components.mdx`
  }, {
    label: `Add Tailwind`,
    value: `tailwindcss.mdx`
  }, {
    label: `Add Sass`,
    value: `sass.mdx`
  }, {
    label: `Add Typescript`,
    value: `typescript.mdx`
  }, {
    label: `Add Cypress testing`,
    value: `cypress.mdx`
  }, {
    label: `Add animated page transition support`,
    value: `animated-page-transitions.mdx`
  }, {
    label: `Add plugins to make site a PWA`,
    value: `pwa.mdx`
  }, {
    label: `Add React Helmet`,
    value: `gatsby-plugin-react-helmet.mdx`
  }, {
    label: `Add GitHub Pages deployment with Travis CI`,
    value: `travis-deploy-github-pages.mdx`
  }, {
    label: `Add Headless WordPress integration`,
    value: `wordpress.mdx`
  }, {
    label: `Add Storybook - JavaScript`,
    value: `storybook-js.mdx`
  }, {
    label: `Add Storybook - TypeScript`,
    value: `storybook-ts.mdx`
  }, {
    label: `Add AVA`,
    value: `ava.mdx`
  }, {
    label: `Add Preact`,
    value: `preact.mdx`
  }, {
    label: `Add GitLab CI/CD`,
    value: `gitlab-ci-cd.mdx`
  }];
  return /*#__PURE__*/React.createElement(_inkSelectInput.default.default, {
    items: items,
    onSelect: setRecipe,
    indicatorComponent: item => /*#__PURE__*/React.createElement(_ink.Text, {
      color: item.isSelected ? `yellow` : `magentaBright`
    }, item.isSelected ? `>>` : `  `, item.label),
    itemComponent: props => /*#__PURE__*/React.createElement(_ink.Text, {
      color: "magentaBright"
    }, props.isSelected, ` `, props.label)
  });
};

const Div = props => /*#__PURE__*/React.createElement(_ink.Box, (0, _extends2.default)({
  textWrap: "wrap",
  flexDirection: "column",
  marginBottom: 1
}, props)); // Markdown ignores new lines and so do we.


function eliminateNewLines(children) {
  return React.Children.map(children, child => {
    if (!React.isValidElement(child)) {
      return child.replace(/(\r\n|\n|\r)/gm, ` `);
    }

    if (child.props.children) {
      child = React.cloneElement(child, {
        children: eliminateNewLines(child.props.children)
      });
    }

    return child;
  });
}

const ResourceComponent = props => {
  var _resource, _resource2, _resource3, _resource4, _resource5;

  let resource;

  if (props._key) {
    resource = (0, _resourceProvider.useResource)(props._key);
  } else {
    resource = (0, _resourceProvider.useResourceByUUID)(props._uuid);
  }

  return /*#__PURE__*/React.createElement(Div, {
    marginBottom: 1
  }, /*#__PURE__*/React.createElement(_ink.Text, {
    color: "yellow",
    backgroundColor: "black",
    bold: true,
    underline: true
  }, resource.resourceName, ":"), /*#__PURE__*/React.createElement(_ink.Text, {
    color: "green"
  }, (_resource = resource) === null || _resource === void 0 ? void 0 : _resource.describe), ((_resource2 = resource) === null || _resource2 === void 0 ? void 0 : _resource2.diff) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_ink.Text, null, ` `), /*#__PURE__*/React.createElement(_ink.Text, null, (_resource3 = resource) === null || _resource3 === void 0 ? void 0 : _resource3.diff)) : null, ((_resource4 = resource) === null || _resource4 === void 0 ? void 0 : _resource4.error) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_ink.Text, null, ` `), /*#__PURE__*/React.createElement(_ink.Text, {
    backgroundColor: "#C41E3A",
    color: "white"
  }, (_resource5 = resource) === null || _resource5 === void 0 ? void 0 : _resource5.error)) : null);
};

const components = {
  inlineCode: props => /*#__PURE__*/React.createElement(_ink.Text, null, "`", props.children, "`"),
  pre: props => /*#__PURE__*/React.createElement(Div, props),
  code: props => {
    // eslint-disable-next-line
    let language = "```";

    if (props.className) {
      // eslint-disable-next-line
      language = props.className.split(`-`)[1];
    }

    const children = hicat(props.children.trim(), {
      lang: language
    });
    const ansi = `\`\`\`${language}\n${children.ansi}\n\`\`\``;
    return /*#__PURE__*/React.createElement(Div, {
      marginBottom: 1
    }, /*#__PURE__*/React.createElement(_ink.Text, null, ansi));
  },
  h1: props => /*#__PURE__*/React.createElement(_ink.Box, {
    marginBottom: 1
  }, /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    bold: true,
    underline: true
  }, props))),
  h2: props => /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    bold: true
  }, props)),
  h3: props => /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    bold: true,
    italic: true
  }, props)),
  h4: props => /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    bold: true
  }, props)),
  h5: props => /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    bold: true
  }, props)),
  h6: props => /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    bold: true
  }, props)),
  a: ({
    href,
    children
  }) => /*#__PURE__*/React.createElement(Link, {
    url: href
  }, children),
  strong: props => /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    bold: true
  }, props)),
  em: props => /*#__PURE__*/React.createElement(_ink.Text, (0, _extends2.default)({
    italic: true
  }, props)),
  p: props => {
    const children = eliminateNewLines(props.children);
    return /*#__PURE__*/React.createElement(Div, null, /*#__PURE__*/React.createElement(_ink.Text, null, children));
  },
  // Don't use <Box> for li > p as that breaks Ink.
  "li.p": props => {
    const children = eliminateNewLines(props.children);
    return /*#__PURE__*/React.createElement(_ink.Text, null, children);
  },
  // p: () => <Text>`hi`</Text>, // null,
  ul: props => /*#__PURE__*/React.createElement(Div, {
    marginBottom: 1
  }, props.children),
  li: props => /*#__PURE__*/React.createElement(_ink.Text, null, "* ", props.children),
  Config: () => null,
  GatsbyPlugin: props => /*#__PURE__*/React.createElement(ResourceComponent, props),
  NPMPackageJson: props => /*#__PURE__*/React.createElement(ResourceComponent, props),
  NPMPackage: props => /*#__PURE__*/React.createElement(ResourceComponent, props),
  File: props => /*#__PURE__*/React.createElement(ResourceComponent, props),
  Directory: props => /*#__PURE__*/React.createElement(ResourceComponent, props),
  GatsbyShadowFile: () => null,
  NPMScript: props => /*#__PURE__*/React.createElement(ResourceComponent, props),
  RecipeIntroduction: props => /*#__PURE__*/React.createElement(Div, props),
  RecipeStep: props => {
    const children = React.Children.toArray(props.children);
    const firstChild = children.shift();
    children.unshift( /*#__PURE__*/React.createElement(_ink.Box, {
      key: "header",
      flexDirection: "row"
    }, /*#__PURE__*/React.createElement(_ink.Text, null, props.step, ")", ` `), firstChild));
    return /*#__PURE__*/React.createElement(Div, null, /*#__PURE__*/React.createElement(_ink.Box, {
      borderStyle: "single",
      padding: 1,
      flexDirection: "column",
      borderColor: "magentaBright"
    }, children));
  },
  div: props => /*#__PURE__*/React.createElement(Div, props)
};

var _default = async ({
  recipe,
  isDevelopMode,
  isInstallMode,
  graphqlPort,
  projectRoot
}) => {
  try {
    const GRAPHQL_ENDPOINT = `http://localhost:${graphqlPort}/graphql`;
    const subscriptionClient = new SubscriptionClient(`ws://localhost:${graphqlPort}/graphql`, {
      reconnect: true
    }, ws);
    let showRecipesList = false;

    if (!recipe) {
      showRecipesList = true;
    }

    const client = createClient({
      fetch,
      url: GRAPHQL_ENDPOINT,
      exchanges: [...defaultExchanges, subscriptionExchange({
        forwardSubscription(operation) {
          return subscriptionClient.request(operation);
        }

      })]
    });

    const Plan = ({
      state,
      localRecipe,
      isDevelopMode
    }) => {
      var _state$context$plan, _state$context$export;

      const {
        exit
      } = (0, _ink.useApp)(); // Exit the app after we render

      useEffect(() => {
        if (!isDevelopMode) {
          exit();
        }
      }, []);
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_resourceProvider.ResourceProvider // Exclude inputs as they are components (so "plans" currrently
      // (we need to cleanup our names) too like resources which is why we
      // exclude them. The input from the inputs (haha) are ignored unless
      // they're passed as props into a resource component in which case
      // they're validated like normal.
      , {
        value: ((_state$context$plan = state.context.plan) === null || _state$context$plan === void 0 ? void 0 : _state$context$plan.filter(p => p.resourceName !== `Input`)) || []
      }, /*#__PURE__*/React.createElement(WelcomeMessage, null), isDevelopMode ? /*#__PURE__*/React.createElement(_ink.Box, {
        flexDirection: "column",
        marginBottom: 2
      }, /*#__PURE__*/React.createElement(_ink.Text, {
        strong: true,
        underline: true
      }, "DEVELOP MODE")) : null, /*#__PURE__*/React.createElement(_mdx.default, {
        key: "DOC",
        components: components,
        remarkPlugins: [removeJsx]
      }, ((_state$context$export = state.context.exports) === null || _state$context$export === void 0 ? void 0 : _state$context$export.join(`\n`)) + `\n\n` + state.context.steps.join(`\n`)), /*#__PURE__*/React.createElement(_ink.Text, null, `\n------\n`), /*#__PURE__*/React.createElement(_ink.Text, {
        color: "yellow"
      }, "To install this recipe, run:"), /*#__PURE__*/React.createElement(_ink.Text, null, ` `), /*#__PURE__*/React.createElement(_ink.Text, null, `  `, "gatsby recipes ", localRecipe, " --install"), /*#__PURE__*/React.createElement(_ink.Text, null, ` `)));
    };

    const Installing = ({
      state
    }) => /*#__PURE__*/React.createElement(Div, null, state.context.plan.map((p, i) => /*#__PURE__*/React.createElement(Div, {
      key: `${p.resourceName}-${i}`
    }, /*#__PURE__*/React.createElement(_ink.Text, {
      italic: true
    }, p.resourceName, ":"), /*#__PURE__*/React.createElement(_ink.Text, null, ` `, p.isDone ? `✅ ` : /*#__PURE__*/React.createElement(_inkSpinner.default.default, null), ` `, p.isDone ? p._message : p.describe, ` `, state.context.elapsed > 0 && /*#__PURE__*/React.createElement(_ink.Text, null, "(", state.context.elapsed / 1000, "s elapsed)")))));

    let sentContinue = false;

    const RecipeInterpreter = () => {
      const {
        exit
      } = (0, _ink.useApp)(); // eslint-disable-next-line

      const [localRecipe, setRecipe] = useState(recipe);
      const [subscriptionResponse] = useSubscription({
        query: `
          subscription {
            operation {
              state
            }
          }
        `
      }, (_prev, now) => now); // eslint-disable-next-line

      const [_, createOperation] = useMutation(`
        mutation ($recipePath: String!, $projectRoot: String!) {
          createOperation(recipePath: $recipePath, projectRoot: $projectRoot)
        }
      `); // eslint-disable-next-line

      const [__, _sendEvent] = useMutation(`
        mutation($event: String!, $input: String) {
          sendEvent(event: $event, input: $input)
        }
      `);

      const sendEvent = ({
        event,
        input
      }) => {
        if (input) {
          _sendEvent({
            event,
            input: JSON.stringify(input)
          });
        } else {
          _sendEvent({
            event
          });
        }
      };

      subscriptionClient.connectionCallback = async () => {
        if (!showRecipesList) {
          try {
            await createOperation({
              recipePath: localRecipe,
              projectRoot
            });
          } catch (e) {
            console.log(`error creating operation`, e);
          }
        }
      };

      const state = subscriptionResponse.data && JSON.parse(subscriptionResponse.data.operation.state);
      (0, _ink.useInput)((_, key) => {
        if (showRecipesList) {
          return;
        }

        if (key.return) {
          sendEvent({
            event: `CONTINUE`
          });
        }
      });

      if (showRecipesList) {
        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(WelcomeMessage, null), /*#__PURE__*/React.createElement(_ink.Text, {
          bold: true,
          underline: true
        }, "Select a recipe to run"), /*#__PURE__*/React.createElement(RecipesList, {
          setRecipe: async recipeItem => {
            setRecipe(recipeItem.value.slice(0, -4));
            trackCli(`RECIPE_RUN`, {
              name: recipeItem.value
            });
            showRecipesList = false;

            try {
              await createOperation({
                recipePath: recipeItem.value,
                projectRoot
              });
            } catch (e) {
              console.log(`error creating operation`, e);
            }
          }
        }));
      }

      const ValidationErrors = state => {
        var _state$context;

        if ((_state$context = state.context) === null || _state$context === void 0 ? void 0 : _state$context.plan) {
          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_ink.Text, {
            bold: true
          }, "The recipe didn't validate. Please fix the following errors:"), /*#__PURE__*/React.createElement(_ink.Text, null, `\n`), state.context.plan.filter(p => p.error).map((p, i) => /*#__PURE__*/React.createElement(ResourceComponent, (0, _extends2.default)({
            key: i
          }, p))));
        } else return null;
      };

      const GeneralError = ({
        state
      }) => {
        var _state$context2, _state$context2$error;

        if ((_state$context2 = state.context) === null || _state$context2 === void 0 ? void 0 : (_state$context2$error = _state$context2.error) === null || _state$context2$error === void 0 ? void 0 : _state$context2$error.error) {
          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_ink.Text, {
            bold: true
          }, "The recipe has an error:"), /*#__PURE__*/React.createElement(_ink.Text, null, `\n`), /*#__PURE__*/React.createElement(_ink.Text, {
            backgroundColor: "#C41E3A",
            color: "white"
          }, state.context.error.error));
        } else return null;
      };

      if ((state === null || state === void 0 ? void 0 : state.value) === `doneError`) {
        var _state$context$plan2;

        process.nextTick(() => process.exit());
        return /*#__PURE__*/React.createElement(_resourceProvider.ResourceProvider, {
          value: ((_state$context$plan2 = state.context.plan) === null || _state$context$plan2 === void 0 ? void 0 : _state$context$plan2.filter(p => p.resourceName !== `Input`)) || []
        }, /*#__PURE__*/React.createElement(ValidationErrors, null), /*#__PURE__*/React.createElement(GeneralError, {
          state: state
        }));
      }

      let isReady; // If installing, continue from presentPlan to applyingPlan

      if ((state === null || state === void 0 ? void 0 : state.value) === `presentPlan` && isInstallMode) {
        if (!sentContinue) {
          sendEvent({
            event: `CONTINUE`
          });
          sentContinue = true;
        }
      } // install mode


      if (isInstallMode) {
        isReady = (state === null || state === void 0 ? void 0 : state.value) === `applyingPlan` || (state === null || state === void 0 ? void 0 : state.value) === `done`;
      } else {
        isReady = (state === null || state === void 0 ? void 0 : state.value) === `presentPlan`;
      }

      if (!isReady) {
        return /*#__PURE__*/React.createElement(_ink.Text, null, /*#__PURE__*/React.createElement(_inkSpinner.default.default, null), " Loading recipe");
      }

      const isDone = state.value === `done`;

      if (isDone) {
        process.nextTick(() => {
          subscriptionClient.close();
          exit();
          process.stdout.write(`\n\n---\n\n\nThe recipe finished successfully!\n\n`);
          process.exit();
        }); // return null
      }

      if (isInstallMode) {
        return /*#__PURE__*/React.createElement(Installing, {
          state: state
        });
      } else {
        return /*#__PURE__*/React.createElement(Plan, {
          state: state,
          localRecipe: localRecipe,
          isDevelopMode: isDevelopMode
        });
      }
    };

    const Wrapper = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Provider, {
      value: client
    }, /*#__PURE__*/React.createElement(_ink.Text, null, ` `), /*#__PURE__*/React.createElement(RecipeInterpreter, null)));

    const Recipe = () => /*#__PURE__*/React.createElement(Wrapper, null); // Enable experimental mode for more efficient reconciler and renderer


    const {
      waitUntilExit
    } = (0, _ink.render)( /*#__PURE__*/React.createElement(Recipe, null), {
      experimental: true
    });
    await waitUntilExit();
  } catch (e) {
    console.log(e);
  }
};

exports.default = _default;