self.Flatted=function(t){"use strict";
/*! (c) 2020 Andrea Giammarchi */const{parse:e,stringify:n}=JSON,{keys:r}=Object,c=String,s=(t,e)=>e,o=t=>t instanceof c?c(t):t,i=(t,e)=>"string"==typeof e?new c(e):e,a=(t,e,n,s)=>r(n).reduce((n,r)=>{const o=n[r];if(o instanceof c){const c=t[o];"object"!=typeof c||e.has(c)?n[r]=s.call(n,r,c):(e.add(c),n[r]=s.call(n,r,a(t,e,c,s)))}else n[r]=s.call(n,r,o);return n},n),l=(t,e,n)=>{const r=c(e.push(n)-1);return t.set(n,r),r};return t.parse=(t,n)=>{const r=e(t,i).map(o),c=r[0],l=n||s,f="object"==typeof c&&c?a(r,new Set,c,l):c;return l.call({"":f},"",f)},t.stringify=(t,e,r)=>{const c=e&&"object"==typeof e?(t,n)=>""===t||-1<e.indexOf(t)?n:void 0:e||s,o=new Map,i=[],a=[];let f=+l(o,i,c.call({"":t},"",t)),u=!f;for(;f<i.length;)u=!0,a[f]=n(i[f++],p,r);return"["+a.join(",")+"]";function p(t,e){if(u)return u=!u,e;const n=c.call(this,t,e);switch(typeof n){case"object":if(null===n)return n;case"string":return o.get(n)||l(o,i,n)}return n}},t}({});
