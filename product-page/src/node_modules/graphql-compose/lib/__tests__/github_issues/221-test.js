"use strict";

var _lodash = require("lodash");

var _ = require("../..");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

describe('github issue #221: addTypeDefs crashes with argument having default enum value', () => {
  it('test graphql query',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    const sc = new _.SchemaComposer();
    expect(() => {
      sc.addTypeDefs(`
        type Image {
          random(format: ImageFormat = JPG): String
        }
        
        enum ImageFormat {
          JPG
        }
      `);
    }).not.toThrowError('Type with name "ImageFormat" does not exists');
    expect(sc.getOTC('Image').getFieldArg('random', 'format').defaultValue).toBe('JPG');
    expect(sc.getOTC('Image').getFieldArgTC('random', 'format').getFieldNames()).toEqual(['JPG']);
  }));
});