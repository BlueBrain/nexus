"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGraphQLType = getGraphQLType;
exports.getComposeTypeName = getComposeTypeName;

var _graphql = require("../graphql");

var _is = require("./is");

var _misc = require("./misc");

function getGraphQLType(anyType) {
  let type = anyType; // extract type from ObjectTypeComposer, InputTypeComposer, EnumTypeComposer and Resolver

  if (type && (0, _is.isFunction)(type.getType)) {
    type = type.getType();
  }

  if (!(0, _graphql.isType)(type)) {
    throw new Error(`You provide incorrect type for 'getGraphQLType' method: ${(0, _misc.inspect)(type)}`);
  }

  return type;
}

function getComposeTypeName(type) {
  if (typeof type === 'string') {
    if (/^[_a-zA-Z][_a-zA-Z0-9]*$/.test(type)) {
      // single type name
      return type;
    } else {
      // parse type name from `type Name { f: Int }`
      const docNode = (0, _graphql.parse)(type);

      if (docNode.definitions[0] && docNode.definitions[0].name && typeof docNode.definitions[0].name.value === 'string') {
        return docNode.definitions[0].name.value;
      }
    }

    throw new Error(`Cannot get type name from string: ${(0, _misc.inspect)(type)}`);
  } else {
    try {
      const gqlType = getGraphQLType(type);

      if (typeof gqlType.name === 'string') {
        return gqlType.name;
      }
    } catch (e) {
      throw new Error(`Cannot get type name from ${(0, _misc.inspect)(type)}`);
    }
  }

  throw new Error(`Cannot get type name from ${(0, _misc.inspect)(type)}`);
}