import { Colors } from "./colors";
import { Font } from "./fonts";
import { FontWeightToken } from "./fontWeights";
import { FontSize, FontSizes } from "./fontSizes";
import { LineHeightToken } from "./lineHeights";
import { LetterSpacingToken } from "./letterSpacings";
import { ZIndexToken, ZIndices } from "./zIndices";
import { SpaceToken, Space } from "./space";
import { RadiusToken, Radii } from "./radii";
import { ShadowToken } from "./shadows";
import { BreakpointToken, Breakpoints, BreakpointsList } from "./breakpoints";
import { Transitions } from "./transition";
import { AtomTone } from "./types";
import { ToneColors } from "./tones";
import { Interpolation, InterpolationWithTheme } from "@emotion/core";
/**
 * Colors
 */
declare type ColorScale = Colors;
/**
 * Tones
 */
declare type ToneScale = Record<AtomTone, ToneColors>;
/**
 * Font families
 */
export declare type ThemeFont = Font;
declare type FontScale = Record<ThemeFont, string>;
/**
 * Font weights
 */
export declare type ThemeFontWeight = FontWeightToken;
declare type FontWeightScale = Record<ThemeFontWeight, number>;
/**
 * Font sizes
 */
export declare type ThemeFontSize = FontSize;
declare type FontSizeScale = FontSizes;
/**
 * Line heights
 */
export declare type ThemeLineHeight = LineHeightToken;
declare type LineHeightScale = Record<ThemeLineHeight, number>;
/**
 * Letter spacings
 */
export declare type ThemeLetterSpacing = LetterSpacingToken;
declare type LetterSpacingScale = Record<ThemeLetterSpacing, string>;
/**
 * Space
 */
export declare type ThemeSpace = SpaceToken;
declare type SpaceScale = Space;
/**
 * Radii
 */
export declare type ThemeRadius = RadiusToken;
declare type RadiusScale = Radii;
/**
 * Shadows
 */
export declare type ThemeShadow = ShadowToken;
declare type ShadowScale = Record<ThemeShadow, string>;
/**
 * Z indices
 */
export declare type ThemeZIndex = ZIndexToken;
declare type ZIndexScale = ZIndices;
/**
 * Breakpoints
 */
export declare type ThemeBreakpoint = BreakpointToken;
declare type BreakpointScale = BreakpointsList;
/**
 * Media breakpoints
 */
export declare type ThemeMediaBreakpoint = BreakpointToken;
declare type MediaBreakpointScale = Breakpoints;
/**
 * Media queries
 */
export declare type ThemeMediaQuery = BreakpointToken;
declare type MediaQueryScale = Record<ThemeMediaQuery, string>;
/**
 * Cards
 */
export declare type CardSpaceVariant = "DEFAULT" | "L" | "M";
export declare type CardStyles = {
    frame: Interpolation;
    space: Record<CardSpaceVariant, Interpolation>;
};
export declare type Theme = {
    colors: Readonly<ColorScale>;
    tones: Readonly<ToneScale>;
    fonts: Readonly<FontScale>;
    fontWeights: Readonly<FontWeightScale>;
    fontSizes: Readonly<FontSizeScale>;
    lineHeights: Readonly<LineHeightScale>;
    letterSpacings: Readonly<LetterSpacingScale>;
    space: Readonly<SpaceScale>;
    radii: Readonly<RadiusScale>;
    shadows: Readonly<ShadowScale>;
    zIndices: Readonly<ZIndexScale>;
    breakpoints: Readonly<BreakpointScale>;
    mediaBreakpoints: Readonly<MediaBreakpointScale>;
    mediaQueries: Readonly<MediaQueryScale>;
    transitions: Readonly<Transitions>;
    cardStyles: Readonly<CardStyles>;
};
export declare function getTheme(): Theme;
export declare type CustomCss = InterpolationWithTheme<Theme>;
export declare type ThemeCss = (theme: Theme) => Interpolation;
export {};
