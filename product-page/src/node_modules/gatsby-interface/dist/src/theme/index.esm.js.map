{"version":3,"file":"index.esm.js","sources":["../../../src/theme/index.ts"],"sourcesContent":["import colors, { Colors } from \"./colors\"\nimport fonts, { Font } from \"./fonts\"\nimport fontWeights, { FontWeightToken } from \"./fontWeights\"\nimport fontSizes, { FontSize, FontSizes } from \"./fontSizes\"\nimport lineHeights, { LineHeightToken } from \"./lineHeights\"\nimport letterSpacings, { LetterSpacingToken } from \"./letterSpacings\"\nimport zIndices, { ZIndexToken, ZIndices } from \"./zIndices\"\nimport space, { SpaceToken, Space } from \"./space\"\nimport radii, { RadiusToken, Radii } from \"./radii\"\nimport shadows, { ShadowToken } from \"./shadows\"\nimport breakpoints, {\n  BreakpointToken,\n  Breakpoints,\n  BreakpointsList,\n  breakpointsList,\n} from \"./breakpoints\"\nimport transitions, { Transitions } from \"./transition\"\nimport { AtomTone } from \"./types\"\nimport tones, { ToneColors } from \"./tones\"\nimport { Interpolation, InterpolationWithTheme } from \"@emotion/core\"\n\n/**\n * Colors\n */\ntype ColorScale = Colors\n\nconst themeColors: ColorScale = colors\n\n/**\n * Tones\n */\ntype ToneScale = Record<AtomTone, ToneColors>\n\nconst themeTones: ToneScale = tones\n\n/**\n * Font families\n */\nexport type ThemeFont = Font\n\ntype FontScale = Record<ThemeFont, string>\n\nconst themeFonts: FontScale = fonts\n\n/**\n * Font weights\n */\nexport type ThemeFontWeight = FontWeightToken\n\ntype FontWeightScale = Record<ThemeFontWeight, number>\n\nconst themeFontWeights: FontWeightScale = fontWeights\n\n/**\n * Font sizes\n */\nexport type ThemeFontSize = FontSize\n\ntype FontSizeScale = FontSizes\n\nconst themeFontSizes: FontSizes = fontSizes\n\n/**\n * Line heights\n */\nexport type ThemeLineHeight = LineHeightToken\n\ntype LineHeightScale = Record<ThemeLineHeight, number>\n\nconst themeLineHeights: LineHeightScale = lineHeights\n\n/**\n * Letter spacings\n */\nexport type ThemeLetterSpacing = LetterSpacingToken\n\ntype LetterSpacingScale = Record<ThemeLetterSpacing, string>\n\nconst themeLetterSpacings: LetterSpacingScale = letterSpacings\n\n/**\n * Space\n */\nexport type ThemeSpace = SpaceToken\n\ntype SpaceScale = Space\n\nconst themeSpace: SpaceScale = space\n\n/**\n * Radii\n */\nexport type ThemeRadius = RadiusToken\n\ntype RadiusScale = Radii\n\nconst themeRadii: RadiusScale = radii\n\n/**\n * Shadows\n */\nexport type ThemeShadow = ShadowToken\n\ntype ShadowScale = Record<ThemeShadow, string>\n\nconst themeShadows: ShadowScale = shadows\n\n/**\n * Z indices\n */\nexport type ThemeZIndex = ZIndexToken\n\ntype ZIndexScale = ZIndices\n\nconst themeZIndices: ZIndexScale = zIndices\n\n/**\n * Breakpoints\n */\nexport type ThemeBreakpoint = BreakpointToken\n\ntype BreakpointScale = BreakpointsList\n\nconst themeBreakpoints: BreakpointScale = breakpointsList\n\n/**\n * Media breakpoints\n */\nexport type ThemeMediaBreakpoint = BreakpointToken\n\ntype MediaBreakpointScale = Breakpoints\n\nconst themeMediaBreakpoints: MediaBreakpointScale = breakpoints\n\n/**\n * Media queries\n */\nexport type ThemeMediaQuery = BreakpointToken\n\ntype MediaQueryScale = Record<ThemeMediaQuery, string>\n\nconst themeMediaQueries: MediaQueryScale = Object.entries(breakpoints).reduce(\n  (memo, [breakpoint, widthInPx]) => {\n    return {\n      ...memo,\n      [breakpoint]: `@media (min-width: ${widthInPx}px)`,\n    }\n  },\n  {}\n) as MediaQueryScale\n\n/**\n * Transitions\n */\nconst themeTransitions = transitions\n\n/**\n * Cards\n */\nexport type CardSpaceVariant = \"DEFAULT\" | \"L\" | \"M\"\n\nexport type CardStyles = {\n  frame: Interpolation\n  space: Record<CardSpaceVariant, Interpolation>\n}\n\nconst themeCardStyles: CardStyles = {\n  frame: {\n    background: colors.primaryBackground,\n    borderRadius: radii[2],\n    boxShadow: shadows.raised,\n  },\n  space: {\n    DEFAULT: {\n      padding: `${space[6]} ${space[3]} ${space[5]} ${space[7]}`,\n    },\n    M: {\n      padding: `${space[5]} ${space[9]}`,\n    },\n    L: {\n      padding: `${space[7]} ${space[9]} ${space[8]}`,\n    },\n  },\n}\n\nexport type Theme = {\n  colors: Readonly<ColorScale>\n  tones: Readonly<ToneScale>\n  fonts: Readonly<FontScale>\n  fontWeights: Readonly<FontWeightScale>\n  fontSizes: Readonly<FontSizeScale>\n  lineHeights: Readonly<LineHeightScale>\n  letterSpacings: Readonly<LetterSpacingScale>\n  space: Readonly<SpaceScale>\n  radii: Readonly<RadiusScale>\n  shadows: Readonly<ShadowScale>\n  zIndices: Readonly<ZIndexScale>\n  breakpoints: Readonly<BreakpointScale>\n  mediaBreakpoints: Readonly<MediaBreakpointScale>\n  mediaQueries: Readonly<MediaQueryScale>\n  transitions: Readonly<Transitions>\n  cardStyles: Readonly<CardStyles>\n}\n\nconst defaultTheme: Theme = {\n  colors: themeColors,\n  tones: themeTones,\n  fonts: themeFonts,\n  fontWeights: themeFontWeights,\n  fontSizes: themeFontSizes,\n  lineHeights: themeLineHeights,\n  letterSpacings: themeLetterSpacings,\n  space: themeSpace,\n  radii: themeRadii,\n  shadows: themeShadows,\n  zIndices: themeZIndices,\n  breakpoints: themeBreakpoints,\n  mediaBreakpoints: themeMediaBreakpoints,\n  mediaQueries: themeMediaQueries,\n  transitions: themeTransitions,\n  cardStyles: themeCardStyles,\n}\n\nexport function getTheme(): Theme {\n  return defaultTheme\n}\n\nexport type CustomCss = InterpolationWithTheme<Theme>\nexport type ThemeCss = (theme: Theme) => Interpolation\n"],"names":["themeColors","colors","themeTones","tones","themeFonts","fonts","themeFontWeights","fontWeights","themeFontSizes","fontSizes","themeLineHeights","lineHeights","themeLetterSpacings","letterSpacings","themeSpace","space","themeRadii","radii","themeShadows","shadows","themeZIndices","zIndices","themeBreakpoints","breakpointsList","themeMediaBreakpoints","breakpoints","themeMediaQueries","Object","entries","reduce","memo","breakpoint","widthInPx","themeTransitions","transitions","themeCardStyles","frame","background","primaryBackground","borderRadius","boxShadow","raised","DEFAULT","padding","M","L","defaultTheme","mediaBreakpoints","mediaQueries","cardStyles","getTheme"],"mappings":";;;;;;;;AA0BA,IAAMA,WAAuB,GAAGC,MAAhC;AAEA;;;;AAKA,IAAMC,UAAqB,GAAGC,KAA9B;AAEA;;;;AAOA,IAAMC,UAAqB,GAAGC,CAA9B;AAEA;;;;AAOA,IAAMC,gBAAiC,GAAGC,CAA1C;AAEA;;;;AAOA,IAAMC,cAAyB,GAAGC,CAAlC;AAEA;;;;AAOA,IAAMC,gBAAiC,GAAGC,CAA1C;AAEA;;;;AAOA,IAAMC,mBAAuC,GAAGC,CAAhD;AAEA;;;;AAOA,IAAMC,UAAsB,GAAGC,KAA/B;AAEA;;;;AAOA,IAAMC,UAAuB,GAAGC,CAAhC;AAEA;;;;AAOA,IAAMC,YAAyB,GAAGC,CAAlC;AAEA;;;;AAOA,IAAMC,aAA0B,GAAGC,QAAnC;AAEA;;;;AAOA,IAAMC,gBAAiC,GAAGC,eAA1C;AAEA;;;;AAOA,IAAMC,qBAA2C,GAAGC,WAApD;AAEA;;;;AAOA,IAAMC,iBAAkC,GAAGC,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BI,MAA5B,CACzC,UAACC,IAAD,QAAmC;AAAA;AAAA,MAA3BC,UAA2B;AAAA,MAAfC,SAAe;;AACjC,4BACKF,IADL,sBAEGC,UAFH,+BAEsCC,SAFtC;AAID,CANwC,EAOzC,EAPyC,CAA3C;AAUA;;;;AAGA,IAAMC,gBAAgB,GAAGC,CAAzB;AAEA;;;;AAUA,IAAMC,eAA2B,GAAG;AAClCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAEpC,MAAM,CAACqC,iBADd;AAELC,IAAAA,YAAY,EAAEtB,CAAK,CAAC,CAAD,CAFd;AAGLuB,IAAAA,SAAS,EAAErB,CAAO,CAACsB;AAHd,GAD2B;AAMlC1B,EAAAA,KAAK,EAAE;AACL2B,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,YAAK5B,KAAK,CAAC,CAAD,CAAV,cAAiBA,KAAK,CAAC,CAAD,CAAtB,cAA6BA,KAAK,CAAC,CAAD,CAAlC,cAAyCA,KAAK,CAAC,CAAD,CAA9C;AADA,KADJ;AAIL6B,IAAAA,CAAC,EAAE;AACDD,MAAAA,OAAO,YAAK5B,KAAK,CAAC,CAAD,CAAV,cAAiBA,KAAK,CAAC,CAAD,CAAtB;AADN,KAJE;AAOL8B,IAAAA,CAAC,EAAE;AACDF,MAAAA,OAAO,YAAK5B,KAAK,CAAC,CAAD,CAAV,cAAiBA,KAAK,CAAC,CAAD,CAAtB,cAA6BA,KAAK,CAAC,CAAD,CAAlC;AADN;AAPE;AAN2B,CAApC;AAsCA,IAAM+B,YAAmB,GAAG;AAC1B7C,EAAAA,MAAM,EAAED,WADkB;AAE1BG,EAAAA,KAAK,EAAED,UAFmB;AAG1BG,EAAAA,KAAK,EAAED,UAHmB;AAI1BG,EAAAA,WAAW,EAAED,gBAJa;AAK1BG,EAAAA,SAAS,EAAED,cALe;AAM1BG,EAAAA,WAAW,EAAED,gBANa;AAO1BG,EAAAA,cAAc,EAAED,mBAPU;AAQ1BG,EAAAA,KAAK,EAAED,UARmB;AAS1BG,EAAAA,KAAK,EAAED,UATmB;AAU1BG,EAAAA,OAAO,EAAED,YAViB;AAW1BG,EAAAA,QAAQ,EAAED,aAXgB;AAY1BK,EAAAA,WAAW,EAAEH,gBAZa;AAa1ByB,EAAAA,gBAAgB,EAAEvB,qBAbQ;AAc1BwB,EAAAA,YAAY,EAAEtB,iBAdY;AAe1BQ,EAAAA,WAAW,EAAED,gBAfa;AAgB1BgB,EAAAA,UAAU,EAAEd;AAhBc,CAA5B;AAmBO,SAASe,QAAT,GAA2B;AAChC,SAAOJ,YAAP;AACD;;;;"}