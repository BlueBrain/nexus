{"version":3,"file":"ThemeProvider.esm.js","sources":["../../../../src/components/ThemeProvider/ThemeProvider.tsx"],"sourcesContent":["import React from \"react\"\nimport { ThemeProvider as ThemeUiProvider, useThemeUI } from \"theme-ui\"\nimport { getTheme, Theme } from \"../../theme\"\n\nexport type ThemeProviderProps = {\n  children?: React.ReactNode\n  theme?: Theme | ((baseTheme: Theme) => Theme)\n}\n\nexport default function ThemeProvider({ children, theme }: ThemeProviderProps) {\n  const themeValue = React.useMemo(() => {\n    const baseTheme = getTheme()\n\n    if (typeof theme === \"function\") {\n      return theme(baseTheme)\n    }\n\n    return theme || baseTheme\n  }, [theme, getTheme])\n\n  return <ThemeUiProvider<Theme> theme={themeValue}>{children}</ThemeUiProvider>\n}\n\n// To distinguish from Theme UI's ThemeProvider\nThemeProvider.displayName = \"GatsbyInterfaceThemeProvider\"\n\nexport function useTheme() {\n  // @ts-ignore\n  return useThemeUI().theme as Theme\n}\n"],"names":["ThemeProvider","children","theme","themeValue","React","useMemo","baseTheme","getTheme","ThemeUiProvider","displayName","useTheme","useThemeUI"],"mappings":";;;;;AASe,SAASA,aAAT,OAAgE;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAC7E,MAAMC,UAAU,GAAGC,cAAK,CAACC,OAAN,CAAc,YAAM;AACrC,QAAMC,SAAS,GAAGC,QAAQ,EAA1B;;AAEA,QAAI,OAAOL,KAAP,KAAiB,UAArB,EAAiC;AAC/B,aAAOA,KAAK,CAACI,SAAD,CAAZ;AACD;;AAED,WAAOJ,KAAK,IAAII,SAAhB;AACD,GARkB,EAQhB,CAACJ,KAAD,EAAQK,QAAR,CARgB,CAAnB;AAUA,sBAAOH,6BAACI,eAAD;AAAwB,IAAA,KAAK,EAAEL;AAA/B,KAA4CF,QAA5C,CAAP;AACD;;;AAhBCA,EAAAA;;AAmBFD,aAAa,CAACS,WAAd,GAA4B,8BAA5B;AAEO,SAASC,QAAT,GAAoB;AACzB;AACA,SAAOC,UAAU,GAAGT,KAApB;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}