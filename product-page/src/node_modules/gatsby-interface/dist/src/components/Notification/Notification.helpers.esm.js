import { defineProperty as _defineProperty } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { MdError, MdWarning } from 'react-icons/md';
import '../icons/BlogIcon.esm.js';
import '../icons/CheckIcon.esm.js';
import '../icons/PortfolioIcon.esm.js';
import '../icons/EcommerceIcon.esm.js';
import '../icons/CheckCircleIcon.esm.js';
import '../icons/EllipsisIcon.esm.js';
import '../icons/InProgressIcon.esm.js';
import '../icons/CloseCircleIcon.esm.js';
import SuccessIcon from '../icons/SuccessIcon.esm.js';
import '../icons/GeneralIcon.esm.js';
import '../icons/ReportsIcon.esm.js';
import '../icons/SkullIcon.esm.js';
import '../icons/BuildsIcon.esm.js';
import '../icons/IntegrationsIcon.esm.js';
import '../icons/FreePlanIcon.esm.js';
import '../icons/ProfessionalPlanIcon.esm.js';
import '../icons/BusinessPlanIcon.esm.js';
import '../icons/EnterprisePlanIcon.esm.js';

var iconByTone = {
  BRAND: null,
  SUCCESS: SuccessIcon,
  DANGER: MdError,
  WARNING: MdWarning,
  NEUTRAL: null
};
var variants = {
  PRIMARY: function PRIMARY(tone) {
    return function (theme) {
      return [{
        background: theme.colors.white,
        borderLeft: "".concat(theme.space[2], " solid ").concat(theme.tones[tone].medium),
        paddingTop: theme.space[5],
        paddingBottom: theme.space[5],
        paddingLeft: theme.space[6],
        paddingRight: theme.space[7]
      }];
    };
  },
  SECONDARY: function SECONDARY(tone) {
    return function (theme) {
      return _defineProperty({
        background: theme.tones[tone].superLight,
        padding: "".concat(theme.space[5], " ").concat(theme.space[7])
      }, theme.mediaQueries.desktop, {
        padding: "".concat(theme.space[7], " ").concat(theme.space[9])
      });
    };
  },
  SOLID: function SOLID(tone) {
    return function (theme) {
      return [_defineProperty({
        background: theme.tones[tone].dark,
        borderRadius: theme.radii[2],
        color: theme.tones[tone].textInverted ? theme.tones[tone].textInverted : theme.colors.white,
        padding: "".concat(theme.space[5], " ").concat(theme.space[7])
      }, theme.mediaQueries.desktop, {
        padding: "".concat(theme.space[7], " ").concat(theme.space[9])
      })];
    };
  }
};
function getNotificationVariantStyles(variant, tone) {
  return variants[variant](tone);
}
getNotificationVariantStyles.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "getNotificationVariantStyles"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/Notification/Notification.helpers.ts"] = {
    name: "getNotificationVariantStyles",
    docgenInfo: getNotificationVariantStyles.__docgenInfo,
    path: "src/components/Notification/Notification.helpers.ts"
  };
}

export { getNotificationVariantStyles, iconByTone };
//# sourceMappingURL=Notification.helpers.esm.js.map
