import { defineProperty as _defineProperty } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { hexToRGBA } from '../../utils/helpers/hexToRgb.esm.js';

var liReset = {
  margin: 0,
  padding: 0
};
var navigationBaseCss = function navigationBaseCss(_theme) {
  return {
    display: "flex"
  };
};
var hamburgerIconCss = function hamburgerIconCss(theme) {
  return {
    "&.active": {
      background: "0 0",
      "&:after": {
        background: theme.colors.white,
        top: 0,
        width: 24,
        transform: "rotate(-45deg)"
      },
      "&:before": {
        background: theme.colors.white,
        top: 0,
        width: 24,
        transform: "rotate(45deg)"
      },
      "&:hover": {
        transform: "scale(1.2)"
      }
    }
  };
};
var navCss = function navCss(mobileNavMediaQuery, isMobileNavOpen) {
  return function (theme) {
    return [_defineProperty({
      display: "flex",
      justifyContent: "space-between",
      width: "100%"
    }, mobileNavMediaQuery, {
      display: isMobileNavOpen ? "block" : "none",
      position: "fixed",
      overflowY: "auto",
      WebkitOverflowScrolling: "touch",
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      margin: 0,
      background: hexToRGBA(theme.colors.purple[90], 0.975, true),
      padding: "5rem 3.5rem 5rem",
      alignItems: "center",
      textAlign: "right"
    })];
  };
};
var listCss = function listCss(mobileNavMediaQuery) {
  return function (theme) {
    return [_defineProperty({
      display: "flex",
      listStyle: "none",
      width: "100%",
      alignItems: "center"
    }, mobileNavMediaQuery, {
      flexDirection: "column",
      alignItems: "flex-end",
      listStyle: "none",
      margin: "0 auto",
      padding: "0 ".concat(theme.space[5]),
      position: "relative",
      zIndex: 1,
      width: "100%",
      maxWidth: "90rem",
      paddingLeft: theme.space[8],
      paddingRight: theme.space[8]
    })];
  };
};

var dropdownOpenCss = function dropdownOpenCss(theme) {
  return {
    fontSize: theme.fontSizes[1],
    fontFamily: theme.fonts.system,
    boxShadow: theme.shadows.dialog,
    background: theme.colors.white,
    borderRadius: theme.radii[1],
    ":after": {
      position: "absolute",
      top: -6,
      left: "50%",
      width: 12,
      height: 12,
      content: "\" \"",
      borderRadius: "2px 0 0 0",
      background: theme.colors.white,
      boxShadow: "-3px -3px 10px ".concat(hexToRGBA(theme.colors.lilac, 0.1, true)),
      willChange: "transform",
      transitionProperty: "transform",
      transitionDuration: theme.transitions.speed["default"]
    }
  };
};

var dropdownListCss = function dropdownListCss(theme, mobileNavMediaQuery) {
  return _defineProperty({
    display: "grid",
    gridTemplateColumns: "max-content"
  }, mobileNavMediaQuery, {
    display: "block",
    gridTemplateColumns: "none",
    padding: "0 0 ".concat(theme.space[4])
  });
};

var dropdownMobileCss = function dropdownMobileCss(theme) {
  return {
    width: "100%",
    color: theme.colors.white,
    position: "relative",
    background: 0,
    padding: 0,
    marginBottom: theme.space[4],
    ":after": {
      content: "none"
    }
  };
};

var itemCss = function itemCss(mobileNavMediaQuery) {
  return function (theme) {
    return [liReset, _defineProperty({
      marginBottom: 0,
      padding: "0 ".concat(theme.space[4]),
      "&:hover > ul": dropdownOpenCss(theme)
    }, mobileNavMediaQuery, {
      display: "block",
      color: theme.colors.white,
      "&:hover > ul": dropdownMobileCss(theme)
    })];
  };
};
var itemLinkCss = function itemLinkCss(mobileNavMediaQuery, isInverted) {
  return function (theme) {
    return [{
      display: "block",
      textDecoration: "none",
      color: "inherit",
      fontSize: theme.fontSizes[1],
      fontFamily: theme.fonts.system,
      fontWeight: theme.fontWeights.body,
      transition: "opacity ".concat(theme.transitions.speed["default"]),
      WebkitFontSmoothing: "antialiased",
      lineHeight: "calc(3.33rem)",
      position: "relative",
      "& span": {
        position: "relative"
      },
      "&.nav-item-active": {
        color: isInverted ? theme.colors.accent : theme.colors.gatsby
      },
      "&.nav-item-active span:after": {
        width: "100%"
      },
      "& span:after": {
        position: "absolute",
        content: "\" \"",
        display: "block",
        width: 0,
        height: 1,
        bottom: -4,
        opacity: 0.2,
        background: isInverted ? "linear-gradient(45deg, ".concat(theme.colors.orange[40], ", ").concat(theme.colors.accent, ")") : "linear-gradient(45deg, ".concat(theme.colors.lilac, ", ").concat(theme.colors.gatsby, ")"),
        transition: "all ".concat(theme.transitions.speed["default"])
      },
      "&:hover": {
        opacity: 0.8
      }
    }, _defineProperty({}, mobileNavMediaQuery, {
      color: theme.colors.white,
      fontFamily: theme.fonts.heading,
      fontWeight: theme.fontWeights.body,
      transition: "opacity ".concat(theme.transitions.speed["default"]),
      WebkitFontSmoothing: "antialiased",
      fontSize: theme.fontSizes[6],
      "&:focus, &:hover": {
        color: theme.colors.accent,
        background: "none",
        opacity: 1
      }
    })];
  };
};
var dropdownCss = function dropdownCss(mobileNavMediaQuery, offset) {
  return function (theme) {
    return [dropdownOpenCss(theme), {
      // offset is set when dropdown in default positioning hits left or right edge of he viewport
      // if so the dropdown is shifted to the position when it fits into the viewport
      transform: "translate(calc(-50% + ".concat(offset, "), -").concat(theme.space[2], ")"),
      ":after": {
        // to make the spout centered to parent menu item we shift it into the opposite direction
        transform: "translateX(calc(-50% + (".concat(offset, " * -1))) rotate(45deg)")
      }
    }, _defineProperty({}, mobileNavMediaQuery, [{
      display: "inline-block",
      background: 0
    }, dropdownMobileCss(theme)]), {}];
  };
};
var dropdownToggleCss = function dropdownToggleCss(mobileNavMediaQuery) {
  return function (theme) {
    return _defineProperty({
      marginLeft: theme.space[1],
      border: "none"
    }, mobileNavMediaQuery, {
      display: "none"
    });
  };
};
var dropdownItemCss = function dropdownItemCss(mobileNavMediaQuery) {
  return function (theme) {
    return {
      "&:first-of-type > a": {
        margin: 0
      },
      a: _defineProperty({
        color: theme.colors.grey[50],
        textDecoration: "none",
        padding: "".concat(theme.space[4], " ").concat(theme.space[7]),
        display: "block",
        transition: "all ".concat(theme.transitions.speed["default"]),
        "&:hover": {
          color: theme.colors.grey[90],
          background: hexToRGBA(theme.colors.accent, 0.1, true)
        },
        "&:focus-within": {
          color: theme.colors.grey[90],
          background: hexToRGBA(theme.colors.accent, 0.1, true)
        }
      }, mobileNavMediaQuery, {
        color: theme.colors.white,
        textDecoration: "none",
        padding: 0,
        margin: "".concat(theme.space[3], " 0 0 0"),
        fontSize: theme.fontSizes[1],
        "&:hover, &:focus-within": {
          opacity: 1,
          color: theme.colors.accent,
          background: "none"
        }
      })
    };
  };
};
var buttonItemCss = function buttonItemCss(mobileNavMediaQuery) {
  return function (theme) {
    return [liReset, _defineProperty({
      marginLeft: theme.space[3]
    }, mobileNavMediaQuery, {
      marginTop: theme.space[3]
    })];
  };
};

export { buttonItemCss, dropdownCss, dropdownItemCss, dropdownListCss, dropdownToggleCss, hamburgerIconCss, itemCss, itemLinkCss, listCss, navCss, navigationBaseCss };
//# sourceMappingURL=Navigation.styles.esm.js.map
