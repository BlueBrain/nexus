{"version":3,"file":"ProgressBar.esm.js","sources":["../../../../src/components/ProgressBar/ProgressBar.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"@emotion/core\"\nimport React from \"react\"\nimport { Theme } from \"../../theme\"\nimport { CSSObject } from \"@emotion/core\"\nimport { visuallyHiddenCss } from \"../../stylesheets/a11y\"\n\nexport type GetProgressColor = (theme: Theme, progression: number) => string\n\nconst defaultGetProgressColor: GetProgressColor = (\n  theme: Theme,\n  progression: number\n) => {\n  if (progression < 33) {\n    return theme.colors.red[50]\n  }\n\n  if (progression < 66) {\n    return theme.colors.orange[50]\n  }\n\n  return theme.colors.green[50]\n}\n\nconst progressCss = (\n  theme: Theme,\n  progression: number,\n  getProgressColor: GetProgressColor\n): CSSObject => ({\n  display: \"block\",\n  width: \"100%\",\n  height: \"6px\",\n  borderRadius: theme.radii[2],\n  position: \"relative\",\n\n  \"&:before\": {\n    content: \"''\",\n    width: `${progression}%`,\n    height: \"6px\",\n    position: \"absolute\",\n    backgroundColor: getProgressColor(theme, progression),\n    borderRadius: theme.radii[2],\n  },\n\n  background: theme.colors.grey[20],\n})\n\nexport interface ProgressBarProps {\n  max: number\n  min?: number\n  value: number\n  \"aria-describedby\": string\n  getProgressColor?: GetProgressColor\n}\n\nexport const ProgressBar: React.FC<ProgressBarProps> = ({\n  max,\n  min = 0,\n  value,\n  getProgressColor = defaultGetProgressColor,\n  ...props\n}) => {\n  const normalizedValue = value > max ? max : value < min ? min : value\n  const progression = (normalizedValue / max) * 100\n\n  return (\n    <div\n      aria-describedby={props[\"aria-describedby\"]}\n      role=\"progressbar\"\n      aria-valuenow={normalizedValue}\n      aria-valuemin={min}\n      aria-valuemax={max}\n      css={theme => progressCss(theme, progression, getProgressColor)}\n    >\n      <span css={visuallyHiddenCss}>\n        {normalizedValue}/{max}\n      </span>\n    </div>\n  )\n}\n"],"names":["defaultGetProgressColor","theme","progression","colors","red","orange","green","progressCss","getProgressColor","display","width","height","borderRadius","radii","position","content","backgroundColor","background","grey","ProgressBar","max","min","value","props","normalizedValue","visuallyHiddenCss"],"mappings":";;;;;AASA,IAAMA,uBAAyC,GAAG,SAA5CA,uBAA4C,CAChDC,KADgD,EAEhDC,WAFgD,EAG7C;AACH,MAAIA,WAAW,GAAG,EAAlB,EAAsB;AACpB,WAAOD,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiB,EAAjB,CAAP;AACD;;AAED,MAAIF,WAAW,GAAG,EAAlB,EAAsB;AACpB,WAAOD,KAAK,CAACE,MAAN,CAAaE,MAAb,CAAoB,EAApB,CAAP;AACD;;AAED,SAAOJ,KAAK,CAACE,MAAN,CAAaG,KAAb,CAAmB,EAAnB,CAAP;AACD,CAbD;;AAeA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAClBN,KADkB,EAElBC,WAFkB,EAGlBM,gBAHkB;AAAA,SAIH;AACfC,IAAAA,OAAO,EAAE,OADM;AAEfC,IAAAA,KAAK,EAAE,MAFQ;AAGfC,IAAAA,MAAM,EAAE,KAHO;AAIfC,IAAAA,YAAY,EAAEX,KAAK,CAACY,KAAN,CAAY,CAAZ,CAJC;AAKfC,IAAAA,QAAQ,EAAE,UALK;AAOf,gBAAY;AACVC,MAAAA,OAAO,EAAE,IADC;AAEVL,MAAAA,KAAK,YAAKR,WAAL,MAFK;AAGVS,MAAAA,MAAM,EAAE,KAHE;AAIVG,MAAAA,QAAQ,EAAE,UAJA;AAKVE,MAAAA,eAAe,EAAER,gBAAgB,CAACP,KAAD,EAAQC,WAAR,CALvB;AAMVU,MAAAA,YAAY,EAAEX,KAAK,CAACY,KAAN,CAAY,CAAZ;AANJ,KAPG;AAgBfI,IAAAA,UAAU,EAAEhB,KAAK,CAACE,MAAN,CAAae,IAAb,CAAkB,EAAlB;AAhBG,GAJG;AAAA,CAApB;;IA+BaC,WAAuC,GAAG,SAA1CA,WAA0C,OAMjD;AAAA,MALJC,GAKI,QALJA,GAKI;AAAA,sBAJJC,GAII;AAAA,MAJJA,GAII,yBAJE,CAIF;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,mCAFJd,gBAEI;AAAA,MAFJA,gBAEI,sCAFeR,uBAEf;AAAA,MADDuB,KACC;;AACJ,MAAMC,eAAe,GAAGF,KAAK,GAAGF,GAAR,GAAcA,GAAd,GAAoBE,KAAK,GAAGD,GAAR,GAAcA,GAAd,GAAoBC,KAAhE;AACA,MAAMpB,WAAW,GAAIsB,eAAe,GAAGJ,GAAnB,GAA0B,GAA9C;AAEA,SACE;AACE,wBAAkBG,KAAK,CAAC,kBAAD,CADzB;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAeC,eAHjB;AAIE,qBAAeH,GAJjB;AAKE,qBAAeD,GALjB;AAME,IAAA,GAAG,EAAE,aAAAnB,KAAK;AAAA,aAAIM,WAAW,CAACN,KAAD,EAAQC,WAAR,EAAqBM,gBAArB,CAAf;AAAA;AANZ,KAQE;AAAM,IAAA,GAAG,EAAEiB;AAAX,KACGD,eADH,OACqBJ,GADrB,CARF,CADF;AAcD;;AA/BCA,EAAAA;AACAC,EAAAA;AACAC,EAAAA;AACA;AACAd,EAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}