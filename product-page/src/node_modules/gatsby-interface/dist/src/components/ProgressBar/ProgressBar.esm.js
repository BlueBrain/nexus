import { objectWithoutProperties as _objectWithoutProperties } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';
import _pt from 'prop-types';
import { visuallyHiddenCss } from '../../stylesheets/a11y.esm.js';

var defaultGetProgressColor = function defaultGetProgressColor(theme, progression) {
  if (progression < 33) {
    return theme.colors.red[50];
  }

  if (progression < 66) {
    return theme.colors.orange[50];
  }

  return theme.colors.green[50];
};

var progressCss = function progressCss(theme, progression, getProgressColor) {
  return {
    display: "block",
    width: "100%",
    height: "6px",
    borderRadius: theme.radii[2],
    position: "relative",
    "&:before": {
      content: "''",
      width: "".concat(progression, "%"),
      height: "6px",
      position: "absolute",
      backgroundColor: getProgressColor(theme, progression),
      borderRadius: theme.radii[2]
    },
    background: theme.colors.grey[20]
  };
};

var ProgressBar = function ProgressBar(_ref) {
  var max = _ref.max,
      _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      value = _ref.value,
      _ref$getProgressColor = _ref.getProgressColor,
      getProgressColor = _ref$getProgressColor === void 0 ? defaultGetProgressColor : _ref$getProgressColor,
      props = _objectWithoutProperties(_ref, ["max", "min", "value", "getProgressColor"]);

  var normalizedValue = value > max ? max : value < min ? min : value;
  var progression = normalizedValue / max * 100;
  return jsx("div", {
    "aria-describedby": props["aria-describedby"],
    role: "progressbar",
    "aria-valuenow": normalizedValue,
    "aria-valuemin": min,
    "aria-valuemax": max,
    css: function css(theme) {
      return progressCss(theme, progression, getProgressColor);
    }
  }, jsx("span", {
    css: visuallyHiddenCss
  }, normalizedValue, "/", max));
};
ProgressBar.propTypes = {
  max: _pt.number.isRequired,
  min: _pt.number,
  value: _pt.number.isRequired,
  "aria-describedby": _pt.string.isRequired,
  getProgressColor: _pt.func
};
ProgressBar.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "ProgressBar",
  "props": {
    "min": {
      "defaultValue": {
        "value": "0",
        "computed": false
      },
      "required": false
    },
    "getProgressColor": {
      "defaultValue": {
        "value": "(\n  theme: Theme,\n  progression: number\n) => {\n  if (progression < 33) {\n    return theme.colors.red[50]\n  }\n\n  if (progression < 66) {\n    return theme.colors.orange[50]\n  }\n\n  return theme.colors.green[50]\n}",
        "computed": false
      },
      "required": false
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/ProgressBar/ProgressBar.tsx"] = {
    name: "ProgressBar",
    docgenInfo: ProgressBar.__docgenInfo,
    path: "src/components/ProgressBar/ProgressBar.tsx"
  };
}

export { ProgressBar };
//# sourceMappingURL=ProgressBar.esm.js.map
