import { slicedToArray as _slicedToArray } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { useState, useLayoutEffect, useRef } from 'react';
import _pt from 'prop-types';
import { createPortal } from 'react-dom';

var useDOMNode = function useDOMNode(tag, isUnique) {
  var domElRef = useRef(undefined);
  useLayoutEffect(function () {
    if (tag) {
      if (isUnique) {
        domElRef.current = document.querySelector(tag);

        if (!domElRef.current) {
          domElRef.current = document.createElement(tag);
          document.body.appendChild(domElRef.current);
        }
      } else {
        domElRef.current = document.createElement(tag);
      }

      return function () {
        if (isUnique) {
          var domNodeToRemove = document.querySelector(tag);
          domNodeToRemove && document.body.removeChild(domNodeToRemove);
        }
      };
    }
  }, [tag, isUnique]);
  return domElRef;
};

var Portal = function Portal(_ref) {
  var children = _ref.children,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? "gatsby-portal" : _ref$tag,
      target = _ref.target;
  var portalNodeRef = useDOMNode(tag);
  var portalRootRef = useDOMNode(target, true);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasInitialized = _useState2[0],
      setHasInitialized = _useState2[1];

  useLayoutEffect(function () {
    if (portalNodeRef.current) {
      var hostNode = portalRootRef.current || document.body;
      hostNode.appendChild(portalNodeRef.current);
      setHasInitialized(true);
      return function () {
        return hostNode.removeChild(portalNodeRef.current);
      };
    }
  }, [tag, target]);
  return hasInitialized && portalNodeRef.current ? createPortal(children, portalNodeRef.current) : null;
};

Portal.propTypes = {
  tag: _pt.string,
  target: _pt.string
};

export default Portal;
//# sourceMappingURL=index.esm.js.map
