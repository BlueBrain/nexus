import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';
import { getBadgeVariantStyles } from './Badge.helpers.esm.js';
import { iconHeightBySize } from '../icons/IconSkeleton.esm.js';

var baseCss = function baseCss(theme) {
  return {
    alignItems: "center",
    borderRadius: theme.radii[1],
    display: "inline-flex",
    fontFamily: theme.fonts.body,
    fontSize: theme.fontSizes[0],
    lineHeight: theme.lineHeights.solid,
    padding: "".concat(theme.space[1], " ").concat(theme.space[3]),
    minHeight: theme.space[7]
  };
};

function Badge(_ref) {
  var children = _ref.children,
      Icon = _ref.Icon,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "STATUS" : _ref$variant,
      _ref$textVariant = _ref.textVariant,
      textVariant = _ref$textVariant === void 0 ? "CAPS" : _ref$textVariant,
      _ref$tone = _ref.tone,
      tone = _ref$tone === void 0 ? "BRAND" : _ref$tone,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "S" : _ref$size,
      rest = _objectWithoutProperties(_ref, ["children", "Icon", "variant", "textVariant", "tone", "size"]);

  var iconSize = size === "S" ? iconHeightBySize.xxsmall : iconHeightBySize.xsmall;
  return jsx("span", _extends({
    css: function css(theme) {
      return [baseCss(theme), textVariant === "CAPS" && {
        textTransform: "uppercase",
        fontWeight: 500,
        letterSpacing: theme.letterSpacings.tracked
      }, size === "M" && {
        borderRadius: theme.radii[2],
        fontSize: theme.fontSizes[1],
        minHeight: "calc(".concat(theme.space[2], " * 7)"),
        padding: "".concat(theme.space[1], " ").concat(theme.space[4])
      }, size === "M" && textVariant === "CAPS" && {
        fontSize: theme.fontSizes[0]
      }, getBadgeVariantStyles(variant, tone)(theme)];
    }
  }, rest), Icon && jsx(Icon, {
    css: function css(theme) {
      return [{
        marginRight: size === "S" ? theme.space[2] : theme.space[3],
        color: theme.tones[tone].medium,
        flexShrink: 0,
        width: iconSize,
        height: iconSize
      }, variant === "PILL" && {
        color: theme.tones[tone].mediumInverted ? theme.tones[tone].mediumInverted : theme.colors.whiteFade[90]
      }];
    }
  }), children);
}
Badge.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Badge",
  "props": {
    "variant": {
      "defaultValue": {
        "value": "`STATUS`",
        "computed": false
      },
      "required": false,
      "tsType": {
        "name": "BadgeVariant"
      },
      "description": ""
    },
    "textVariant": {
      "defaultValue": {
        "value": "`CAPS`",
        "computed": false
      },
      "required": false,
      "tsType": {
        "name": "BadgeTextVariant"
      },
      "description": ""
    },
    "tone": {
      "defaultValue": {
        "value": "`BRAND`",
        "computed": false
      },
      "required": false,
      "tsType": {
        "name": "BadgeTone"
      },
      "description": ""
    },
    "size": {
      "defaultValue": {
        "value": "`S`",
        "computed": false
      },
      "required": false,
      "tsType": {
        "name": "BadgeSize"
      },
      "description": ""
    },
    "children": {
      "required": false,
      "tsType": {
        "name": "ReactReactNode",
        "raw": "React.ReactNode"
      },
      "description": ""
    },
    "Icon": {
      "required": false,
      "tsType": {
        "name": "ReactComponentType",
        "raw": "React.ComponentType<any>",
        "elements": [{
          "name": "any"
        }]
      },
      "description": ""
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/Badge/Badge.tsx"] = {
    name: "Badge",
    docgenInfo: Badge.__docgenInfo,
    path: "src/components/Badge/Badge.tsx"
  };
}

export { Badge };
//# sourceMappingURL=Badge.esm.js.map
