import { defineProperty as _defineProperty } from '../../../_virtual/_rollupPluginBabelHelpers.js';

var hamburgerIconStylesShared = function hamburgerIconStylesShared(theme) {
  return {
    width: 24,
    height: "3px",
    borderRadius: theme.radii[1],
    background: theme.colors.black,
    margin: "10px 0",
    position: "relative",
    zIndex: 1000,
    "&:before, &:after": {
      borderRadius: theme.radii[1],
      height: "3px",
      background: theme.colors.black,
      content: "\" \"",
      position: "absolute",
      right: 0,
      transition: "transform 250ms cubic-bezier(.68,-.55,.265,1.55)"
    },
    ":before": {
      top: -7,
      width: 20
    },
    ":after": {
      top: 7,
      width: 16
    },
    "&.active": {
      background: "0 0",
      "&:before, &:after": {
        top: 0,
        width: 24
      },
      "&:before": {
        transform: "rotate(45deg)"
      },
      "&:after": {
        transform: "rotate(-45deg)"
      },
      "&:hover": {
        transform: "scale(1.2)"
      }
    }
  };
};

var hamburgerIconStylesSharedInverted = function hamburgerIconStylesSharedInverted(theme) {
  var background = theme.colors.white;
  return {
    background: background,
    "&:before, &:after": {
      background: background
    },
    "&.active": {
      "&:before, &:after": {
        background: background
      }
    }
  };
};

var baseNavigationItemCss = function baseNavigationItemCss(theme) {
  return {
    display: "inline-flex",
    position: "relative",
    color: theme.colors.black,
    // Show dropdown menu on hover, if exists
    "&:hover > div": baseNavigationDropdownOpenStyles()
  };
};

var baseNavigationItemInvertedCss = function baseNavigationItemInvertedCss(theme) {
  return {
    color: theme.colors.white
  };
};

var baseNavigationDropdownStyles = function baseNavigationDropdownStyles(_theme, mobileNavMediaQuery) {
  return _defineProperty({
    display: "none",
    position: "absolute",
    top: "100%",
    left: "50%",
    transform: "translateX(-50%)"
  }, mobileNavMediaQuery, {
    position: "relative",
    left: "auto",
    transform: "none",
    top: "auto"
  });
};

var baseNavigationDropdownMeasureStyles = function baseNavigationDropdownMeasureStyles(_theme) {
  return {
    visibility: "hidden",
    display: "block"
  };
};

var baseNavigationDropdownOpenStyles = function baseNavigationDropdownOpenStyles(_theme) {
  return {
    display: "block"
  };
};

var baseNavigationDropdownListStyles = function baseNavigationDropdownListStyles(theme) {
  return {
    margin: 0,
    padding: "".concat(theme.space[4], " 0"),
    listStyle: "none"
  };
};

var baseNavigationDropdownToggleCss = function baseNavigationDropdownToggleCss(theme) {
  return {
    color: theme.colors.black,
    background: "inherit"
  };
};

var baseNavigationDropdownToggleInvertedCss = function baseNavigationDropdownToggleInvertedCss(theme) {
  return {
    color: theme.colors.white,
    background: 0
  };
};

var baseNavigationButtonCss = function baseNavigationButtonCss(theme) {
  return {
    fontSize: theme.fontSizes[2],
    fontWeight: "bold",
    background: theme.colors.gatsby,
    border: 0,
    color: theme.colors.white,
    ":focus, &:hover:not([disabled])": {
      background: theme.colors.purple[70],
      border: 0,
      color: theme.colors.white
    }
  };
};
var baseNavigationButtonInvertedCss = function baseNavigationButtonInvertedCss(theme) {
  return {
    background: theme.colors.white,
    border: "1px solid ".concat(theme.colors.purple[20]),
    color: theme.colors.purple[50],
    ":focus, &:hover:not([disabled])": {
      background: theme.colors.white,
      border: "1px solid ".concat(theme.colors.purple[60]),
      color: theme.colors.purple[60]
    }
  };
};
var baseStyles = {
  navigation: {
    "default": {
      width: "100%"
    }
  },
  hamburger: {
    "default": {
      display: "none"
    },
    mobile: {
      background: "none",
      border: 0,
      display: "block",
      marginLeft: "auto",
      marginTop: -6,
      padding: 0,
      position: "relative",
      zIndex: 22,
      cursor: "pointer",
      transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1)"
    }
  },
  hamburgerIcon: function hamburgerIcon(isInverted) {
    return function (theme) {
      return [hamburgerIconStylesShared(theme), isInverted && hamburgerIconStylesSharedInverted(theme)];
    };
  },
  nav: {
    "default": {},
    mobile: function mobile(isMobileNavOpen) {
      return function (_theme) {
        return {
          display: isMobileNavOpen ? "block " : "none"
        };
      };
    }
  },
  list: {
    wrapper: {
      width: "100%",
      display: "flex",
      justifyContent: "space-between"
    },
    spacer: {
      flex: 1
    },
    side: {
      listStyle: "none",
      margin: 0,
      padding: 0
    },
    leftSide: {
      display: "flex",
      justifyContent: "flex-start",
      flex: 1
    },
    rightSide: {
      display: "flex",
      justifyContent: "flex-end"
    }
  },
  item: function item(isInverted) {
    return function (theme) {
      return [baseNavigationItemCss(theme), isInverted && baseNavigationItemInvertedCss(theme)];
    };
  },
  dropdown: function dropdown(isDropdownOpen, isMeasured, mobileNavMediaQuery) {
    return function (theme) {
      return [baseNavigationDropdownStyles(theme, mobileNavMediaQuery), isMeasured && baseNavigationDropdownMeasureStyles(), isDropdownOpen && baseNavigationDropdownOpenStyles()];
    };
  },
  dropdownList: function dropdownList() {
    return function (theme) {
      return baseNavigationDropdownListStyles(theme);
    };
  },
  dropdownToggle: function dropdownToggle(isInverted) {
    return function (theme) {
      return [baseNavigationDropdownToggleCss(theme), isInverted && baseNavigationDropdownToggleInvertedCss(theme)];
    };
  },
  button: function button(isInverted) {
    return function (theme) {
      return [baseNavigationButtonCss(theme), isInverted && baseNavigationButtonInvertedCss(theme)];
    };
  }
};

export default baseStyles;
export { baseNavigationButtonCss, baseNavigationButtonInvertedCss };
//# sourceMappingURL=BaseNavigation.styles.esm.js.map
