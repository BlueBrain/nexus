import { objectSpread2 as _objectSpread2 } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';

function getFormFieldLabelSizes(theme) {
  return {
    L: theme.fontSizes[2],
    M: theme.fontSizes[1],
    S: theme.fontSizes[0]
  };
}

var getLabelFontSize = function getLabelFontSize(size, t) {
  return {
    fontSize: getFormFieldLabelSizes(t)[size]
  };
};
var getLabelStyles = function getLabelStyles(theme) {
  return {
    color: theme.colors.grey[90],
    lineHeight: theme.lineHeights.dense,
    alignSelf: "center"
  };
};
var RequiredFlag = function RequiredFlag() {
  return jsx("span", {
    css: function css(theme) {
      return {
        color: theme.colors.grey[50],
        fontSize: theme.fontSizes[0],
        marginLeft: theme.space[1]
      };
    }
  }, "(required)");
};
var getFocusStyles = function getFocusStyles(theme, hasError) {
  return {
    boxShadow: "0 0 0 3px ".concat(hasError ? theme.colors.red[10] : theme.colors.purple[20]),
    borderColor: hasError ? theme.colors.red[30] : theme.colors.purple[60]
  };
};
var getInputStyles = function getInputStyles(theme, hasError) {
  return {
    border: hasError ? "1px solid ".concat(theme.colors.red[60]) : "1px solid ".concat(theme.colors.grey[30]),
    background: theme.colors.white,
    borderRadius: theme.radii[2],
    color: theme.colors.grey[90],
    fontFamily: theme.fonts.system,
    fontSize: theme.fontSizes[2],
    height: "2.25rem",
    padding: "0 ".concat(theme.space[3]),
    position: "relative",
    width: "100%",
    zIndex: 1,
    WebkitAppearance: "none",
    ":focus": _objectSpread2({
      outline: "0",
      transition: "box-shadow 0.15s ease-in-out"
    }, getFocusStyles(theme, hasError)),
    ":disabled": {
      background: theme.colors.grey[10],
      cursor: "not-allowed"
    },
    "&:disabled::placeholder": {
      color: theme.colors.grey[40]
    },
    "&::placeholder": {
      color: theme.colors.grey[50]
    }
  };
};
var getDescriptionStyles = function getDescriptionStyles(theme) {
  return {
    color: theme.colors.grey[50],
    fontSize: theme.fontSizes[0],
    lineHeight: theme.lineHeights.dense,
    position: "relative",
    zIndex: 0
  };
};
var getFieldLayoutStyles = function getFieldLayoutStyles(theme) {
  var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "vertical";
  return [{
    display: "grid",
    gridRowGap: theme.space[2],
    gridColumnGap: theme.space[4]
  }, layout === "horizontal" ? {
    gridTemplateAreas: "\n      \"label control\"\n      \"..... hint\"\n      \"..... error\"\n    ",
    gridTemplateColumns: "30% 70%"
  } : {
    gridTemplateAreas: "\n      \"label\"\n      \"control\"\n      \"hint\"\n      \"error\"\n    "
  }];
};
RequiredFlag.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "RequiredFlag"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/form/components/FormField.helpers.tsx"] = {
    name: "RequiredFlag",
    docgenInfo: RequiredFlag.__docgenInfo,
    path: "src/components/form/components/FormField.helpers.tsx"
  };
}

export { RequiredFlag, getDescriptionStyles, getFieldLayoutStyles, getFocusStyles, getInputStyles, getLabelFontSize, getLabelStyles };
//# sourceMappingURL=FormField.helpers.esm.js.map
