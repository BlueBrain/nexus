import { objectSpread2 as _objectSpread2, objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';
import React__default from 'react';
import _pt from 'prop-types';
import { getLabelFontSize } from './FormField.helpers.esm.js';
import { useStyledFieldLabel, useStyledFieldHint, useStyledFieldError } from './FormField.esm.js';

var INPUT_WIDTH = "20px";
var INPUT_VERTICAL_OFFSET_CALC = "(1em - 14px) * 0.5";
var FormGroupFieldContext = React__default.createContext({
  optionsDirection: undefined
});
// TODO we can probably do away with context for optionsDirection
// it can be replaced with passing props since in most cases we're going to use *Block or *ConnectedField components
function FormGroupFieldProvider(_ref) {
  var optionsDirection = _ref.optionsDirection,
      children = _ref.children;
  var fieldContext = React__default.useMemo(function () {
    return {
      optionsDirection: optionsDirection
    };
  }, [optionsDirection]);
  return jsx(FormGroupFieldContext.Provider, {
    value: fieldContext
  }, children);
}
FormGroupFieldProvider.propTypes = {
  optionsDirection: _pt.oneOf(["row", "column"]),
  children: _pt.node
};
var formGroupFieldCss = function formGroupFieldCss() {
  return {
    padding: 0,
    margin: 0,
    border: 0
  };
};
function useStyledGroupFieldLabel() {
  var _useStyledFieldLabel = useStyledFieldLabel.apply(void 0, arguments),
      baseCss = _useStyledFieldLabel.css,
      rest = _objectWithoutProperties(_useStyledFieldLabel, ["css"]);

  return _objectSpread2({
    css: function css(theme) {
      return [baseCss(theme), {
        padding: 0,
        marginRight: 0,
        marginLeft: 0,
        width: "100%"
      }];
    }
  }, rest);
}
function useStyledGroupFieldHint() {
  var _useStyledFieldHint = useStyledFieldHint.apply(void 0, arguments),
      baseCss = _useStyledFieldHint.css,
      baseStyledProps = _objectWithoutProperties(_useStyledFieldHint, ["css"]);

  return _objectSpread2({
    css: function css(theme) {
      return [baseCss(theme)];
    }
  }, baseStyledProps);
}
function useStyledGroupFieldError() {
  var _useStyledFieldError = useStyledFieldError.apply(void 0, arguments),
      baseCss = _useStyledFieldError.css,
      baseStyledProps = _objectWithoutProperties(_useStyledFieldError, ["css"]);

  return _objectSpread2({
    css: function css(theme) {
      return [baseCss(theme)];
    }
  }, baseStyledProps);
}

var horizontalOptionsCss = function horizontalOptionsCss(_theme) {
  return {
    display: "flex",
    flexWrap: "wrap"
  };
};

var verticalOptionsCss = function verticalOptionsCss(theme) {
  return [{
    paddingTop: theme.space[3],
    paddingBottom: theme.space[3]
  }];
};

var FormGroupFieldOptions = function FormGroupFieldOptions(props) {
  var _useFormGroupField = useFormGroupField(),
      optionsDirection = _useFormGroupField.optionsDirection;

  var isHorizontal = optionsDirection === "row";
  return isHorizontal ? jsx("div", _extends({
    css: horizontalOptionsCss
  }, props)) : jsx("div", _extends({
    css: verticalOptionsCss
  }, props));
};
function useStyledGroupFieldOptionLabel(_ref2) {
  var _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? "L" : _ref2$size;

  var _useFormGroupField2 = useFormGroupField(),
      optionsDirection = _useFormGroupField2.optionsDirection;

  var isHorizontal = optionsDirection === "row";
  return {
    css: function css(theme) {
      return [getLabelFontSize(size, theme), {
        color: theme.colors.grey[90],
        cursor: "pointer",
        justifyContent: "flex-start",
        lineHeight: 1.3,
        paddingLeft: "calc(".concat(INPUT_WIDTH, " + ").concat(isHorizontal ? theme.space[2] : theme.space[4], ")"),
        position: "relative"
      }];
    }
  };
}
var FormGroupFieldOptionWrapper = function FormGroupFieldOptionWrapper(_ref3) {
  var noSpacing = _ref3.noSpacing,
      rest = _objectWithoutProperties(_ref3, ["noSpacing"]);

  var _useFormGroupField3 = useFormGroupField(),
      optionsDirection = _useFormGroupField3.optionsDirection;

  var isHorizontal = optionsDirection === "row";
  return jsx("div", _extends({
    css: function css(theme) {
      return [{
        display: "flex",
        alignItems: "center",
        flexShrink: 0
      }, !noSpacing && [{
        marginBottom: theme.space[4]
      }, isHorizontal ? {
        marginRight: theme.space[6]
      } : {
        "&:last-of-type": {
          marginBottom: 0
        }
      }]];
    }
  }, rest));
};
FormGroupFieldOptionWrapper.propTypes = {
  noSpacing: _pt.bool
};
function useFormGroupField() {
  return React__default.useContext(FormGroupFieldContext);
}
FormGroupFieldProvider.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "FormGroupFieldProvider",
  "props": {
    "optionsDirection": {
      "required": false,
      "tsType": {
        "name": "union",
        "raw": "`row` | `column`",
        "elements": [{
          "name": "literal",
          "value": "undefined"
        }, {
          "name": "literal",
          "value": "undefined"
        }]
      },
      "description": ""
    },
    "children": {
      "required": false,
      "tsType": {
        "name": "ReactReactNode",
        "raw": "React.ReactNode"
      },
      "description": ""
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/form/components/FormGroupField.tsx"] = {
    name: "FormGroupFieldProvider",
    docgenInfo: FormGroupFieldProvider.__docgenInfo,
    path: "src/components/form/components/FormGroupField.tsx"
  };
}

FormGroupFieldOptions.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "FormGroupFieldOptions"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/form/components/FormGroupField.tsx"] = {
    name: "FormGroupFieldOptions",
    docgenInfo: FormGroupFieldOptions.__docgenInfo,
    path: "src/components/form/components/FormGroupField.tsx"
  };
}

FormGroupFieldOptionWrapper.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "FormGroupFieldOptionWrapper"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/form/components/FormGroupField.tsx"] = {
    name: "FormGroupFieldOptionWrapper",
    docgenInfo: FormGroupFieldOptionWrapper.__docgenInfo,
    path: "src/components/form/components/FormGroupField.tsx"
  };
}

export { FormGroupFieldOptionWrapper, FormGroupFieldOptions, FormGroupFieldProvider, INPUT_VERTICAL_OFFSET_CALC, INPUT_WIDTH, formGroupFieldCss, useFormGroupField, useStyledGroupFieldError, useStyledGroupFieldHint, useStyledGroupFieldLabel, useStyledGroupFieldOptionLabel };
//# sourceMappingURL=FormGroupField.esm.js.map
