import { slicedToArray as _slicedToArray, extends as _extends, toConsumableArray as _toConsumableArray } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';
import _pt from 'prop-types';
import { useConnectedField } from '../hooks/useConnectedField.esm.js';
import { CheckboxGroupFieldBlock } from './CheckboxGroupFieldBlock.esm.js';

var CheckboxGroupConnectedField = function CheckboxGroupConnectedField(props) {
  var _useConnectedField = useConnectedField(props.name),
      _useConnectedField2 = _slicedToArray(_useConnectedField, 4),
      connectedProps = _useConnectedField2[0],
      _field = _useConnectedField2[1],
      _meta = _useConnectedField2[2],
      helpers = _useConnectedField2[3];

  var value = connectedProps.value || [];
  return jsx(CheckboxGroupFieldBlock, _extends({}, connectedProps, props, {
    onChange: function onChange(e) {
      var target = e.currentTarget;
      var newValue;

      if (target.checked) {
        newValue = [].concat(_toConsumableArray(value), [target.value]);
      } else {
        newValue = value.filter(function (optionValue) {
          return optionValue !== target.value;
        });
      }

      helpers.setValue(newValue);
    },
    onBlur: function onBlur() {
      helpers.setTouched(true);
    }
  }));
};
CheckboxGroupConnectedField.propTypes = {
  name: _pt.string.isRequired,
  id: _pt.string,
  label: _pt.node,
  value: _pt.arrayOf(_pt.string)
};
CheckboxGroupConnectedField.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "CheckboxGroupConnectedField"
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/form/components/CheckboxGroupConnectedField.tsx"] = {
    name: "CheckboxGroupConnectedField",
    docgenInfo: CheckboxGroupConnectedField.__docgenInfo,
    path: "src/components/form/components/CheckboxGroupConnectedField.tsx"
  };
}

export { CheckboxGroupConnectedField };
//# sourceMappingURL=CheckboxGroupConnectedField.esm.js.map
