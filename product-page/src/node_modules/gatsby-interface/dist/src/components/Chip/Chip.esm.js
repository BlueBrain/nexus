import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx, css } from '@emotion/core';
import _pt from 'prop-types';
import BaseChip from './BaseChip.esm.js';

var iconCss = css({
  display: "inline-flex",
  alignItems: "center",
  verticalAlign: "middle",
  height: "0.875rem",
  width: "0.875rem",
  fontSize: "0.875rem"
});
var iconOffsetCss = css({
  marginRight: "0.25rem"
});
var iconOnlyCss = css({
  padding: 0,
  justifyContent: "space-around"
});
function Chip(_ref) {
  var _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? null : _ref$icon,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["icon", "children"]);

  return jsx(BaseChip, _extends({
    css: !children && iconOnlyCss
  }, props), icon && jsx("span", {
    css: [iconCss, children && iconOffsetCss]
  }, icon), children);
}
Chip.propTypes = {
  icon: _pt.oneOfType([_pt.node, _pt.oneOf([null])])
};
Chip.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Chip",
  "props": {
    "icon": {
      "defaultValue": {
        "value": "null",
        "computed": false
      },
      "required": false,
      "tsType": {
        "name": "union",
        "raw": "React.ReactNode | null",
        "elements": [{
          "name": "ReactReactNode",
          "raw": "React.ReactNode"
        }, {
          "name": "null"
        }]
      },
      "description": ""
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/Chip/Chip.tsx"] = {
    name: "Chip",
    docgenInfo: Chip.__docgenInfo,
    path: "src/components/Chip/Chip.tsx"
  };
}

export default Chip;
//# sourceMappingURL=Chip.esm.js.map
