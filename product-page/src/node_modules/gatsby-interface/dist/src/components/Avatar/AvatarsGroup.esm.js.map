{"version":3,"file":"AvatarsGroup.esm.js","sources":["../../../../src/components/Avatar/AvatarsGroup.tsx"],"sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"@emotion/core\"\nimport { css } from \"@emotion/core\"\nimport { AvatarSize } from \"./types\"\nimport Avatar, { AvatarProps } from \"./Avatar\"\nimport { DEFAULT_SIZE, borderSizeValues } from \"./constants\"\n\nconst groupBaseCss = css({\n  display: \"flex\",\n  alignItems: \"center\",\n})\n\nexport type AvatarDescriptor = Pick<AvatarProps, \"src\" | \"label\" | \"fallback\">\n\nexport type AvatarsGroupProps = {\n  avatars: AvatarDescriptor[]\n  size?: AvatarSize\n  borderColor?: string\n  omittedAvatarsCount?: number\n  omittedAvatarsLabel?: string\n  className?: string\n  style?: React.CSSProperties\n}\n\nexport default function AvatarsGroup({\n  avatars,\n  size = DEFAULT_SIZE,\n  borderColor = \"#fff\",\n  omittedAvatarsCount = 0,\n  omittedAvatarsLabel = `${omittedAvatarsCount} more`,\n  className,\n  style,\n}: AvatarsGroupProps) {\n  const commonAvatarProps = {\n    size,\n    borderColor,\n  }\n  const overlapCss = {\n    marginLeft: `-${borderSizeValues[size] * 2}px`,\n  }\n  const avatarsShown = avatars.length\n\n  return (\n    <div css={groupBaseCss} className={className} style={style}>\n      {avatars.map(({ src, label, ...avatar }, idx) => {\n        return (\n          <Avatar\n            // Using both src and label as key because src might not be unique\n            key={`${src}_${label}_${idx}`}\n            src={src}\n            label={label}\n            {...commonAvatarProps}\n            {...avatar}\n            css={idx !== 0 && overlapCss}\n            style={{ zIndex: avatarsShown - idx }}\n          />\n        )\n      })}\n      {omittedAvatarsCount > 0 && (\n        <Avatar\n          src=\"\" // this is an avatar \"lookalike\" that indicates how many avatars were left out\n          label={omittedAvatarsLabel}\n          css={overlapCss}\n          {...commonAvatarProps}\n          fallback={`+${omittedAvatarsCount}`}\n        />\n      )}\n    </div>\n  )\n}\n"],"names":["groupBaseCss","css","display","alignItems","AvatarsGroup","avatars","size","DEFAULT_SIZE","borderColor","omittedAvatarsCount","omittedAvatarsLabel","className","style","commonAvatarProps","overlapCss","marginLeft","borderSizeValues","avatarsShown","length","map","idx","src","label","avatar","zIndex"],"mappings":";;;;;AAOA,IAAMA,YAAY,GAAGC,GAAG,CAAC;AACvBC,EAAAA,OAAO,EAAE,MADc;AAEvBC,EAAAA,UAAU,EAAE;AAFW,CAAD,CAAxB;AAiBe,SAASC,YAAT,OAQO;AAAA,MAPpBC,OAOoB,QAPpBA,OAOoB;AAAA,uBANpBC,IAMoB;AAAA,MANpBA,IAMoB,0BANbC,YAMa;AAAA,8BALpBC,WAKoB;AAAA,MALpBA,WAKoB,iCALN,MAKM;AAAA,mCAJpBC,mBAIoB;AAAA,MAJpBA,mBAIoB,sCAJE,CAIF;AAAA,mCAHpBC,mBAGoB;AAAA,MAHpBA,mBAGoB,gDAHKD,mBAGL;AAAA,MAFpBE,SAEoB,QAFpBA,SAEoB;AAAA,MADpBC,KACoB,QADpBA,KACoB;AACpB,MAAMC,iBAAiB,GAAG;AACxBP,IAAAA,IAAI,EAAJA,IADwB;AAExBE,IAAAA,WAAW,EAAXA;AAFwB,GAA1B;AAIA,MAAMM,UAAU,GAAG;AACjBC,IAAAA,UAAU,aAAMC,gBAAgB,CAACV,IAAD,CAAhB,GAAyB,CAA/B;AADO,GAAnB;AAGA,MAAMW,YAAY,GAAGZ,OAAO,CAACa,MAA7B;AAEA,SACE;AAAK,IAAA,GAAG,EAAElB,YAAV;AAAwB,IAAA,SAAS,EAAEW,SAAnC;AAA8C,IAAA,KAAK,EAAEC;AAArD,KACGP,OAAO,CAACc,GAAR,CAAY,iBAA4BC,GAA5B,EAAoC;AAAA,QAAjCC,GAAiC,SAAjCA,GAAiC;AAAA,QAA5BC,KAA4B,SAA5BA,KAA4B;AAAA,QAAlBC,MAAkB;;AAC/C,WACE,IAAC,MAAD;AAAA;AAEE,MAAA,GAAG,YAAKF,GAAL,cAAYC,KAAZ,cAAqBF,GAArB,CAFL;AAGE,MAAA,GAAG,EAAEC,GAHP;AAIE,MAAA,KAAK,EAAEC;AAJT,OAKMT,iBALN,EAMMU,MANN;AAOE,MAAA,GAAG,EAAEH,GAAG,KAAK,CAAR,IAAaN,UAPpB;AAQE,MAAA,KAAK,EAAE;AAAEU,QAAAA,MAAM,EAAEP,YAAY,GAAGG;AAAzB;AART,OADF;AAYD,GAbA,CADH,EAeGX,mBAAmB,GAAG,CAAtB,IACC,IAAC,MAAD;AACE,IAAA,GAAG,EAAC,EADN;AAAA;AAEE,IAAA,KAAK,EAAEC,mBAFT;AAGE,IAAA,GAAG,EAAEI;AAHP,KAIMD,iBAJN;AAKE,IAAA,QAAQ,aAAMJ,mBAAN;AALV,KAhBJ,CADF;AA2BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}