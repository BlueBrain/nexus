import { slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2 } from '../../../_virtual/_rollupPluginBabelHelpers.js';

var ALIGN_TO_CSS_ALIGN = {
  center: "center",
  right: "flex-end",
  left: "flex-start"
};

function pickProperGap(gap, verticalGap) {
  return verticalGap ? verticalGap : gap;
}

function getGapVal(gap, t) {
  if (t && t.space[gap]) {
    return t.space[gap];
  }

  return gap;
}

function getClusterGapCalc(gap) {
  return "calc(".concat(gap, " / 2 * -1)");
}

function getClusterItemGapCalc(gap) {
  return "calc(".concat(gap, " / 2)");
}

function getMarginsCssValues(params) {
  var gap = params.gap,
      verticalGap = params.verticalGap,
      _params$target = params.target,
      target = _params$target === void 0 ? "cluster" : _params$target,
      t = params.theme;
  var calcGetter = target === "clusterItem" ? getClusterItemGapCalc : getClusterGapCalc;
  return {
    margin: calcGetter(getGapVal(gap, t)),
    marginBottom: calcGetter(getGapVal(pickProperGap(gap, verticalGap), t)),
    marginTop: calcGetter(getGapVal(pickProperGap(gap, verticalGap), t))
  };
}

function getClusterStyles(params) {
  var _ref = params || {},
      _ref$gap = _ref.gap,
      gap = _ref$gap === void 0 ? 0 : _ref$gap,
      _ref$verticalGap = _ref.verticalGap,
      verticalGap = _ref$verticalGap === void 0 ? 0 : _ref$verticalGap,
      _ref$responsiveGaps = _ref.responsiveGaps,
      responsiveGaps = _ref$responsiveGaps === void 0 ? {} : _ref$responsiveGaps,
      _ref$align = _ref.align,
      align = _ref$align === void 0 ? "left" : _ref$align,
      t = _ref.theme;

  var clusterResponsiveGapsCss = {};
  var clusterItemResponsiveGapsCss = {};

  if (t && t.mediaQueries) {
    Object.entries(responsiveGaps).forEach(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          breakpoint = _ref3[0],
          gaps = _ref3[1];

      var mediaQuery = t.mediaQueries[breakpoint];

      var _ref4 = gaps || {},
          gap = _ref4.gap,
          verticalGap = _ref4.verticalGap;

      if (mediaQuery && gap !== undefined && gap !== null) {
        clusterResponsiveGapsCss[mediaQuery] = getMarginsCssValues({
          gap: gap,
          verticalGap: verticalGap,
          target: "cluster",
          theme: t
        });
        clusterItemResponsiveGapsCss[mediaQuery] = getMarginsCssValues({
          gap: gap,
          verticalGap: verticalGap,
          target: "clusterItem",
          theme: t
        });
      }
    });
  }

  var clusterCss = _objectSpread2({
    alignItems: ALIGN_TO_CSS_ALIGN[align || "justify"],
    display: "flex",
    flexWrap: "wrap",
    justifyContent: align ? ALIGN_TO_CSS_ALIGN[align] : "center"
  }, getMarginsCssValues({
    gap: gap,
    verticalGap: verticalGap,
    target: "cluster",
    theme: t
  }), {}, clusterResponsiveGapsCss);

  var clusterItemCss = _objectSpread2({}, getMarginsCssValues({
    gap: gap,
    verticalGap: verticalGap,
    target: "clusterItem",
    theme: t
  }), {}, clusterItemResponsiveGapsCss);

  return {
    clusterCss: clusterCss,
    clusterItemCss: clusterItemCss
  };
}

export { getClusterStyles };
//# sourceMappingURL=cluster.esm.js.map
