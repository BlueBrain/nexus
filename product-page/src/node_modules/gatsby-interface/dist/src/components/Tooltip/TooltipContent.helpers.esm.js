import { TOOLTIP_POINTER_SIZE } from './TooltipPointer.esm.js';

var tooltipPosition = {
  top: positionTop,
  bottom: positionBottom
};
var MIN_WINDOW_SPACING = 4;

function positionBottom(triggerRect, tooltipRect) {
  if (!triggerRect || !tooltipRect) {
    return {};
  }

  var baseTop = triggerRect.bottom + TOOLTIP_POINTER_SIZE;
  return {
    left: normalizeLeft(triggerRect, tooltipRect),
    width: normalizeWidth(triggerRect, tooltipRect),
    top: baseTop + window.scrollY
  };
}

function positionTop(triggerRect, tooltipRect) {
  if (!triggerRect || !tooltipRect) {
    return {};
  }

  var baseTop = triggerRect.top - tooltipRect.height - TOOLTIP_POINTER_SIZE;
  return {
    left: normalizeLeft(triggerRect, tooltipRect),
    width: normalizeWidth(triggerRect, tooltipRect),
    top: baseTop + window.scrollY
  };
}

function normalizeLeft(triggerRect, tooltipRect) {
  var triggerCenter = triggerRect.left + triggerRect.width / 2;
  var left = triggerCenter - tooltipRect.width / 2;
  var maxLeft = window.innerWidth - tooltipRect.width - MIN_WINDOW_SPACING; // Use min-max to avoid the tooltip overflowing the window boundaries

  var optimalLeft = Math.min(Math.max(2, left), maxLeft);
  return optimalLeft + window.scrollX;
}
/**
 * This helper makes sure that the tooltip fits the screen width
 */


function normalizeWidth(triggerRect, tooltipRect) {
  var maxAllowedWidth = window.innerWidth - 2 * MIN_WINDOW_SPACING;

  if (tooltipRect.width <= maxAllowedWidth) {
    return tooltipRect.width;
  }

  return maxAllowedWidth;
}

export { tooltipPosition };
//# sourceMappingURL=TooltipContent.helpers.esm.js.map
