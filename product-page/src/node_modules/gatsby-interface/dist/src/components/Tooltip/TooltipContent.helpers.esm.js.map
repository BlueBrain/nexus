{"version":3,"file":"TooltipContent.helpers.esm.js","sources":["../../../../src/components/Tooltip/TooltipContent.helpers.ts"],"sourcesContent":["import { Position } from \"@reach/tooltip\"\nimport { TooltipPosition, PRect } from \"./types\"\nimport { TOOLTIP_POINTER_SIZE } from \"./TooltipPointer\"\n\nexport const tooltipPosition: Record<TooltipPosition, Position> = {\n  top: positionTop,\n  bottom: positionBottom,\n}\n\nconst MIN_WINDOW_SPACING = 4\n\nfunction positionBottom(\n  triggerRect: PRect | null | undefined,\n  tooltipRect: PRect | null | undefined\n) {\n  if (!triggerRect || !tooltipRect) {\n    return {}\n  }\n  const baseTop = triggerRect.bottom + TOOLTIP_POINTER_SIZE\n\n  return {\n    left: normalizeLeft(triggerRect, tooltipRect),\n    width: normalizeWidth(triggerRect, tooltipRect),\n    top: baseTop + window.scrollY,\n  }\n}\n\nfunction positionTop(\n  triggerRect: PRect | null | undefined,\n  tooltipRect: PRect | null | undefined\n) {\n  if (!triggerRect || !tooltipRect) {\n    return {}\n  }\n  const baseTop = triggerRect.top - tooltipRect.height - TOOLTIP_POINTER_SIZE\n\n  return {\n    left: normalizeLeft(triggerRect, tooltipRect),\n    width: normalizeWidth(triggerRect, tooltipRect),\n    top: baseTop + window.scrollY,\n  }\n}\n\nfunction normalizeLeft(triggerRect: PRect, tooltipRect: PRect) {\n  const triggerCenter = triggerRect.left + triggerRect.width / 2\n  const left = triggerCenter - tooltipRect.width / 2\n  const maxLeft = window.innerWidth - tooltipRect.width - MIN_WINDOW_SPACING\n\n  // Use min-max to avoid the tooltip overflowing the window boundaries\n  const optimalLeft = Math.min(Math.max(2, left), maxLeft)\n\n  return optimalLeft + window.scrollX\n}\n\n/**\n * This helper makes sure that the tooltip fits the screen width\n */\nfunction normalizeWidth(triggerRect: PRect, tooltipRect: PRect) {\n  const maxAllowedWidth = window.innerWidth - 2 * MIN_WINDOW_SPACING\n\n  if (tooltipRect.width <= maxAllowedWidth) {\n    return tooltipRect.width\n  }\n\n  return maxAllowedWidth\n}\n"],"names":["tooltipPosition","top","positionTop","bottom","positionBottom","MIN_WINDOW_SPACING","triggerRect","tooltipRect","baseTop","TOOLTIP_POINTER_SIZE","left","normalizeLeft","width","normalizeWidth","window","scrollY","height","triggerCenter","maxLeft","innerWidth","optimalLeft","Math","min","max","scrollX","maxAllowedWidth"],"mappings":";;IAIaA,eAAkD,GAAG;AAChEC,EAAAA,GAAG,EAAEC,WAD2D;AAEhEC,EAAAA,MAAM,EAAEC;AAFwD;AAKlE,IAAMC,kBAAkB,GAAG,CAA3B;;AAEA,SAASD,cAAT,CACEE,WADF,EAEEC,WAFF,EAGE;AACA,MAAI,CAACD,WAAD,IAAgB,CAACC,WAArB,EAAkC;AAChC,WAAO,EAAP;AACD;;AACD,MAAMC,OAAO,GAAGF,WAAW,CAACH,MAAZ,GAAqBM,oBAArC;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAEC,aAAa,CAACL,WAAD,EAAcC,WAAd,CADd;AAELK,IAAAA,KAAK,EAAEC,cAAc,CAACP,WAAD,EAAcC,WAAd,CAFhB;AAGLN,IAAAA,GAAG,EAAEO,OAAO,GAAGM,MAAM,CAACC;AAHjB,GAAP;AAKD;;AAED,SAASb,WAAT,CACEI,WADF,EAEEC,WAFF,EAGE;AACA,MAAI,CAACD,WAAD,IAAgB,CAACC,WAArB,EAAkC;AAChC,WAAO,EAAP;AACD;;AACD,MAAMC,OAAO,GAAGF,WAAW,CAACL,GAAZ,GAAkBM,WAAW,CAACS,MAA9B,GAAuCP,oBAAvD;AAEA,SAAO;AACLC,IAAAA,IAAI,EAAEC,aAAa,CAACL,WAAD,EAAcC,WAAd,CADd;AAELK,IAAAA,KAAK,EAAEC,cAAc,CAACP,WAAD,EAAcC,WAAd,CAFhB;AAGLN,IAAAA,GAAG,EAAEO,OAAO,GAAGM,MAAM,CAACC;AAHjB,GAAP;AAKD;;AAED,SAASJ,aAAT,CAAuBL,WAAvB,EAA2CC,WAA3C,EAA+D;AAC7D,MAAMU,aAAa,GAAGX,WAAW,CAACI,IAAZ,GAAmBJ,WAAW,CAACM,KAAZ,GAAoB,CAA7D;AACA,MAAMF,IAAI,GAAGO,aAAa,GAAGV,WAAW,CAACK,KAAZ,GAAoB,CAAjD;AACA,MAAMM,OAAO,GAAGJ,MAAM,CAACK,UAAP,GAAoBZ,WAAW,CAACK,KAAhC,GAAwCP,kBAAxD,CAH6D;;AAM7D,MAAMe,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYb,IAAZ,CAAT,EAA4BQ,OAA5B,CAApB;AAEA,SAAOE,WAAW,GAAGN,MAAM,CAACU,OAA5B;AACD;AAED;;;;;AAGA,SAASX,cAAT,CAAwBP,WAAxB,EAA4CC,WAA5C,EAAgE;AAC9D,MAAMkB,eAAe,GAAGX,MAAM,CAACK,UAAP,GAAoB,IAAId,kBAAhD;;AAEA,MAAIE,WAAW,CAACK,KAAZ,IAAqBa,eAAzB,EAA0C;AACxC,WAAOlB,WAAW,CAACK,KAAnB;AACD;;AAED,SAAOa,eAAP;AACD;;;;"}