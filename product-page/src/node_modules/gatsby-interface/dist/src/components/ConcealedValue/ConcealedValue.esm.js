import { slicedToArray as _slicedToArray, asyncToGenerator as _asyncToGenerator } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { jsx } from '@emotion/core';
import { useState } from 'react';
import _pt from 'prop-types';
import { Button } from '../Button/Button.esm.js';
import copyToClipboard from '../../utils/helpers/copyToClipboard.esm.js';
import { concealedValueContainerCss, concealedValueContentCss, concealedValueInputCss, concealedValueActionsCss, concealedValueButtonCss } from './ConcealedValue.styles.esm.js';

function ConcealedValue(_ref) {
  var value = _ref.value,
      ariaLabel = _ref.ariaLabel,
      _ref$concealed = _ref.concealed,
      concealed = _ref$concealed === void 0 ? true : _ref$concealed,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 5000 : _ref$delay;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isCopied = _useState2[0],
      setIsCopied = _useState2[1];

  var _useState3 = useState(concealed),
      _useState4 = _slicedToArray(_useState3, 2),
      isConcealed = _useState4[0],
      setIsConcealed = _useState4[1];

  var copyHandler = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return copyToClipboard(value);

            case 2:
              setIsCopied(true);
              setTimeout(function () {
                setIsCopied(false);
              }, delay);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function copyHandler() {
      return _ref2.apply(this, arguments);
    };
  }();

  var revealHandler = function revealHandler() {
    setIsConcealed(!isConcealed);
  };

  return jsx("div", {
    css: concealedValueContainerCss
  }, jsx("div", {
    css: concealedValueContentCss
  }, isConcealed ? // classic password dots
  jsx("input", {
    css: concealedValueInputCss,
    type: "text",
    value: "\u2022 \u2022 \u2022 \u2022 \u2022 \u2022",
    "aria-label": "Hidden value of ".concat(ariaLabel),
    readOnly: true
  }) : // unmasked value
  jsx("input", {
    css: concealedValueInputCss,
    type: "text",
    value: value,
    "aria-label": ariaLabel,
    readOnly: true
  })), jsx("div", {
    css: concealedValueActionsCss
  }, jsx(Button, {
    size: "S",
    tone: "NEUTRAL",
    variant: "SECONDARY",
    css: concealedValueButtonCss,
    onClick: copyHandler
  }, isCopied ? "Copied" : "Copy"), jsx(Button, {
    size: "S",
    tone: "NEUTRAL",
    variant: "SECONDARY",
    css: concealedValueButtonCss,
    onClick: revealHandler
  }, isConcealed ? "Reveal" : "Conceal")));
}
ConcealedValue.propTypes = {
  value: _pt.string.isRequired,
  ariaLabel: _pt.string.isRequired,
  delay: _pt.number,
  concealed: _pt.bool
};
ConcealedValue.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "ConcealedValue",
  "props": {
    "concealed": {
      "defaultValue": {
        "value": "true",
        "computed": false
      },
      "required": false,
      "tsType": {
        "name": "boolean"
      },
      "description": ""
    },
    "delay": {
      "defaultValue": {
        "value": "5000",
        "computed": false
      },
      "required": false,
      "tsType": {
        "name": "number"
      },
      "description": ""
    },
    "value": {
      "required": true,
      "tsType": {
        "name": "string"
      },
      "description": ""
    },
    "ariaLabel": {
      "required": true,
      "tsType": {
        "name": "string"
      },
      "description": ""
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/ConcealedValue/ConcealedValue.tsx"] = {
    name: "ConcealedValue",
    docgenInfo: ConcealedValue.__docgenInfo,
    path: "src/components/ConcealedValue/ConcealedValue.tsx"
  };
}

export { ConcealedValue };
//# sourceMappingURL=ConcealedValue.esm.js.map
