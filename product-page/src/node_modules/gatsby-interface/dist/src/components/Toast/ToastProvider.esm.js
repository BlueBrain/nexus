import { extends as _extends, taggedTemplateLiteral as _taggedTemplateLiteral } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { css, jsx } from '@emotion/core';
import React__default from 'react';
import _pt from 'prop-types';
import zIndices from '../../theme/zIndices.esm.js';
import { Toast } from './Toast.esm.js';
import { ToastContext } from './ToastContext.esm.js';
import { useToastActions } from './hooks.esm.js';

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  align-items: center;\n  bottom: 0;\n  display: flex;\n  flex-direction: column-reverse;\n  left: 50%;\n  position: fixed;\n  transform: translate(-50%, 0);\n  width: 100%;\n  z-index: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var ToastConsumer = ToastContext.Consumer;
var containerCss = css(_templateObject(), zIndices.base);
var ToastProvider = function ToastProvider(_ref) {
  var children = _ref.children,
      _ref$closeButtonLabel = _ref.closeButtonLabel,
      closeButtonLabel = _ref$closeButtonLabel === void 0 ? "Close" : _ref$closeButtonLabel;

  var _useToastActions = useToastActions(),
      toasts = _useToastActions.toasts,
      showToast = _useToastActions.showToast,
      removeToast = _useToastActions.removeToast;

  var contextValue = React__default.useMemo(function () {
    return {
      showToast: showToast
    };
  }, [showToast]);
  return jsx(ToastContext.Provider, {
    value: contextValue
  }, children, jsx("div", {
    css: containerCss
  }, toasts.map(function (toast, index) {
    return jsx(Toast, _extends({
      key: "toast-".concat(index) // this is probably not the best, but we can't use symbol as key :(

    }, toast, {
      onClose: function onClose() {
        return removeToast(toast.id);
      },
      closeButtonLabel: closeButtonLabel || "close"
    }));
  })));
};
ToastProvider.propTypes = {
  closeButtonLabel: _pt.string
};
ToastProvider.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "ToastProvider",
  "props": {
    "closeButtonLabel": {
      "defaultValue": {
        "value": "`Close`",
        "computed": false
      },
      "required": false
    }
  }
};

if (typeof STORYBOOK_REACT_CLASSES !== "undefined") {
  STORYBOOK_REACT_CLASSES["src/components/Toast/ToastProvider.tsx"] = {
    name: "ToastProvider",
    docgenInfo: ToastProvider.__docgenInfo,
    path: "src/components/Toast/ToastProvider.tsx"
  };
}

export { ToastConsumer, ToastProvider };
//# sourceMappingURL=ToastProvider.esm.js.map
