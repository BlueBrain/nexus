import { slicedToArray as _slicedToArray, objectSpread2 as _objectSpread2 } from '../../../_virtual/_rollupPluginBabelHelpers.js';

var ALIGN_TO_CSS_ALIGN = {
  stretch: "stretch",
  center: "center",
  right: "flex-end",
  left: "flex-start"
};

function getGapVal(gap, t) {
  if (t && t.space[gap]) {
    return t.space[gap];
  }

  return gap;
}

function getStackStyles(params) {
  var _ref = params || {},
      _ref$gap = _ref.gap,
      gap = _ref$gap === void 0 ? 0 : _ref$gap,
      _ref$responsiveGap = _ref.responsiveGap,
      responsiveGap = _ref$responsiveGap === void 0 ? {} : _ref$responsiveGap,
      _ref$align = _ref.align,
      align = _ref$align === void 0 ? "stretch" : _ref$align,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? "column" : _ref$direction,
      t = _ref.theme;

  var isHorizontal = direction === "row";
  var responsiveGapCss = {};

  if (t && t.mediaQueries) {
    responsiveGapCss = Object.entries(responsiveGap).reduce(function (acc, _ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          breakpoint = _ref3[0],
          gap = _ref3[1];

      var mediaQuery = t.mediaQueries[breakpoint];

      if (mediaQuery && gap !== undefined && gap !== null) {
        acc[mediaQuery] = {
          marginTop: !isHorizontal ? getGapVal(gap, t) : undefined,
          marginLeft: isHorizontal ? getGapVal(gap, t) : undefined
        };
      }

      return acc;
    }, {});
  }

  var stackCss = {
    display: "flex",
    flexDirection: isHorizontal ? "row" : "column",
    alignItems: !isHorizontal ? ALIGN_TO_CSS_ALIGN[align || "stretch"] : undefined,
    justifyContent: isHorizontal ? ALIGN_TO_CSS_ALIGN[align || "left"] : undefined,
    overflow: isHorizontal ? "auto" : undefined
  };

  var stackItemCss = _objectSpread2({
    marginTop: !isHorizontal ? getGapVal(gap, t) : undefined,
    marginLeft: isHorizontal ? getGapVal(gap, t) : undefined,
    flexShrink: isHorizontal ? 0 : undefined,
    "&:first-child": {
      marginTop: !isHorizontal ? 0 : undefined,
      marginLeft: isHorizontal ? 0 : undefined
    }
  }, responsiveGapCss);

  return {
    stackCss: stackCss,
    stackItemCss: stackItemCss
  };
}

export { getStackStyles };
//# sourceMappingURL=stack.esm.js.map
