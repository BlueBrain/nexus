import React from "react";
import { useStyledFieldLabel, useStyledFieldHint, useStyledFieldError } from "./FormField";
import { Theme, ThemeCss } from "../../../theme";
import { FormFieldLabelSize } from "./FormField.helpers";
export declare const INPUT_WIDTH = "20px";
export declare const INPUT_VERTICAL_OFFSET_CALC = "(1em - 14px) * 0.5";
export declare type FormGroupOptionsDirection = `row` | `column`;
export declare type FormGroupFieldContextValue = {
    optionsDirection?: FormGroupOptionsDirection;
};
export declare type FormGroupFieldProviderProps = {
    optionsDirection?: FormGroupOptionsDirection;
    children?: React.ReactNode;
};
export declare function FormGroupFieldProvider({ optionsDirection, children, }: FormGroupFieldProviderProps): JSX.Element;
export declare type WithFormGroupField<T> = Omit<T, keyof FormGroupFieldProviderProps> & FormGroupFieldProviderProps;
export declare const formGroupFieldCss: ThemeCss;
export declare function useStyledGroupFieldLabel(...args: Parameters<typeof useStyledFieldLabel>): {
    children: JSX.Element;
    css: (theme: Theme) => ((string | number | boolean | import("@emotion/serialize").ComponentSelector | import("@emotion/utils").SerializedStyles | import("@emotion/serialize").ArrayInterpolation<undefined> | import("@emotion/serialize").ObjectInterpolation<undefined> | null | undefined)[] | {
        padding: number;
        marginRight: number;
        marginLeft: number;
        width: string;
    })[];
};
export declare function useStyledGroupFieldHint(...args: Parameters<typeof useStyledFieldHint>): {
    css: (theme: Theme) => (string | number | boolean | import("@emotion/serialize").ComponentSelector | import("@emotion/utils").SerializedStyles | import("@emotion/serialize").ArrayInterpolation<undefined> | import("@emotion/serialize").ObjectInterpolation<undefined> | null | undefined)[][];
};
export declare function useStyledGroupFieldError(...args: Parameters<typeof useStyledFieldError>): {
    children: JSX.Element;
    css: (theme: Theme) => (string | number | boolean | import("@emotion/serialize").ComponentSelector | import("@emotion/utils").SerializedStyles | import("@emotion/serialize").ArrayInterpolation<undefined> | import("@emotion/serialize").ObjectInterpolation<undefined> | null | undefined)[][];
};
export declare type FormGroupFieldOptionsProps = Omit<JSX.IntrinsicElements["div"], "ref">;
export declare const FormGroupFieldOptions: React.FC<FormGroupFieldOptionsProps>;
export declare type FormGroupFieldOptionLabelProps = {
    size?: FormFieldLabelSize;
};
export declare function useStyledGroupFieldOptionLabel({ size, }: {
    size?: FormFieldLabelSize;
}): {
    css: ThemeCss;
};
export declare type FormGroupFieldOptionWrapperProps = Omit<JSX.IntrinsicElements["div"], "ref"> & {
    noSpacing?: boolean;
};
export declare const FormGroupFieldOptionWrapper: React.FC<FormGroupFieldOptionWrapperProps>;
export declare function useFormGroupField(): FormGroupFieldContextValue;
