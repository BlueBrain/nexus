import React from "react";
import { Theme } from "../../../theme";
import { ErrorValidationMode } from "../../form-skeletons";
import { FormFieldLabelSize } from "./FormField.helpers";
export declare type StyledFieldLabelProps = {
    isRequired?: boolean;
    size?: FormFieldLabelSize;
};
export declare type WithStyledFieldLabel<T> = Omit<T, keyof StyledFieldLabelProps> & StyledFieldLabelProps;
export declare function useStyledFieldLabel(label?: React.ReactNode, { size, isRequired }?: StyledFieldLabelProps): {
    css: (theme: Theme) => (string | number | boolean | import("@emotion/serialize").ComponentSelector | import("@emotion/utils").SerializedStyles | import("@emotion/serialize").ArrayInterpolation<undefined> | import("@emotion/serialize").ObjectInterpolation<undefined> | null | undefined)[];
    children: JSX.Element;
};
export declare function useStyledFieldHint(): {
    css: (theme: Theme) => (string | number | boolean | import("@emotion/serialize").ComponentSelector | import("@emotion/utils").SerializedStyles | import("@emotion/serialize").ArrayInterpolation<undefined> | import("@emotion/serialize").ObjectInterpolation<undefined> | null | undefined)[];
};
export declare function useStyledFieldError(error?: React.ReactNode): {
    css: (theme: Theme) => (string | number | boolean | import("@emotion/serialize").ComponentSelector | import("@emotion/utils").SerializedStyles | import("@emotion/serialize").ArrayInterpolation<undefined> | import("@emotion/serialize").ObjectInterpolation<undefined> | null | undefined)[];
    children: JSX.Element;
};
export declare type FormFieldBlockLayout = `horizontal` | `vertical`;
export declare type FormFieldContainerProps = Omit<JSX.IntrinsicElements["div"], "ref"> & {
    layout?: FormFieldBlockLayout;
};
export declare function FormFieldContainer({ layout, ...rest }: FormFieldContainerProps): JSX.Element;
export declare function useFormFieldContainerProps(layout?: FormFieldBlockLayout): {
    css: (theme: Theme) => import("@emotion/serialize").Interpolation<undefined>;
};
export declare type FormFieldBlockProps = {
    id: string;
    label: React.ReactNode;
    labelSize?: FormFieldLabelSize;
    error?: React.ReactNode;
    hint?: React.ReactNode;
    validationMode?: ErrorValidationMode;
    layout?: FormFieldBlockLayout;
};
export declare type WithFormFieldBlock<T> = Omit<T, keyof FormFieldBlockProps> & FormFieldBlockProps;
