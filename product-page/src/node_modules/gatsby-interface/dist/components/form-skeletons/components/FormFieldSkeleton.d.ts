import React from "react";
export declare type FormFieldSkeletonContextValue = {
    id: string;
    hasHint?: boolean;
    hasError?: boolean;
    meta: {
        hintId?: string;
        errorId?: string;
        controlDescribedBy?: string;
    };
};
export declare type FormFieldSkeletonProps = {
    id: string;
    hasHint?: boolean;
    hasError?: boolean;
    children?: React.ReactNode;
};
export declare type FormFieldSkeletonLabelProps = Omit<JSX.IntrinsicElements["label"], "ref" | "htmlFor">;
export declare const FormFieldSkeletonLabel: React.FC<FormFieldSkeletonLabelProps>;
export declare type FormFieldSkeletonHintProps = Omit<JSX.IntrinsicElements["div"], "ref" | "id">;
export declare const FormFieldSkeletonHint: React.FC<FormFieldSkeletonHintProps>;
export declare type ErrorValidationMode = "focus" | "change" | "submit";
export declare type FormFieldSkeletonErrorProps = Omit<JSX.IntrinsicElements["div"], "ref" | "id"> & {
    validationMode?: ErrorValidationMode;
};
export declare const FormFieldSkeletonError: React.FC<FormFieldSkeletonErrorProps>;
export declare function FormFieldSkeleton(props: FormFieldSkeletonProps): JSX.Element;
export declare function useFormFieldSkeleton(): FormFieldSkeletonContextValue;
