import { AxiosInstance } from 'axios';
declare type WrapperMethod<E, A extends AxiosInstance = AxiosInstance> = (http: A, data: any) => E;
/**
 * @private
 */
export declare function createUpdateEntity<T>({ http, entityPath, wrapperMethod, headers, }: {
    http: AxiosInstance;
    entityPath: string;
    wrapperMethod: WrapperMethod<T>;
    headers?: Record<string, unknown>;
}): () => Promise<T>;
/**
 * @private
 */
export declare function createDeleteEntity({ http, entityPath, }: {
    http: AxiosInstance;
    entityPath: string;
}): () => Promise<void>;
/**
 * @private
 */
export declare function createPublishEntity<T>({ http, entityPath, wrapperMethod, }: {
    http: AxiosInstance;
    entityPath: string;
    wrapperMethod: WrapperMethod<T>;
}): () => Promise<T>;
/**
 * @private
 */
export declare function createUnpublishEntity<T>({ http, entityPath, wrapperMethod, }: {
    http: AxiosInstance;
    entityPath: string;
    wrapperMethod: WrapperMethod<T>;
}): () => Promise<T>;
/**
 * @private
 */
export declare function createArchiveEntity<T>({ http, entityPath, wrapperMethod, }: {
    http: AxiosInstance;
    entityPath: string;
    wrapperMethod: WrapperMethod<T>;
}): () => Promise<T>;
/**
 * @private
 */
export declare function createUnarchiveEntity<T>({ http, entityPath, wrapperMethod, }: {
    http: AxiosInstance;
    entityPath: string;
    wrapperMethod: WrapperMethod<T>;
}): () => Promise<T>;
/**
 * @private
 */
export declare function createPublishedChecker(): () => boolean;
/**
 * @private
 */
export declare function createUpdatedChecker(): () => boolean;
/**
 * @private
 */
export declare function createDraftChecker(): () => boolean;
/**
 * @private
 */
export declare function createArchivedChecker(): () => boolean;
export {};
