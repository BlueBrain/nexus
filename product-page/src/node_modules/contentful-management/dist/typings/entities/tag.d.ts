import { AxiosInstance } from 'axios';
import { DefaultElements, MetaSysProps } from '../common-types';
export declare type TagSysProps = Pick<MetaSysProps, 'id' | 'space' | 'version' | 'createdAt' | 'createdBy' | 'updatedAt' | 'updatedBy'> & {
    type: 'Tag';
    environment: {
        sys: {
            id: string;
            type: 'Link';
            linkType: 'Environment';
        };
    };
};
export declare type TagProps = {
    sys: TagSysProps;
    name: string;
};
export declare type TagCollectionProps = {
    sys: {
        type: 'Array';
    };
    items: TagProps[];
    total: number;
};
export interface TagCollection {
    items: Tag[];
    total: number;
}
declare type TagApi = {
    update(): Promise<Tag>;
    delete(): Promise<void>;
};
export interface Tag extends TagProps, DefaultElements<TagProps>, TagApi {
}
export declare function createDeleteTag(http: AxiosInstance): () => Promise<void>;
export declare function createUpdateTag(http: AxiosInstance): () => Promise<Tag>;
export default function createTagApi(http: AxiosInstance): TagApi;
export declare function wrapTag(http: AxiosInstance, data: TagProps): Tag;
export declare const wrapTagCollection: (http: AxiosInstance, data: import("../common-types").CollectionProp<TagProps>) => import("../common-types").Collection<Tag, TagProps>;
export {};
