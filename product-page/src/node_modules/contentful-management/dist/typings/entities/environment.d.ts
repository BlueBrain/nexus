import { ContentfulEnvironmentAPI } from '../create-environment-api';
import { DefaultElements, MetaLinkProps, MetaSysProps } from '../common-types';
import { AxiosInstance } from 'axios';
export declare type EnvironmentProps = {
    /**
     * System metadata
     */
    sys: MetaSysProps & {
        space: {
            sys: MetaLinkProps;
        };
    };
    /**
     * Name of the environmant
     */
    name: string;
};
export declare type Environment = ContentfulEnvironmentAPI & EnvironmentProps & DefaultElements<EnvironmentProps>;
/**
 * This method creates the API for the given environment with all the methods for
 * reading and creating other entities. It also passes down a clone of the
 * http client with a environment id, so the base path for requests now has the
 * environment id already set.
 * @private
 * @param http - HTTP client instance
 * @param data - API response for a Environment
 * @return
 */
export declare function wrapEnvironment(http: AxiosInstance, data: EnvironmentProps): Environment;
/**
 * This method wraps each environment in a collection with the environment API. See wrapEnvironment
 * above for more details.
 * @private
 */
export declare const wrapEnvironmentCollection: (http: AxiosInstance, data: import("../common-types").CollectionProp<EnvironmentProps>) => import("../common-types").Collection<Environment, EnvironmentProps>;
