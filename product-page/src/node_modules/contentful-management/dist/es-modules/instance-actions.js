function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import cloneDeep from 'lodash/cloneDeep';
import errorHandler from './error-handler';

/**
 * @private
 */
export function createUpdateEntity(_ref) {
  var http = _ref.http,
      entityPath = _ref.entityPath,
      wrapperMethod = _ref.wrapperMethod,
      headers = _ref.headers;
  return function () {
    var self = this;
    var raw = self.toPlainObject();
    var data = cloneDeep(raw);
    delete data.sys;
    return http.put(entityPath + '/' + self.sys.id, data, {
      headers: _objectSpread({
        'X-Contentful-Version': self.sys.version || 0
      }, headers)
    }).then(function (response) {
      return wrapperMethod(http, response.data);
    }, errorHandler);
  };
}
/**
 * @private
 */

export function createDeleteEntity(_ref2) {
  var http = _ref2.http,
      entityPath = _ref2.entityPath;
  return function () {
    var self = this;
    return http["delete"](entityPath + '/' + self.sys.id).then(function () {// do nothing
    }, errorHandler);
  };
}
/**
 * @private
 */

export function createPublishEntity(_ref3) {
  var http = _ref3.http,
      entityPath = _ref3.entityPath,
      wrapperMethod = _ref3.wrapperMethod;
  return function () {
    var self = this;
    return http.put(entityPath + '/' + self.sys.id + '/published', null, {
      headers: {
        'X-Contentful-Version': self.sys.version
      }
    }).then(function (response) {
      return wrapperMethod(http, response.data);
    }, errorHandler);
  };
}
/**
 * @private
 */

export function createUnpublishEntity(_ref4) {
  var http = _ref4.http,
      entityPath = _ref4.entityPath,
      wrapperMethod = _ref4.wrapperMethod;
  return function () {
    var self = this;
    return http["delete"](entityPath + '/' + self.sys.id + '/published').then(function (response) {
      return wrapperMethod(http, response.data);
    }, errorHandler);
  };
}
/**
 * @private
 */

export function createArchiveEntity(_ref5) {
  var http = _ref5.http,
      entityPath = _ref5.entityPath,
      wrapperMethod = _ref5.wrapperMethod;
  return function () {
    var self = this;
    return http.put(entityPath + '/' + self.sys.id + '/archived').then(function (response) {
      return wrapperMethod(http, response.data);
    }, errorHandler);
  };
}
/**
 * @private
 */

export function createUnarchiveEntity(_ref6) {
  var http = _ref6.http,
      entityPath = _ref6.entityPath,
      wrapperMethod = _ref6.wrapperMethod;
  return function () {
    var self = this;
    return http["delete"](entityPath + '/' + self.sys.id + '/archived').then(function (response) {
      return wrapperMethod(http, response.data);
    }, errorHandler);
  };
}
/**
 * @private
 */

export function createPublishedChecker() {
  return function () {
    var self = this;
    return !!self.sys.publishedVersion;
  };
}
/**
 * @private
 */

export function createUpdatedChecker() {
  return function () {
    var self = this; // The act of publishing an entity increases its version by 1, so any entry which has
    // 2 versions higher or more than the publishedVersion has unpublished changes.

    return !!(self.sys.publishedVersion && self.sys.version > self.sys.publishedVersion + 1);
  };
}
/**
 * @private
 */

export function createDraftChecker() {
  return function () {
    var self = this;
    return !self.sys.publishedVersion;
  };
}
/**
 * @private
 */

export function createArchivedChecker() {
  return function () {
    var self = this;
    return !!self.sys.archivedVersion;
  };
}