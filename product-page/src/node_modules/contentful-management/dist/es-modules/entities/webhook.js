import cloneDeep from 'lodash/cloneDeep';
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
import errorHandler from '../error-handler';
import { createUpdateEntity, createDeleteEntity } from '../instance-actions';
import { wrapCollection } from '../common-utils';
var entityPath = 'webhook_definitions';

function createWebhookApi(http) {
  return {
    update: createUpdateEntity({
      http: http,
      entityPath: entityPath,
      wrapperMethod: wrapWebhook
    }),
    "delete": createDeleteEntity({
      http: http,
      entityPath: entityPath
    }),
    getCalls: function getCalls() {
      return http.get('webhooks/' + this.sys.id + '/calls').then(function (response) {
        return response.data;
      }, errorHandler);
    },
    getCall: function getCall(id) {
      return http.get('webhooks/' + this.sys.id + '/calls/' + id).then(function (response) {
        return response.data;
      }, errorHandler);
    },
    getHealth: function getHealth() {
      return http.get('webhooks/' + this.sys.id + '/health').then(function (response) {
        return response.data;
      }, errorHandler);
    }
  };
}
/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw webhook data
 * @return Wrapped webhook data
 */


export function wrapWebhook(http, data) {
  var webhook = toPlainObject(cloneDeep(data));
  var webhookWithMethods = enhanceWithMethods(webhook, createWebhookApi(http));
  return freezeSys(webhookWithMethods);
}
/**
 * @private
 */

export var wrapWebhookCollection = wrapCollection(wrapWebhook);