import cloneDeep from 'lodash/cloneDeep';
import { freezeSys, toPlainObject, createRequestConfig } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
import { wrapCollection } from '../common-utils';
import { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker } from '../instance-actions';
import { wrapEditorInterface } from './editor-interface';
import errorHandler from '../error-handler';
import { wrapSnapshot, wrapSnapshotCollection } from './snapshot';

function createContentTypeApi(http) {
  return {
    update: createUpdateEntity({
      http: http,
      entityPath: 'content_types',
      wrapperMethod: wrapContentType
    }),
    "delete": createDeleteEntity({
      http: http,
      entityPath: 'content_types'
    }),
    publish: createPublishEntity({
      http: http,
      entityPath: 'content_types',
      wrapperMethod: wrapContentType
    }),
    unpublish: createUnpublishEntity({
      http: http,
      entityPath: 'content_types',
      wrapperMethod: wrapContentType
    }),
    getEditorInterface: function getEditorInterface() {
      return http.get('content_types/' + this.sys.id + '/editor_interface').then(function (response) {
        return wrapEditorInterface(http, response.data);
      }, errorHandler);
    },
    getSnapshots: function getSnapshots() {
      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return http.get("content_types/".concat(this.sys.id, "/snapshots"), createRequestConfig({
        query: query
      })).then(function (response) {
        return wrapSnapshotCollection(http, response.data);
      }, errorHandler);
    },
    getSnapshot: function getSnapshot(snapshotId) {
      return http.get("content_types/".concat(this.sys.id, "/snapshots/").concat(snapshotId)).then(function (response) {
        return wrapSnapshot(http, response.data);
      }, errorHandler);
    },
    isPublished: createPublishedChecker(),
    isUpdated: createUpdatedChecker(),
    isDraft: createDraftChecker(),
    omitAndDeleteField: function omitAndDeleteField(id) {
      return findAndUpdateField(this, id, 'omitted', true).then(function (newContentType) {
        return findAndUpdateField(newContentType, id, 'deleted', true);
      })["catch"](errorHandler);
    }
  };
}
/**
 * @private
 * @param id - unique ID of the field
 * @param key - the attribute on the field to change
 * @param value - the value to set the attribute to
 */


var findAndUpdateField = function findAndUpdateField(contentType, id, key, value) {
  var field = contentType.fields.find(function (field) {
    return field.id === id;
  });

  if (!field) {
    return Promise.reject(new Error("Tried to omitAndDeleteField on a nonexistent field, ".concat(id, ", on the content type ").concat(contentType.name, ".")));
  } // @ts-expect-error


  field[key] = value;
  return contentType.update();
};
/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw content type data
 * @return Wrapped content type data
 */


export function wrapContentType(http, data) {
  var contentType = toPlainObject(cloneDeep(data));
  var contentTypeWithMethods = enhanceWithMethods(contentType, createContentTypeApi(http));
  return freezeSys(contentTypeWithMethods);
}
/**
 * @private
 */

export var wrapContentTypeCollection = wrapCollection(wrapContentType);