import cloneDeep from 'lodash/cloneDeep';
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
import errorHandler from '../error-handler';
import { wrapCollection } from '../common-utils';
import { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createArchiveEntity, createUnarchiveEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker, createArchivedChecker } from '../instance-actions';
var ASSET_PROCESSING_CHECK_WAIT = 3000;
var ASSET_PROCESSING_CHECK_RETRIES = 10;

function createAssetApi(http) {
  function checkIfAssetHasUrl(_ref) {
    var resolve = _ref.resolve,
        reject = _ref.reject,
        id = _ref.id,
        locale = _ref.locale,
        _ref$processingCheckW = _ref.processingCheckWait,
        processingCheckWait = _ref$processingCheckW === void 0 ? ASSET_PROCESSING_CHECK_WAIT : _ref$processingCheckW,
        _ref$processingCheckR = _ref.processingCheckRetries,
        processingCheckRetries = _ref$processingCheckR === void 0 ? ASSET_PROCESSING_CHECK_RETRIES : _ref$processingCheckR,
        _ref$checkCount = _ref.checkCount,
        checkCount = _ref$checkCount === void 0 ? 0 : _ref$checkCount;
    http.get('assets/' + id).then(function (response) {
      return wrapAsset(http, response.data);
    }, errorHandler).then(function (asset) {
      if (asset.fields.file[locale].url) {
        resolve(asset);
      } else if (checkCount === processingCheckRetries) {
        var error = new Error();
        error.name = 'AssetProcessingTimeout';
        error.message = 'Asset is taking longer then expected to process.';
        reject(error);
      } else {
        checkCount++;
        setTimeout(function () {
          return checkIfAssetHasUrl({
            resolve: resolve,
            reject: reject,
            id: id,
            locale: locale,
            checkCount: checkCount,
            processingCheckWait: processingCheckWait,
            processingCheckRetries: processingCheckRetries
          });
        }, processingCheckWait);
      }
    });
  }

  function processForLocale(locale) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        processingCheckWait = _ref2.processingCheckWait,
        processingCheckRetries = _ref2.processingCheckRetries;

    var assetId = this.sys.id;
    return http.put('assets/' + this.sys.id + '/files/' + locale + '/process', null, {
      headers: {
        'X-Contentful-Version': this.sys.version
      }
    }).then(function () {
      return new Promise(function (resolve, reject) {
        return checkIfAssetHasUrl({
          resolve: resolve,
          reject: reject,
          id: assetId,
          locale: locale,
          processingCheckWait: processingCheckWait,
          processingCheckRetries: processingCheckRetries
        });
      });
    }, errorHandler);
  }

  function processForAllLocales() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var self = this;
    var locales = Object.keys(this.fields.file || {});
    var mostUpToDateAssetVersion = undefined; // Let all the locales process
    // Since they all resolve at different times,
    // we need to pick the last resolved value
    // to reflect the most recent state

    var allProcessingLocales = locales.map(function (locale) {
      return processForLocale.call(self, locale, options).then(function (result) {
        // Side effect of always setting the most up to date asset version
        // The last one to call this will be the last one that finished
        // and thus the most up to date
        mostUpToDateAssetVersion = result;
      });
    });
    return Promise.all(allProcessingLocales).then(function () {
      return mostUpToDateAssetVersion;
    });
  }

  return {
    update: createUpdateEntity({
      http: http,
      entityPath: 'assets',
      wrapperMethod: wrapAsset
    }),
    "delete": createDeleteEntity({
      http: http,
      entityPath: 'assets'
    }),
    publish: createPublishEntity({
      http: http,
      entityPath: 'assets',
      wrapperMethod: wrapAsset
    }),
    unpublish: createUnpublishEntity({
      http: http,
      entityPath: 'assets',
      wrapperMethod: wrapAsset
    }),
    archive: createArchiveEntity({
      http: http,
      entityPath: 'assets',
      wrapperMethod: wrapAsset
    }),
    unarchive: createUnarchiveEntity({
      http: http,
      entityPath: 'assets',
      wrapperMethod: wrapAsset
    }),
    processForLocale: processForLocale,
    processForAllLocales: processForAllLocales,
    isPublished: createPublishedChecker(),
    isUpdated: createUpdatedChecker(),
    isDraft: createDraftChecker(),
    isArchived: createArchivedChecker()
  };
}
/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw asset data
 * @return Wrapped asset data
 */


export function wrapAsset(http, data) {
  var asset = toPlainObject(cloneDeep(data));
  var assetWithMethods = enhanceWithMethods(asset, createAssetApi(http));
  return freezeSys(assetWithMethods);
}
/**
 * @private
 */

export var wrapAssetCollection = wrapCollection(wrapAsset);