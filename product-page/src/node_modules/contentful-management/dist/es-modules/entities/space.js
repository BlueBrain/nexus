import cloneDeep from 'lodash/cloneDeep';
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
import { wrapCollection } from '../common-utils';
import createSpaceApi from '../create-space-api';

/**
 * This method creates the API for the given space with all the methods for
 * reading and creating other entities. It also passes down a clone of the
 * http client with a space id, so the base path for requests now has the
 * space id already set.
 * @private
 * @param http - HTTP client instance
 * @param data - API response for a Space
 * @return {Space}
 */
export function wrapSpace(http, data) {
  var sdkHttp = http;
  var space = toPlainObject(cloneDeep(data));
  var _sdkHttp$httpClientPa = sdkHttp.httpClientParams,
      hostUpload = _sdkHttp$httpClientPa.hostUpload,
      defaultHostnameUpload = _sdkHttp$httpClientPa.defaultHostnameUpload;
  var spaceScopedHttpClient = sdkHttp.cloneWithNewParams({
    space: space.sys.id
  });
  var spaceScopedUploadClient = sdkHttp.cloneWithNewParams({
    space: space.sys.id,
    host: hostUpload || defaultHostnameUpload
  });
  var spaceApi = createSpaceApi({
    http: spaceScopedHttpClient,
    httpUpload: spaceScopedUploadClient
  });
  var enhancedSpace = enhanceWithMethods(space, spaceApi);
  return freezeSys(enhancedSpace);
}
/**
 * This method wraps each space in a collection with the space API. See wrapSpace
 * above for more details.
 * @private
 */

export var wrapSpaceCollection = wrapCollection(wrapSpace);