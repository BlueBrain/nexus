import cloneDeep from 'lodash/cloneDeep';
import { freezeSys, toPlainObject, createRequestConfig } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
import { wrapCollection } from '../common-utils';
import { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createArchiveEntity, createUnarchiveEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker, createArchivedChecker } from '../instance-actions';
import errorHandler from '../error-handler';
import { wrapSnapshot, wrapSnapshotCollection } from './snapshot';

function createEntryApi(http) {
  return {
    update: createUpdateEntity({
      http: http,
      entityPath: 'entries',
      wrapperMethod: wrapEntry
    }),
    "delete": createDeleteEntity({
      http: http,
      entityPath: 'entries'
    }),
    publish: createPublishEntity({
      http: http,
      entityPath: 'entries',
      wrapperMethod: wrapEntry
    }),
    unpublish: createUnpublishEntity({
      http: http,
      entityPath: 'entries',
      wrapperMethod: wrapEntry
    }),
    archive: createArchiveEntity({
      http: http,
      entityPath: 'entries',
      wrapperMethod: wrapEntry
    }),
    unarchive: createUnarchiveEntity({
      http: http,
      entityPath: 'entries',
      wrapperMethod: wrapEntry
    }),
    getSnapshots: function getSnapshots() {
      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return http.get("entries/".concat(this.sys.id, "/snapshots"), createRequestConfig({
        query: query
      })).then(function (response) {
        return wrapSnapshotCollection(http, response.data);
      }, errorHandler);
    },
    getSnapshot: function getSnapshot(snapshotId) {
      return http.get("entries/".concat(this.sys.id, "/snapshots/").concat(snapshotId)).then(function (response) {
        return wrapSnapshot(http, response.data);
      }, errorHandler);
    },
    isPublished: createPublishedChecker(),
    isUpdated: createUpdatedChecker(),
    isDraft: createDraftChecker(),
    isArchived: createArchivedChecker()
  };
}
/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw entry data
 * @return Wrapped entry data
 */


export function wrapEntry(http, data) {
  var entry = toPlainObject(cloneDeep(data));
  var entryWithMethods = enhanceWithMethods(entry, createEntryApi(http));
  return freezeSys(entryWithMethods);
}
/**
 * Data is also mixed in with link getters if links exist and includes were requested
 * @private
 */

export var wrapEntryCollection = wrapCollection(wrapEntry);