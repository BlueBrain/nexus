{"version":3,"file":"index.cjs.js","sources":["../src/escapeStringRegexp.ts","../src/cleanStack.ts","../src/cleanInternalStack.ts","../src/indentString.ts","../src/AggregateError.ts"],"sourcesContent":["/**\nEscape RegExp special characters.\nYou can also use this to escape a string that is inserted into the middle of a regex, for example, into a character class.\n@example\n```\nimport escapeStringRegexp = require('escape-string-regexp');\nconst escapedString = escapeStringRegexp('How much $ for a ðŸ¦„?');\n//=> 'How much \\\\$ for a ðŸ¦„\\\\?'\nnew RegExp(escapedString);\n```\n*/\nexport const escapeStringRegexp = (string: string) => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when itâ€™s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patternsâ€™ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n};\n","\nimport { escapeStringRegexp } from './escapeStringRegexp';\n\nconst extractPathRegex = /\\s+at.*[(\\s](.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/;\n\n/**\nClean up error stack traces. Removes the mostly unhelpful internal Node.js entries.\n@param stack - The `stack` property of an `Error`.\n@example\n```\nimport cleanStack = require('clean-stack');\nconst error = new Error('Missing unicorn');\nconsole.log(error.stack);\n// Error: Missing unicorn\n//     at Object.<anonymous> (/Users/sindresorhus/dev/clean-stack/unicorn.js:2:15)\n//     at Module._compile (module.js:409:26)\n//     at Object.Module._extensions..js (module.js:416:10)\n//     at Module.load (module.js:343:32)\n//     at Function.Module._load (module.js:300:12)\n//     at Function.Module.runMain (module.js:441:10)\n//     at startup (node.js:139:18)\nconsole.log(cleanStack(error.stack));\n// Error: Missing unicorn\n//     at Object.<anonymous> (/Users/sindresorhus/dev/clean-stack/unicorn.js:2:15)\n```\n*/\nexport const cleanStack = (stack: string, basePath?: string) => {\n    const basePathRegex = basePath && new RegExp(`(at | \\\\()${escapeStringRegexp(basePath)}`, 'g');\n\n    return stack.replace(/\\\\/g, '/')\n        .split('\\n')\n        .filter(line => {\n            const pathMatches = line.match(extractPathRegex);\n            if (pathMatches === null || !pathMatches[1]) {\n                return true;\n            }\n\n            const match = pathMatches[1];\n\n            // Electron\n            if (\n                match.includes('.app/Contents/Resources/electron.asar') ||\n                match.includes('.app/Contents/Resources/default_app.asar')\n            ) {\n                return false;\n            }\n\n            return !pathRegex.test(match);\n        })\n        .filter(line => line.trim() !== '')\n        .map(line => {\n            if (basePathRegex) {\n                line = line.replace(basePathRegex, '$1');\n            }\n\n            return line;\n        })\n        .join('\\n');\n};","export const cleanInternalStack = (stack: string) => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');","interface Options {\n    /**\n    The string to use for the indent.\n    @default ' '\n    */\n    readonly indent?: string;\n\n    /**\n    Also indent empty lines.\n    @default false\n    */\n    readonly includeEmptyLines?: boolean;\n}\n\n/**\nIndent each line in a string.\n@param string - The string to indent.\n@param count - How many times you want `options.indent` repeated. Default: `1`.\n@example\n```\nimport indentString = require('indent-string');\nindentString('Unicorns\\nRainbows', 4);\n//=> '    Unicorns\\n    Rainbows'\nindentString('Unicorns\\nRainbows', 4, {indent: 'â™¥'});\n//=> 'â™¥â™¥â™¥â™¥Unicorns\\nâ™¥â™¥â™¥â™¥Rainbows'\n```\n*/\nexport const indentString = (string: string, count = 1, options?: Options) => {\n\toptions = {\n\t\tindent: ' ',\n\t\tincludeEmptyLines: false,\n\t\t...options\n\t};\n\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``\n\t\t);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``\n\t\t);\n\t}\n\n\tif (count < 0) {\n\t\tthrow new RangeError(\n\t\t\t`Expected \\`count\\` to be at least 0, got \\`${count}\\``\n\t\t);\n\t}\n\n\tif (typeof options.indent !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``\n\t\t);\n\t}\n\n\tif (count === 0) {\n\t\treturn string;\n\t}\n\n\tconst regex = options.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n\treturn string.replace(regex, options.indent.repeat(count));\n};\n","import { cleanStack } from \"./cleanStack\";\nimport { cleanInternalStack } from \"./cleanInternalStack\";\nimport { indentString } from \"./indentString\";\n\nexport class AggregateError extends Error implements Iterable<Error> {\n    readonly name: 'AggregateError';\n    private readonly _errors: Error[];\n\n\t/**\n\t@param errors - If a string, a new `Error` is created with the string as the error message. If a non-Error object, a new `Error` is created with all properties from the object copied over.\n\t@returns An Error that is also an [`Iterable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables) for the individual errors.\n\t@example\n\t```\n\timport AggregateError = require('aggregate-error');\n\tconst error = new AggregateError([new Error('foo'), 'bar', {message: 'baz'}]);\n\tthrow error;\n\t// AggregateError:\n\t//\tError: foo\n\t//\t\tat Object.<anonymous> (/Users/sindresorhus/dev/aggregate-error/example.js:3:33)\n\t//\tError: bar\n\t//\t\tat Object.<anonymous> (/Users/sindresorhus/dev/aggregate-error/example.js:3:13)\n\t//\tError: baz\n\t//\t\tat Object.<anonymous> (/Users/sindresorhus/dev/aggregate-error/example.js:3:13)\n\t//\tat AggregateError (/Users/sindresorhus/dev/aggregate-error/index.js:19:3)\n\t//\tat Object.<anonymous> (/Users/sindresorhus/dev/aggregate-error/example.js:3:13)\n\t//\tat Module._compile (module.js:556:32)\n\t//\tat Object.Module._extensions..js (module.js:565:10)\n\t//\tat Module.load (module.js:473:32)\n\t//\tat tryModuleLoad (module.js:432:12)\n\t//\tat Function.Module._load (module.js:424:3)\n\t//\tat Module.runMain (module.js:590:10)\n\t//\tat run (bootstrap_node.js:394:7)\n\t//\tat startup (bootstrap_node.js:149:9)\n\tfor (const individualError of error) {\n\t\tconsole.log(individualError);\n\t}\n\t//=> [Error: foo]\n\t//=> [Error: bar]\n\t//=> [Error: baz]\n\t```\n\t*/\n\tconstructor(errors: ReadonlyArray<Error | {[key: string]: any} | string>) {\n\t\tif (!Array.isArray(errors)) {\n\t\t\tthrow new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n\t\t}\n\n\t\tconst normalizedErrors = errors.map(error => {\n\t\t\tif (error instanceof Error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (error !== null && typeof error === 'object') {\n\t\t\t\t// Handle plain error objects with message property and/or possibly other metadata\n\t\t\t\treturn Object.assign(new Error(error.message), error);\n\t\t\t}\n\n\t\t\treturn new Error(error);\n\t\t});\n\n\t\tlet message = normalizedErrors\n\t\t\t.map(error => {\n\t\t\t\t// The `stack` property is not standardized, so we can't assume it exists\n\t\t\t\treturn typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n\t\t\t})\n\t\t\t.join('\\n');\n\t\tmessage = '\\n' + indentString(message, 4);\n\t\tsuper(message);\n\n\t\tthis.name = 'AggregateError';\n\n\t\tObject.defineProperty(this, '_errors', {value: normalizedErrors});\n\t}\n\n\t* [Symbol.iterator](): IterableIterator<Error> {\n\t\tfor (const error of this._errors) {\n\t\t\tyield error;\n\t\t}\n\t}\n}"],"names":[],"mappings":"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"}