import { DocumentNode } from 'graphql';
import { GraphQLRequest, Operation, OperationContext } from '../types';
export declare const createRequest: (q: string | DocumentNode, vars?: object | undefined) => GraphQLRequest;
/** Spreads the provided metadata to the source operation's meta property in context.  */
export declare const addMetadata: (source: Operation, meta: Exclude<OperationContext['meta'], undefined>) => {
    context: {
        meta: {
            source?: string | undefined;
            cacheOutcome?: "miss" | "partial" | "hit" | undefined;
            networkLatency?: number | undefined;
            startTime?: number | undefined;
        };
        additionalTypenames?: string[] | undefined;
        fetch?: typeof fetch | undefined;
        fetchOptions?: RequestInit | (() => RequestInit) | undefined;
        requestPolicy: import("../types").RequestPolicy;
        url: string;
        pollInterval?: number | undefined;
        suspense?: boolean | undefined;
        preferGetMethod?: boolean | undefined;
    };
    operationName: import("../types").OperationType;
    key: number;
    query: DocumentNode;
    variables?: object | undefined;
};
