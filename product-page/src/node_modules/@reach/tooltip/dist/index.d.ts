/**
 * Welcome to @reach/tooltip!
 *
 * When the user's mouse or focus rests on an element, a non-interactive popup
 * is displayed near it.
 *
 * Quick definitions:
 *
 * - "on rest" or "rested on": describes when the element receives mouse hover
 *   after a short delay (and hopefully soon, touch longpress).
 *
 * - "activation": describes a mouse click, keyboard enter, or keyboard space.
 *
 * Only one tooltip can be visible at a time, so we use a global state chart to
 * describe the various states and transitions between states that are
 * possible. With all the timeouts involved with tooltips it's important to
 * "make impossible states impossible" with a state machine.
 *
 * It's also okay to use these module globals because you don't server render
 * tooltips. None of the state is changed outside of user events.
 *
 * There are a few features that are important to understand.
 *
 * 1. Tooltips don't show up until the user has rested on one, we don't
 *    want tooltips popupping up as you move your mouse around the page.
 *
 * 2. Once any tooltip becomes visible, other tooltips nearby should skip
 *    resting and display immediately.
 *
 * 3. Tooltips stick around for a little bit after blur/mouseleave.
 *
 * TODO: Research longpress tooltips on Android, iOS
 *       - Probably want to position it by default above, since your thumb is
 *         below and would cover it
 *       - I'm thinking after longpress, display the tooltip and cancel any
 *         click events. Then on touchend, so they can read it display the
 *         tooltip for a little while longer in case their hand was
 *         obstructing the tooltip.
 *
 * @see Docs     https://reacttraining.com/reach-ui/tooltip
 * @see Source   https://github.com/reach/reach-ui/tree/master/packages/tooltip
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tooltip
 */
import React from "react";
export declare const MOUSE_REST_TIMEOUT = 100;
export declare const LEAVE_TIMEOUT = 500;
/**
 * useTooltip
 *
 * @param params
 */
export declare function useTooltip<T extends HTMLElement>({ id: idProp, onMouseEnter, onMouseMove, onMouseLeave, onFocus, onBlur, onKeyDown, onMouseDown, ref: forwardedRef, DEBUG_STYLE, }?: {
    ref?: React.Ref<any>;
    DEBUG_STYLE?: boolean;
} & React.HTMLAttributes<T>): [TriggerParams, TooltipParams, boolean];
/**
 * Tooltip
 *
 * @see Docs https://reacttraining.com/reach-ui/tooltip#tooltip
 */
export declare const Tooltip: import("@reach/utils").ComponentWithAs<"div", TooltipProps>;
export declare type TooltipProps = {
    children: React.ReactNode;
    DEBUG_STYLE?: boolean;
} & Omit<TooltipContentProps, "triggerRect" | "isVisible">;
export default Tooltip;
/**
 * TooltipPopup
 *
 * @see Docs https://reacttraining.com/reach-ui/tooltip#tooltippopup
 */
export declare const TooltipPopup: import("@reach/utils").ComponentWithAs<"div", TooltipPopupProps>;
export declare type TooltipPopupProps = {
    children?: React.ReactNode;
} & TooltipContentProps;
export declare type TooltipContentProps = {
    ariaLabel?: string;
    position?: Position;
    label: React.ReactNode;
    isVisible?: boolean;
    triggerRect: DOMRect | null;
};
export interface TriggerParams {
    "aria-describedby"?: string | undefined;
    "data-reach-tooltip-trigger": string;
    ref: React.Ref<any>;
    onMouseEnter: React.ReactEventHandler;
    onMouseMove: React.ReactEventHandler;
    onFocus: React.ReactEventHandler;
    onBlur: React.ReactEventHandler;
    onMouseLeave: React.ReactEventHandler;
    onKeyDown: React.ReactEventHandler;
    onMouseDown: React.ReactEventHandler;
}
export interface TooltipParams {
    id: string;
    triggerRect: DOMRect | null;
    isVisible: boolean;
}
export declare type Position = (targetRect?: PRect | null, popoverRect?: PRect | null) => React.CSSProperties;
declare type PRect = Partial<DOMRect> & {
    readonly bottom: number;
    readonly height: number;
    readonly left: number;
    readonly right: number;
    readonly top: number;
    readonly width: number;
};
