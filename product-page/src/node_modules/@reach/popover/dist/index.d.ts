/**
 * Welcome to @reach/popover!
 */
import React from "react";
import { PRect } from "@reach/rect";
/**
 * Popover
 */
declare const Popover: React.ForwardRefExoticComponent<{
    children: React.ReactNode;
    targetRef: React.RefObject<HTMLElement>;
    position?: Position | undefined;
    /**
     * Testing this API so we might accept additional nodes that apps can use to
     * determine the position of the popover. One example where it may be useful
     * is for positioning the popover of a listbox where the cursor rests on top
     * of the selected option. Pretty sure this will change so don't use it
     * anywehre in public yet!
     */
    unstable_observableRefs?: React.RefObject<PossibleNode>[] | undefined;
} & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
export declare type PopoverProps = {
    children: React.ReactNode;
    targetRef: React.RefObject<HTMLElement>;
    position?: Position;
    /**
     * Testing this API so we might accept additional nodes that apps can use to
     * determine the position of the popover. One example where it may be useful
     * is for positioning the popover of a listbox where the cursor rests on top
     * of the selected option. Pretty sure this will change so don't use it
     * anywehre in public yet!
     */
    unstable_observableRefs?: React.RefObject<PossibleNode>[];
} & React.HTMLAttributes<HTMLDivElement>;
export default Popover;
export declare const positionDefault: Position;
export declare const positionRight: Position;
export declare const positionMatchWidth: Position;
export declare function getCollisions(targetRect: PRect, popoverRect: PRect, offsetLeft?: number, offsetBottom?: number): {
    directionRight: boolean;
    directionLeft: boolean;
    directionUp: boolean;
    directionDown: boolean;
};
export declare type Position = (targetRect?: PRect | null, popoverRect?: PRect | null, ...unstable_observableNodes: PossibleNode[]) => React.CSSProperties;
declare type PossibleNode = null | undefined | HTMLElement | SVGElement;
