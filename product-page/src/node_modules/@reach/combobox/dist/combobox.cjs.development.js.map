{"version":3,"file":"combobox.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/combobox!\n *\n * Accessible combobox (autocomplete or autosuggest) component for React.\n *\n * A combobox is the combination of an `<input type=\"text\"/>` and a list. The\n * list is designed to help the user arrive at a value, but the value does not\n * necessarily have to come from that list. Don't think of it like a\n * `<select/>`, but more of an `<input type=\"text\"/>` with some suggestions. You\n * can, however, validate that the value comes from the list, that's up to your\n * app.\n *\n * ???: navigate w/ arrows, then hit backspace: should it delete the\n *      autocompleted text or the old value the user had typed?!\n *\n * @see Docs     https://reacttraining.com/reach-ui/combobox\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/combobox\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#combobox\n */\n\nimport React, {\n  forwardRef,\n  useEffect,\n  useRef,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useState,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  checkStyles,\n  createNamedContext,\n  forwardRefWithAs,\n  getOwnerDocument,\n  isFunction,\n  makeId,\n  useIsomorphicLayoutEffect,\n  useForkedRef,\n  useUpdateEffect,\n  wrapEvent,\n  noop,\n} from \"@reach/utils\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendants,\n  useDescendantsInit,\n} from \"@reach/descendants\";\nimport { findAll } from \"highlight-words-core\";\nimport { useId } from \"@reach/auto-id\";\nimport Popover, { positionMatchWidth, PopoverProps } from \"@reach/popover\";\n\n////////////////////////////////////////////////////////////////////////////////\n// States\n\n// Nothing going on, waiting for the user to type or use the arrow keys\nconst IDLE = \"IDLE\";\n\n// The component is suggesting options as the user types\nconst SUGGESTING = \"SUGGESTING\";\n\n// The user is using the keyboard to navigate the list, not typing\nconst NAVIGATING = \"NAVIGATING\";\n\n// The user is interacting with arbitrary elements inside the popup that\n// are not ComboboxInputs\nconst INTERACTING = \"INTERACTING\";\n\n////////////////////////////////////////////////////////////////////////////////\n// Events\n\n// User cleared the value w/ backspace, but input still has focus\nconst CLEAR = \"CLEAR\";\n\n// User is typing\nconst CHANGE = \"CHANGE\";\n\n// Initial input value change handler for syncing user state with state machine\n// Prevents initial change from sending the user to the NAVIGATING state\n// https://github.com/reach/reach-ui/issues/464\nconst INITIAL_CHANGE = \"INITIAL_CHANGE\";\n\n// User is navigating w/ the keyboard\nconst NAVIGATE = \"NAVIGATE\";\n\n// User can be navigating with keyboard and then click instead, we want the\n// value from the click, not the current nav item\nconst SELECT_WITH_KEYBOARD = \"SELECT_WITH_KEYBOARD\";\nconst SELECT_WITH_CLICK = \"SELECT_WITH_CLICK\";\n\n// Pretty self-explanatory, user can hit escape or blur to close the popover\nconst ESCAPE = \"ESCAPE\";\nconst BLUR = \"BLUR\";\n\n// The user left the input to interact with arbitrary elements inside the popup\nconst INTERACT = \"INTERACT\";\n\nconst FOCUS = \"FOCUS\";\n\nconst OPEN_WITH_BUTTON = \"OPEN_WITH_BUTTON\";\n\nconst CLOSE_WITH_BUTTON = \"CLOSE_WITH_BUTTON\";\n\n////////////////////////////////////////////////////////////////////////////////\nconst stateChart: StateChart = {\n  initial: IDLE,\n  states: {\n    [IDLE]: {\n      on: {\n        [BLUR]: IDLE,\n        [CLEAR]: IDLE,\n        [CHANGE]: SUGGESTING,\n        [INITIAL_CHANGE]: IDLE,\n        [FOCUS]: SUGGESTING,\n        [NAVIGATE]: NAVIGATING,\n        [OPEN_WITH_BUTTON]: SUGGESTING,\n      },\n    },\n    [SUGGESTING]: {\n      on: {\n        [CHANGE]: SUGGESTING,\n        [FOCUS]: SUGGESTING,\n        [NAVIGATE]: NAVIGATING,\n        [CLEAR]: IDLE,\n        [ESCAPE]: IDLE,\n        [BLUR]: IDLE,\n        [SELECT_WITH_CLICK]: IDLE,\n        [INTERACT]: INTERACTING,\n        [CLOSE_WITH_BUTTON]: IDLE,\n      },\n    },\n    [NAVIGATING]: {\n      on: {\n        [CHANGE]: SUGGESTING,\n        [FOCUS]: SUGGESTING,\n        [CLEAR]: IDLE,\n        [BLUR]: IDLE,\n        [ESCAPE]: IDLE,\n        [NAVIGATE]: NAVIGATING,\n        [SELECT_WITH_CLICK]: IDLE,\n        [SELECT_WITH_KEYBOARD]: IDLE,\n        [CLOSE_WITH_BUTTON]: IDLE,\n        [INTERACT]: INTERACTING,\n      },\n    },\n    [INTERACTING]: {\n      on: {\n        [CLEAR]: IDLE,\n        [CHANGE]: SUGGESTING,\n        [FOCUS]: SUGGESTING,\n        [BLUR]: IDLE,\n        [ESCAPE]: IDLE,\n        [NAVIGATE]: NAVIGATING,\n        [CLOSE_WITH_BUTTON]: IDLE,\n        [SELECT_WITH_CLICK]: IDLE,\n      },\n    },\n  },\n};\n\nconst reducer: Reducer = (data: StateData, event: MachineEvent) => {\n  const nextState = { ...data, lastEventType: event.type };\n  switch (event.type) {\n    case CHANGE:\n    case INITIAL_CHANGE:\n      return {\n        ...nextState,\n        navigationValue: null,\n        value: event.value,\n      };\n    case NAVIGATE:\n    case OPEN_WITH_BUTTON:\n      return {\n        ...nextState,\n        navigationValue: findNavigationValue(nextState, event),\n      };\n    case CLEAR:\n      return {\n        ...nextState,\n        value: \"\",\n        navigationValue: null,\n      };\n    case BLUR:\n    case ESCAPE:\n      return {\n        ...nextState,\n        navigationValue: null,\n      };\n    case SELECT_WITH_CLICK:\n      return {\n        ...nextState,\n        value: event.value,\n        navigationValue: null,\n      };\n    case SELECT_WITH_KEYBOARD:\n      return {\n        ...nextState,\n        value: data.navigationValue,\n        navigationValue: null,\n      };\n    case CLOSE_WITH_BUTTON:\n      return {\n        ...nextState,\n        navigationValue: null,\n      };\n    case INTERACT:\n      return nextState;\n    case FOCUS:\n      return {\n        ...nextState,\n        navigationValue: findNavigationValue(nextState, event),\n      };\n\n    default:\n      return nextState;\n  }\n};\n\nfunction popoverIsExpanded(state: State) {\n  return [SUGGESTING, NAVIGATING, INTERACTING].includes(state);\n}\n\n/**\n * When we open a list, set the navigation value to the value in the input, if\n * it's in the list, then it'll automatically be highlighted.\n *\n * @param stateData\n * @param event\n */\nfunction findNavigationValue(stateData: StateData, event: MachineEvent) {\n  // @ts-ignore\n  if (event.value) {\n    // @ts-ignore\n    return event.value;\n    // @ts-ignore\n  } else if (event.persistSelection) {\n    return stateData.value;\n  } else {\n    return null;\n  }\n}\n\nconst ComboboxDescendantContext = createDescendantContext<ComboboxDescendant>(\n  \"ComboboxDescendantContext\"\n);\nconst ComboboxContext = createNamedContext(\n  \"ComboboxContext\",\n  {} as InternalComboboxContextValue\n);\n\n// Allows us to put the option's value on context so that ComboboxOptionText\n// can work it's highlight text magic no matter what else is rendered around\n// it.\nconst OptionContext = createNamedContext(\n  \"OptionContext\",\n  {} as ComboboxOptionContextValue\n);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Combobox\n *\n * @see Docs https://reacttraining.com/reach-ui/combobox#combobox\n */\nexport const Combobox = forwardRefWithAs<ComboboxProps, \"div\">(\n  function Combobox(\n    {\n      onSelect,\n      openOnFocus = false,\n      children,\n      as: Comp = \"div\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledby,\n      ...props\n    },\n    forwardedRef\n  ) {\n    let [options, setOptions] = useDescendantsInit<ComboboxDescendant>();\n\n    // Need this to focus it\n    const inputRef = useRef();\n\n    const popoverRef = useRef();\n\n    const buttonRef = useRef();\n\n    // When <ComboboxInput autocomplete={false} /> we don't want cycle back to\n    // the user's value while navigating (because it's always the user's value),\n    // but we need to know this in useKeyDown which is far away from the prop\n    // here, so we do something sneaky and write it to this ref on context so we\n    // can use it anywhere else 😛. Another new trick for me and I'm excited\n    // about this one too!\n    const autocompletePropRef = useRef();\n\n    const persistSelectionRef = useRef();\n\n    const defaultData: StateData = {\n      // The value the user has typed. We derive this also when the developer is\n      // controlling the value of ComboboxInput.\n      value: \"\",\n      // the value the user has navigated to with the keyboard\n      navigationValue: null,\n    };\n\n    const [state, data, transition] = useReducerMachine(\n      stateChart,\n      reducer,\n      defaultData\n    );\n\n    useFocusManagement(data.lastEventType, inputRef);\n\n    const id = useId(props.id);\n    const listboxId = id ? makeId(\"listbox\", id) : \"listbox\";\n\n    const context: InternalComboboxContextValue = {\n      ariaLabel,\n      ariaLabelledby,\n      autocompletePropRef,\n      buttonRef,\n      comboboxId: id,\n      data,\n      inputRef,\n      isExpanded: popoverIsExpanded(state),\n      listboxId,\n      onSelect: onSelect || noop,\n      openOnFocus,\n      persistSelectionRef,\n      popoverRef,\n      state,\n      transition,\n    };\n\n    useEffect(() => checkStyles(\"combobox\"), []);\n\n    return (\n      <DescendantProvider\n        context={ComboboxDescendantContext}\n        items={options}\n        set={setOptions}\n      >\n        <ComboboxContext.Provider value={context}>\n          <Comp {...props} data-reach-combobox=\"\" ref={forwardedRef}>\n            {isFunction(children)\n              ? children({ id, isExpanded: popoverIsExpanded(state) })\n              : children}\n          </Comp>\n        </ComboboxContext.Provider>\n      </DescendantProvider>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/combobox#combobox-props\n */\nexport type ComboboxProps = {\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/combobox#combobox-children\n   */\n  children:\n    | React.ReactNode\n    | ((props: ComboboxContextValue) => React.ReactNode);\n  /**\n   * Called with the selection value when the user makes a selection from the\n   * list.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#combobox-onselect\n   */\n  onSelect?(value: ComboboxValue): void;\n  /**\n   * If true, the popover opens when focus is on the text box.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#combobox-openonfocus\n   */\n  openOnFocus?: boolean;\n  /**\n   * Defines a string value that labels the current element.\n   * @see Docs https://reacttraining.com/reach-ui/combobox#accessibility\n   */\n  \"aria-label\"?: string;\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see Docs https://reacttraining.com/reach-ui/combobox#accessibility\n   */\n  \"aria-labelledby\"?: string;\n};\n\nif (__DEV__) {\n  Combobox.displayName = \"Combobox\";\n  Combobox.propTypes = {\n    as: PropTypes.any,\n    onSelect: PropTypes.func,\n    openOnFocus: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxInput\n *\n * Wraps an `<input/>` with a couple extra props that work with the combobox.\n *\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxinput\n */\nexport const ComboboxInput = forwardRefWithAs<ComboboxInputProps, \"input\">(\n  function ComboboxInput(\n    {\n      as: Comp = \"input\",\n      selectOnClick = false,\n      autocomplete = true,\n      onClick,\n      onChange,\n      onKeyDown,\n      onBlur,\n      onFocus,\n      value: controlledValue,\n      ...props\n    },\n    forwardedRef\n  ) {\n    // https://github.com/reach/reach-ui/issues/464\n    let { current: initialControlledValue } = useRef(controlledValue);\n    let controlledValueChangedRef = useRef(false);\n    useUpdateEffect(() => {\n      controlledValueChangedRef.current = true;\n    }, [controlledValue]);\n\n    let {\n      data: { navigationValue, value, lastEventType },\n      inputRef,\n      state,\n      transition,\n      listboxId,\n      autocompletePropRef,\n      openOnFocus,\n      isExpanded,\n      ariaLabel,\n      ariaLabelledby,\n    } = useContext(ComboboxContext);\n\n    let ref = useForkedRef(inputRef, forwardedRef);\n\n    // Because we close the List on blur, we need to track if the blur is\n    // caused by clicking inside the list, and if so, don't close the List.\n    let selectOnClickRef = useRef(false);\n\n    let handleKeyDown = useKeyDown();\n\n    let handleBlur = useBlur();\n\n    let isControlled = controlledValue != null;\n\n    // Layout effect should be SSR-safe here because we don't actually do\n    // anything with this ref that involves rendering until after we've\n    // let the client hydrate in nested components.\n    useIsomorphicLayoutEffect(() => {\n      autocompletePropRef.current = autocomplete;\n    }, [autocomplete, autocompletePropRef]);\n\n    const handleValueChange = useCallback(\n      (value: ComboboxValue) => {\n        if (value.trim() === \"\") {\n          transition(CLEAR);\n        } else if (\n          value === initialControlledValue &&\n          !controlledValueChangedRef.current\n        ) {\n          transition(INITIAL_CHANGE, { value });\n        } else {\n          transition(CHANGE, { value });\n        }\n      },\n      [initialControlledValue, transition]\n    );\n\n    useEffect(() => {\n      // If they are controlling the value we still need to do our transitions,\n      // so  we have this derived state to emulate onChange of the input as we\n      // receive new `value`s ...[*]\n      if (\n        isControlled &&\n        controlledValue !== value &&\n        // https://github.com/reach/reach-ui/issues/481\n        (controlledValue!.trim() === \"\" ? (value || \"\").trim() !== \"\" : true)\n      ) {\n        handleValueChange(controlledValue!);\n      }\n    }, [controlledValue, handleValueChange, isControlled, value]);\n\n    // [*]... and when controlled, we don't trigger handleValueChange as the\n    // user types, instead the developer controls it with the normal input\n    // onChange prop\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n      const { value } = event.target;\n      if (!isControlled) {\n        handleValueChange(value);\n      }\n    }\n\n    function handleFocus() {\n      if (selectOnClick) {\n        selectOnClickRef.current = true;\n      }\n\n      // If we select an option with click, useFocusManagement will focus the\n      // input, in those cases we don't want to cause the menu to open back up,\n      // so we guard behind these states.\n      if (openOnFocus && lastEventType !== SELECT_WITH_CLICK) {\n        transition(FOCUS);\n      }\n    }\n\n    function handleClick() {\n      if (selectOnClickRef.current) {\n        selectOnClickRef.current = false;\n        inputRef.current.select();\n      }\n    }\n\n    const inputValue =\n      autocomplete && (state === NAVIGATING || state === INTERACTING)\n        ? // When idle, we don't have a navigationValue on ArrowUp/Down\n          navigationValue || controlledValue || value\n        : controlledValue || value;\n\n    return (\n      <Comp\n        aria-activedescendant={\n          navigationValue ? String(makeHash(navigationValue)) : undefined\n        }\n        aria-autocomplete=\"both\"\n        aria-controls={listboxId}\n        aria-expanded={isExpanded}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel ? undefined : ariaLabelledby}\n        role=\"combobox\"\n        {...props}\n        data-reach-combobox-input=\"\"\n        ref={ref}\n        onBlur={wrapEvent(onBlur, handleBlur)}\n        onChange={wrapEvent(onChange, handleChange)}\n        onClick={wrapEvent(onClick, handleClick)}\n        onFocus={wrapEvent(onFocus, handleFocus)}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n        value={inputValue || \"\"}\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxinput-props\n */\nexport type ComboboxInputProps = {\n  /**\n   * If true, when the user clicks inside the text box the current value will\n   * be selected. Use this if the user is likely to delete all the text anyway\n   * (like the URL bar in browsers).\n   *\n   * However, if the user is likely to want to tweak the value, leave this\n   * false, like a google search--the user is likely wanting to edit their\n   * search, not replace it completely.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxinput-selectonclick\n   */\n  selectOnClick?: boolean;\n  /**\n   * Determines if the value in the input changes or not as the user navigates\n   * with the keyboard. If true, the value changes, if false the value doesn't\n   * change.\n   *\n   * Set this to false when you don't really need the value from the input but\n   * want to populate some other state (like the recipient selector in Gmail).\n   * But if your input is more like a normal `<input type=\"text\"/>`, then leave\n   * the `true` default.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxinput-autocomplete\n   */\n  autocomplete?: boolean;\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxinput-value\n   */\n  value?: ComboboxValue;\n};\n\nif (__DEV__) {\n  ComboboxInput.displayName = \"ComboboxInput\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxPopover\n *\n * Contains the popup that renders the list. Because some UI needs to render\n * more than the list in the popup, you need to render one of these around the\n * list. For example, maybe you want to render the number of results suggested.\n *\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxpopover\n */\nexport const ComboboxPopover = forwardRef<\n  HTMLDivElement,\n  ComboboxPopoverProps & Partial<PopoverProps>\n>(function ComboboxPopover(\n  { children, portal = true, onKeyDown, onBlur, ...props },\n  forwardedRef: React.Ref<any>\n) {\n  const { popoverRef, inputRef, isExpanded } = useContext(ComboboxContext);\n  const ref = useForkedRef(popoverRef, forwardedRef);\n  const handleKeyDown = useKeyDown();\n  const handleBlur = useBlur();\n\n  const sharedProps = {\n    \"data-reach-combobox-popover\": \"\",\n    onKeyDown: wrapEvent<any>(onKeyDown, handleKeyDown),\n    onBlur: wrapEvent<any>(onBlur, handleBlur),\n    // Instead of conditionally rendering the popover we use the `hidden` prop\n    // because we don't want to unmount on close (from escape or onSelect).\n    // However, the developer can conditionally render the ComboboxPopover if\n    // they do want to cause mount/unmount based on the app's own data (like\n    // results.length or whatever).\n    hidden: !isExpanded,\n    tabIndex: -1,\n    children,\n  };\n\n  return portal ? (\n    <Popover\n      {...props}\n      // @ts-ignore\n      ref={ref}\n      position={positionMatchWidth}\n      targetRef={inputRef}\n      {...sharedProps}\n    />\n  ) : (\n    <div ref={ref} {...props} {...sharedProps} />\n  );\n});\n\nif (__DEV__) {\n  ComboboxPopover.displayName = \"ComboboxPopover\";\n}\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxpopover-props\n */\nexport type ComboboxPopoverProps = {\n  /**\n   * If you pass `<ComboboxPopover portal={false} />` the popover will not\n   * render inside of a portal, but in the same order as the React tree. This\n   * is mostly useful for styling the entire component together, like the pink\n   * focus outline in the example earlier in this page.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxpopover-portal\n   */\n  portal?: boolean;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxList\n *\n * Contains the `ComboboxOption` elements and sets up the proper aria attributes\n * for the list.\n *\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxlist\n */\nexport const ComboboxList = forwardRefWithAs<ComboboxListProps, \"ul\">(\n  function ComboboxList(\n    {\n      // when true, and the list opens again, the option with a matching value\n      // will be automatically highlighted.\n      persistSelection = false,\n      as: Comp = \"ul\",\n      ...props\n    },\n    forwardedRef\n  ) {\n    const { persistSelectionRef, listboxId } = useContext(ComboboxContext);\n\n    if (persistSelection) {\n      persistSelectionRef.current = true;\n    }\n\n    return (\n      <Comp\n        role=\"listbox\"\n        {...props}\n        ref={forwardedRef}\n        data-reach-combobox-list=\"\"\n        id={listboxId}\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxlist-props\n */\nexport type ComboboxListProps = {\n  /**\n   * Defaults to false. When true and the list is opened, if an option's value\n   * matches the value in the input, it will automatically be highlighted and\n   * be the starting point for any keyboard navigation of the list.\n   *\n   * This allows you to treat a Combobox more like a `<select>` than an\n   * `<input/>`, but be mindful that the user is still able to put any\n   * arbitrary value into the input, so if the only valid values for the input\n   * are from the list, your app will need to do that validation on blur or\n   * submit of the form.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxlist-persistselection\n   */\n  persistSelection?: boolean;\n};\n\nif (__DEV__) {\n  ComboboxList.displayName = \"ComboboxList\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxOption\n *\n * An option that is suggested to the user as they interact with the combobox.\n *\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxoption\n */\nexport const ComboboxOption = forwardRefWithAs<ComboboxOptionProps, \"li\">(\n  function ComboboxOption(\n    { as: Comp = \"li\", children, value, onClick, ...props },\n    forwardedRef: React.Ref<any>\n  ) {\n    const {\n      onSelect,\n      data: { navigationValue },\n      transition,\n    } = useContext(ComboboxContext);\n\n    let ownRef = useRef<HTMLElement | null>(null);\n    let ref = useForkedRef(forwardedRef, ownRef);\n\n    let index = useDescendant(\n      {\n        element: ownRef.current!,\n        value,\n      },\n      ComboboxDescendantContext\n    );\n\n    const isActive = navigationValue === value;\n\n    const handleClick = () => {\n      onSelect && onSelect(value);\n      transition(SELECT_WITH_CLICK, { value });\n    };\n\n    return (\n      <OptionContext.Provider value={{ value, index }}>\n        <Comp\n          aria-selected={isActive}\n          role=\"option\"\n          {...props}\n          data-reach-combobox-option=\"\"\n          ref={ref}\n          id={String(makeHash(value))}\n          data-highlighted={isActive ? \"\" : undefined}\n          // Without this the menu will close from `onBlur`, but with it the\n          // element can be `document.activeElement` and then our focus checks in\n          // onBlur will work as intended\n          tabIndex={-1}\n          onClick={wrapEvent(onClick, handleClick)}\n          children={children || <ComboboxOptionText />}\n        />\n      </OptionContext.Provider>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxoption-props\n */\nexport type ComboboxOptionProps = {\n  /**\n   * Optional. If omitted, the `value` will be used as the children like as:\n   * `<ComboboxOption value=\"Seattle, Tacoma, Washington\" />`. But if you need\n   * to control a bit more, you can put whatever children you want, but make\n   * sure to render a `ComboboxOptionText` as well, so the value is still\n   * displayed with the text highlighting on the matched portions.\n   *\n   * @example\n   *   <ComboboxOption value=\"Apple\" />\n   *     🍎 <ComboboxOptionText />\n   *   </ComboboxOption>\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxoption-children\n   */\n  children?: React.ReactNode;\n  /**\n   * The value to match against when suggesting.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxoption-value\n   */\n  value: string;\n};\n\nif (__DEV__) {\n  ComboboxOption.displayName = \"ComboboxOption\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxOptionText\n *\n * Renders the value of a `ComboboxOption` as text but with spans wrapping the\n * matching and non-matching segments of text.\n *\n * We don't forwardRef or spread props because we render multiple spans or null,\n * should be fine 🤙\n *\n * @example\n *   <ComboboxOption value=\"Seattle\">\n *     🌧 <ComboboxOptionText />\n *   </ComboboxOption>\n *\n * @see Docs https://reacttraining.com/reach-ui/combobox#comboboxoptiontext\n */\nexport function ComboboxOptionText() {\n  const { value } = useContext(OptionContext);\n  const {\n    data: { value: contextValue },\n  } = useContext(ComboboxContext);\n\n  const results = useMemo(\n    () =>\n      findAll({\n        searchWords: escapeRegexp(contextValue || \"\").split(/\\s+/),\n        textToHighlight: value,\n      }),\n    [contextValue, value]\n  );\n\n  return (\n    <>\n      {results.length\n        ? results.map((result, index) => {\n            const str = value.slice(result.start, result.end);\n            return (\n              <span\n                key={index}\n                data-user-value={result.highlight ? true : undefined}\n                data-suggested-value={result.highlight ? undefined : true}\n              >\n                {str}\n              </span>\n            );\n          })\n        : value}\n    </>\n  );\n}\n\nif (__DEV__) {\n  ComboboxOptionText.displayName = \"ComboboxOptionText\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * ComboboxButton\n */\nexport const ComboboxButton = forwardRefWithAs<{}, \"button\">(\n  function ComboboxButton(\n    { as: Comp = \"button\", onClick, onKeyDown, ...props },\n    forwardedRef\n  ) {\n    const { transition, state, buttonRef, listboxId, isExpanded } = useContext(\n      ComboboxContext\n    );\n    const ref = useForkedRef(buttonRef, forwardedRef);\n\n    const handleKeyDown = useKeyDown();\n\n    const handleClick = () => {\n      if (state === IDLE) {\n        transition(OPEN_WITH_BUTTON);\n      } else {\n        transition(CLOSE_WITH_BUTTON);\n      }\n    };\n\n    return (\n      <Comp\n        aria-controls={listboxId}\n        aria-haspopup=\"listbox\"\n        aria-expanded={isExpanded}\n        {...props}\n        data-reach-combobox-button=\"\"\n        ref={ref}\n        onClick={wrapEvent(onClick, handleClick)}\n        onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  ComboboxButton.displayName = \"ComboboxButton\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Move focus back to the input if we start navigating w/ the\n * keyboard after focus has moved to any focusable content in\n * the popup.\n *\n * @param lastEventType\n * @param inputRef\n */\nfunction useFocusManagement(\n  lastEventType: MachineEventType | undefined,\n  inputRef: React.MutableRefObject<any>\n) {\n  // useLayoutEffect so that the cursor goes to the end of the input instead\n  // of awkwardly at the beginning, unclear to me why 🤷‍♂️\n  //\n  // Should be safe to use here since we're just focusing an input.\n  useIsomorphicLayoutEffect(() => {\n    if (\n      lastEventType === NAVIGATE ||\n      lastEventType === ESCAPE ||\n      lastEventType === SELECT_WITH_CLICK ||\n      lastEventType === OPEN_WITH_BUTTON\n    ) {\n      inputRef.current.focus();\n    }\n  }, [inputRef, lastEventType]);\n}\n\n/**\n * We want the same events when the input or the popup have focus (HOW COOL ARE\n * HOOKS BTW?) This is probably the hairiest piece but it's not bad.\n */\nfunction useKeyDown() {\n  const {\n    data: { navigationValue },\n    onSelect,\n    state,\n    transition,\n    autocompletePropRef,\n    persistSelectionRef,\n  } = useContext(ComboboxContext);\n\n  const options = useDescendants(ComboboxDescendantContext);\n\n  return function handleKeyDown(event: React.KeyboardEvent) {\n    let index = options.findIndex(({ value }) => value === navigationValue);\n\n    function getNextOption() {\n      let atBottom = index === options.length - 1;\n      if (atBottom) {\n        if (autocompletePropRef.current) {\n          // Go back to the value the user has typed because we are\n          // autocompleting and they need to be able to get back to what\n          // they had typed w/o having to backspace out.\n          return null;\n        } else {\n          // cycle through\n          return getFirstOption();\n        }\n      } else {\n        // Go to the next item in the list\n        return options[(index + 1) % options.length];\n      }\n    }\n\n    function getPreviousOption() {\n      let atTop = index === 0;\n      if (atTop) {\n        if (autocompletePropRef.current) {\n          // Go back to the value the user has typed because we are\n          // autocompleting and they need to be able to get back to what\n          // they had typed w/o having to backspace out.\n          return null;\n        } else {\n          // cycle through\n          return getLastOption();\n        }\n      } else if (index === -1) {\n        // displaying the user's value, so go select the last one\n        return getLastOption();\n      } else {\n        // normal case, select previous\n        return options[(index - 1 + options.length) % options.length];\n      }\n    }\n\n    function getFirstOption() {\n      return options[0];\n    }\n\n    function getLastOption() {\n      return options[options.length - 1];\n    }\n\n    switch (event.key) {\n      case \"ArrowDown\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || !options.length) {\n          return;\n        }\n\n        if (state === IDLE) {\n          // Opening a closed list\n          transition(NAVIGATE, {\n            persistSelection: persistSelectionRef.current,\n          });\n        } else {\n          let next = getNextOption();\n          transition(NAVIGATE, { value: next ? next.value : null });\n        }\n        break;\n\n      // A lot of duplicate code with ArrowDown up next, I'm already over it.\n      case \"ArrowUp\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || options.length === 0) {\n          return;\n        }\n\n        if (state === IDLE) {\n          transition(NAVIGATE);\n        } else {\n          let prev = getPreviousOption();\n          transition(NAVIGATE, { value: prev ? prev.value : null });\n        }\n        break;\n\n      case \"Home\":\n      case \"PageUp\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || options.length === 0) {\n          return;\n        }\n\n        if (state === IDLE) {\n          transition(NAVIGATE);\n        } else {\n          transition(NAVIGATE, { value: getFirstOption().value });\n        }\n        break;\n\n      case \"End\":\n      case \"PageDown\":\n        // Don't scroll the page\n        event.preventDefault();\n        if (!options || options.length === 0) {\n          return;\n        }\n\n        if (state === IDLE) {\n          transition(NAVIGATE);\n        } else {\n          transition(NAVIGATE, { value: getLastOption().value });\n        }\n        break;\n\n      case \"Escape\":\n        if (state !== IDLE) {\n          transition(ESCAPE);\n        }\n        break;\n      case \"Enter\":\n        if (state === NAVIGATING && navigationValue !== null) {\n          // don't want to submit forms\n          event.preventDefault();\n          onSelect && onSelect(navigationValue);\n          transition(SELECT_WITH_KEYBOARD);\n        }\n        break;\n    }\n  };\n}\n\nfunction useBlur() {\n  const { state, transition, popoverRef, inputRef, buttonRef } = useContext(\n    ComboboxContext\n  );\n\n  return function handleBlur() {\n    let ownerDocument = getOwnerDocument(inputRef.current) || document;\n    requestAnimationFrame(() => {\n      // we on want to close only if focus propss outside the combobox\n      if (\n        ownerDocument.activeElement !== inputRef.current &&\n        ownerDocument.activeElement !== buttonRef.current &&\n        popoverRef.current\n      ) {\n        if (popoverRef.current.contains(ownerDocument.activeElement)) {\n          // focus landed inside the combobox, keep it open\n          if (state !== INTERACTING) {\n            transition(INTERACT);\n          }\n        } else {\n          // focus landed outside the combobox, close it.\n          transition(BLUR);\n        }\n      }\n    });\n  };\n}\n\n/**\n * This manages transitions between states with a built in reducer to manage\n * the data that goes with those transitions.\n *\n * @param chart\n * @param reducer\n * @param initialData\n */\nfunction useReducerMachine(\n  chart: StateChart,\n  reducer: Reducer,\n  initialData: Partial<StateData>\n): [State, StateData, Transition] {\n  const [state, setState] = useState(chart.initial);\n  const [data, dispatch] = useReducer(reducer, initialData);\n\n  const transition: Transition = (event, payload = {}) => {\n    const currentState = chart.states[state];\n    const nextState = currentState && currentState.on[event];\n    if (nextState) {\n      dispatch({ type: event, state, nextState: state, ...payload });\n      setState(nextState);\n      return;\n    }\n  };\n\n  return [state, data, transition];\n}\n\n/**\n * We don't want to track the active descendant with indexes because nothing is\n * more annoying in a combobox than having it change values RIGHT AS YOU HIT\n * ENTER. That only happens if you use the index as your data, rather than\n * *your data as your data*. We use this to generate a unique ID based on the\n * value of each item.  This function is short, sweet, and good enough™ (I also\n * don't know how it works, tbqh)\n *\n * @see https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript\n * @param str\n */\nconst makeHash = (str: string) => {\n  let hash = 0;\n  if (str.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < str.length; i++) {\n    var char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash;\n  }\n  return hash;\n};\n\n/**\n * Escape regexp special characters in `str`\n *\n * @see https://github.com/component/escape-regexp/blob/5ce923c1510c9802b3da972c90b6861dd2829b6b/index.js\n * @param str\n */\n\nexport function escapeRegexp(str: string) {\n  return String(str).replace(/([.*+?=^!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Combobox` component to its descendants.\n *\n * @see Docs https://reacttraining.com/reach-ui/combobox#usecomboboxcontext\n */\nexport function useComboboxContext(): ComboboxContextValue {\n  let { isExpanded, comboboxId } = useContext(ComboboxContext);\n  return useMemo(\n    () => ({\n      id: comboboxId,\n      isExpanded,\n    }),\n    [comboboxId, isExpanded]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Well alright, you made it all the way here to like 1100 lines of code (geez,\n// what the heck?). Have a great day :D\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\nexport type ComboboxContextValue = {\n  id: string | undefined;\n  isExpanded: boolean;\n};\n\ntype ComboboxDescendant = Descendant<HTMLElement> & {\n  value: ComboboxValue;\n};\n\ninterface ComboboxOptionContextValue {\n  value: ComboboxValue;\n  index: number;\n}\n\ninterface InternalComboboxContextValue {\n  ariaLabel?: string;\n  ariaLabelledby?: string;\n  autocompletePropRef: React.MutableRefObject<any>;\n  buttonRef: React.MutableRefObject<any>;\n  comboboxId: string | undefined;\n  data: StateData;\n  inputRef: React.MutableRefObject<any>;\n  isExpanded: boolean;\n  listboxId: string;\n  onSelect(value?: ComboboxValue): any;\n  openOnFocus: boolean;\n  persistSelectionRef: React.MutableRefObject<any>;\n  popoverRef: React.MutableRefObject<any>;\n  state: State;\n  transition: Transition;\n}\n\ntype Transition = (event: MachineEventType, payload?: any) => any;\n\ntype ComboboxValue = string;\n\ntype State = \"IDLE\" | \"SUGGESTING\" | \"NAVIGATING\" | \"INTERACTING\";\n\ntype MachineEventType =\n  | \"CLEAR\"\n  | \"CHANGE\"\n  | \"INITIAL_CHANGE\"\n  | \"NAVIGATE\"\n  | \"SELECT_WITH_KEYBOARD\"\n  | \"SELECT_WITH_CLICK\"\n  | \"ESCAPE\"\n  | \"BLUR\"\n  | \"INTERACT\"\n  | \"FOCUS\"\n  | \"OPEN_WITH_BUTTON\"\n  | \"CLOSE_WITH_BUTTON\";\n\ninterface StateChart {\n  initial: State;\n  states: {\n    [key in State]?: {\n      on: {\n        [key in MachineEventType]?: State;\n      };\n    };\n  };\n}\n\ntype StateData = {\n  lastEventType?: MachineEventType;\n  navigationValue?: ComboboxValue | null;\n  value?: ComboboxValue | null;\n};\n\ntype MachineEvent =\n  | { type: \"BLUR\" }\n  | { type: \"CHANGE\"; value: ComboboxValue }\n  | { type: \"INITIAL_CHANGE\"; value: ComboboxValue }\n  | { type: \"CLEAR\" }\n  | { type: \"CLOSE_WITH_BUTTON\" }\n  | { type: \"ESCAPE\" }\n  | { type: \"FOCUS\" }\n  | { type: \"INTERACT\" }\n  | {\n      type: \"NAVIGATE\";\n      persistSelection?: React.MutableRefObject<any>;\n      value: ComboboxValue;\n    }\n  | { type: \"OPEN_WITH_BUTTON\" }\n  | {\n      type: \"SELECT_WITH_CLICK\";\n      value: ComboboxValue;\n    }\n  | {\n      type: \"SELECT_WITH_KEYBOARD\";\n    };\n\ntype Reducer = (data: StateData, event: MachineEvent) => StateData;\n"],"names":["IDLE","SUGGESTING","NAVIGATING","INTERACTING","CLEAR","CHANGE","INITIAL_CHANGE","NAVIGATE","SELECT_WITH_KEYBOARD","SELECT_WITH_CLICK","ESCAPE","BLUR","INTERACT","FOCUS","OPEN_WITH_BUTTON","CLOSE_WITH_BUTTON","stateChart","initial","states","on","reducer","data","event","nextState","lastEventType","type","navigationValue","value","findNavigationValue","popoverIsExpanded","state","includes","stateData","persistSelection","ComboboxDescendantContext","createDescendantContext","ComboboxContext","createNamedContext","OptionContext","Combobox","forwardRefWithAs","forwardedRef","onSelect","openOnFocus","children","as","Comp","ariaLabel","ariaLabelledby","props","useDescendantsInit","options","setOptions","inputRef","useRef","popoverRef","buttonRef","autocompletePropRef","persistSelectionRef","defaultData","useReducerMachine","transition","useFocusManagement","id","useId","listboxId","makeId","context","comboboxId","isExpanded","noop","useEffect","checkStyles","React","DescendantProvider","items","set","Provider","ref","isFunction","displayName","propTypes","PropTypes","any","func","bool","ComboboxInput","selectOnClick","autocomplete","onClick","onChange","onKeyDown","onBlur","onFocus","controlledValue","initialControlledValue","current","controlledValueChangedRef","useUpdateEffect","useContext","useForkedRef","selectOnClickRef","handleKeyDown","useKeyDown","handleBlur","useBlur","isControlled","useIsomorphicLayoutEffect","handleValueChange","useCallback","trim","handleChange","target","handleFocus","handleClick","select","inputValue","String","makeHash","undefined","role","wrapEvent","ComboboxPopover","forwardRef","portal","sharedProps","hidden","tabIndex","Popover","position","positionMatchWidth","targetRef","ComboboxList","ComboboxOption","ownRef","index","useDescendant","element","isActive","ComboboxOptionText","contextValue","results","useMemo","findAll","searchWords","escapeRegexp","split","textToHighlight","length","map","result","str","slice","start","end","key","highlight","ComboboxButton","focus","useDescendants","findIndex","getNextOption","atBottom","getFirstOption","getPreviousOption","atTop","getLastOption","preventDefault","next","prev","ownerDocument","getOwnerDocument","document","requestAnimationFrame","activeElement","contains","chart","initialData","useState","setState","useReducer","dispatch","payload","currentState","hash","i","char","charCodeAt","replace","useComboboxContext"],"mappings":"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"}