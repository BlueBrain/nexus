{"version":3,"file":"tabs.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/tabs!\n *\n * An accessible tabs component.\n *\n * The `Tab` and `TabPanel` elements are associated by their order in the tree.\n * None of the components are empty wrappers, each is associated with a real DOM\n * element in the document, giving you maximum control over styling and composition.\n *\n * You can render any other elements you want inside of `Tabs`, but `TabList`\n * should only render `Tab` elements, and `TabPanels` should only render\n * `TabPanel` elements.\n *\n * @see Docs     https://reacttraining.com/reach-ui/tabs\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/tabs\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n */\n\nimport React, {\n  memo,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Children,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendantsInit,\n  useDescendants,\n} from \"@reach/descendants\";\nimport {\n  boolOrBoolString,\n  checkStyles,\n  cloneValidElement,\n  createNamedContext,\n  forwardRefWithAs,\n  getElementComputedStyle,\n  isNumber,\n  isFunction,\n  makeId,\n  noop,\n  useControlledSwitchWarning,\n  useControlledState,\n  useEventCallback,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  useUpdateEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { useId } from \"@reach/auto-id\";\n\nconst TabsDescendantsContext = createDescendantContext<TabDescendant>(\n  \"TabsDescendantsContext\"\n);\n\nconst TabPanelDescendantsContext = createDescendantContext<TabPanelDescendant>(\n  \"TabPanelDescendantsContext\"\n);\nconst TabsContext = createNamedContext(\n  \"TabsContext\",\n  {} as InternalTabsContextValue\n);\n\nexport enum TabsKeyboardActivation {\n  Auto = \"auto\",\n  Manual = \"manual\",\n}\n\nexport enum TabsOrientation {\n  Horizontal = \"horizontal\",\n  Vertical = \"vertical\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tabs\n *\n * The parent component of the tab interface.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs\n */\nexport const Tabs = forwardRefWithAs<TabsProps, \"div\">(function Tabs(\n  {\n    as: Comp = \"div\",\n    children,\n    defaultIndex,\n    orientation = TabsOrientation.Horizontal,\n    index: controlledIndex = undefined,\n    keyboardActivation = TabsKeyboardActivation.Auto,\n    onChange,\n    readOnly = false,\n    ...props\n  },\n  ref\n) {\n  let isControlled = useRef(controlledIndex != null);\n  useControlledSwitchWarning(controlledIndex, \"index\", \"Tabs\");\n\n  let _id = useId(props.id);\n  let id = props.id ?? makeId(\"tabs\", _id);\n\n  // We only manage focus if the user caused the update vs. a new controlled\n  // index coming in.\n  let userInteractedRef = useRef(false);\n\n  let selectedPanelRef = useRef<HTMLElement | null>(null);\n\n  let isRTL = useRef(false);\n\n  let [selectedIndex, setSelectedIndex] = useControlledState(\n    controlledIndex,\n    defaultIndex ?? 0\n  );\n\n  let [focusedIndex, setFocusedIndex] = useState(-1);\n\n  let [tabs, setTabs] = useDescendantsInit<TabDescendant>();\n\n  let context: InternalTabsContextValue = useMemo(() => {\n    return {\n      focusedIndex,\n      id,\n      isControlled: isControlled.current,\n      isRTL,\n      keyboardActivation,\n      onFocusPanel() {\n        selectedPanelRef.current?.focus();\n      },\n      onSelectTab: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            onChange && onChange(index);\n            setSelectedIndex(index);\n          },\n      onSelectTabWithKeyboard: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            switch (keyboardActivation) {\n              case TabsKeyboardActivation.Manual:\n                tabs[index].element?.focus();\n                return;\n              case TabsKeyboardActivation.Auto:\n              default:\n                onChange && onChange(index);\n                setSelectedIndex(index);\n                return;\n            }\n          },\n      orientation,\n      selectedIndex,\n      selectedPanelRef,\n      setFocusedIndex,\n      setSelectedIndex,\n      userInteractedRef,\n    };\n  }, [\n    focusedIndex,\n    id,\n    keyboardActivation,\n    onChange,\n    orientation,\n    readOnly,\n    selectedIndex,\n    setSelectedIndex,\n    tabs,\n  ]);\n\n  useEffect(() => checkStyles(\"tabs\"), []);\n\n  return (\n    <DescendantProvider\n      context={TabsDescendantsContext}\n      items={tabs}\n      set={setTabs}\n    >\n      <TabsContext.Provider value={context}>\n        <Comp\n          {...props}\n          ref={ref}\n          data-reach-tabs=\"\"\n          data-orientation={orientation}\n          id={props.id}\n        >\n          {isFunction(children)\n            ? children({ focusedIndex, id, selectedIndex })\n            : children}\n        </Comp>\n      </TabsContext.Provider>\n    </DescendantProvider>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n */\nexport type TabsProps = {\n  /**\n   * Tabs expects `<TabList>` and `<TabPanels>` as children. The order doesn't\n   * matter, you can have tabs on the top or the bottom. In fact, you could have\n   * tabs on both the bottom and the top at the same time. You can have random\n   * elements inside as well.\n   *\n   * You can also pass a render function to access data relevant to nested\n   * components.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-children\n   */\n  children: React.ReactNode | ((props: TabsContextValue) => React.ReactNode);\n  /**\n   * Like form inputs, a tab's state can be controlled by the owner. Make sure\n   * to include an `onChange` as well, or else the tabs will not be interactive.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-index\n   */\n  index?: number;\n  /**\n   * Describes the activation mode when navigating a tablist with a keyboard.\n   * When set to `\"auto\"`, a tab panel is activated automatically when a tab is\n   * highlighted using arrow keys. When set to `\"manual\"`, the user must\n   * activate the tab panel with either the `Spacebar` or `Enter` keys. Defaults\n   * to `\"auto\"`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-keyboardactivation\n   */\n  keyboardActivation?: TabsKeyboardActivation;\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Starts the tabs at a specific index.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-defaultindex\n   */\n  defaultIndex?: number;\n  /**\n   * Allows you to switch the orientation of the tabs relative to their tab\n   * panels. This value can either be `\"horizontal\"`\n   * (`TabsOrientation.Horizontal`) or `\"vertical\"`\n   * (`TabsOrientation.Vertical`). Defaults to `\"horizontal\"`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-orientation\n   * @see MDN  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\n   */\n  orientation?: TabsOrientation;\n  /**\n   * Calls back with the tab index whenever the user changes tabs, allowing your\n   * app to synchronize with it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-onchange\n   */\n  onChange?: (index: number) => void;\n};\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    orientation: PropTypes.oneOf(Object.values(TabsOrientation)),\n    index: (props, name, compName, location, propName) => {\n      let val = props[name];\n      if (\n        props.index > -1 &&\n        props.onChange == null &&\n        props.readOnly !== true\n      ) {\n        return new Error(\n          \"You provided a value prop to `\" +\n            compName +\n            \"` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\"\n        );\n      } else if (props[name] != null && !isNumber(props[name])) {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`number\\`, received \\`${\n            Array.isArray(val) ? \"array\" : typeof val\n          }\\`.`\n        );\n      }\n      return null;\n    },\n    defaultIndex: PropTypes.number,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabList\n *\n * The parent component of the tabs.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist\n */\nconst TabListImpl = forwardRefWithAs<TabListProps, \"div\">(function TabList(\n  { children, as: Comp = \"div\", onKeyDown, ...props },\n  forwardedRef\n) {\n  const {\n    focusedIndex,\n    isControlled,\n    isRTL,\n    keyboardActivation,\n    onSelectTabWithKeyboard,\n    orientation,\n    selectedIndex,\n    setSelectedIndex,\n  } = useContext(TabsContext);\n  let tabs = useDescendants(TabsDescendantsContext);\n\n  let ownRef = useRef<HTMLElement | null>(null);\n  let ref = useForkedRef(forwardedRef, ownRef);\n\n  useEffect(() => {\n    if (\n      ownRef.current &&\n      ((ownRef.current.ownerDocument &&\n        ownRef.current.ownerDocument.dir === \"rtl\") ||\n        getElementComputedStyle(ownRef.current, \"direction\") === \"rtl\")\n    ) {\n      isRTL.current = true;\n    }\n  }, [isRTL]);\n\n  let handleKeyDown = useEventCallback(\n    wrapEvent(\n      onKeyDown,\n      useDescendantKeyDown(TabsDescendantsContext, {\n        currentIndex:\n          keyboardActivation === TabsKeyboardActivation.Manual\n            ? focusedIndex\n            : selectedIndex,\n        orientation,\n        rotate: true,\n        callback: onSelectTabWithKeyboard,\n        filter: (tab) => !tab.disabled,\n        rtl: isRTL.current,\n      })\n    )\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    // In the event an uncontrolled component's selected index is disabled,\n    // (this should only happen if the first tab is disabled and no default\n    // index is set), we need to override the selection to the next selectable\n    // index value.\n    if (!isControlled && boolOrBoolString(tabs[selectedIndex]?.disabled)) {\n      let next = tabs.find((tab) => !tab.disabled);\n      if (next) {\n        setSelectedIndex(next.index);\n      }\n    }\n  }, [tabs, isControlled, selectedIndex, setSelectedIndex]);\n\n  return (\n    <Comp\n      // The element that serves as the container for the set of tabs has role\n      // `tablist`\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tablist\"\n      // If the `tablist` element is vertically oriented, it has the property\n      // `aria-orientation` set to `\"vertical\"`. The default value of\n      // `aria-orientation` for a tablist element is `\"horizontal\"`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-orientation={orientation}\n      {...props}\n      data-reach-tab-list=\"\"\n      ref={ref}\n      onKeyDown={handleKeyDown}\n    >\n      {Children.map(children, (child, index) => {\n        // TODO: Remove in 1.0\n        return cloneValidElement(child, {\n          isSelected: index === selectedIndex,\n        });\n      })}\n    </Comp>\n  );\n});\n\nconst TabList = memo(TabListImpl);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-props\n */\nexport type TabListProps = {\n  /**\n   * `TabList` expects multiple `Tab` elements as children.\n   *\n   * `TabPanels` expects multiple `TabPanel` elements as children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n  TabListImpl.displayName = \"TabList\";\n  TabListImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nexport { TabList };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tab\n *\n * The interactive element that changes the selected panel.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab\n */\nexport const Tab = forwardRefWithAs<\n  // TODO: Remove this when cloneElement is removed\n  TabProps & { isSelected?: boolean },\n  \"button\"\n>(function Tab(\n  {\n    children,\n    isSelected: _,\n    as: Comp = \"button\",\n    index: indexProp,\n    disabled,\n    onBlur,\n    onFocus,\n    ...props\n  },\n  forwardedRef\n) {\n  const {\n    id: tabsId,\n    onSelectTab,\n    orientation,\n    selectedIndex,\n    userInteractedRef,\n    setFocusedIndex,\n  } = useContext(TabsContext);\n  const ownRef = useRef<HTMLElement | null>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const index = useDescendant(\n    {\n      element: ownRef.current!,\n      disabled: !!disabled,\n    },\n    TabsDescendantsContext,\n    indexProp\n  );\n  const htmlType =\n    Comp === \"button\" && props.type == null ? \"button\" : props.type;\n\n  const isSelected = index === selectedIndex;\n\n  function onSelect() {\n    onSelectTab(index);\n  }\n\n  useUpdateEffect(() => {\n    if (isSelected && ownRef.current && userInteractedRef.current) {\n      userInteractedRef.current = false;\n      ownRef.current.focus();\n    }\n  }, [isSelected, userInteractedRef]);\n\n  let handleFocus = useEventCallback(\n    wrapEvent(onFocus, () => {\n      setFocusedIndex(index);\n    })\n  );\n\n  let handleBlur = useEventCallback(\n    wrapEvent(onFocus, () => {\n      setFocusedIndex(-1);\n    })\n  );\n\n  return (\n    <Comp\n      // Each element with role `tab` has the property `aria-controls` referring\n      // to its associated `tabpanel` element.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-controls={makeId(tabsId, \"panel\", index)}\n      aria-disabled={disabled}\n      // The active tab element has the state `aria-selected` set to `true` and\n      // all other tab elements have it set to `false`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-selected={isSelected}\n      // Each element that serves as a tab has role `tab` and is contained\n      // within the element with role `tablist`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tab\"\n      tabIndex={isSelected ? 0 : -1}\n      {...props}\n      ref={ref}\n      data-reach-tab=\"\"\n      data-orientation={orientation}\n      data-selected={isSelected ? \"\" : undefined}\n      disabled={disabled}\n      id={makeId(tabsId, \"tab\", index)}\n      onClick={onSelect}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      type={htmlType}\n    >\n      {children}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab-props\n */\nexport type TabProps = {\n  /**\n   * `Tab` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tab-children\n   */\n  children?: React.ReactNode;\n  /**\n   * Disables a tab when true. Clicking will not work and keyboard navigation\n   * will skip over it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tab-disabled\n   */\n  disabled?: boolean;\n  index?: number;\n};\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n  Tab.propTypes = {\n    children: PropTypes.node,\n    disabled: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanels\n *\n * The parent component of the panels.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels\n */\nconst TabPanelsImpl = forwardRefWithAs<TabPanelsProps, \"div\">(\n  function TabPanels({ children, as: Comp = \"div\", ...props }, forwardedRef) {\n    let ownRef = useRef();\n    let ref = useForkedRef(ownRef, forwardedRef);\n    let [tabPanels, setTabPanels] = useDescendantsInit<TabPanelDescendant>();\n\n    return (\n      <DescendantProvider\n        context={TabPanelDescendantsContext}\n        items={tabPanels}\n        set={setTabPanels}\n      >\n        <Comp {...props} ref={ref} data-reach-tab-panels=\"\">\n          {children}\n        </Comp>\n      </DescendantProvider>\n    );\n  }\n);\n\nconst TabPanels = memo(TabPanelsImpl);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels-props\n */\nexport type TabPanelsProps = TabListProps & {};\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n  TabPanelsImpl.displayName = \"TabPanels\";\n  TabPanelsImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nexport { TabPanels };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanel\n *\n * The panel that displays when it's corresponding tab is active.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel\n */\nexport const TabPanel = forwardRefWithAs<TabPanelProps, \"div\">(\n  function TabPanel(\n    { children, \"aria-label\": ariaLabel, as: Comp = \"div\", ...props },\n    forwardedRef\n  ) {\n    let { selectedPanelRef, selectedIndex, id: tabsId } = useContext(\n      TabsContext\n    );\n    let ownRef = useRef<HTMLElement | null>(null);\n\n    let index = useDescendant(\n      { element: ownRef.current! },\n      TabPanelDescendantsContext\n    );\n    let isSelected = index === selectedIndex;\n\n    let id = makeId(tabsId, \"panel\", index);\n\n    let ref = useForkedRef(\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedPanelRef : null\n    );\n\n    return (\n      <Comp\n        // Each element with role `tabpanel` has the property `aria-labelledby`\n        // referring to its associated tab element.\n        aria-labelledby={makeId(tabsId, \"tab\", index)}\n        hidden={!isSelected}\n        // Each element that contains the content panel for a tab has role\n        // `tabpanel`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n        role=\"tabpanel\"\n        tabIndex={isSelected ? 0 : -1}\n        {...props}\n        ref={ref}\n        data-reach-tab-panel=\"\"\n        id={id}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-props\n */\nexport type TabPanelProps = {\n  /**\n   * `TabPanel` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n  TabPanel.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Tabs` component to its descendants.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#usetabscontext\n */\nexport function useTabsContext(): TabsContextValue {\n  let { focusedIndex, id, selectedIndex } = useContext(TabsContext);\n  return useMemo(\n    () => ({\n      focusedIndex,\n      id,\n      selectedIndex,\n    }),\n    [focusedIndex, id, selectedIndex]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype TabDescendant = Descendant<HTMLElement> & {\n  disabled: boolean;\n};\n\ntype TabPanelDescendant = Descendant<HTMLElement>;\n\nexport type TabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  selectedIndex: number;\n};\n\ntype InternalTabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  isControlled: boolean;\n  isRTL: React.MutableRefObject<boolean>;\n  keyboardActivation: TabsKeyboardActivation;\n  onFocusPanel: () => void;\n  onSelectTab: (index: number) => void;\n  onSelectTabWithKeyboard: (index: number) => void;\n  orientation: TabsOrientation;\n  selectedIndex: number;\n  selectedPanelRef: React.MutableRefObject<HTMLElement | null>;\n  setFocusedIndex: React.Dispatch<React.SetStateAction<number>>;\n  setSelectedIndex: React.Dispatch<React.SetStateAction<number>>;\n  userInteractedRef: React.MutableRefObject<boolean>;\n};\n"],"names":["TabsKeyboardActivation","TabsOrientation","TabsDescendantsContext","createDescendantContext","TabPanelDescendantsContext","TabsContext","createNamedContext","Tabs","forwardRefWithAs","ref","as","Comp","children","defaultIndex","orientation","Horizontal","index","controlledIndex","undefined","keyboardActivation","Auto","onChange","readOnly","props","isControlled","useRef","useControlledSwitchWarning","_id","useId","id","makeId","userInteractedRef","selectedPanelRef","isRTL","useControlledState","selectedIndex","setSelectedIndex","useState","focusedIndex","setFocusedIndex","useDescendantsInit","tabs","setTabs","context","useMemo","current","onFocusPanel","focus","onSelectTab","noop","onSelectTabWithKeyboard","Manual","element","useEffect","checkStyles","React","DescendantProvider","items","set","Provider","value","isFunction","TabListImpl","forwardedRef","onKeyDown","useContext","useDescendants","ownRef","useForkedRef","ownerDocument","dir","getElementComputedStyle","handleKeyDown","useEventCallback","wrapEvent","useDescendantKeyDown","currentIndex","rotate","callback","filter","tab","disabled","rtl","useIsomorphicLayoutEffect","boolOrBoolString","_tabs$selectedIndex","next","find","role","Children","map","child","cloneValidElement","isSelected","TabList","memo","Tab","indexProp","onFocus","tabsId","useDescendant","htmlType","type","useUpdateEffect","handleFocus","handleBlur","tabIndex","onClick","onBlur","TabPanelsImpl","TabPanels","TabPanel","hidden"],"mappings":"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"}