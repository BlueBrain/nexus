{"version":3,"file":"tabs.esm.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/tabs!\n *\n * An accessible tabs component.\n *\n * The `Tab` and `TabPanel` elements are associated by their order in the tree.\n * None of the components are empty wrappers, each is associated with a real DOM\n * element in the document, giving you maximum control over styling and composition.\n *\n * You can render any other elements you want inside of `Tabs`, but `TabList`\n * should only render `Tab` elements, and `TabPanels` should only render\n * `TabPanel` elements.\n *\n * @see Docs     https://reacttraining.com/reach-ui/tabs\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/tabs\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n */\n\nimport React, {\n  memo,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Children,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendantsInit,\n  useDescendants,\n} from \"@reach/descendants\";\nimport {\n  boolOrBoolString,\n  checkStyles,\n  cloneValidElement,\n  createNamedContext,\n  forwardRefWithAs,\n  getElementComputedStyle,\n  isNumber,\n  isFunction,\n  makeId,\n  noop,\n  useControlledSwitchWarning,\n  useControlledState,\n  useEventCallback,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  useUpdateEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { useId } from \"@reach/auto-id\";\n\nconst TabsDescendantsContext = createDescendantContext<TabDescendant>(\n  \"TabsDescendantsContext\"\n);\n\nconst TabPanelDescendantsContext = createDescendantContext<TabPanelDescendant>(\n  \"TabPanelDescendantsContext\"\n);\nconst TabsContext = createNamedContext(\n  \"TabsContext\",\n  {} as InternalTabsContextValue\n);\n\nexport enum TabsKeyboardActivation {\n  Auto = \"auto\",\n  Manual = \"manual\",\n}\n\nexport enum TabsOrientation {\n  Horizontal = \"horizontal\",\n  Vertical = \"vertical\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tabs\n *\n * The parent component of the tab interface.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs\n */\nexport const Tabs = forwardRefWithAs<TabsProps, \"div\">(function Tabs(\n  {\n    as: Comp = \"div\",\n    children,\n    defaultIndex,\n    orientation = TabsOrientation.Horizontal,\n    index: controlledIndex = undefined,\n    keyboardActivation = TabsKeyboardActivation.Auto,\n    onChange,\n    readOnly = false,\n    ...props\n  },\n  ref\n) {\n  let isControlled = useRef(controlledIndex != null);\n  useControlledSwitchWarning(controlledIndex, \"index\", \"Tabs\");\n\n  let _id = useId(props.id);\n  let id = props.id ?? makeId(\"tabs\", _id);\n\n  // We only manage focus if the user caused the update vs. a new controlled\n  // index coming in.\n  let userInteractedRef = useRef(false);\n\n  let selectedPanelRef = useRef<HTMLElement | null>(null);\n\n  let isRTL = useRef(false);\n\n  let [selectedIndex, setSelectedIndex] = useControlledState(\n    controlledIndex,\n    defaultIndex ?? 0\n  );\n\n  let [focusedIndex, setFocusedIndex] = useState(-1);\n\n  let [tabs, setTabs] = useDescendantsInit<TabDescendant>();\n\n  let context: InternalTabsContextValue = useMemo(() => {\n    return {\n      focusedIndex,\n      id,\n      isControlled: isControlled.current,\n      isRTL,\n      keyboardActivation,\n      onFocusPanel() {\n        selectedPanelRef.current?.focus();\n      },\n      onSelectTab: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            onChange && onChange(index);\n            setSelectedIndex(index);\n          },\n      onSelectTabWithKeyboard: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            switch (keyboardActivation) {\n              case TabsKeyboardActivation.Manual:\n                tabs[index].element?.focus();\n                return;\n              case TabsKeyboardActivation.Auto:\n              default:\n                onChange && onChange(index);\n                setSelectedIndex(index);\n                return;\n            }\n          },\n      orientation,\n      selectedIndex,\n      selectedPanelRef,\n      setFocusedIndex,\n      setSelectedIndex,\n      userInteractedRef,\n    };\n  }, [\n    focusedIndex,\n    id,\n    keyboardActivation,\n    onChange,\n    orientation,\n    readOnly,\n    selectedIndex,\n    setSelectedIndex,\n    tabs,\n  ]);\n\n  useEffect(() => checkStyles(\"tabs\"), []);\n\n  return (\n    <DescendantProvider\n      context={TabsDescendantsContext}\n      items={tabs}\n      set={setTabs}\n    >\n      <TabsContext.Provider value={context}>\n        <Comp\n          {...props}\n          ref={ref}\n          data-reach-tabs=\"\"\n          data-orientation={orientation}\n          id={props.id}\n        >\n          {isFunction(children)\n            ? children({ focusedIndex, id, selectedIndex })\n            : children}\n        </Comp>\n      </TabsContext.Provider>\n    </DescendantProvider>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n */\nexport type TabsProps = {\n  /**\n   * Tabs expects `<TabList>` and `<TabPanels>` as children. The order doesn't\n   * matter, you can have tabs on the top or the bottom. In fact, you could have\n   * tabs on both the bottom and the top at the same time. You can have random\n   * elements inside as well.\n   *\n   * You can also pass a render function to access data relevant to nested\n   * components.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-children\n   */\n  children: React.ReactNode | ((props: TabsContextValue) => React.ReactNode);\n  /**\n   * Like form inputs, a tab's state can be controlled by the owner. Make sure\n   * to include an `onChange` as well, or else the tabs will not be interactive.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-index\n   */\n  index?: number;\n  /**\n   * Describes the activation mode when navigating a tablist with a keyboard.\n   * When set to `\"auto\"`, a tab panel is activated automatically when a tab is\n   * highlighted using arrow keys. When set to `\"manual\"`, the user must\n   * activate the tab panel with either the `Spacebar` or `Enter` keys. Defaults\n   * to `\"auto\"`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-keyboardactivation\n   */\n  keyboardActivation?: TabsKeyboardActivation;\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Starts the tabs at a specific index.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-defaultindex\n   */\n  defaultIndex?: number;\n  /**\n   * Allows you to switch the orientation of the tabs relative to their tab\n   * panels. This value can either be `\"horizontal\"`\n   * (`TabsOrientation.Horizontal`) or `\"vertical\"`\n   * (`TabsOrientation.Vertical`). Defaults to `\"horizontal\"`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-orientation\n   * @see MDN  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\n   */\n  orientation?: TabsOrientation;\n  /**\n   * Calls back with the tab index whenever the user changes tabs, allowing your\n   * app to synchronize with it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-onchange\n   */\n  onChange?: (index: number) => void;\n};\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    orientation: PropTypes.oneOf(Object.values(TabsOrientation)),\n    index: (props, name, compName, location, propName) => {\n      let val = props[name];\n      if (\n        props.index > -1 &&\n        props.onChange == null &&\n        props.readOnly !== true\n      ) {\n        return new Error(\n          \"You provided a value prop to `\" +\n            compName +\n            \"` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\"\n        );\n      } else if (props[name] != null && !isNumber(props[name])) {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`number\\`, received \\`${\n            Array.isArray(val) ? \"array\" : typeof val\n          }\\`.`\n        );\n      }\n      return null;\n    },\n    defaultIndex: PropTypes.number,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabList\n *\n * The parent component of the tabs.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist\n */\nconst TabListImpl = forwardRefWithAs<TabListProps, \"div\">(function TabList(\n  { children, as: Comp = \"div\", onKeyDown, ...props },\n  forwardedRef\n) {\n  const {\n    focusedIndex,\n    isControlled,\n    isRTL,\n    keyboardActivation,\n    onSelectTabWithKeyboard,\n    orientation,\n    selectedIndex,\n    setSelectedIndex,\n  } = useContext(TabsContext);\n  let tabs = useDescendants(TabsDescendantsContext);\n\n  let ownRef = useRef<HTMLElement | null>(null);\n  let ref = useForkedRef(forwardedRef, ownRef);\n\n  useEffect(() => {\n    if (\n      ownRef.current &&\n      ((ownRef.current.ownerDocument &&\n        ownRef.current.ownerDocument.dir === \"rtl\") ||\n        getElementComputedStyle(ownRef.current, \"direction\") === \"rtl\")\n    ) {\n      isRTL.current = true;\n    }\n  }, [isRTL]);\n\n  let handleKeyDown = useEventCallback(\n    wrapEvent(\n      onKeyDown,\n      useDescendantKeyDown(TabsDescendantsContext, {\n        currentIndex:\n          keyboardActivation === TabsKeyboardActivation.Manual\n            ? focusedIndex\n            : selectedIndex,\n        orientation,\n        rotate: true,\n        callback: onSelectTabWithKeyboard,\n        filter: (tab) => !tab.disabled,\n        rtl: isRTL.current,\n      })\n    )\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    // In the event an uncontrolled component's selected index is disabled,\n    // (this should only happen if the first tab is disabled and no default\n    // index is set), we need to override the selection to the next selectable\n    // index value.\n    if (!isControlled && boolOrBoolString(tabs[selectedIndex]?.disabled)) {\n      let next = tabs.find((tab) => !tab.disabled);\n      if (next) {\n        setSelectedIndex(next.index);\n      }\n    }\n  }, [tabs, isControlled, selectedIndex, setSelectedIndex]);\n\n  return (\n    <Comp\n      // The element that serves as the container for the set of tabs has role\n      // `tablist`\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tablist\"\n      // If the `tablist` element is vertically oriented, it has the property\n      // `aria-orientation` set to `\"vertical\"`. The default value of\n      // `aria-orientation` for a tablist element is `\"horizontal\"`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-orientation={orientation}\n      {...props}\n      data-reach-tab-list=\"\"\n      ref={ref}\n      onKeyDown={handleKeyDown}\n    >\n      {Children.map(children, (child, index) => {\n        // TODO: Remove in 1.0\n        return cloneValidElement(child, {\n          isSelected: index === selectedIndex,\n        });\n      })}\n    </Comp>\n  );\n});\n\nconst TabList = memo(TabListImpl);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-props\n */\nexport type TabListProps = {\n  /**\n   * `TabList` expects multiple `Tab` elements as children.\n   *\n   * `TabPanels` expects multiple `TabPanel` elements as children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n  TabListImpl.displayName = \"TabList\";\n  TabListImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nexport { TabList };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tab\n *\n * The interactive element that changes the selected panel.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab\n */\nexport const Tab = forwardRefWithAs<\n  // TODO: Remove this when cloneElement is removed\n  TabProps & { isSelected?: boolean },\n  \"button\"\n>(function Tab(\n  {\n    children,\n    isSelected: _,\n    as: Comp = \"button\",\n    index: indexProp,\n    disabled,\n    onBlur,\n    onFocus,\n    ...props\n  },\n  forwardedRef\n) {\n  const {\n    id: tabsId,\n    onSelectTab,\n    orientation,\n    selectedIndex,\n    userInteractedRef,\n    setFocusedIndex,\n  } = useContext(TabsContext);\n  const ownRef = useRef<HTMLElement | null>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const index = useDescendant(\n    {\n      element: ownRef.current!,\n      disabled: !!disabled,\n    },\n    TabsDescendantsContext,\n    indexProp\n  );\n  const htmlType =\n    Comp === \"button\" && props.type == null ? \"button\" : props.type;\n\n  const isSelected = index === selectedIndex;\n\n  function onSelect() {\n    onSelectTab(index);\n  }\n\n  useUpdateEffect(() => {\n    if (isSelected && ownRef.current && userInteractedRef.current) {\n      userInteractedRef.current = false;\n      ownRef.current.focus();\n    }\n  }, [isSelected, userInteractedRef]);\n\n  let handleFocus = useEventCallback(\n    wrapEvent(onFocus, () => {\n      setFocusedIndex(index);\n    })\n  );\n\n  let handleBlur = useEventCallback(\n    wrapEvent(onFocus, () => {\n      setFocusedIndex(-1);\n    })\n  );\n\n  return (\n    <Comp\n      // Each element with role `tab` has the property `aria-controls` referring\n      // to its associated `tabpanel` element.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-controls={makeId(tabsId, \"panel\", index)}\n      aria-disabled={disabled}\n      // The active tab element has the state `aria-selected` set to `true` and\n      // all other tab elements have it set to `false`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-selected={isSelected}\n      // Each element that serves as a tab has role `tab` and is contained\n      // within the element with role `tablist`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tab\"\n      tabIndex={isSelected ? 0 : -1}\n      {...props}\n      ref={ref}\n      data-reach-tab=\"\"\n      data-orientation={orientation}\n      data-selected={isSelected ? \"\" : undefined}\n      disabled={disabled}\n      id={makeId(tabsId, \"tab\", index)}\n      onClick={onSelect}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      type={htmlType}\n    >\n      {children}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab-props\n */\nexport type TabProps = {\n  /**\n   * `Tab` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tab-children\n   */\n  children?: React.ReactNode;\n  /**\n   * Disables a tab when true. Clicking will not work and keyboard navigation\n   * will skip over it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tab-disabled\n   */\n  disabled?: boolean;\n  index?: number;\n};\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n  Tab.propTypes = {\n    children: PropTypes.node,\n    disabled: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanels\n *\n * The parent component of the panels.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels\n */\nconst TabPanelsImpl = forwardRefWithAs<TabPanelsProps, \"div\">(\n  function TabPanels({ children, as: Comp = \"div\", ...props }, forwardedRef) {\n    let ownRef = useRef();\n    let ref = useForkedRef(ownRef, forwardedRef);\n    let [tabPanels, setTabPanels] = useDescendantsInit<TabPanelDescendant>();\n\n    return (\n      <DescendantProvider\n        context={TabPanelDescendantsContext}\n        items={tabPanels}\n        set={setTabPanels}\n      >\n        <Comp {...props} ref={ref} data-reach-tab-panels=\"\">\n          {children}\n        </Comp>\n      </DescendantProvider>\n    );\n  }\n);\n\nconst TabPanels = memo(TabPanelsImpl);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels-props\n */\nexport type TabPanelsProps = TabListProps & {};\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n  TabPanelsImpl.displayName = \"TabPanels\";\n  TabPanelsImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nexport { TabPanels };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanel\n *\n * The panel that displays when it's corresponding tab is active.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel\n */\nexport const TabPanel = forwardRefWithAs<TabPanelProps, \"div\">(\n  function TabPanel(\n    { children, \"aria-label\": ariaLabel, as: Comp = \"div\", ...props },\n    forwardedRef\n  ) {\n    let { selectedPanelRef, selectedIndex, id: tabsId } = useContext(\n      TabsContext\n    );\n    let ownRef = useRef<HTMLElement | null>(null);\n\n    let index = useDescendant(\n      { element: ownRef.current! },\n      TabPanelDescendantsContext\n    );\n    let isSelected = index === selectedIndex;\n\n    let id = makeId(tabsId, \"panel\", index);\n\n    let ref = useForkedRef(\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedPanelRef : null\n    );\n\n    return (\n      <Comp\n        // Each element with role `tabpanel` has the property `aria-labelledby`\n        // referring to its associated tab element.\n        aria-labelledby={makeId(tabsId, \"tab\", index)}\n        hidden={!isSelected}\n        // Each element that contains the content panel for a tab has role\n        // `tabpanel`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n        role=\"tabpanel\"\n        tabIndex={isSelected ? 0 : -1}\n        {...props}\n        ref={ref}\n        data-reach-tab-panel=\"\"\n        id={id}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-props\n */\nexport type TabPanelProps = {\n  /**\n   * `TabPanel` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n  TabPanel.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Tabs` component to its descendants.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#usetabscontext\n */\nexport function useTabsContext(): TabsContextValue {\n  let { focusedIndex, id, selectedIndex } = useContext(TabsContext);\n  return useMemo(\n    () => ({\n      focusedIndex,\n      id,\n      selectedIndex,\n    }),\n    [focusedIndex, id, selectedIndex]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype TabDescendant = Descendant<HTMLElement> & {\n  disabled: boolean;\n};\n\ntype TabPanelDescendant = Descendant<HTMLElement>;\n\nexport type TabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  selectedIndex: number;\n};\n\ntype InternalTabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  isControlled: boolean;\n  isRTL: React.MutableRefObject<boolean>;\n  keyboardActivation: TabsKeyboardActivation;\n  onFocusPanel: () => void;\n  onSelectTab: (index: number) => void;\n  onSelectTabWithKeyboard: (index: number) => void;\n  orientation: TabsOrientation;\n  selectedIndex: number;\n  selectedPanelRef: React.MutableRefObject<HTMLElement | null>;\n  setFocusedIndex: React.Dispatch<React.SetStateAction<number>>;\n  setSelectedIndex: React.Dispatch<React.SetStateAction<number>>;\n  userInteractedRef: React.MutableRefObject<boolean>;\n};\n"],"names":["TabsDescendantsContext","createDescendantContext","TabPanelDescendantsContext","TabsContext","createNamedContext","TabsKeyboardActivation","TabsOrientation","Tabs","forwardRefWithAs","ref","as","Comp","children","defaultIndex","orientation","Horizontal","index","controlledIndex","undefined","keyboardActivation","Auto","onChange","readOnly","props","isControlled","useRef","useControlledSwitchWarning","_id","useId","id","makeId","userInteractedRef","selectedPanelRef","isRTL","useControlledState","selectedIndex","setSelectedIndex","useState","focusedIndex","setFocusedIndex","useDescendantsInit","tabs","setTabs","context","useMemo","current","onFocusPanel","focus","onSelectTab","noop","onSelectTabWithKeyboard","Manual","element","useEffect","checkStyles","React","DescendantProvider","items","set","Provider","value","isFunction","displayName","propTypes","PropTypes","node","isRequired","func","oneOf","Object","values","name","compName","location","propName","val","Error","isNumber","Array","isArray","number","TabListImpl","TabList","forwardedRef","onKeyDown","useContext","useDescendants","ownRef","useForkedRef","ownerDocument","dir","getElementComputedStyle","handleKeyDown","useEventCallback","wrapEvent","useDescendantKeyDown","currentIndex","rotate","callback","filter","tab","disabled","rtl","useIsomorphicLayoutEffect","boolOrBoolString","next","find","role","Children","map","child","cloneValidElement","isSelected","memo","any","Tab","_","indexProp","onBlur","onFocus","tabsId","useDescendant","htmlType","type","onSelect","useUpdateEffect","handleFocus","handleBlur","tabIndex","onClick","bool","TabPanelsImpl","TabPanels","tabPanels","setTabPanels","TabPanel","ariaLabel","hidden","useTabsContext"],"mappings":"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"}