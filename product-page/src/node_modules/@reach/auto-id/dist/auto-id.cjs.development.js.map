{"version":3,"file":"auto-id.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["/*\n * Welcome to @reach/auto-id!\n\n * Let's see if we can make sense of why this hook exists and its\n * implementation.\n *\n * Some background:\n *   1. Accessibiliy APIs rely heavily on element IDs\n *   2. Requiring developers to put IDs on every element in Reach UI is both\n *      cumbersome and error-prone\n *   3. With a component model, we can generate IDs for them!\n *\n * Solution 1: Generate random IDs.\n *\n * This works great as long as you don't server render your app. When React (in\n * the client) tries to reuse the markup from the server, the IDs won't match\n * and React will then recreate the entire DOM tree.\n *\n * Solution 2: Increment an integer\n *\n * This sounds great. Since we're rendering the exact same tree on the server\n * and client, we can increment a counter and get a deterministic result between\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\n * pretty sure the tab will be closed before an app never needs\n * 10 quadrillion IDs!\n *\n * Problem solved, right?\n *\n * Ah, but there's a catch! React's concurrent rendering makes this approach\n * non-deterministic. While the client and server will end up with the same\n * elements in the end, depending on suspense boundaries (and possibly some user\n * input during the initial render) the incrementing integers won't always match\n * up.\n *\n * Solution 3: Don't use IDs at all on the server; patch after first render.\n *\n * What we've done here is solution 2 with some tricks. With this approach, the\n * ID returned is an empty string on the first render. This way the server and\n * client have the same markup no matter how wild the concurrent rendering may\n * have gotten.\n *\n * After the render, we patch up the components with an incremented ID. This\n * causes a double render on any components with `useId`. Shouldn't be a problem\n * since the components using this hook should be small, and we're only updating\n * the ID attribute on the DOM, nothing big is happening.\n *\n * It doesn't have to be an incremented number, though--we could do generate\n * random strings instead, but incrementing a number is probably the cheapest\n * thing we can do.\n *\n * Additionally, we only do this patchup on the very first client render ever.\n * Any calls to `useId` that happen dynamically in the client will be\n * populated immediately with a value. So, we only get the double render after\n * server hydration and never again, SO BACK OFF ALRIGHT?\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@reach/utils\";\n\nlet serverHandoffComplete = false;\nlet id = 0;\nconst genId = () => ++id;\n\n/**\n * useId\n *\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n *\n * Note: The returned ID will initially be `null` and will update after a\n * component mounts. Users may need to supply their own ID if they need\n * consistent values for SSR.\n *\n * @see Docs https://reacttraining.com/reach-ui/auto-id\n */\nexport const useId = (idFromProps?: string | null) => {\n  /*\n   * If this instance isn't part of the initial render, we don't have to do the\n   * double render/patch-up dance. We can just generate the ID and return it.\n   */\n  const initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  const [id, setId] = useState(initialId);\n\n  useIsomorphicLayoutEffect(() => {\n    if (id === null) {\n      /*\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\n       * rendering flicker, though it'll make the first render slower (unlikely\n       * to matter, but you're welcome to measure your app and let us know if\n       * it's a problem).\n       */\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (serverHandoffComplete === false) {\n      /*\n       * Flag all future uses of `useId` to skip the update dance. This is in\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\n       * accidentally bail out of the patch-up dance prematurely.\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n};\n"],"names":["serverHandoffComplete","id","genId","useId","idFromProps","initialId","useState","setId","useIsomorphicLayoutEffect","useEffect","String","undefined"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,IAAIA,qBAAqB,GAAG,KAA5B;AACA,IAAIC,EAAE,GAAG,CAAT;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAM,EAAED,EAAR;AAAA,CAAd;AAEA;;;;;;;;;;;;;IAWaE,KAAK,GAAG,SAARA,KAAQ,CAACC,WAAD;AACnB;;;;AAIA,MAAMC,SAAS,GAAGD,WAAW,KAAKJ,qBAAqB,GAAGE,KAAK,EAAR,GAAa,IAAvC,CAA7B;;kBAEoBI,cAAQ,CAACD,SAAD;MAArBJ;MAAIM;;AAEXC,EAAAA,+BAAyB,CAAC;AACxB,QAAIP,EAAE,KAAK,IAAX,EAAiB;AACf;;;;;;AAMAM,MAAAA,KAAK,CAACL,KAAK,EAAN,CAAL;AACD;;AAEF,GAXwB,EAWtB,EAXsB,CAAzB;AAaAO,EAAAA,eAAS,CAAC;AACR,QAAIT,qBAAqB,KAAK,KAA9B,EAAqC;AACnC;;;;;AAKAA,MAAAA,qBAAqB,GAAG,IAAxB;AACD;AACF,GATQ,EASN,EATM,CAAT;AAUA,SAAOC,EAAE,IAAI,IAAN,GAAaS,MAAM,CAACT,EAAD,CAAnB,GAA0BU,SAAjC;AACD;;;;"}