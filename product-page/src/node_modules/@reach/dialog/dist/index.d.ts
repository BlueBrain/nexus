/**
 * Welcome to @reach/dialog!
 *
 * An accessible dialog or "modal" window.
 *
 * @see Docs     https://reacttraining.com/reach-ui/dialog
 * @see Source   https://github.com/reach/reach-ui/tree/master/packages/dialog
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal
 */
import React from "react";
/**
 * DialogOverlay
 *
 * Low-level component if you need more control over the styles or rendering of
 * the dialog overlay.
 *
 * Note: You must render a `DialogContent` inside.
 *
 * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay
 */
export declare const DialogOverlay: React.ForwardRefExoticComponent<{
    allowPinchZoom?: boolean | undefined;
    /**
     * Controls whether the dialog is open or not.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-isopen
     */
    isOpen?: boolean | undefined;
    /**
     * This function is called whenever the user hits "Escape" or clicks outside
     * the dialog. _It's important to close the dialog `onDismiss`_.
     *
     * The only time you shouldn't close the dialog on dismiss is when the dialog
     * requires a choice and none of them are "cancel". For example, perhaps two
     * records need to be merged and the user needs to pick the surviving record.
     * Neither choice is less destructive than the other, so in these cases you
     * may want to alert the user they need to a make a choice on dismiss instead
     * of closing the dialog.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-ondismiss
     */
    onDismiss?: ((event?: React.SyntheticEvent<Element, Event> | undefined) => void) | undefined;
    /**
     * Accepts any renderable content.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-children
     */
    children?: React.ReactNode;
    /**
     * By default the first focusable element will receive focus when the dialog
     * opens but you can provide a ref to focus instead.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay-initialfocusref
     */
    initialFocusRef?: React.RefObject<any> | undefined;
    /**
     * By default, React Focus Lock prevents focus from being moved outside of the
     * locked element even if the thing trying to take focus is in another frame.
     * Normally this is what you want, as an iframe is typically going to be a
     * part of your page content. But in some situations, like when using Code
     * Sandbox, you can't use any of the controls or the editor in the sandbox
     * while dialog is open because of the focus lock.
     *
     * This prop may have some negative side effects and unintended consequences,
     * and it opens questions about how we might distinguish frames that *should*
     * steal focus from those that shouldn't. Perhaps it's best for app devs to
     * decide, and if they use this prop we should advise them to imperatively
     * assign a -1 tabIndex to other iframes that are a part of the page content
     * when the dialog is open.
     *
     * https://github.com/reach/reach-ui/issues/536
     */
    unstable_lockFocusAcrossFrames?: boolean | undefined;
} & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
/**
 * DialogContent
 *
 * Low-level component if you need more control over the styles or rendering of
 * the dialog content.
 *
 * Note: Must be a child of `DialogOverlay`.
 *
 * Note: You only need to use this when you are also styling `DialogOverlay`,
 * otherwise you can use the high-level `Dialog` component and pass the props
 * to it. Any props passed to `Dialog` component (besides `isOpen` and
 * `onDismiss`) will be spread onto `DialogContent`.
 *
 * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent
 */
export declare const DialogContent: React.ForwardRefExoticComponent<{
    /**
     * Accepts any renderable content.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent-children
     */
    children?: React.ReactNode;
} & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
/**
 * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent-props
 */
export declare type DialogContentProps = {
    /**
     * Accepts any renderable content.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent-children
     */
    children?: React.ReactNode;
} & React.HTMLAttributes<HTMLDivElement>;
/**
 * Dialog
 *
 * High-level component to render a modal dialog window over the top of the page
 * (or another dialog).
 *
 * @see Docs https://reacttraining.com/reach-ui/dialog#dialog
 */
export declare const Dialog: React.ForwardRefExoticComponent<{
    allowPinchZoom?: boolean | undefined;
    /**
     * Controls whether the dialog is open or not.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-isopen
     */
    isOpen?: boolean | undefined;
    /**
     * This function is called whenever the user hits "Escape" or clicks outside
     * the dialog. _It's important to close the dialog `onDismiss`_.
     *
     * The only time you shouldn't close the dialog on dismiss is when the dialog
     * requires a choice and none of them are "cancel". For example, perhaps two
     * records need to be merged and the user needs to pick the surviving record.
     * Neither choice is less destructive than the other, so in these cases you
     * may want to alert the user they need to a make a choice on dismiss instead
     * of closing the dialog.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-ondismiss
     */
    onDismiss?: ((event?: React.SyntheticEvent<Element, Event> | undefined) => void) | undefined;
    /**
     * Accepts any renderable content.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-children
     */
    children?: React.ReactNode;
    /**
     * By default the first focusable element will receive focus when the dialog
     * opens but you can provide a ref to focus instead.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay-initialfocusref
     */
    initialFocusRef?: React.RefObject<any> | undefined;
    /**
     * By default, React Focus Lock prevents focus from being moved outside of the
     * locked element even if the thing trying to take focus is in another frame.
     * Normally this is what you want, as an iframe is typically going to be a
     * part of your page content. But in some situations, like when using Code
     * Sandbox, you can't use any of the controls or the editor in the sandbox
     * while dialog is open because of the focus lock.
     *
     * This prop may have some negative side effects and unintended consequences,
     * and it opens questions about how we might distinguish frames that *should*
     * steal focus from those that shouldn't. Perhaps it's best for app devs to
     * decide, and if they use this prop we should advise them to imperatively
     * assign a -1 tabIndex to other iframes that are a part of the page content
     * when the dialog is open.
     *
     * https://github.com/reach/reach-ui/issues/536
     */
    unstable_lockFocusAcrossFrames?: boolean | undefined;
} & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
/**
 * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-props
 */
export declare type DialogProps = {
    allowPinchZoom?: boolean;
    /**
     * Controls whether the dialog is open or not.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-isopen
     */
    isOpen?: boolean;
    /**
     * This function is called whenever the user hits "Escape" or clicks outside
     * the dialog. _It's important to close the dialog `onDismiss`_.
     *
     * The only time you shouldn't close the dialog on dismiss is when the dialog
     * requires a choice and none of them are "cancel". For example, perhaps two
     * records need to be merged and the user needs to pick the surviving record.
     * Neither choice is less destructive than the other, so in these cases you
     * may want to alert the user they need to a make a choice on dismiss instead
     * of closing the dialog.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-ondismiss
     */
    onDismiss?: (event?: React.SyntheticEvent) => void;
    /**
     * Accepts any renderable content.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-children
     */
    children?: React.ReactNode;
    /**
     * By default the first focusable element will receive focus when the dialog
     * opens but you can provide a ref to focus instead.
     *
     * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay-initialfocusref
     */
    initialFocusRef?: React.RefObject<any>;
    /**
     * By default, React Focus Lock prevents focus from being moved outside of the
     * locked element even if the thing trying to take focus is in another frame.
     * Normally this is what you want, as an iframe is typically going to be a
     * part of your page content. But in some situations, like when using Code
     * Sandbox, you can't use any of the controls or the editor in the sandbox
     * while dialog is open because of the focus lock.
     *
     * This prop may have some negative side effects and unintended consequences,
     * and it opens questions about how we might distinguish frames that *should*
     * steal focus from those that shouldn't. Perhaps it's best for app devs to
     * decide, and if they use this prop we should advise them to imperatively
     * assign a -1 tabIndex to other iframes that are a part of the page content
     * when the dialog is open.
     *
     * https://github.com/reach/reach-ui/issues/536
     */
    unstable_lockFocusAcrossFrames?: boolean;
} & React.HTMLAttributes<HTMLDivElement>;
export default Dialog;
