{"version":3,"file":"dialog.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/**\n * Welcome to @reach/dialog!\n *\n * An accessible dialog or \"modal\" window.\n *\n * @see Docs     https://reacttraining.com/reach-ui/dialog\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/dialog\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\n */\n\nimport React, { forwardRef, useCallback, useEffect, useRef } from \"react\";\nimport Portal from \"@reach/portal\";\nimport {\n  checkStyles,\n  getOwnerDocument,\n  isString,\n  noop,\n  useForkedRef,\n  wrapEvent,\n} from \"@reach/utils\";\nimport FocusLock from \"react-focus-lock\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport PropTypes from \"prop-types\";\n\nconst overlayPropTypes = {\n  initialFocusRef: () => null,\n  allowPinchZoom: PropTypes.bool,\n  onDismiss: PropTypes.func,\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DialogOverlay\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog overlay.\n *\n * Note: You must render a `DialogContent` inside.\n *\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay\n */\nexport const DialogOverlay = forwardRef<HTMLDivElement, DialogProps>(\n  function DialogOverlay({ isOpen = true, ...props }, forwardedRef) {\n    useEffect(() => checkStyles(\"dialog\"), []);\n\n    // We want to ignore the immediate focus of a tooltip so it doesn't pop\n    // up again when the menu closes, only pops up when focus returns again\n    // to the tooltip (like native OS tooltips).\n    useEffect(() => {\n      if (isOpen) {\n        // @ts-ignore\n        window.__REACH_DISABLE_TOOLTIPS = true;\n      } else {\n        window.requestAnimationFrame(() => {\n          // Wait a frame so that this doesn't fire before tooltip does\n          // @ts-ignore\n          window.__REACH_DISABLE_TOOLTIPS = false;\n        });\n      }\n    }, [isOpen]);\n\n    return isOpen ? (\n      <Portal data-reach-dialog-wrapper=\"\">\n        <DialogInner ref={forwardedRef} {...props} />\n      </Portal>\n    ) : null;\n  }\n);\n\nif (__DEV__) {\n  DialogOverlay.displayName = \"DialogOverlay\";\n  DialogOverlay.propTypes = {\n    ...overlayPropTypes,\n    isOpen: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DialogInner\n */\nconst DialogInner = forwardRef<HTMLDivElement, DialogProps>(\n  function DialogInner(\n    {\n      allowPinchZoom,\n      initialFocusRef,\n      onClick,\n      onDismiss = noop,\n      onMouseDown,\n      onKeyDown,\n      unstable_lockFocusAcrossFrames = true,\n      ...props\n    },\n    forwardedRef\n  ) {\n    const mouseDownTarget = useRef<EventTarget | null>(null);\n    const overlayNode = useRef<HTMLDivElement | null>(null);\n    const ref = useForkedRef(overlayNode, forwardedRef);\n\n    const activateFocusLock = useCallback(() => {\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n    }, [initialFocusRef]);\n\n    function handleClick(event: React.MouseEvent) {\n      if (mouseDownTarget.current === event.target) {\n        event.stopPropagation();\n        onDismiss(event);\n      }\n    }\n\n    function handleKeyDown(event: React.KeyboardEvent) {\n      if (event.key === \"Escape\") {\n        event.stopPropagation();\n        onDismiss(event);\n      }\n    }\n\n    function handleMouseDown(event: React.MouseEvent) {\n      mouseDownTarget.current = event.target;\n    }\n\n    useEffect(\n      () =>\n        overlayNode.current ? createAriaHider(overlayNode.current) : void null,\n      []\n    );\n\n    return (\n      <FocusLock\n        autoFocus\n        returnFocus\n        onActivation={activateFocusLock}\n        crossFrame={unstable_lockFocusAcrossFrames}\n      >\n        <RemoveScroll allowPinchZoom={allowPinchZoom}>\n          <div\n            {...props}\n            ref={ref}\n            data-reach-dialog-overlay=\"\"\n            /*\n             * We can ignore the `no-static-element-interactions` warning here\n             * because our overlay is only designed to capture any outside\n             * clicks, not to serve as a clickable element itself.\n             */\n            onClick={wrapEvent(onClick, handleClick)}\n            onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n            onMouseDown={wrapEvent(onMouseDown, handleMouseDown)}\n          />\n        </RemoveScroll>\n      </FocusLock>\n    );\n  }\n);\n\nif (__DEV__) {\n  DialogOverlay.displayName = \"DialogOverlay\";\n  DialogOverlay.propTypes = {\n    ...overlayPropTypes,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * DialogContent\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog content.\n *\n * Note: Must be a child of `DialogOverlay`.\n *\n * Note: You only need to use this when you are also styling `DialogOverlay`,\n * otherwise you can use the high-level `Dialog` component and pass the props\n * to it. Any props passed to `Dialog` component (besides `isOpen` and\n * `onDismiss`) will be spread onto `DialogContent`.\n *\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent\n */\nexport const DialogContent = forwardRef<HTMLDivElement, DialogContentProps>(\n  function DialogContent({ onClick, onKeyDown, ...props }, forwardedRef) {\n    return (\n      <div\n        aria-modal=\"true\"\n        role=\"dialog\"\n        tabIndex={-1}\n        {...props}\n        ref={forwardedRef}\n        data-reach-dialog-content=\"\"\n        onClick={wrapEvent(onClick, (event) => {\n          event.stopPropagation();\n        })}\n      />\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent-props\n */\nexport type DialogContentProps = {\n  /**\n   * Accepts any renderable content.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialogcontent-children\n   */\n  children?: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  DialogContent.displayName = \"DialogContent\";\n  DialogContent.propTypes = {\n    \"aria-label\": ariaLabelType,\n    \"aria-labelledby\": ariaLabelType,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Dialog\n *\n * High-level component to render a modal dialog window over the top of the page\n * (or another dialog).\n *\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialog\n */\nexport const Dialog = forwardRef<HTMLDivElement, DialogProps>(function Dialog(\n  { isOpen, onDismiss = noop, initialFocusRef, allowPinchZoom, ...props },\n  forwardedRef\n) {\n  return (\n    <DialogOverlay\n      initialFocusRef={initialFocusRef}\n      allowPinchZoom={allowPinchZoom}\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n    >\n      <DialogContent ref={forwardedRef} {...props} />\n    </DialogOverlay>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-props\n */\nexport type DialogProps = {\n  allowPinchZoom?: boolean;\n  /**\n   * Controls whether the dialog is open or not.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-isopen\n   */\n  isOpen?: boolean;\n  /**\n   * This function is called whenever the user hits \"Escape\" or clicks outside\n   * the dialog. _It's important to close the dialog `onDismiss`_.\n   *\n   * The only time you shouldn't close the dialog on dismiss is when the dialog\n   * requires a choice and none of them are \"cancel\". For example, perhaps two\n   * records need to be merged and the user needs to pick the surviving record.\n   * Neither choice is less destructive than the other, so in these cases you\n   * may want to alert the user they need to a make a choice on dismiss instead\n   * of closing the dialog.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-ondismiss\n   */\n  onDismiss?: (event?: React.SyntheticEvent) => void;\n  /**\n   * Accepts any renderable content.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialog-children\n   */\n  children?: React.ReactNode;\n  /**\n   * By default the first focusable element will receive focus when the dialog\n   * opens but you can provide a ref to focus instead.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/dialog#dialogoverlay-initialfocusref\n   */\n  initialFocusRef?: React.RefObject<any>;\n  /**\n   * By default, React Focus Lock prevents focus from being moved outside of the\n   * locked element even if the thing trying to take focus is in another frame.\n   * Normally this is what you want, as an iframe is typically going to be a\n   * part of your page content. But in some situations, like when using Code\n   * Sandbox, you can't use any of the controls or the editor in the sandbox\n   * while dialog is open because of the focus lock.\n   *\n   * This prop may have some negative side effects and unintended consequences,\n   * and it opens questions about how we might distinguish frames that *should*\n   * steal focus from those that shouldn't. Perhaps it's best for app devs to\n   * decide, and if they use this prop we should advise them to imperatively\n   * assign a -1 tabIndex to other iframes that are a part of the page content\n   * when the dialog is open.\n   *\n   * https://github.com/reach/reach-ui/issues/536\n   */\n  unstable_lockFocusAcrossFrames?: boolean;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  Dialog.displayName = \"Dialog\";\n  Dialog.propTypes = {\n    isOpen: PropTypes.bool,\n    onDismiss: PropTypes.func,\n    \"aria-label\": ariaLabelType,\n    \"aria-labelledby\": ariaLabelType,\n  };\n}\n\nexport default Dialog;\n\n////////////////////////////////////////////////////////////////////////////////\nfunction createAriaHider(dialogNode: HTMLElement) {\n  let originalValues: any[] = [];\n  let rootNodes: HTMLElement[] = [];\n  let ownerDocument = getOwnerDocument(dialogNode) || document;\n\n  if (!dialogNode) {\n    if (__DEV__) {\n      console.warn(\n        \"A ref has not yet been attached to a dialog node when attempting to call `createAriaHider`.\"\n      );\n    }\n    return noop;\n  }\n\n  Array.prototype.forEach.call(\n    ownerDocument.querySelectorAll(\"body > *\"),\n    (node) => {\n      const portalNode = dialogNode.parentNode?.parentNode?.parentNode;\n      if (node === portalNode) {\n        return;\n      }\n      let attr = node.getAttribute(\"aria-hidden\");\n      let alreadyHidden = attr !== null && attr !== \"false\";\n      if (alreadyHidden) {\n        return;\n      }\n      originalValues.push(attr);\n      rootNodes.push(node);\n      node.setAttribute(\"aria-hidden\", \"true\");\n    }\n  );\n\n  return () => {\n    rootNodes.forEach((node, index) => {\n      let originalValue = originalValues[index];\n      if (originalValue === null) {\n        node.removeAttribute(\"aria-hidden\");\n      } else {\n        node.setAttribute(\"aria-hidden\", originalValue);\n      }\n    });\n  };\n}\n\nfunction ariaLabelType(\n  props: { [key: string]: any },\n  propName: string,\n  compName: string,\n  location: string,\n  propFullName: string\n) {\n  const details =\n    \"\\nSee https://www.w3.org/TR/wai-aria/#aria-label for details.\";\n  if (!props[\"aria-label\"] && !props[\"aria-labelledby\"]) {\n    return new Error(\n      `A <${compName}> must have either an \\`aria-label\\` or \\`aria-labelledby\\` prop.\n      ${details}`\n    );\n  }\n  if (props[\"aria-label\"] && props[\"aria-labelledby\"]) {\n    return new Error(\n      \"You provided both `aria-label` and `aria-labelledby` props to a <\" +\n        compName +\n        \">. If the a label for this component is visible on the screen, that label's component should be given a unique ID prop, and that ID should be passed as the `aria-labelledby` prop into <\" +\n        compName +\n        \">. If the label cannot be determined programmatically from the content of the element, an alternative label should be provided as the `aria-label` prop, which will be used as an `aria-label` on the HTML tag.\" +\n        details\n    );\n  } else if (props[propName] != null && !isString(props[propName])) {\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`string\\`, received \\`${\n        Array.isArray(propFullName) ? \"array\" : typeof propFullName\n      }\\`.`\n    );\n  }\n  return null;\n}\n"],"names":["DialogOverlay","forwardRef","forwardedRef","isOpen","props","useEffect","checkStyles","window","__REACH_DISABLE_TOOLTIPS","requestAnimationFrame","React","Portal","DialogInner","ref","allowPinchZoom","initialFocusRef","onClick","onDismiss","noop","onMouseDown","onKeyDown","unstable_lockFocusAcrossFrames","mouseDownTarget","useRef","overlayNode","useForkedRef","activateFocusLock","useCallback","current","focus","originalValues","rootNodes","ownerDocument","getOwnerDocument","dialogNode","document","Array","prototype","forEach","call","querySelectorAll","node","parentNode","_dialogNode$parentNod","_dialogNode$parentNod2","attr","getAttribute","push","setAttribute","index","originalValue","removeAttribute","FocusLock","autoFocus","returnFocus","onActivation","crossFrame","RemoveScroll","wrapEvent","event","target","stopPropagation","key","DialogContent","role","tabIndex","Dialog"],"mappings":"+bA0BA,IAkBaA,EAAgBC,cAC3B,WAAoDC,WAA3BC,OAAAA,gBAAkBC,yBACzCC,aAAU,kBAAMC,cAAY,YAAW,IAKvCD,aAAU,WACJF,EAEFI,OAAOC,0BAA2B,EAElCD,OAAOE,uBAAsB,WAG3BF,OAAOC,0BAA2B,OAGrC,CAACL,IAEGA,EACLO,gBAACC,+BAAiC,IAChCD,gBAACE,iBAAYC,IAAKX,GAAkBE,KAEpC,QAiBFQ,EAAcX,cAClB,WAWEC,OATEY,IAAAA,eACAC,IAAAA,gBACAC,IAAAA,YACAC,UAAAA,aAAYC,SACZC,IAAAA,YACAC,IAAAA,cACAC,+BAAAA,gBACGjB,6HAICkB,EAAkBC,SAA2B,MAC7CC,EAAcD,SAA8B,MAC5CV,EAAMY,eAAaD,EAAatB,GAEhCwB,EAAoBC,eAAY,WAChCZ,GAAmBA,EAAgBa,SACrCb,EAAgBa,QAAQC,UAEzB,CAACd,WAoBJV,aACE,kBACEmB,EAAYI,SA+LdE,EAAwB,GACxBC,EAA2B,GAC3BC,EAAgBC,mBAHGC,EA9LqBV,EAAYI,UAiMJO,SAE/CD,GASLE,MAAMC,UAAUC,QAAQC,KACtBP,EAAcQ,iBAAiB,aAC/B,SAACC,cAEKA,eADeP,EAAWQ,mCAAXC,EAAuBD,+BAAvBE,EAAmCF,iBAIlDG,EAAOJ,EAAKK,aAAa,eACA,OAATD,GAA0B,UAATA,IAIrCf,EAAeiB,KAAKF,GACpBd,EAAUgB,KAAKN,GACfA,EAAKO,aAAa,cAAe,aAI9B,WACLjB,EAAUO,SAAQ,SAACG,EAAMQ,OACnBC,EAAgBpB,EAAemB,GACb,OAAlBC,EACFT,EAAKU,gBAAgB,eAErBV,EAAKO,aAAa,cAAeE,QA3B9BhC,aAzM0D,EA8LrE,IAAyBgB,EACnBJ,EACAC,EACAC,IAhMA,IAIAtB,gBAAC0C,GACCC,aACAC,eACAC,aAAc7B,EACd8B,WAAYnC,GAEZX,gBAAC+C,gBAAa3C,eAAgBA,GAC5BJ,uCACMN,GACJS,IAAKA,8BACqB,GAM1BG,QAAS0C,YAAU1C,YAzCN2C,GACfrC,EAAgBM,UAAY+B,EAAMC,SACpCD,EAAME,kBACN5C,EAAU0C,OAuCNvC,UAAWsC,YAAUtC,YAnCNuC,GACH,WAAdA,EAAMG,MACRH,EAAME,kBACN5C,EAAU0C,OAiCNxC,YAAauC,YAAUvC,YA7BNwC,GACvBrC,EAAgBM,QAAU+B,EAAMC,kBA4DzBG,EAAgB9D,cAC3B,WAAyDC,OAAhCc,IAAAA,QAAuBZ,sCAE5CM,kDACa,OACXsD,KAAK,SACLC,UAAW,GACP7D,GACJS,IAAKX,8BACqB,GAC1Bc,QAAS0C,YAAU1C,GAAS,SAAC2C,GAC3BA,EAAME,2BAqCHK,EAASjE,cAAwC,WAE5DC,OADEC,IAAAA,WAAQc,UAAAA,aAAYC,SAAMH,IAAAA,gBAAiBD,IAAAA,eAAmBV,wEAI9DM,gBAACV,GACCe,gBAAiBA,EACjBD,eAAgBA,EAChBX,OAAQA,EACRc,UAAWA,GAEXP,gBAACqD,iBAAclD,IAAKX,GAAkBE"}