{"version":3,"file":"portal.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/portal!\n *\n * Creates and appends a DOM node to the end of `document.body` and renders a\n * React tree into it. Useful for rendering a natural React element hierarchy\n * with a different DOM hierarchy to prevent parent styles from clipping or\n * hiding content (for popovers, dropdowns, and modals).\n *\n * @see Docs   https://reacttraining.com/reach-ui/portal\n * @see Source https://github.com/reach/reach-ui/tree/main/packages/portal\n * @see React  https://reactjs.org/docs/portals.html\n */\n\nimport React, { useRef, useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@reach/utils\";\nimport { createPortal } from \"react-dom\";\n\n/**\n * Portal\n *\n * @see Docs https://reacttraining.com/reach-ui/portal#portal\n */\nconst Portal: React.FC<PortalProps> = ({ children, type = \"reach-portal\" }) => {\n  let mountNode = useRef<HTMLDivElement | null>(null);\n  let portalNode = useRef<HTMLElement | null>(null);\n  let [, forceUpdate] = useState();\n\n  useIsomorphicLayoutEffect(() => {\n    // This ref may be null when a hot-loader replaces components on the page\n    if (!mountNode.current) return;\n    // It's possible that the content of the portal has, itself, been portaled.\n    // In that case, it's important to append to the correct document element.\n    const ownerDocument = mountNode.current!.ownerDocument;\n    portalNode.current = ownerDocument?.createElement(type)!;\n    ownerDocument!.body.appendChild(portalNode.current);\n    forceUpdate({});\n    return () => {\n      if (portalNode.current && portalNode.current.ownerDocument) {\n        portalNode.current.ownerDocument.body.removeChild(portalNode.current);\n      }\n    };\n  }, [type]);\n\n  return portalNode.current ? (\n    createPortal(children, portalNode.current)\n  ) : (\n    <span ref={mountNode} />\n  );\n};\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/portal#portal-props\n */\nexport type PortalProps = {\n  /**\n   * Regular React children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/portal#portal-children\n   */\n  children: React.ReactNode;\n  /**\n   * The DOM element type to render.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/portal#portal-type\n   */\n  type?: string;\n};\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}\n\nexport default Portal;\n"],"names":["Portal","children","type","mountNode","useRef","portalNode","useState","forceUpdate","useIsomorphicLayoutEffect","current","ownerDocument","createElement","body","appendChild","removeChild","createPortal","React","ref","displayName"],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;AAiBA;;;;;;IAKMA,MAAM,GAA0B,SAAhCA,MAAgC;MAAGC,gBAAAA;uBAAUC;MAAAA,8BAAO;AACxD,MAAIC,SAAS,GAAGC,YAAM,CAAwB,IAAxB,CAAtB;AACA,MAAIC,UAAU,GAAGD,YAAM,CAAqB,IAArB,CAAvB;;kBACsBE,cAAQ;MAAvBC;;AAEPC,EAAAA,+BAAyB,CAAC;AACxB;AACA,QAAI,CAACL,SAAS,CAACM,OAAf,EAAwB;AAExB;;AACA,QAAMC,aAAa,GAAGP,SAAS,CAACM,OAAV,CAAmBC,aAAzC;AACAL,IAAAA,UAAU,CAACI,OAAX,GAAqBC,aAArB,aAAqBA,aAArB,uBAAqBA,aAAa,CAAEC,aAAf,CAA6BT,IAA7B,CAArB;AACAQ,IAAAA,aAAc,CAACE,IAAf,CAAoBC,WAApB,CAAgCR,UAAU,CAACI,OAA3C;AACAF,IAAAA,WAAW,CAAC,EAAD,CAAX;AACA,WAAO;AACL,UAAIF,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACI,OAAX,CAAmBC,aAA7C,EAA4D;AAC1DL,QAAAA,UAAU,CAACI,OAAX,CAAmBC,aAAnB,CAAiCE,IAAjC,CAAsCE,WAAtC,CAAkDT,UAAU,CAACI,OAA7D;AACD;AACF,KAJD;AAKD,GAdwB,EActB,CAACP,IAAD,CAdsB,CAAzB;AAgBA,SAAOG,UAAU,CAACI,OAAX,GACLM,qBAAY,CAACd,QAAD,EAAWI,UAAU,CAACI,OAAtB,CADP,GAGLO,4BAAA,OAAA;AAAMC,IAAAA,GAAG,EAAEd;GAAX,CAHF;AAKD;;AAoBY;AACXH,EAAAA,MAAM,CAACkB,WAAP,GAAqB,QAArB;AACD;;;;"}