{"version":3,"file":"alert.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/alert!\n *\n * An alert is an element that displays a brief, important message in a way that\n * attracts the user's attention without interrupting the user's task.\n * Dynamically rendered alerts are automatically announced by most screen\n * readers, and in some operating systems, they may trigger an alert sound.\n *\n * The approach here is to allow developers to render a visual <Alert> and then\n * we mirror that to a couple of aria-live regions behind the scenes. This way,\n * most of the time, developers don't have to think about visual vs. aria\n * alerts.\n *\n * Limitations: Developers can't read from context inside of an Alert because\n * we aren't using ReactDOM.createPortal(), we're actually creating a couple of\n * brand new React roots. We could use createPortal but then apps would need to\n * render the entire app tree in an <AlertProvider>, or maybe there's a way\n * with default context to do it, but we haven't explored that yet. So, we'll\n * see how this goes. If it becomes a problem we can introduce a portal later.\n *\n * @see Docs     https://reacttraining.com/reach-ui/alert\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/alert\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alert\n */\nimport React, { forwardRef, useEffect, useRef, useMemo } from \"react\";\nimport { render } from \"react-dom\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport { getOwnerDocument, usePrevious, useForkedRef } from \"@reach/utils\";\nimport PropTypes from \"prop-types\";\n\n/*\n * Singleton state is fine because you don't server render\n * an alert (SRs don't read them on first load anyway)\n */\nlet keys: RegionKeys = {\n  polite: -1,\n  assertive: -1,\n};\n\nlet elements: ElementTypes = {\n  polite: {},\n  assertive: {},\n};\n\nlet liveRegions: RegionElements = {\n  polite: null,\n  assertive: null,\n};\n\nlet renderTimer: number | null;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Alert\n *\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\n * messages when network events or other things happen. Users with assistive\n * technologies may not know about the message unless you develop for it.\n *\n * @see Docs https://reacttraining.com/reach-ui/alert\n */\nexport const Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  { children, type = \"polite\", ...props },\n  forwardedRef\n) {\n  const ownRef = useRef(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const child = useMemo(\n    () => (\n      <div {...props} ref={ref} data-reach-alert>\n        {children}\n      </div>\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [children, props]\n  );\n  useMirrorEffects(type, child, ownRef);\n\n  return child;\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/alert#alert-props\n */\nexport type AlertProps = {\n  /**\n   * Controls whether the assistive technology should read immediately\n   * (\"assertive\") or wait until the user is idle (\"polite\").\n   *\n   * @see Docs https://reacttraining.com/reach-ui/alert#alert-type\n   */\n  type?: \"assertive\" | \"polite\";\n  children: React.ReactNode;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nif (__DEV__) {\n  Alert.displayName = \"Alert\";\n  Alert.propTypes = {\n    children: PropTypes.node,\n    type: PropTypes.oneOf([\"assertive\", \"polite\"]),\n  };\n}\n\nexport default Alert;\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createMirror(type: \"polite\" | \"assertive\", doc: Document): Mirror {\n  let key = ++keys[type];\n\n  let mount = (element: JSX.Element) => {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      let node = doc.createElement(\"div\");\n      node.setAttribute(`data-reach-live-${type}`, \"true\");\n      liveRegions[type] = node;\n      doc.body.appendChild(liveRegions[type]!);\n      mount(element);\n    }\n  };\n\n  let update = (element: JSX.Element) => {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  let unmount = () => {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return { mount, update, unmount };\n}\n\nfunction renderAlerts() {\n  if (renderTimer != null) {\n    window.clearTimeout(renderTimer);\n  }\n  renderTimer = window.setTimeout(() => {\n    Object.keys(elements).forEach(elementType => {\n      let type: RegionTypes = elementType as RegionTypes;\n      let container = liveRegions[type]!;\n      if (container) {\n        render(\n          <VisuallyHidden>\n            <div\n              // The status role is a type of live region and a container whose\n              // content is advisory information for the user that is not\n              // important enough to justify an alert, and is often presented as\n              // a status bar. When the role is added to an element, the browser\n              // will send out an accessible status event to assistive\n              // technology products which can then notify the user about it.\n              // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n              role={type === \"assertive\" ? \"alert\" : \"status\"}\n              aria-live={type}\n            >\n              {Object.keys(elements[type]).map(key =>\n                React.cloneElement(elements[type][key], {\n                  key,\n                  ref: null,\n                })\n              )}\n            </div>\n          </VisuallyHidden>,\n          liveRegions[type]\n        );\n      }\n    });\n  }, 500);\n}\n\nfunction useMirrorEffects(\n  type: RegionTypes,\n  element: JSX.Element,\n  ref: React.RefObject<any>\n) {\n  const prevType = usePrevious<RegionTypes>(type);\n  const mirror = useRef<Mirror | null>(null);\n  const mounted = useRef(false);\n  useEffect(() => {\n    const ownerDocument = getOwnerDocument(ref.current) || document;\n    if (!mounted.current) {\n      mounted.current = true;\n      mirror.current = createMirror(type, ownerDocument);\n      mirror.current.mount(element);\n    } else if (prevType !== type) {\n      mirror.current && mirror.current.unmount();\n      mirror.current = createMirror(type, ownerDocument);\n      mirror.current.mount(element);\n    } else {\n      mirror.current && mirror.current.update(element);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [element, type, prevType]);\n\n  useEffect(() => {\n    return () => {\n      mirror.current && mirror.current.unmount();\n    };\n  }, []);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype Mirror = {\n  mount: (element: JSX.Element) => void;\n  update: (element: JSX.Element) => void;\n  unmount: () => void;\n};\n\ntype RegionTypes = \"polite\" | \"assertive\";\n\ntype ElementTypes = {\n  [key in RegionTypes]: {\n    [key: string]: JSX.Element;\n  };\n};\n\ntype RegionElements<T extends HTMLElement = HTMLDivElement> = {\n  [key in RegionTypes]: T | null;\n};\n\ntype RegionKeys = {\n  [key in RegionTypes]: number;\n};\n"],"names":["renderTimer","keys","polite","assertive","elements","liveRegions","Alert","forwardRef","forwardedRef","children","type","props","ownRef","useRef","ref","useForkedRef","child","useMemo","React","element","prevType","usePrevious","mirror","mounted","useEffect","ownerDocument","getOwnerDocument","current","document","unmount","createMirror","mount","update","useMirrorEffects","doc","key","renderAlerts","node","createElement","setAttribute","body","appendChild","window","clearTimeout","setTimeout","Object","forEach","elementType","render","VisuallyHidden","role","map","cloneElement"],"mappings":"sRAkCA,IAeIA,EAfAC,EAAmB,CACrBC,QAAS,EACTC,WAAY,GAGVC,EAAyB,CAC3BF,OAAQ,GACRC,UAAW,IAGTE,EAA8B,CAChCH,OAAQ,KACRC,UAAW,MAgBAG,EAAQC,cAAuC,WAE1DC,OADEC,IAAAA,aAAUC,KAAAA,aAAO,WAAaC,4JAG1BC,EAASC,SAAO,MAChBC,EAAMC,eAAaP,EAAcI,GACjCI,EAAQC,WACZ,kBACEC,uCAASP,GAAOG,IAAKA,0BAClBL,MAIJA,EAAUE,WAmGf,SACED,EACAS,EACAL,OAEMM,EAAWC,cAAyBX,GACpCY,EAAST,SAAsB,MAC/BU,EAAUV,UAAO,GACvBW,aAAU,eACFC,EAAgBC,mBAAiBZ,EAAIa,UAAYC,SAClDL,EAAQI,QAIFP,IAAaV,GACtBY,EAAOK,SAAWL,EAAOK,QAAQE,UACjCP,EAAOK,QAAUG,EAAapB,EAAMe,GACpCH,EAAOK,QAAQI,MAAMZ,IAErBG,EAAOK,SAAWL,EAAOK,QAAQK,OAAOb,IARxCI,EAAQI,SAAU,EAClBL,EAAOK,QAAUG,EAAapB,EAAMe,GACpCH,EAAOK,QAAQI,MAAMZ,MAStB,CAACA,EAAST,EAAMU,IAEnBI,aAAU,kBACD,WACLF,EAAOK,SAAWL,EAAOK,QAAQE,aAElC,IA7HHI,CAAiBvB,EAAMM,EAAOJ,GAEvBI,KA6BT,SAASc,EAAapB,EAA8BwB,OAC9CC,IAAQlC,EAAKS,SAyBV,CAAEqB,MAvBG,SAARA,EAASZ,MACPd,EAAYK,GACdN,EAASM,GAAMyB,GAAOhB,EACtBiB,QACK,KACDC,EAAOH,EAAII,cAAc,OAC7BD,EAAKE,gCAAgC7B,EAAQ,QAC7CL,EAAYK,GAAQ2B,EACpBH,EAAIM,KAAKC,YAAYpC,EAAYK,IACjCqB,EAAMZ,KAcMa,OAVH,SAACb,GACZf,EAASM,GAAMyB,GAAOhB,EACtBiB,KAQsBP,QALV,kBACLzB,EAASM,GAAMyB,GACtBC,MAMJ,SAASA,IACY,MAAfpC,GACF0C,OAAOC,aAAa3C,GAEtBA,EAAc0C,OAAOE,YAAW,WAC9BC,OAAO5C,KAAKG,GAAU0C,SAAQ,SAAAC,OACxBrC,EAAoBqC,EACR1C,EAAYK,IAE1BsC,SACE9B,gBAAC+B,OACC/B,uBAQEgC,KAAe,cAATxC,EAAuB,QAAU,qBAC5BA,GAEVmC,OAAO5C,KAAKG,EAASM,IAAOyC,KAAI,SAAAhB,UAC/BjB,EAAMkC,aAAahD,EAASM,GAAMyB,GAAM,CACtCA,IAAAA,EACArB,IAAK,YAKbT,EAAYK,SAIjB"}