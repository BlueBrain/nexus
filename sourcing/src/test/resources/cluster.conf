akka {
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  log-dead-letters = off
  stdout-loglevel = "OFF"
  log-dead-letters-during-shutdown = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serializers {
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.sourcing.projections.Fixture$Event" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.Fixture$EventTransform" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.Fixture$Cmd" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.Fixture$State" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.Fixture$Rejection" = kryo
    }
  }

  cluster {
    min-nr-of-members = 1
    sharding.state-store-mode = ddata
    jmx.multi-mbeans-in-same-jvm = on
  }

  remote {
    artery {
      transport = tcp # See Selecting a transport below
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
      canonical.port = ${?test.remote-port}
    }
  }
}

akka-kryo-serialization {
  id-strategy = "automatic"
  implicit-registration-logging = true
  resolve-subclasses = false
}