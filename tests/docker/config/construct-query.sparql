prefix prov: <http://www.w3.org/ns/prov#>
prefix nsg: <https://neuroshapes.org/>
prefix bmo: <https://bbp.epfl.ch/ontologies/core/bmo/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix schema: <http://schema.org/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix nxv: <https://bluebrain.github.io/nexus/vocabulary/>
prefix : <https://bluebrain.github.io/nexus/field/>

CONSTRUCT {
  # Metadata
  ?alias  a                   ?type                  ;
          :name               ?name                  ;
          :description        ?description           ;
          :createdAt          ?createdAt             ;
          :createdBy          ?createdBy             ;
          :updatedAt          ?updatedAt             ;
          :updatedBy          ?updatedBy             ;
          :deprecated         ?deprecated            ;
          :self               ?self                  .

  ?alias  :project          ?projectId             .
                            ?projectId             :identifier  ?projectId    ;
                                                   :label       ?projectLabel .

  # Common properties
  ## Annotations
  ?alias  :mType           ?mType                 .
                           ?mType                 :identifier  ?mType        ;
                                                  :label       ?mTypeLabel   ;
                                                  :idLabel     ?mTypeIdLabel .
  ?alias  :eType           ?eType                 .
                           ?eType                 :identifier  ?eType        ;
                                                  :label       ?eTypeLabel   ;
                                                  :idLabel     ?eTypeIdLabel .
  ?alias  :sType           ?sType                 .
                           ?sType                 :identifier  ?sType        ;
                                                  :label       ?sTypeLabel   ;
                                                  :idLabel     ?sTypeIdLabel .
  ?alias  :curated         ?curated               .

  ## Atlas
  ?alias  :coordinatesInBrainAtlas  ?coordinates     .
                                    ?coordinates     :valueX      ?valueX       ;
                                                     :valueY      ?valueY       ;
                                                     :valueZ      ?valueZ       .

  ## Brain region / layer
  ?alias  :brainRegion     ?brainRegionId         .
                           ?brainRegionId         :identifier  ?brainRegionId      ;
                                                  :label       ?brainRegionLabel   ;
                                                  :idLabel     ?brainRegionIdLabel .
  ?alias  :layer           ?layerId               .
                           ?layerId               :identifier  ?layerId      ;
                                                  :label       ?layerLabel   ;
                                                  :idLabel     ?layerIdLabel .

  ## Contributors
  ?alias  :contributors    ?contributorId         .
                           ?contributorId         rdf:type     ?contributorType   ;
                                                  :label       ?contributorName   ;
                                                  :idLabel     ?contributorIdName ;
                                                  :affiliation ?affiliation       .

  ## Derivation
  ?alias  :derivation      ?derivation            .
                           ?derivation            :identifier      ?entity     ;
                                                  rdf:type         ?entityType ;
                                                  :label           ?entityName .

  ## Distribution
  ?alias  :distribution    ?distribution          .
                           ?distribution          :label           ?distributionName           ;
                                                  :encodingFormat  ?distributionEncodingFormat ;
                                                  :contentUrl      ?distributionContentUrl     ;
                                                  :contentSize     ?distributionContentSize    .

  ## Generation
  ?alias  :generation      ?generation            .
                           ?generation            :protocol         ?protocol                ;
                                                  :startedAt        ?generationStartedAtTime ;
                                                  :endedAt          ?generationEndedAtTime   ;
                                                  :followedWorkflow ?followedWorkflow        .
                                                                    ?protocol               :label      ?protocolName       ;
                                                                                            :propertyID ?protocolPropertyId ;
                                                                                            :value      ?protocolValue      .

  ## Images
  ?alias  :image           ?image                 .
                           ?image                 :identifier      ?image                  ;
                                                  :about           ?imageAbout             ;
                                                  :repetition      ?imageRepetition        ;
                                                  :stimulusType    ?imageStimulusTypeLabel .

  ## License
  ?alias  :license         ?licenseId             .
                           ?licenseId             :identifier  ?licenseId     ;
                                                  :label       ?licenseLabel  .

  ## Series
  ?alias  :series          ?series                .
                           ?series                :value       ?seriesValue      ;
                                                  :unit        ?seriesUnit       ;
                                                  :statistic   ?seriesStatistic  .

  ## Source
  ?alias  :source          ?source                .
                           ?source                :title        ?sourceTitle       ;
                                                  rdf:type      ?sourceType        ;
                                                  :identifier   ?sourceIdentifier  .
                                                                ?sourceIdentifier  :propertyID  ?sourceIdentifierPropertyId ;
                                                                                   :value       ?sourceIdentifierValue      .

  ## Species
  ?alias  :subjectSpecies  ?species              .
                           ?species              :identifier  ?species      ;
                                                 :label       ?speciesLabel .

  ## Start / end / status
  ?alias  :startedAt         ?startedAt           ;
          :endedAt           ?endedAt             ;
          :status            ?status              .

  ## Subject
  ?alias  :subjectAge        ?age                 .
                             ?age                 :value       ?subjectAgeValue    ;
                                                  :minValue    ?subjectAgeMinValue ;
                                                  :maxValue    ?subjectAgeMaxValue ;
                                                  :unit        ?subjectAgeUnit     ;
                                                  :period      ?subjectAgePeriod   ;
                                                  :label       ?subjectAgeLabel    .
  ?alias  :subjectWeight     ?weight              .
                             ?weight              :value       ?subjectWeightValue     ;
                                                  :unit        ?subjectWeightUnit      ;
                                                  :minValue    ?subjectWeightMinValue  ;
                                                  :maxValue    ?subjectWeightMaxValue  ;
                                                  :label       ?subjectWeightLabel     .

  # Properties specific to types

  ## Bouton density
  ?alias  :boutonDensity   ?boutonDensityBN          .
                           ?boutonDensityBN          :value       ?boutonDensityValue  ;
                                                     :unit        ?boutonDensityUnit   ;
                                                     :label       ?boutonDensityLabel  .

  ## Circuit
  ?alias  :circuitType          ?circuitType              ;
          :circuitBase          ?circuitBaseUrlStr        ;
          :circuitConfigPath    ?circuitConfigPathUrlStr  ;
          :circuitBrainRegion   ?circuitBrainRegionId     .
                                ?circuitBrainRegionId     :identifier  ?circuitBrainRegionId    ;
                                                          :label       ?circuitBrainRegionLabel .

  ## Layer thickness
  ?alias  :layerThickness       ?thicknessBN           .
                                ?thicknessBN           :value       ?thicknessValue   ;
                                                       :unit        ?thicknessUnit    ;
                                                       :nValue      ?thicknessNValue  ;
                                                       :label       ?thicknessLabel   .

  ## Neuron density
  ?alias  :neuronDensity        ?neuronDensityBN       .
                                ?neuronDensityBN       :value       ?neuronDensityValue   ;
                                                       :unit        ?neuronDensityUnit    ;
                                                       :nValue      ?neuronDensityNValue  ;
                                                       :label       ?neuronDensityLabel   .

  ## Simulation campaigns
  ?alias  :config               ?campaignConfigId        .
                                ?campaignConfigId        :identifier     ?campaignConfigId   ;
                                                         :name           ?campaignConfigName .

  ## Simulation campaigns / simulations
  ?alias  :parameter           ?parameter                .
                               ?parameter                :attrs          ?attrs              .
                                                         ?attrs          ?attrs_prop         ?attrs_value .
  ?alias  :parameter           ?parameter                .
                               ?parameter                :coords         ?coords             .
                                                         ?coords         ?coords_prop        ?coords_value .

  ## Simulations
  ?alias  :campaign            ?campaignId              .
                               ?campaignId              :identifier      ?campaignId   ;
                                                        :name           ?campaignName .

  ## Synapses
  ?alias  :postSynapticPathway  ?postSynaptic   .
                                ?postSynaptic :about      ?postSynapticAbout      ;
                                              :label      ?postSynapticLabel      ;
                                              :notation   ?postSynapticNotation   .

  ?alias  :preSynapticPathway  ?preSynaptic .
                               ?preSynaptic   :about      ?preSynapticAbout       ;
                                              :label      ?preSynapticLabel       ;
                                              :notation   ?preSynapticNotation    .

  ## Morphology features
  ?alias :compartment          ?featureCompartment .
  ?alias :neuronMorphology     ?neuronMorphologyId .
                               ?neuronMorphologyId :name ?neuronMorphologyName .

  ?alias :featureSeries        ?featureSeries    .
                               ?featureSeries    :value       ?featureValue         ;
                                                 :unit        ?featureUnit          ;
                                                 :label       ?featureLabel         ;
                                                 :statistic   ?featureStat          ;
                                                 :compartment ?featureCompartment   .

  ## EModels
  ?alias :emodel               ?emodel  .
                               ?emodel  :score            ?emodelScore ;
                                        :neuronMorphology ?emodelMorphologyId .
                                                          ?emodelMorphologyId :name ?emodelMorphologyName .
} WHERE {
  VALUES ?id { {resource_id} } .
  BIND( IRI(concat(str(?id), '/', 'alias')) AS ?alias ) .

  ?id  a  ?type  .

  # exclude schema:Dataset and prov:Entity types to avoid noise
  FILTER (?type != schema:Dataset)
  FILTER (?type != prov:Entity)

  # for Traces, only consider ones that have the nwb encoding format
  FILTER NOT EXISTS {
    ?id   a                                            nsg:Trace       ;
          schema:distribution / schema:encodingFormat  ?encodingFormat .
    FILTER (?encodingFormat != "application/nwb")
  }

  ?id  nxv:createdAt   ?createdAt      ;
       nxv:createdBy   ?createdByNode  ;
       nxv:updatedAt   ?updatedAt      ;
       nxv:updatedBy   ?updatedByNode  ;
       nxv:deprecated  ?deprecated     ;
       nxv:self        ?self           ;
       nxv:project     ?projectId      .
  BIND( STRAFTER(STR(?projectId), "/v1/projects/") as ?projectLabel ) .

  # We read the following nodes as text. This is done in order to avoid conflict
  # when another triple uses the same @id. For instance, createdBy and updatedBy
  # can conflict with a contributor, if the contributor is also the one creating
  # or updating the given resource.
  BIND( STR(?createdByNode) AS ?createdBy ) .
  BIND( STR(?updatedByNode) AS ?updatedBy ) .

  OPTIONAL { ?id  schema:description   ?description . } .
  OPTIONAL { ?id  schema:name          ?name        . } .
  OPTIONAL { ?id  rdfs:label           ?name        . } .
  OPTIONAL { ?id skos:prefLabel        ?name        . } .

  # Annotations
  OPTIONAL {
    ?id  nsg:annotation ?mTypeAnnotation .
                        ?mTypeAnnotation a nsg:MTypeAnnotation .
    OPTIONAL {
      ?mTypeAnnotation  nsg:hasBody               ?mType      .
      ?mTypeAnnotation  nsg:hasBody / rdfs:label  ?mTypeLabel .

    } .
    BIND(
      IF(
        BOUND(?mTypeLabel),
        CONCAT(STR(?mType),"|", STR(?mTypeLabel)),
        ?undefined
      ) AS ?mTypeIdLabel) .
  } .

  OPTIONAL {
    ?id  nsg:annotation ?eTypeAnnotation .
                        ?eTypeAnnotation a nsg:ETypeAnnotation .
    OPTIONAL {
      ?eTypeAnnotation  nsg:hasBody               ?eType      .
      ?eTypeAnnotation  nsg:hasBody / rdfs:label  ?eTypeLabel .
    } .
    BIND(
      IF(
        BOUND(?eTypeLabel),
        CONCAT(STR(?eType),"|", STR(?eTypeLabel)),
        ?undefined
      ) AS ?eTypeIdLabel) .
  } .

  OPTIONAL {
    ?id  nsg:annotation ?sTypeAnnotation .
                        ?sTypeAnnotation a nsg:STypeAnnotation .
    OPTIONAL {
      ?sTypeAnnotation  nsg:hasBody               ?sType      .
      ?sTypeAnnotation  nsg:hasBody / rdfs:label  ?sTypeLabel .
    } .
    BIND(
      IF(
        BOUND(?sTypeLabel),
        CONCAT(STR(?sType),"|", STR(?sTypeLabel)),
        ?undefined
      ) AS ?sTypeIdLabel) .
  } .

  OPTIONAL {
    ?id nsg:annotation / nsg:hasBody ?curatedAnnotation .
    BIND(
      IF(
         ?curatedAnnotation = <https://neuroshapes.org/Curated>,
         true,
         IF(?curatedAnnotation = <https://neuroshapes.org/Unassessed>, false, ?undefined)
      ) AS ?curated
    )
  }

  # Atlas
  OPTIONAL {
    ?id nsg:brainLocation / nsg:coordinatesInBrainAtlas  ?coordinates .
    ?coordinates  nsg:valueX  ?valueX;
                  nsg:valueY  ?valueY;
                  nsg:valueZ  ?valueZ.
  } .

  # Brain region / layer
  OPTIONAL {
    ?id  nsg:brainLocation / nsg:brainRegion  ?brainRegionId .
    OPTIONAL {
      ?brainRegionId  rdfs:label  ?brainRegionLabel .
    }
    BIND(
      IF(
        BOUND(?brainRegionLabel),
        CONCAT(STR(?brainRegionId),"|", STR(?brainRegionLabel)),
        ?undefined
      ) AS ?brainRegionIdLabel) .
  } .

  OPTIONAL {
    ?id  nsg:brainLocation / nsg:layer  ?layerId .
    OPTIONAL {
      ?layerId  rdfs:label  ?layerLabel .
    }
    BIND(
      IF(
        BOUND(?layerId),
        CONCAT(STR(?layerId),"|", STR(?layerLabel)),
        ?undefined
      ) AS ?layerIdLabel) .
  }

  # Contributors
  OPTIONAL {
    ?id  nsg:contribution / prov:agent  ?contributorId .
    ?contributorId  a  ?contributorType .

    OPTIONAL { ?contributorId  schema:name  ?contributorName . } .
    OPTIONAL {
      ?contributorId schema:givenName ?givenName   ;
                     schema:familyName ?familyName .
      BIND(
        IF(
          BOUND(?givenName) && BOUND(?familyName),
          CONCAT(STR(?givenName), " ", STR(?familyName)),
          ?contributorName)
        AS ?contributorName
      ) .
    }
    OPTIONAL { ?contributorId  schema:affiliation / schema:name  ?affiliation . } .
    BIND(
      IF(
        BOUND(?contributorId),
        CONCAT(STR(?contributorId),"|", STR(?contributorName)),
        ?undefined
    ) AS ?contributorIdName) .
  } .

  # Derivation
  OPTIONAL {
    ?id          nsg:derivation  ?derivation     .
    ?derivation  prov:entity     ?entity         .
    OPTIONAL { ?entity  a            ?entityType . } .
    OPTIONAL { ?entity  schema:name  ?entityName . } .
  } .

  # Distribution
  OPTIONAL {
    ?id  schema:distribution  ?distribution .
    OPTIONAL { ?distribution  schema:name                        ?distributionName . } .
    OPTIONAL { ?distribution  schema:encodingFormat              ?distributionEncodingFormat . } .
    OPTIONAL { ?distribution  schema:contentUrl                  ?distributionContentUrl . } .
    OPTIONAL { ?distribution  schema:contentSize / schema:value  ?distributionContentSize . } .
  } .

  # Generation
  OPTIONAL {
    ?id nsg:generation / prov:activity ?generation .
    OPTIONAL {
      ?generation  nsg:hadProtocol  ?protocol .
      OPTIONAL { ?protocol    schema:name        ?protocolName . } .
      OPTIONAL {
        ?protocol    schema:identifier  ?protocolId         .
        ?protocolId  schema:propertyID  ?protocolPropertyId .
        ?protocolId  schema:value       ?protocolValue      .
      } .
    } .
    OPTIONAL { ?generation  prov:startedAtTime   ?generationStartedAtTime . } .
    OPTIONAL { ?generation  prov:endedAtTime     ?generationEndedAtTime   . } .
    OPTIONAL { ?generation  nsg:followedWorkflow ?followedWorkflow        . } .
  }

  # Image
  OPTIONAL {
    ?id  schema:image  ?image .
    OPTIONAL { ?image  schema:about     ?imageAbout . } .
    OPTIONAL { ?image  nsg:repetition   ?imageRepetition . } .
    OPTIONAL {
      ?image             nsg:stimulusType ?imageStimulusType .
      ?imageStimulusType rdfs:label       ?imageStimulusTypeLabel .
    } .
  } .

  # License
  OPTIONAL {
    ?id  schema:license  ?licenseId .
    OPTIONAL { ?licenseId  schema:name  ?licenseLabel . } .
  } .

  # Series
  OPTIONAL {
    ?id  nsg:series  ?series .
    OPTIONAL { ?series schema:value    ?seriesValue }     .
    OPTIONAL { ?series schema:unitCode ?seriesUnit }      .
    OPTIONAL { ?series nsg:statistic   ?seriesStatistic } .
  } .

  # Source
  OPTIONAL {
    ?id          nsg:annotation?               ?annotation .
    ?annotation  nsg:hasTarget / nsg:hasSource ?source     .

    ?source a ?sourceType .
    ?source a schema:ScholarlyArticle .

    OPTIONAL { ?source schema:title  ?sourceTitle . } .

    OPTIONAL {
      ?source            schema:identifier  ?sourceIdentifier           .
      ?sourceIdentifier  schema:propertyID  ?sourceIdentifierPropertyId ;
                         schema:value       ?sourceIdentifierValue      .
    } .
  } .

  # Species
  OPTIONAL {
    ?id  nsg:subject / nsg:species ?species .
    OPTIONAL {
      ?species  rdfs:label  ?speciesLabel .
    } .
  } .

  # Subject
  OPTIONAL {
    ?id  nsg:subject / nsg:age  ?age .
    OPTIONAL { ?age schema:value     ?subjectAgeValue . }    .
    OPTIONAL { ?age schema:minValue  ?subjectAgeMinValue . } .
    OPTIONAL { ?age schema:maxValue  ?subjectAgeMaxValue . } .
               ?age schema:unitCode  ?subjectAgeUnit         .
               ?age nsg:period       ?subjectAgePeriod       .
    BIND(
      IF(
        BOUND(?subjectAgeValue),
        CONCAT(STR(?subjectAgeValue), " ", STR(?subjectAgeUnit), " ", STR(?subjectAgePeriod)),
        CONCAT(STR(?subjectAgeMinValue), " to ", STR(?subjectAgeMaxValue), " ", STR(?subjectAgeUnit), " ", STR(?subjectAgePeriod))
      ) as ?subjectAgeLabel ) .
  } .

  OPTIONAL {
    ?id  nsg:subject / schema:weight  ?weight .
    OPTIONAL { ?weight  schema:value     ?subjectWeightValue . }    .
    OPTIONAL { ?weight  schema:minValue  ?subjectWeightMinValue . } .
    OPTIONAL { ?weight  schema:maxValue  ?subjectWeightMaxValue . } .
               ?weight  schema:unitCode  ?subjectWeightUnit         .
    BIND (
      IF(
        BOUND(?subjectWeightValue),
        CONCAT(STR(?subjectWeightValue), " ", STR(?subjectWeightUnit)),
        CONCAT(STR(?subjectWeightMinValue), " to ", STR(?subjectWeightMaxValue), " ", STR(?subjectWeightUnit))
        ) as ?subjectWeightLabel
      ) .
  } .

  # Bouton density
  OPTIONAL {
    ?id  a             nsg:BoutonDensity   ;
          nsg:density  ?boutonDensityMean  .
                       ?boutonDensityMean  nsg:statistic    "mean"              ;
                                           schema:value     ?boutonDensityValue ;
                                           schema:unitCode  ?boutonDensityUnit  .
    BIND(
      CONCAT(
        STR(?boutonDensityValue), " ",
        STR(?boutonDensityUnit)
      ) as ?boutonDensityLabel
    ) .
    BIND( BNODE(CONCAT(STR(?id), '/boutonDensity')) as ?boutonDensityBN ) .
  } .

  # Circuit
  OPTIONAL {
    ?id  a  nsg:DetailedCircuit .

    OPTIONAL {
      GRAPH ?id {
        ?id  ?circuitTP  ?circuitType .
        FILTER ( STRENDS(STR(?circuitTP), "/circuitType") ) .
      } .
    } .

    OPTIONAL {
      GRAPH ?id {
        ?id  ?circuitBP  ?circuitBase  .
                         ?circuitBase  a           schema:DataDownload  ;
                                       schema:url  ?circuitBaseUrl      .
        FILTER ( STRENDS(STR(?circuitBP), "/circuitBase") ) .
        BIND( STR(?circuitBaseUrl) as ?circuitBaseUrlStr ) .
      } .
    } .

    OPTIONAL {
      GRAPH ?id {
        ?id  ?circuitCP  ?circuitConfigPath  .
                         ?circuitConfigPath  a           schema:DataDownload   ;
                                             schema:url  ?circuitConfigPathUrl .
        FILTER ( STRENDS(STR(?circuitCP), "/circuitConfigPath") ) .
        BIND( STR(?circuitConfigPathUrl) as ?circuitConfigPathUrlStr ) .
      } .
    } .
  } .

  # Layer thickness
  OPTIONAL {
    ?id  a           nsg:LayerThickness ;
         nsg:series  ?meanSeries        .
                     ?meanSeries        nsg:statistic    "mean"          ;
                                        schema:value     ?thicknessValue ;
                                        schema:unitCode  ?thicknessUnit  .
    ?id  nsg:series  ?nSeries           .
                     ?nSeries           nsg:statistic  "N"               ;
                                        schema:value   ?thicknessNValue  .
    BIND(
      CONCAT(
        STR(?thicknessValue), " ",
        STR(?thicknessUnit), " (N = ",
        STR(?thicknessNValue), ")"
      ) as ?thicknessLabel
    ) .

    BIND( BNODE(CONCAT(STR(?id), '/layerThickness')) as ?thicknessBN ) .
  } .

  # Neuron density
  OPTIONAL {
    ?id  a           nsg:NeuronDensity ;
         nsg:series  ?meanSeries       .
                     ?meanSeries  nsg:statistic    ?stat               ;
                                  schema:value     ?neuronDensityValue ;
                                  schema:unitCode  ?neuronDensityUnit  .
    ?id  nsg:series  ?nSeries  .
                     ?nSeries  nsg:statistic  "N" ;
                               schema:value   ?neuronDensityNValue .
    FILTER ( ?stat = "mean" || ?stat = "data point" ) .
    BIND(
      CONCAT(
        STR(?neuronDensityValue), " ",
        STR(?neuronDensityUnit), " (N = ",
        STR(?neuronDensityNValue), ")"
      ) as ?neuronDensityLabel
    ) .

    BIND( BNODE((CONCAT(STR(?id), '/neuronDensity'))) as ?neuronDensityBN ) .
  } .

  # Simulation campaign configuration
  OPTIONAL {
    ?id  a  bmo:SimulationCampaignConfiguration .

    OPTIONAL {
      ?id  prov:wasGeneratedBy  ?generationId  .
      ?generationId  a  bmo:SimulationCampaignGeneration .

      OPTIONAL { ?generationId  prov:startedAtTime  ?startedAt . } .
      OPTIONAL { ?generationId  prov:endedAtTime    ?endedAt   . } .
      OPTIONAL { ?generationId  nsg:status          ?status    . } .

      OPTIONAL {
        ?generationId prov:used ?circuitId .
        ?circuitId a nsg:DetailedCircuit .

        OPTIONAL {
          ?circuitId  schema:name  ?circuitName .
        } .
        OPTIONAL {
          ?circuitId  nsg:brainLocation / nsg:brainRegion  ?circuitBrainRegionId .
          OPTIONAL {
            ?circuitBrainRegionId  rdfs:label  ?circuitBrainRegionLabel .
          }
        } .
      } .
    } .
  } .

  # Simulation campaign
  OPTIONAL {
    ?id  a  nsg:SimulationCampaign .

    OPTIONAL {
      ?id  prov:wasGeneratedBy  ?campaignExecutionId  .
      ?campaignExecutionId  a  bmo:SimulationCampaignExecution .

      OPTIONAL { ?campaignExecutionId  nsg:status  ?status  . } .

      OPTIONAL {
        ?campaignExecutionId  prov:used    ?campaignConfigId .
        ?campaignConfigId     schema:name  ?campaignConfigName .
      } .
    } .

    ?id nsg:parameter ?parameter

    OPTIONAL {
      ?parameter bmo:attrs ?attrs .
      ?attrs  ?attrs_prop_orig ?attrs_value .
      BIND (IRI(replace(str(?attrs_prop_orig), str(bmo:), str(:)))  AS ?attrs_prop)
    } .

    OPTIONAL {
      ?parameter bmo:coords ?coords .
      ?coords  ?coords_prop_orig ?coords_value .
      BIND (IRI(replace(str(?coords_prop_orig), str(bmo:), str(:)))  AS ?coords_prop)
    } .
  } .

  # Simulation
  OPTIONAL {
    ?id  a  nsg:Simulation .

    OPTIONAL {
      ?id  prov:wasGeneratedBy  ?campaignExecutionId  .
      ?campaignExecutionId  a  bmo:SimulationCampaignExecution .

      OPTIONAL {
        ?campaignExecutionId  prov:generated  ?campaignId .
        ?campaignId     schema:name           ?campaignName
      } .
    } .

    OPTIONAL { ?id  prov:startedAtTime  ?startedAt . } .
    OPTIONAL { ?id  prov:endedAtTime    ?endedAt   . } .

    OPTIONAL { ?id  nsg:status  ?status    . } .

    ?id nsg:parameter ?parameter

    OPTIONAL {
      ?parameter bmo:coords ?coords .
      ?coords  ?coords_prop_orig ?coords_value .
      BIND (IRI(replace(str(?coords_prop_orig), str(bmo:), str(:)))  AS ?coords_prop)
    } .
  } .

  # Synapses
  OPTIONAL {
    ?id bmo:synapticPathway / nsg:postSynaptic  ?postSynaptic   .
                                                ?postSynaptic   schema:about    ?postSynapticAbout      ;
                                                                rdfs:label      ?postSynapticLabel      .
                                                OPTIONAL {      ?postSynaptic   skos:notation           ?postSynapticNotation   . } .
    ?id bmo:synapticPathway / nsg:preSynaptic     ?preSynaptic .
                                                  ?preSynaptic    schema:about     ?preSynapticAbout       ;
                                                                  rdfs:label       ?preSynapticLabel       .
                                                  OPTIONAL { ?preSynaptic     skos:notation   ?preSynapticNotation    . } .

    } .

  # Morphology features
  OPTIONAL {
    ?id a bmo:NeuronMorphologyFeatureAnnotation .

    OPTIONAL {
      ?id                   nsg:hasTarget / nsg:hasSource      ?neuronMorphologyId   ;
                            bmo:compartment                    ?featureCompartment   ;
                            nsg:hasBody                        ?featureBody          .
      ?neuronMorphologyId   schema:name                        ?neuronMorphologyName .

      ?featureBody          nsg:isMeasurementOf / rdfs:label   ?featureLabel         ;
                            schema:value / nsg:series          ?featureSeries        .
      ?featureSeries        nsg:statistic                      ?featureStat          ;
                            schema:value                       ?featureValue         ;
                            schema:unitCode                    ?featureUnit

    }.
  } .

   # EModels
   OPTIONAL {
      ?id a nsg:EModel .

      BIND(BNODE(CONCAT(STR(?id), '/emodel')) as ?emodel ) .

      OPTIONAL { ?id  nsg:score ?emodelScore   . } .

      OPTIONAL {
        ?followedWorkflow schema:hasPart ?emodelConfig .

        ?emodelConfig a bmo:EModelConfiguration   ;
                      bmo:uses ?emodelMorphologyId    .
                      # info about the morphology
                      ?emodelMorphologyId  a nsg:NeuronMorphology            ;
                                           schema:name ?emodelMorphologyName .
      } .
   }
}