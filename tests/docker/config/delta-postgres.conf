app {
  http {
    base-uri = "http://delta:8080/v1"
    interface = 0.0.0.0
  }

  database {
    tables-autocreate = true

    cache {
      expire-after = 1s
    }

    read = ${app.defaults.database.access} {
      pool-size = 10
    }
    write = ${app.defaults.database.access} {
      pool-size = 10
    }
    streaming = ${app.defaults.database.access} {
      pool-size = 10
    }
  }

  defaults {
    database {
      access {
        host = "postgres"
      }
    }

    query {
      refresh-strategy = 1s
    }
  }

  fusion {
    base = "https://bbp.epfl.ch/nexus/web/"
    enable-redirects = true
  }

  service-account {
    subject: "service-account-delta"
    realm: "internal"
  }

  projects {
    deletion {
      enabled = true
      propagation-delay = 3 seconds
    }
  }
}

plugins {

  blazegraph {
    base = "http://blazegraph:9999/blazegraph"

    batch {
      max-elements = 5
      max-interval = 50 millis
    }
  }

  composite-views {
    min-interval-rebuild = 5 seconds
    sink-config = batch
    remote-source-credentials {
      type: "client-credentials"
      user: "delta"
      password: "shhh"
      realm: "internal"
    }
  }

  elasticsearch {
    base = "http://elasticsearch:9200"
    credentials {
      username = "elastic"
      password = "password"
    }

    batch {
      max-elements = 5
      max-interval = 50 millis
    }
  }

  graph-analytics {
    enabled = true
  }

  search {
    enabled = true
    fields = "/config/fields.json"
    indexing {
      context = "/config/search-context.json"
      mapping = "/config/mapping.json"
      settings = "/config/settings.json"
      query = "/config/construct-query.sparql"
      resource-types = "/config/resource-types.json"
    }
  }

  storage {
    storages {
      disk {
        default-volume= "/default-volume"
      }

      remote-disk {
        enabled = true
        credentials {
          type: "client-credentials"
          user: "delta"
          password: "shhh"
          realm: "internal"
        }
        default-endpoint = "http://storage-service:8080/v1"
      }

      amazon {
        enabled = true
;         default-access-key = "MY_ACCESS_KEY"
;         default-secret-key = "CHUTCHUT"
      }
    }

    files {
      media-type-detector {
        extensions {
          custom = "application/custom"
        }
      }
    }
  }

  project-deletion {
    enabled = true
    included-projects = [
      "autodeletion.+"
    ]
    excluded-projects = []
    idle-interval = 5s
    idle-check-period = 1s
    delete-deprecated-projects = true
  }
}