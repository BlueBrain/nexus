postgres {
  host = 127.0.0.1
  port = 5432
  username = "postgres"
  password = "postgres"
  database = "postgres"
  offset-file = /tmp/.nexus/postgres.offset
  offset-save-interval = 1s
  projects {
    tutorialnexus/datamodels {
      sparql-view = ${env.default-sparql-view}
      types = [
        {
          type = "https://bluebrain.github.io/nexus/vocabulary/Schema"
          queries = [
            {
              table = schemas
              ddl =
                """
                  CREATE TABLE IF NOT EXISTS schemas (
                    id  VARCHAR NOT NULL UNIQUE,
                    rev INT NOT NULL
                  );
                """
              query =
                """
                  PREFIX nxv:<https://bluebrain.github.io/nexus/vocabulary/>
                  PREFIX owl:<http://www.w3.org/2002/07/owl#>
                  SELECT ?id ?rev
                  WHERE {
                    <{resource_id}> a nxv:Schema .
                    <{resource_id}> nxv:rev ?rev .
                    BIND("{resource_id}" as ?id) .
                    FILTER(?rev >= {event_rev})
                  }
                  LIMIT 1
                """
            },
            {
              table = schema_imports
              ddl =
                """
                  CREATE TABLE IF NOT EXISTS schema_imports (
                    id     VARCHAR NOT NULL,
                    import VARCHAR NOT NULL
                  );
                """
              query =
                """
                  PREFIX nxv:<https://bluebrain.github.io/nexus/vocabulary/>
                  PREFIX owl:<http://www.w3.org/2002/07/owl#>
                  SELECT ?id ?import
                  WHERE {
                    <{resource_id}> a nxv:Schema .
                    <{resource_id}> owl:imports ?import .
                    <{resource_id}> nxv:rev ?rev .
                    BIND("{resource_id}" as ?id) .
                    FILTER(?rev >= {event_rev})
                  }
                """
            }
          ]
        }
      ]
    }
  }
}
