# All application specific configuration should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "storage"
  }

  # Service instance specific settings
  instance {
    # The default interface to bind to
    interface = 127.0.0.1
  }

  # Http binding settings
  http {
    # The interface to bind to
    interface = ${app.instance.interface}
    # The port to bind to
    port = 8080
    # The default uri prefix
    prefix = "v1"
    # The service public uri
    public-uri = "http://"${app.http.interface}":"${app.http.port}
  }

  # Service runtime settings
  runtime {
    # Arbitrary Future completion timeout
    default-timeout = 30 seconds
  }

  # Storage configuration
  storage {
    # the absolute path where the files are stored
    root-volume = "/tmp"
    # additional path prefixes from which it is allowed to link
    extra-prefixes = []
    # the relative path of the protected directory once the storage bucket is selected
    protected-directory = "nexus"
    # permissions fixer
    fixer-enabled = false
    fixer-command = []
  }

  media-type-detector {
    extensions {
      #extension = "application/custom"
    }
  }

  digest {
    # the digest algorithm
    algorithm = "SHA-256"
    # the maximum number of digests stored in memory
    max-in-memory = 10000
    # the maximum number of concurrent computations of digest
    concurrent-computations = 4
    # the maximum number of computations in queue to be computed
    max-in-queue = 10000
    # the amout of time after a digest which is still in the queue to be computed can be retrigger
    retrigger-after = 30 minutes
  }

  # Allowed subject to perform calls
  subject {
    # flag to decide whether or not the allowed subject is Anonymous or a User
    anonymous = false
    # the user realm. It must be present when anonymous = false and it must be removed when anonymous = true
    //realm = "realm"
    # the user name. It must be present when anonymous = false and it must be removed when anonymous = true
    //name = "username"
  }

  # Delta client configuration
  delta {
    # The public iri to the Delta service
    public-iri = "http://localhost:8080"
    # The internal iri to the Delta service
    internal-iri = "http://localhost:8080"
    # The version prefix
    prefix = "v1"

    # The delay for retrying after completion on SSE
    sse-retry-delay = 1 second
  }
  # monitoring config
  monitoring {
    # tracing settings
    trace {
      # Interval at which sampled finished spans will be flushed to SpanReporters.
      tick-interval = 10 seconds
      # Decides whether to include the stack trace of a Throwable as the "error.stacktrace" Span tag when a Span is marked
      # as failed.
      include-error-stacktrace = yes
      # Configures a sampler that decides which Spans should be sent to Span reporters. The possible values are:
      #   - always: report all traces.
      #   - never:  don't report any trace.
      #   - random: randomly decide using the probability defined in the random-sampler.probability setting.
      #   - adaptive: keeps dynamic samplers for each operation while trying to achieve a set throughput goal.
      #   - A FQCN of a kamon.trace.Sampler implementation to be used instead. The implementation must have a default
      #     constructor that will be used by Kamon when creating the instance.
      #
      sampler = "adaptive"
    }
    # jaeger settings
    jaeger {
      enabled = false
      host = "localhost"
      port = 14268
      # Protocol used to send data to Jaeger. The available options are:
      #   - http: Sends spans using jaeger.thrift over HTTP. Aimed to used with a Jaeger Collector.
      #   - https: Sends spans using jaeger.thrift over HTTPS. Aimed to used with a Jaeger Collector.
      #   - udp: Sends spans using jaeger.thrift compact over UDP. Aimed to used with a Jaeger Agent.
      protocol = http
      # for http and https, this is the full url to be used
      http-url = ${app.monitoring.jaeger.protocol}"://"${app.monitoring.jaeger.host}":"${app.monitoring.jaeger.port}"/api/traces"
      # Enable or disable including tags from kamon.environment as labels
      include-environment-tags = no
    }
  }
}