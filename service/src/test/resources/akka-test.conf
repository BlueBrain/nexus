include "service-test.conf"

akka {
  actor {

    serializers {
      circeEvent = "ch.epfl.bluebrain.nexus.marshallers.EventSerializer"
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.acls.AclEvent"     = circeEvent
      "ch.epfl.bluebrain.nexus.acls.AclState"     = kryo
      "ch.epfl.bluebrain.nexus.acls.AclCommand"   = kryo
      "ch.epfl.bluebrain.nexus.acls.AclRejection" = kryo

      "ch.epfl.bluebrain.nexus.permissions.PermissionsEvent"     = circeEvent
      "ch.epfl.bluebrain.nexus.permissions.PermissionsState"     = kryo
      "ch.epfl.bluebrain.nexus.permissions.PermissionsCommand"   = kryo
      "ch.epfl.bluebrain.nexus.permissions.PermissionsRejection" = kryo

      "ch.epfl.bluebrain.nexus.realms.RealmEvent"     = circeEvent
      "ch.epfl.bluebrain.nexus.realms.RealmState"     = kryo
      "ch.epfl.bluebrain.nexus.realms.RealmCommand"   = kryo
      "ch.epfl.bluebrain.nexus.realms.RealmRejection" = kryo
      "ch.epfl.bluebrain.nexus.realms.RealmLabel"     = kryo
      "ch.epfl.bluebrain.nexus.realms.GroupsCache$Write" = kryo

      "ch.epfl.bluebrain.nexus.ResourceF" = kryo

      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                                       = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Start"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$FetchLatestState$" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$LatestState"       = kryo


      "scala.runtime.BoxedUnit" = kryo
      "scala.util.Left"  = kryo
      "scala.util.Right" = kryo
      "com.nimbusds.jose.jwk.JWKSet" = kryo
    }
  }
}

akka-kryo-serialization {
  idstrategy = "automatic"

  # Log implicitly registered classes. Useful, if you want to know all classes which are serialized.
  implicit-registration-logging = true

  # Set compression
  post-serialization-transformations = "lz4"
  post-serialization-transformations = ${?KRYO_COMPRESSION}

  kryo-initializer = "ch.epfl.bluebrain.nexus.marshallers.KryoSerializerInit"
}