akka {

  http {
    server.parsing.max-content-length = 10g
    server.parsing.max-content-length = ${?AKKA_HTTP_MAX_CONTENT_LENGTH}
    host-connection-pool {
      max-connections = 16
      max-connections = ${?AKKA_HTTP_MAX_CONNECTIONS}
      max-open-requests = 64
      max-open-requests = ${?AKKA_HTTP_MAX_OPEN_REQUESTS}
    }
    sse {
      # The maximum size for parsing server-sent events (96KiB).
      max-event-size = 98304
      max-event-size = ${?AKKA_HTTP_SSE_MAX_EVENT_SIZE}

      # The maximum size for parsing lines of a server-sent event (48KiB).
      max-line-size = 49152
      max-line-size = ${?AKKA_HTTP_SSE_MAX_LINE_SIZE}
    }
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  loglevel = INFO
  loglevel = ${?AKKA_LOG_LEVEL}

  extensions += "akka.cluster.ddata.DistributedData"

  actor {

    provider = "akka.cluster.ClusterActorRefProvider"

    enable-additional-serialization-bindings = on

    allow-java-serialization = off

    serializers {
      iamCirceEvent = "ch.epfl.bluebrain.nexus.iam.io.EventSerializer"
      adminCirceEvent = "ch.epfl.bluebrain.nexus.admin.persistence.EventSerializer"
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "ch.epfl.bluebrain.nexus.iam.acls.AclEvent" = iamCirceEvent
      "ch.epfl.bluebrain.nexus.iam.acls.AclState" = kryo
      "ch.epfl.bluebrain.nexus.iam.acls.AclCommand" = kryo
      "ch.epfl.bluebrain.nexus.iam.acls.AclRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsEvent" = iamCirceEvent
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsState" = kryo
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsCommand" = kryo
      "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.realms.RealmEvent" = iamCirceEvent
      "ch.epfl.bluebrain.nexus.iam.realms.RealmState" = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.RealmCommand" = kryo
      "ch.epfl.bluebrain.nexus.iam.realms.RealmRejection" = kryo

      "ch.epfl.bluebrain.nexus.iam.types.Label" = kryo
      "ch.epfl.bluebrain.nexus.iam.types.ResourceF" = kryo

      "ch.epfl.bluebrain.nexus.admin.organizations.OrganizationEvent" = adminCirceEvent
      "ch.epfl.bluebrain.nexus.admin.projects.ProjectEvent"           = adminCirceEvent

      "ch.epfl.bluebrain.nexus.sourcing.akka.Msg"                                       = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Start"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$Stop$"             = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$FetchLatestState$" = kryo
      "ch.epfl.bluebrain.nexus.sourcing.projections.StreamSupervisor$LatestState"       = kryo

      "ch.epfl.bluebrain.nexus.iam.realms.GroupsCache$Write" = kryo
      "java.util.UUID"                                = kryo
      "ch.epfl.bluebrain.nexus.admin.types.ResourceF" = kryo

      "scala.runtime.BoxedUnit" = kryo
      "scala.util.Left" = kryo
      "scala.util.Right" = kryo
      "com.nimbusds.jose.jwk.JWKSet" = kryo
      "com.swissborg.lithium.internals.LithiumSeenChanged" = kryo
    }
  }

  cluster {
    min-nr-of-members = 1
    min-nr-of-members = ${?CLUSTER_MIN_NR_OF_MEMBERS}
    sharding.state-store-mode = ddata
    downing-provider-class = "com.swissborg.lithium.DowningProviderImpl"
    downing-provider-class = ${?DOWNING_PROVIDER_CLASS}
  }

  remote {
    startup-timeout = 30 s
    artery {
      transport = tcp # See Selecting a transport below
      canonical.hostname = ${app.instance.interface}
      canonical.hostname = ${?REMOTING_INTERFACE}
      canonical.hostname = ${?override.remoting.interface}
      canonical.port = 2552
      canonical.port = ${?REMOTING_PORT}
      canonical.port = ${?override.remoting.port}
      advanced {
        maximum-frame-size = ${?REMOTING_MAXIMUM_FRAME_SIZE}
      }
    }
  }

  persistence {
    journal.plugin = ${app.persistence.journal-plugin}
    snapshot-store.plugin = ${app.persistence.snapshot-store-plugin}
    cassandra {
      journal {
        keyspace-autocreate = true
        keyspace-autocreate = ${?CASSANDRA_KEYSPACE_AUTOCREATE}
        tables-autocreate = true
        tables-autocreate = ${?CASSANDRA_TABLES_AUTOCREATE}
        keyspace = ${app.description.name}
        keyspace = ${?CASSANDRA_KEYSPACE}

        event-adapters {
          tagging = "ch.epfl.bluebrain.nexus.iam.io.TaggingAdapter"
        }
        # Event type to event adapter bindings
        event-adapter-bindings {
          "ch.epfl.bluebrain.nexus.iam.permissions.PermissionsEvent" = tagging
          "ch.epfl.bluebrain.nexus.iam.acls.AclEvent"                = tagging
          "ch.epfl.bluebrain.nexus.iam.realms.RealmEvent"            = tagging
        }

        pubsub-notification = on
        pubsub-notification = ${?CASSANDRA_PUB_SUB_NOTIFICATION}

      }
      snapshot {
        keyspace-autocreate = true
        keyspace-autocreate = ${?CASSANDRA_KEYSPACE_AUTOCREATE}
        tables-autocreate = true
        tables-autocreate = ${?CASSANDRA_TABLES_AUTOCREATE}
        keyspace = ${akka.persistence.cassandra.journal.keyspace}"_snapshot"
      }
      query {
        refresh-interval = 5s
        refresh-interval = ${?CASSANDRA_REFRESH_INTERVAL}
        first-time-bucket = "20181213T00:00"
        first-time-bucket = ${?CASSANDRA_FIRST_TIME_BUCKET}
      }
      events-by-tag {
        # This delay helps to order events. Setting this to anything lower than 2s is highly discouraged.
        eventual-consistency-delay = 4s
        eventual-consistency-delay = ${?CASSANDRA_EVENTUAL_CONSISTENCY_DELAY}

        # Tagged events are written to a separate Cassandra table in unlogged batches
        # Max size of these batches. The best value for this will depend on the size of
        # the serialized events. Cassandra logs a warning for batches above a certain
        # size and this should be reduced if that warning is seen.
        max-message-batch-size = 60
        max-message-batch-size = ${?CASSANDRA_TAGS_MAX_BATCH_SIZE}

        # Max time to buffer events for before writing.
        # Larger valeues will increase cassandra write efficiency but increase the delay before
        # seeing events in EventsByTag queries.
        # Setting this to 0 means that tag writes will get written immediately but will still be asynchronous
        # with respect to the PersistentActor's persist call. However, this will be very bad for throughput.
        flush-interval = 250ms
        flush-interval = ${?CASSANDRA_TAGS_FLUSH_INTERVAL}

        # Update the tag_scanning table with this interval. Shouldn't be done too often to
        # avoid unecessary load. The tag_scanning table keeps track of a starting point for tag
        # scanning during recovery of persistent actor.
        scanning-flush-interval = 30s
        scanning-flush-interval = ${?CASSANDRA_TAGS_SCANNING_FLUSH_INTERVAL}
      }
    }
  }
}

akka-kryo-serialization {
  idstrategy = "automatic"

  # Log implicitly registered classes. Useful, if you want to know all classes which are serialized.
  implicit-registration-logging = true

  # Set compression
  post-serialization-transformations = "lz4"
  post-serialization-transformations = ${?KRYO_COMPRESSION}

  kryo-initializer = "ch.epfl.bluebrain.nexus.iam.io.KryoSerializerInit"
}

com.swissborg.lithium {
  # The name of the strategy to use for split-brain resolution.
  # Available: static-quorum, keep-majority, keep-referee, keep-oldest.
  active-strategy = "keep-oldest"
  active-strategy = ${?SPLIT_BRAIN_ACTIVE_STRATEGY}
  keep-oldest {
    # Down the oldest member when alone.
    down-if-alone = yes
    down-if-alone = ${?SPLIT_BRAIN_KEEP_OLDEST_DOWN_IF_ALONE}
    role = ""
  }

  # Duration during which the cluster must be stable before taking action on the network-partition.
  # The duration must chose large enough to allow for membership events to be gossiped and persistent actor to be migrated.
  stable-after = 30s
  stable-after = ${?SPLIT_BRAIN_STABLE_AFTER}
}