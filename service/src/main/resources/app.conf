# All application specific configuration should reside here
app {
  # The service description namespace
  description {
    # The name of the service
    name = "nexus"
  }

  # Service instance specific settings
  instance {
    # The default interface to bind to
    interface = 127.0.0.1
    interface = ${?BIND_INTERFACE}
  }

  # Default pagination information
  pagination {
    # Default page size
    default-size = 20
    default-size = ${?PAGINATION_DEFAULT_SIZE}
    # Maximum page size allowed
    size-limit = 100
    size-limit = ${?PAGINATION_MAX_SIZE}
    # Maximum `from` parameter value
    from-limit = 10000
    from-limit = ${?PAGINATION_MAX_FROM}
  }

  # Http binding settings
  http {
    # The interface to bind to
    interface = ${app.instance.interface}
    # The port to bind to
    port = 8080
    port = ${?BIND_PORT}
    # The default uri prefix
    prefix = "v1"
    prefix = ${?HTTP_PREFIX}
    # The service public uri
    public-uri = "http://"${app.http.interface}":"${app.http.port}
    public-uri = ${?PUBLIC_URI}
  }

  # Service runtime settings
  runtime {
    # Arbitrary Future completion timeout
    default-timeout = 30 seconds
  }

  service-account {
    token = ${?SERVICE_ACCOUNT_TOKEN}
  }

  # Cluster specific settings
  cluster {
    # Duration after which actors are shutdown if they have no interaction
    passivation-timeout = 2 seconds
    passivation-timeout = ${?PASSIVATION_TIMEOUT}
    # Timeout for requests to the distributed data
    replication-timeout = 5 seconds
    replication-timeout = ${?REPLICATION_TIMEOUT}
    # Total number of shards in the cluster
    shards = 30
    shards = ${?SHARDS}
    # The seeds to use for joining a cluster.  Should not contain the self address.
    # Example: 127.0.0.1:2552,127.0.0.2:2552,127.0.0.3:2552
    seeds = ${?SEED_NODES}
  }

  # Persistence specific settings
  persistence {
    journal-plugin = "akka.persistence.cassandra.journal"
    snapshot-store-plugin = "akka.persistence.cassandra.snapshot"
    query-journal-plugin = "akka.persistence.cassandra.query"
  }

  iam {
    indexing {
      # maximum number of events taken on each batch
      batch = 10
      batch = ${?INDEXING_BATCH}
      # maximum amount of time to wait for the number of events to be taken on each batch
      batch-timeout = 500ms
      batch-timeout = ${?INDEXING_BATCH_TIMEOUT}
      # indexing retry configuration
      retry {
        # possible values are: "never", "once", "constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?INDEXING_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        # (applicable only for strategy "exponential")
        initial-delay = 200 milliseconds
        initial-delay = ${?INDEXING_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 minutes
        max-delay = ${?INDEXING_RETRY_MAX_DELAY}
        # the maximum number of times an index function is retried
        max-retries = 10
        max-retries = ${?INDEXING_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 milliseconds
        constant = ${?INDEXING_RETRY_CONSTANT}
      }
      # indexing progress persistence settings
      progress {
        # number of events after which the indexing progress is being persisted
        persist-after-processed = 5000
        persist-after-processed = ${?INDEXING_PROGRESS_EVENTS}
        # amount of time after which the indexing progress is being persisted
        max-time-window = 2 minutes
        max-time-window = ${?INDEXING_PROGRESS_TIME}
      }
    }
    # acls configuration
    acls {
      # acls aggregate configuration
      aggregate {
        # the maximum duration to wait for an aggregate to reply
        ask-timeout = ${app.sourcing.ask-timeout}
        ask-timeout = ${?ACLS_AGGREGATE_ASK_TIMEOUT}
        # the journal plugin used to create event streams for arbitrary replays
        query-journal-plugin = ${app.sourcing.query-journal-plugin}
        query-journal-plugin = ${?ACLS_AGGREGATE_QUERY_JOURNAL_PLUGIN}
        # the maximum duration before a command evaluation times out
        command-evaluation-timeout = ${app.sourcing.command-evaluation-timeout}
        command-evaluation-timeout = ${?ACLS_AGGREGATE_COMMAND_EVALUATION_TIMEOUT}
        # the execution context where commands are being evaluated; possible values are "akka" and "global"
        command-evaluation-execution-context = "akka"
        command-evaluation-execution-context = ${?ACLS_AGGREGATE_COMMAND_EVALUATION_EXECUTION_CONTEXT}
        # the total number of shards to allocate
        shards = ${app.sourcing.shards}
        shards = ${?ACLS_AGGREGATE_SHARDS}
        passivation {
          # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
          lapsed-since-last-interaction = ${app.sourcing.passivation.lapsed-since-last-interaction}
          lapsed-since-last-interaction = ${?ACLS_AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT}
          # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
          lapsed-since-recovery-completed = ${app.sourcing.passivation.lapsed-since-recovery-completed}
          lapsed-since-recovery-completed = ${?ACLS_AGGREGATE_RECOVERY_PASSIVATION_TIMEOUT}
        }
        retry {
          # possible values are: "never", "once" "constant" and "exponential"
          strategy = ${app.sourcing.retry.strategy}
          strategy = ${?ACLS_AGGREGATE_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = ${app.sourcing.retry.initial-delay}
          initial-delay = ${?ACLS_AGGREGATE_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = ${app.sourcing.retry.max-delay}
          max-delay = ${?ACLS_AGGREGATE_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable only for strategy "exponential")
          max-retries = ${app.sourcing.retry.max-retries}
          max-retries = ${?ACLS_AGGREGATE_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = ${app.sourcing.retry.constant}
          constant = ${?ACLS_AGGREGATE_RETRY_CONSTANT}
        }
      }

      # acls indexing configuration
      indexing {
        # maximum number of events taken on each batch
        batch = ${app.indexing.batch}
        batch = ${?ACLS_INDEXING_BATCH}
        # maximum amount of time to wait for the number of events to be taken on each batch
        batch-timeout = ${app.indexing.batch-timeout}
        batch-timeout = ${?ACLS_INDEXING_BATCH_TIMEOUT}
        # indexing retry configuration
        retry {
          # the retry strategy to use; possible values are: "never", "once" and "exponential"
          strategy = "exponential"
          strategy = ${?ACLS_INDEXING_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          # (applicable only for strategy "exponential")
          initial-delay = ${app.indexing.retry.initial-delay}
          initial-delay = ${?ACLS_INDEXING_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = ${app.indexing.retry.max-delay}
          max-delay = ${?ACLS_INDEXING_RETRY_MAX_DELAY}
          # the maximum number of times an index function is retried
          max-retries = ${app.indexing.retry.max-retries}
          max-retries = ${?ACL_INDEXING_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = ${app.sourcing.retry.constant}
          constant = ${?ACLS_INDEXING_RETRY_CONSTANT}
        }
        # indexing progress persistence settings
        progress {
          # number of events after which the indexing progress is being persisted
          persist-after-processed = 5000
          persist-after-processed = ${?ACL_INDEXING_PROGRESS_EVENTS}
          # amount of time after which the indexing progress is being persisted
          max-time-window = 2 minutes
          max-time-window = ${?ACLS_INDEXING_PROGRESS_TIME}
        }
      }
    }

    # permissions configuration
    permissions {
      # minimum permission set (cannot be removed and are part of the initial state of permissions)
      minimum = [
        # default permissions for acls, with the exception that everyone should be able to see his own permissions
        "acls/read",
        "acls/write",
        # default permissions for permissions
        "permissions/read",
        "permissions/write",
        # default permissions for realms
        "realms/read",
        "realms/write",
        # generic permissions for full read access to the global event log
        "events/read",

        # admin specific permissions
        "projects/read",
        "projects/write",
        "projects/create",
        "organizations/read",
        "organizations/write",
        "organizations/create",

        # kg specific permissions
        "resources/read",
        "resources/write",
        "resolvers/write",
        "views/query",
        "views/write",
        "schemas/write",
        "files/write",
        "storages/write",
        "archives/write"
      ]
      # permissions aggregate configuration
      aggregate {
        # the maximum duration to wait for an aggregate to reply
        ask-timeout = ${app.sourcing.ask-timeout}
        ask-timeout = ${?PERMISSIONS_AGGREGATE_ASK_TIMEOUT}
        # the journal plugin used to create event streams for arbitrary replays
        query-journal-plugin = ${app.sourcing.query-journal-plugin}
        query-journal-plugin = ${?PERMISSIONS_AGGREGATE_QUERY_JOURNAL_PLUGIN}
        # the maximum duration before a command evaluation times out
        command-evaluation-timeout = ${app.sourcing.command-evaluation-timeout}
        command-evaluation-timeout = ${?PERMISSIONS_AGGREGATE_COMMAND_EVALUATION_TIMEOUT}
        # the execution context where commands are being evaluated; possible values are "akka" and "global"
        command-evaluation-execution-context = "akka"
        command-evaluation-execution-context = ${?PERMISSIONS_AGGREGATE_COMMAND_EVALUATION_EXECUTION_CONTEXT}
        # the total number of shards to allocate; anything other than '1' doesn't make sense here
        shards = 1
        shards = ${?PERMISSIONS_AGGREGATE_SHARDS}
        passivation {
          # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
          lapsed-since-last-interaction = ${app.sourcing.passivation.lapsed-since-last-interaction}
          lapsed-since-last-interaction = ${?PERMISSIONS_AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT}
          # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
          lapsed-since-recovery-completed = ${app.sourcing.passivation.lapsed-since-recovery-completed}
          lapsed-since-recovery-completed = ${?PERMISSIONS_AGGREGATE_RECOVERY_PASSIVATION_TIMEOUT}
        }
        retry {
          # possible values are: "never", "once" "constant" and "exponential"
          strategy = ${app.sourcing.retry.strategy}
          strategy = ${?PERMISSIONS_AGGREGATE_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = ${app.sourcing.retry.initial-delay}
          initial-delay = ${?PERMISSIONS_AGGREGATE_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = ${app.sourcing.retry.max-delay}
          max-delay = ${?PERMISSIONS_AGGREGATE_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable only for strategy "exponential")
          max-retries = ${app.sourcing.retry.max-retries}
          max-retries = ${?PERMISSIONS_AGGREGATE_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = ${app.sourcing.retry.constant}
          constant = ${?PERMISSIONS_AGGREGATE_RETRY_CONSTANT}
        }
      }
    }

    # realms configuration
    realms {
      # realms aggregate configuration
      aggregate {
        # the maximum duration to wait for an aggregate to reply
        ask-timeout = ${app.sourcing.ask-timeout}
        ask-timeout = ${?REALMS_AGGREGATE_ASK_TIMEOUT}
        # the journal plugin used to create event streams for arbitrary replays
        query-journal-plugin = ${app.sourcing.query-journal-plugin}
        query-journal-plugin = ${?REALMS_AGGREGATE_QUERY_JOURNAL_PLUGIN}
        # the maximum duration before a command evaluation times out
        command-evaluation-timeout = ${app.sourcing.command-evaluation-timeout}
        command-evaluation-timeout = ${?REALMS_AGGREGATE_COMMAND_EVALUATION_TIMEOUT}
        # the execution context where commands are being evaluated; possible values are "akka" and "global"
        command-evaluation-execution-context = "akka"
        command-evaluation-execution-context = ${?REALMS_AGGREGATE_COMMAND_EVALUATION_EXECUTION_CONTEXT}
        # the total number of shards to allocate
        shards = ${app.sourcing.shards}
        shards = ${?REALMS_AGGREGATE_SHARDS}
        passivation {
          # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
          lapsed-since-last-interaction = ${app.sourcing.passivation.lapsed-since-last-interaction}
          lapsed-since-last-interaction = ${?REALMS_AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT}
          # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
          lapsed-since-recovery-completed = ${app.sourcing.passivation.lapsed-since-recovery-completed}
          lapsed-since-recovery-completed = ${?REALMS_AGGREGATE_RECOVERY_PASSIVATION_TIMEOUT}
        }
        retry {
          # possible values are: "never", "once" "constant" and "exponential"
          strategy = ${app.sourcing.retry.strategy}
          strategy = ${?REALMS_AGGREGATE_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = ${app.sourcing.retry.initial-delay}
          initial-delay = ${?REALMS_AGGREGATE_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = ${app.sourcing.retry.max-delay}
          max-delay = ${?REALMS_AGGREGATE_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable only for strategy "exponential")
          max-retries = ${app.sourcing.retry.max-retries}
          max-retries = ${?REALMS_AGGREGATE_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = ${app.sourcing.retry.constant}
          constant = ${?REALMS_AGGREGATE_RETRY_CONSTANT}
        }
      }

      # realms key value store configuration
      key-value-store {
        # the maximum duration to wait for the replicator to reply
        ask-timeout = ${app.key-value-store.ask-timeout}
        ask-timeout = ${?REALMS_KEY_VALUE_STORE_ASK_TIMEOUT}
        # the maximum duration to wait for a consistent read or write across the cluster
        consistency-timeout = ${app.key-value-store.consistency-timeout}
        consistency-timeout = ${?REALMS_KEY_VALUE_STORE_CONSISTENCY_TIMEOUT}
        # retry strategy
        retry {
          # possible values are: "never", "once" "constant" and "exponential"
          strategy = ${app.key-value-store.retry.strategy}
          strategy = ${?REALMS_KEY_VALUE_STORE_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = ${app.key-value-store.retry.initial-delay}
          initial-delay = ${?REALMS_KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = ${app.sourcing.retry.max-delay}
          max-delay = ${?REALMS_KEY_VALUE_STORE_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable only for strategy "exponential")
          max-retries = ${app.key-value-store.retry.max-retries}
          max-retries = ${?REALMS_KEY_VALUE_STORE_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = ${app.sourcing.retry.constant}
          constant = ${?REALMS_KEY_VALUE_STORE_RETRY_CONSTANT}
        }
      }

      # realms indexing configuration
      indexing {
        # maximum number of events taken on each batch
        batch = ${app.indexing.batch}
        batch = ${?REALMS_INDEXING_BATCH}
        # maximum amount of time to wait for the number of events to be taken on each batch
        batch-timeout = ${app.indexing.batch-timeout}
        batch-timeout = ${?REALMS_INDEXING_BATCH_TIMEOUT}
        # indexing retry configuration
        retry {
          # the retry strategy to use; possible values are: "never", "once" and "exponential"
          strategy = "exponential"
          strategy = ${?REALMS_INDEXING_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          # (applicable only for strategy "exponential")
          initial-delay = ${app.indexing.retry.initial-delay}
          initial-delay = ${?REALMS_INDEXING_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = ${app.indexing.retry.max-delay}
          max-delay = ${?REALMS_INDEXING_RETRY_MAX_DELAY}
          # the maximum number of times an index function is retried
          max-retries = ${app.indexing.retry.max-retries}
          max-retries = ${?REALMS_INDEXING_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = ${app.sourcing.retry.constant}
          constant = ${?REALMS_INDEXING_RETRY_CONSTANT}
        }
        # indexing progress persistence settings
        progress {
          # number of events after which the indexing progress is being persisted
          persist-after-processed = 5000
          persist-after-processed = ${?REALMS_INDEXING_PROGRESS_EVENTS}
          # amount of time after which the indexing progress is being persisted
          max-time-window = 2 minutes
          max-time-window = ${?REALMS_INDEXING_PROGRESS_TIME}
        }
      }
    }

    # groups configuration
    groups {
      # the maximum accepted delay for waiting for a response from the group cache
      ask-timeout = 15 seconds
      ask-timeout = ${?GROUPS_ASK_TIMEOUT}
      # the maximum duration before a command evaluation times out
      command-evaluation-timeout = ${app.sourcing.command-evaluation-timeout}
      command-evaluation-timeout = ${?GROUPS_CACHE_COMMAND_EVALUATION_TIMEOUT}
      # the execution context where commands are being evaluated; possible values are "akka" and "global"
      command-evaluation-execution-context = "akka"
      command-evaluation-execution-context = ${?GROUPS_CACHE_COMMAND_EVALUATION_EXECUTION_CONTEXT}
      # the total number of shards to allocate; anything other than '1' doesn't make sense here
      shards = 1
      shards = ${?GROUPS_CACHE_SHARDS}
      invalidation {
        # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
        lapsed-since-last-interaction = 5 minutes
        lapsed-since-last-interaction = ${?GROUPS_CACHE_LAST_INTERACTION_STOP_TIMEOUT}
        # flag to decide whether or not the invalidation timer is influenced by the reception of a get state message
        influence-invalidation-on-get = true
        influence-invalidation-on-get = ${?GROUPS_CACHE_INFLUENCE_INVALIDATION}
      }
      # retry configuration for fetching the user info & cache
      retry {
        # possible values are: "never", "once" "constant" and "exponential"
        strategy = "once"
        strategy = ${?GROUPS_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = 0 seconds
        initial-delay = ${?GROUPS_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 5 seconds
        max-delay = ${?GROUPS_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable only for strategy "exponential")
        max-retries = 7
        max-retries = ${?GROUPS_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 milliseconds
        constant = ${?GROUPS_RETRY_CONSTANT}
      }
    }
  }

  admin {
    # default indexing configuration
    indexing {
      # maximum number of events taken on each batch
      batch = 10
      batch = ${?INDEXING_BATCH}
      # maximum amount of time to wait for the number of events to be taken on each batch
      batch-timeout = 500ms
      batch-timeout = ${?INDEXING_BATCH_TIMEOUT}
      # indexing retry configuration
      retry {
        # possible values are: "never", "once", "constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?INDEXING_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        # (applicable only for strategy "exponential")
        initial-delay = 200 milliseconds
        initial-delay = ${?INDEXING_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 minutes
        max-delay = ${?INDEXING_RETRY_MAX_DELAY}
        # the maximum number of times an index function is retried
        max-retries = 10
        max-retries = ${?INDEXING_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 milliseconds
        constant = ${?INDEXING_RETRY_CONSTANT}
      }
      # indexing progress persistence settings
      progress {
        # number of events after which the indexing progress is being persisted
        persist-after-processed = 5000
        persist-after-processed = ${?INDEXING_PROGRESS_EVENTS}
        # amount of time after which the indexing progress is being persisted
        max-time-window = 2 minutes
        max-time-window = ${?INDEXING_PROGRESS_TIME}
      }
    }
    # default key value store configuration
    key-value-store {
      # the maximum duration to wait for the replicator to reply
      ask-timeout = 10 seconds
      ask-timeout = ${?KEY_VALUE_STORE_ASK_TIMEOUT}
      # the maximum duration to wait for a consistent read or write across the cluster
      consistency-timeout = 10 seconds
      consistency-timeout = ${?KEY_VALUE_STORE_CONSISTENCY_TIMEOUT}
      # retry strategy
      retry {
        # possible values are: "never", "once", "constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?KEY_VALUE_STORE_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = 100 milliseconds
        initial-delay = ${?KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 minutes
        max-delay = ${?KEY_VALUE_STORE_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable only for strategy "exponential")
        max-retries = 7
        max-retries = ${?KEY_VALUE_STORE_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 milliseconds
        constant = ${?KEY_VALUE_STORE_RETRY_CONSTANT}
      }
    }
    aggregate {
      # the maximum duration to wait for an aggregate to reply
      ask-timeout = 10 seconds
      ask-timeout = ${?AGGREGATE_ASK_TIMEOUT}
      # the journal plugin used to create event streams for arbitrary replays
      query-journal-plugin = ${app.persistence.query-journal-plugin}
      query-journal-plugin = ${?AGGREGATE_QUERY_JOURNAL_PLUGIN}
      # the maximum duration before a command evaluation times out
      command-evaluation-timeout = 5 seconds
      command-evaluation-timeout = ${?AGGREGATE_COMMAND_EVALUATION_TIMEOUT}
      # the execution context where commands are being evaluated; possible values are "akka" and "global"
      command-evaluation-execution-context = "global"
      command-evaluation-execution-context = ${?AGGREGATE_COMMAND_EVALUATION_EXECUTION_CONTEXT}
      # the total number of shards to allocate
      shards = 10
      shards = ${?AGGREGATE_SHARDS}
      # the aggregate actor passivation strategy
      passivation {
        # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
        lapsed-since-last-interaction = 5 seconds
        lapsed-since-last-interaction = ${?AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT}
        # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
        lapsed-since-recovery-completed = 0 milliseconds
        lapsed-since-recovery-completed = ${?AGGREGATE_RECOVERY_PASSIVATION_TIMEOUT}
      }
      retry {
        # the retry strategy to use; possible values are: "never", "once" and "exponential"
        strategy = "exponential"
        strategy = ${?AGGREGATE_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        # (applicable only for strategy "exponential")
        initial-delay = 200 milliseconds
        initial-delay = ${?AGGREGATE_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 minutes
        max-delay = ${?AGGREGATE_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable only for strategy "exponential")
        max-retries = 7
        max-retries = ${?AGGREGATE_RETRY_MAX_RETRIES}
        # the constant retry factor (applicable only for strategy "constant")
        constant = 500 milliseconds
        constant = ${?AGGREGATE_RETRY_CONSTANT}

      }
    }
    permissions {
      retry {
        # the retry strategy to use; possible values are: "never", "once" and "exponential"
        strategy = "exponential"
        strategy = ${?PERMISSIONS_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        # (applicable only for strategy "exponential")
        initial-delay = 100 milliseconds
        initial-delay = ${?PERMISSIONS_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 minutes
        max-delay = ${?PERMISSIONS_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable only for strategy "exponential")
        max-retries = 10
        max-retries = ${?PERMISSIONS_RETRY_MAX_RETRIES}
        # the constant retry factor (applicable only for strategy "constant")
        constant = 500 milliseconds
        constant = ${?PERMISSIONS_RETRY_CONSTANT}
      }
      owner = [
        #permissions
        "acls/read",
        "acls/write",

        # admin specific permissions
        "projects/read",
        "projects/write",
        "projects/create",
        "organizations/read",
        "organizations/write",
        "organizations/create",

        # kg specific permissions
        "resources/read",
        "resources/write",
        "resolvers/write",
        "views/query",
        "views/write",
        "schemas/write",
        "files/write",
        "storages/write",
        "archives/write"
      ]
    }
  }

  kg {
    # Instance storage configuration specific settings
    storage {
      ask-timeout = ${app.default-ask-timeout}
      ask-timeout = ${?STORAGE_SEARCH_ASK_TIMEOUT}

      # Disk storage configuration
      disk {
        volume = "/tmp"
        volume = ${?VOLUME_PATH}
        digest-algorithm = "SHA-256"
        digest-algorithm = ${?DIGEST_ALGORITHM}
        read-permission = "resources/read"
        read-permission = ${?DISK_READ_PERMISSION}
        write-permission = "files/write"
        write-permission = ${?DISK_WRITE_PERMISSION}
        show-location = false
        show-location = ${?DISK_SHOW_LOCATION}
        # 10 GB (expressed in bytes)
        max-file-size = 10737418240
        max-file-size = ${?DISK_MAX_FILE_SIZE}
      }
      # Remote disk storage configuration
      remote-disk {
        default-endpoint = "http://localhost:8084"
        default-endpoint = ${?REMOTE_DISK_DEFAULT_ENDPOINT}
        default-endpoint-prefix = "v1"
        default-endpoint-prefix = ${?REMOTE_DISK_DEFAULT_ENDPOINT_PREFIX}
        default-credentials = ${?REMOTE_DISK_DEFAULT_CREDENTIALS}
        digest-algorithm = "SHA-256"
        digest-algorithm = ${?DIGEST_ALGORITHM}
        read-permission = "resources/read"
        read-permission = ${?REMOTE_DISK_READ_PERMISSION}
        write-permission = "files/write"
        write-permission = ${?REMOTE_DISK_WRITE_PERMISSION}
        show-location = true
        show-location = ${?REMOTE_DISK_SHOW_LOCATION}
        # 10 GB (expressed in bytes)
        max-file-size = 10737418240
        max-file-size = ${?REMOTE_DISK_MAX_FILE_SIZE}
      }
      # Amazon S3 storage configuration
      amazon {
        digest-algorithm = "SHA-256"
        digest-algorithm = ${?DIGEST_ALGORITHM}
        read-permission = "resources/read"
        read-permission = ${?S3_READ_PERMISSION}
        write-permission = "files/write"
        write-permission = ${?S3_WRITE_PERMISSION}
        show-location = true
        show-location = ${?S3_SHOW_LOCATION}
        # 10 GB (expressed in bytes)
        max-file-size = 10737418240
        max-file-size = ${?S3_MAX_FILE_SIZE}
      }

      # File attributes retry configuration
      file-attr-retry {
        # possible values are: "never", "once","constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?FILE_ATTR_FETCH_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = 300 milliseconds
        initial-delay = ${?FILE_ATTR_FETCH_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 seconds
        max-delay = ${?FILE_ATTR_FETCH_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
        max-retries = 1000
        max-retries = ${?FILE_ATTR_FETCH_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 1 second
        constant = ${?FILE_ATTR_FETCH_RETRY_CONSTANT}
      }

      # the indexing process dealing with attributes computation
      indexing {
        # Maximum number of events taken on each batch
        batch = 10
        batch = ${?INDEXING_FILE_ATTR_BATCH}

        # Maximum amount of time to wait for the number of events to be taken on each batch
        batch-timeout = 300 millis
        batch-timeout = ${?INDEXING_FILE_ATTR_BATCH_TIMEOUT}

        retry {
          # possible values are: "never", "once","constant" and  "exponential"
          strategy = "exponential"
          strategy = ${?INDEXING_FILE_ATTR_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = 100 milliseconds
          initial-delay = ${?INDEXING_FILE_ATTR_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = 3 minutes
          max-delay = ${?INDEXING_FILE_ATTR_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
          max-retries = 30
          max-retries = ${?INDEXING_FILE_ATTR_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = 500 millisecond
          constant = ${?INDEXING_FILE_ATTR_RETRY_CONSTANT}
        }

        # indexing progress persistence settings
        progress {
          # number of events after which the indexing progress is being persisted
          persist-after-processed = 5000
          persist-after-processed = ${?INDEXING_FILE_ATTR_PROGRESS_EVENTS}
          # amount of time after which the indexing progress is being persisted
          max-time-window = 2 minutes
          max-time-window = ${?INDEXING_FILE_ATTR_PROGRESS_TIME}
        }
      }

      # Password and salt used to encrypt credentials at rest
      password = "changeme"
      password = ${?STORAGE_PASSWORD}
      salt = "salt"
      salt = ${?STORAGE_SALT}
    }

    # Sparql endpoint specific settings
    sparql {
      # The base uri to the sparql http endpoint
      base = "http://localhost:9999/bigdata"
      base = ${?SPARQL_BASE_URI}

      # Index prefix (keyspace) for indexing
      index-prefix = "kg"
      index-prefix = ${?SPARQL_PREFIX_INDEX}

      # The optional basic auth credentials to access the endpoint
      username = ${?SPARQL_USERNAME}
      password = ${?SPARQL_PASSWORD}

      # Sparql default index
      default-index = "kg"

      ask-timeout = ${app.default-ask-timeout}
      ask-timeout = ${?SPARQL_ASK_TIMEOUT}

      # Sparql query retry configuration
      query {
        # possible values are: "never", "once","constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?QUERYING_SPARQL_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = 100 milliseconds
        initial-delay = ${?QUERYING_SPARQL_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 1 minutes
        max-delay = ${?QUERYING_SPARQL_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
        max-retries = 4
        max-retries = ${?QUERYING_SPARQL_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 millisecond
        constant = ${?QUERYING_SPARQL_RETRY_CONSTANT}
      }

      # Sparql indexing configuration
      indexing {
        # Maximum number of events taken on each batch
        batch = 10
        batch = ${?INDEXING_SPARQL_BATCH}

        # Maximum amount of time to wait for the number of events to be taken on each batch
        batch-timeout = 300 millis
        batch-timeout = ${?INDEXING_SPARQL_BATCH_TIMEOUT}

        retry {
          # possible values are: "never", "once","constant" and  "exponential"
          strategy = "exponential"
          strategy = ${?INDEXING_SPARQL_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = 100 milliseconds
          initial-delay = ${?INDEXING_SPARQL_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = 3 minutes
          max-delay = ${?INDEXING_SPARQL_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
          max-retries = 30
          max-retries = ${?INDEXING_SPARQL_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = 500 millisecond
          constant = ${?INDEXING_SPARQL_RETRY_CONSTANT}
        }

        # indexing progress persistence settings
        progress {
          # number of events after which the indexing progress is being persisted
          persist-after-processed = 5000
          persist-after-processed = ${?INDEXING_SPARQL_PROGRESS_EVENTS}
          # amount of time after which the indexing progress is being persisted
          max-time-window = 2 minutes
          max-time-window = ${?INDEXING_SPARQL_PROGRESS_TIME}
        }
      }
    }

    # ElasticSearch endpoint specific settings
    elastic-search {
      # The base uri to the ElasticSearch http endpoint
      base = "http://localhost:9200"
      base = ${?ELASTIC_SEARCH_BASE_URI}

      # Index prefix (namespace) for indexing
      index-prefix = "kg"
      index-prefix = ${?ELASTIC_SEARCH_PREFIX_INDEX}

      # ElasticSearch default index
      default-index = "kg_default"

      ask-timeout = ${app.default-ask-timeout}
      ask-timeout = ${?ELASTIC_SEARCH_ASK_TIMEOUT}

      # ElasticSearch query retry configuration
      query {
        # possible values are: "never", "once","constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?QUERYING_ELASTIC_SEARCH_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = 100 milliseconds
        initial-delay = ${?QUERYING_ELASTIC_SEARCH_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 1 minutes
        max-delay = ${?QUERYING_ELASTIC_SEARCH_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
        max-retries = 4
        max-retries = ${?QUERYING_ELASTIC_SEARCH_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 millisecond
        constant = ${?QUERYING_ELASTIC_SEARCH_RETRY_CONSTANT}
      }

      # Elastic Search indexing configuration
      indexing {
        # Maximum number of events taken on each batch
        batch = 30
        batch = ${?INDEXING_ELASTICSEARCH_BATCH}

        # Maximum amount of time to wait for the number of events to be taken on each batch
        batch-timeout = 300 millis
        batch-timeout = ${?INDEXING_ELASTICSEARCH_BATCH_TIMEOUT}

        retry {
          # possible values are: "never", "once","constant" and  "exponential"
          strategy = "exponential"
          strategy = ${?INDEXING_ELASTICSEARCH_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = 100 milliseconds
          initial-delay = ${?INDEXING_ELASTICSEARCH_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = 3 minutes
          max-delay = ${?INDEXING_ELASTICSEARCH_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
          max-retries = 30
          max-retries = ${?INDEXING_ELASTICSEARCH_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = 500 millisecond
          constant = ${?INDEXING_ELASTICSEARCH_RETRY_CONSTANT}
        }
        # indexing progress persistence settings
        progress {
          # number of events after which the indexing progress is being persisted
          persist-after-processed = 5000
          persist-after-processed = ${?INDEXING_ELASTICSEARCH_PROGRESS_EVENTS}
          # amount of time after which the indexing progress is being persisted
          max-time-window = 2 minutes
          max-time-window = ${?INDEXING_ELASTICSEARCH_PROGRESS_TIME}
        }
      }
    }

    composite {
      # the maximum number of sources allowed
      max-sources = 5
      max-sources = ${?COMPOSITE_MAX_SOURCES}
      # the maximum number of projections allowed
      max-projections = 5
      max-projections = ${?COMPOSITE_MAX_PROJECTIONS}
      # the minimum allowed value for interval rebuild
      min-interval-rebuild = 5 minutes
      min-interval-rebuild = ${?COMPOSITE_MIN_REBUILD_INTERVAL}

      # Password and salt used to encrypt token
      password = "changeme"
      password = ${?COMPOSITE_TOKEN_PASSWORD}
      salt = "salt"
      salt = ${?OMPOSITE_TOKEN_SALT}
    }

    # default aggregate configuration
    aggregate {
      # the maximum duration to wait for an aggregate to reply
      ask-timeout = 10 seconds
      ask-timeout = ${?AGGREGATE_ASK_TIMEOUT}
      # the journal plugin used to create event streams for arbitrary replays
      query-journal-plugin = ${app.persistence.query-journal-plugin}
      query-journal-plugin = ${?AGGREGATE_QUERY_JOURNAL_PLUGIN}
      # the maximum duration before a command evaluation times out
      command-evaluation-timeout = 5 seconds
      command-evaluation-timeout = ${?AGGREGATE_COMMAND_EVALUATION_TIMEOUT}
      # the execution context where commands are being evaluated; possible values are "akka" and "global"
      command-evaluation-execution-context = "global"
      command-evaluation-execution-context = ${?AGGREGATE_COMMAND_EVALUATION_EXECUTION_CONTEXT}
      # the total number of shards to allocate
      shards = 10
      shards = ${?AGGREGATE_SHARDS}
      # the aggregate actor passivation strategy
      passivation {
        # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
        lapsed-since-last-interaction = 5 seconds
        lapsed-since-last-interaction = ${?AGGREGATE_LAST_INTERACTION_PASSIVATION_TIMEOUT}
        # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
        lapsed-since-recovery-completed = 0 milliseconds
        lapsed-since-recovery-completed = ${?AGGREGATE_RECOVERY_PASSIVATION_TIMEOUT}
      }
      retry {
        # the retry strategy to use; possible values are: "never", "once","constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?AGGREGATE_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        # (applicable only for strategy "exponential")
        initial-delay = 100 milliseconds
        initial-delay = ${?AGGREGATE_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 minutes
        max-delay = ${?AGGREGATE_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
        max-retries = 10
        max-retries = ${?AGGREGATE_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 millisecond
        constant = ${?AGGREGATE_RETRY_CONSTANT}
      }
    }

    # default key value store configuration
    key-value-store {
      # the maximum duration to wait for the replicator to reply
      ask-timeout = 10 seconds
      ask-timeout = ${?KEY_VALUE_STORE_ASK_TIMEOUT}
      # the maximum duration to wait for a consistent read or write across the cluster
      consistency-timeout = 10 seconds
      consistency-timeout = ${?KEY_VALUE_STORE_CONSISTENCY_TIMEOUT}
      # retry strategy
      retry {
        # possible values are: "never", "once","constant" and  "exponential"
        strategy = "exponential"
        strategy = ${?KEY_VALUE_STORE_RETRY_STRATEGY}
        # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
        initial-delay = 100 milliseconds
        initial-delay = ${?KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
        # the maximum delay applied to the retrying strategy
        max-delay = 10 minutes
        max-delay = ${?KEY_VALUE_STORE_RETRY_MAX_DELAY}
        # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
        max-retries = 10
        max-retries = ${?KEY_VALUE_STORE_RETRY_MAX_RETRIES}
        # the constant increment (applicable only for strategy "constant")
        constant = 500 millisecond
        constant = ${?KEY_VALUE_STORE_RETRY_CONSTANT}
      }

      # Indexing keyvalue-store configuration
      indexing {
        # Maximum number of events taken on each batch
        batch = 5
        batch = ${?INDEXING_KEY_VALUE_STORE_BATCH}

        # Maximum amount of time to wait for the number of events to be taken on each batch
        batch-timeout = 300 millis
        batch-timeout = ${?INDEXING_KEY_VALUE_STORE_BATCH_TIMEOUT}

        retry {
          # possible values are: "never", "once","constant" and  "exponential"
          strategy = "exponential"
          strategy = ${?INDEXING_KEY_VALUE_STORE_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = 100 milliseconds
          initial-delay = ${?INDEXING_KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = 3 minutes
          max-delay = ${?INDEXING_KEY_VALUE_STORE_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable for strategy "exponential" and "constant")
          max-retries = 30
          max-retries = ${?INDEXING_KEY_VALUE_STORE_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = 500 millisecond
          constant = ${?INDEXING_KEY_VALUE_STORE_RETRY_CONSTANT}
        }
        # indexing progress persistence settings
        progress {
          # number of events after which the indexing progress is being persisted
          persist-after-processed = 5000
          persist-after-processed = ${?INDEXING_KEY_VALUE_STORE_PROGRESS_EVENTS}
          # amount of time after which the indexing progress is being persisted
          max-time-window = 2 minutes
          max-time-window = ${?INDEXING_KEY_VALUE_STORE_PROGRESS_TIME}
        }
      }
    }

    # archive cache configuration
    archives {
      # the time resource is kept in the archive cache before being invalidated
      cache-invalidate-after = 5 hours
      cache-invalidate-after = ${?ARCHIVES_CACHE_INVALIDATE_AFTER}
      # the maximum number of resources that can be contain in the archive
      max-resources = 1000
      max-resources = ${?ARCHIVES_MAX_RESOURCES}
      cache {
        # the maximum accepted delay for waiting for a response from the group cache
        ask-timeout = 15 seconds
        ask-timeout = ${?ARCHIVES_CACHE_ASK_TIMEOUT}
        # the maximum duration before a command evaluation times out
        command-evaluation-timeout = 5 seconds
        command-evaluation-timeout = ${?ARCHIVES_CACHE_CACHE_COMMAND_EVALUATION_TIMEOUT}
        # the execution context where commands are being evaluated; possible values are "akka" and "global"
        command-evaluation-execution-context = "akka"
        command-evaluation-execution-context = ${?ARCHIVES_CACHE_CACHE_COMMAND_EVALUATION_EXECUTION_CONTEXT}
        shards = 10
        shards = ${?ARCHIVES_CACHE_CACHE_SHARDS}
        invalidation {
          # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
          lapsed-since-last-interaction = ${app.archives.cache-invalidate-after}
          # flag to decide whether or not the invalidation timer is influenced by the reception of a get state message
          influence-invalidation-on-get = false
        }
        # retry configuration for fetching the user info & cache
        retry {
          # possible values are: "never", "once" "constant" and "exponential"
          strategy = "once"
          strategy = ${?ARCHIVES_CACHE_RETRY_STRATEGY}
          # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
          initial-delay = 0 seconds
          initial-delay = ${?ARCHIVES_CACHE_RETRY_INITIAL_DELAY}
          # the maximum delay applied to the retrying strategy
          max-delay = 5 seconds
          max-delay = ${?ARCHIVES_CACHE_RETRY_MAX_DELAY}
          # maximum number of retries in case of failure (applicable only for strategy "exponential")
          max-retries = 7
          max-retries = ${?ARCHIVES_CACHE_RETRY_MAX_RETRIES}
          # the constant increment (applicable only for strategy "constant")
          constant = 500 milliseconds
          constant = ${?ARCHIVES_CACHE_RETRY_CONSTANT}
        }
      }
    }

    default-ask-timeout = 5 seconds
    default-ask-timeout = ${?DEFAULT_ASK_TIMEOUT}
  }

  indexing {
    # maximum number of events taken on each batch
    batch = 10
    batch = ${?INDEXING_BATCH}
    # maximum amount of time to wait for the number of events to be taken on each batch
    batch-timeout = 500ms
    batch-timeout = ${?INDEXING_BATCH_TIMEOUT}
    # indexing retry configuration
    retry {
      # possible values are: "never", "once", "constant" and  "exponential"
      strategy = "exponential"
      strategy = ${?INDEXING_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      # (applicable only for strategy "exponential")
      initial-delay = 200 milliseconds
      initial-delay = ${?INDEXING_RETRY_INITIAL_DELAY}
      # the maximum delay applied to the retrying strategy
      max-delay = 10 minutes
      max-delay = ${?INDEXING_RETRY_MAX_DELAY}
      # the maximum number of times an index function is retried
      max-retries = 10
      max-retries = ${?INDEXING_RETRY_MAX_RETRIES}
      # the constant increment (applicable only for strategy "constant")
      constant = 500 milliseconds
      constant = ${?INDEXING_RETRY_CONSTANT}
    }
    # indexing progress persistence settings
    progress {
      # number of events after which the indexing progress is being persisted
      persist-after-processed = 5000
      persist-after-processed = ${?INDEXING_PROGRESS_EVENTS}
      # amount of time after which the indexing progress is being persisted
      max-time-window = 2 minutes
      max-time-window = ${?INDEXING_PROGRESS_TIME}
    }
  }

  key-value-store {
    # the maximum duration to wait for the replicator to reply
    ask-timeout = 10 seconds
    ask-timeout = ${?KEY_VALUE_STORE_ASK_TIMEOUT}
    # the maximum duration to wait for a consistent read or write across the cluster
    consistency-timeout = 10 seconds
    consistency-timeout = ${?KEY_VALUE_STORE_CONSISTENCY_TIMEOUT}
    # retry strategy
    retry {
      # possible values are: "never", "once", "constant" and  "exponential"
      strategy = "exponential"
      strategy = ${?KEY_VALUE_STORE_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      initial-delay = 100 milliseconds
      initial-delay = ${?KEY_VALUE_STORE_RETRY_INITIAL_DELAY}
      # the maximum delay applied to the retrying strategy
      max-delay = 10 minutes
      max-delay = ${?KEY_VALUE_STORE_RETRY_MAX_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = 7
      max-retries = ${?KEY_VALUE_STORE_RETRY_MAX_RETRIES}
      # the constant increment (applicable only for strategy "constant")
      constant = 500 milliseconds
      constant = ${?KEY_VALUE_STORE_RETRY_CONSTANT}
    }
  }


  # default sourcing configuration
  sourcing {
    # the maximum duration to wait for an aggregate to reply
    ask-timeout = 10 seconds
    ask-timeout = ${?SOURCING_ASK_TIMEOUT}
    # the journal plugin used to create event streams for arbitrary replays
    query-journal-plugin = ${app.persistence.query-journal-plugin}
    query-journal-plugin = ${?SOURCING_QUERY_JOURNAL_PLUGIN}
    # the maximum duration before a command evaluation times out
    command-evaluation-timeout = 5 seconds
    command-evaluation-timeout = ${?SOURCING_COMMAND_EVALUATION_TIMEOUT}
    # the execution context where commands are being evaluated; possible values are "akka" and "global"
    command-evaluation-execution-context = "global"
    command-evaluation-execution-context = ${?SOURCING_COMMAND_EVALUATION_EXECUTION_CONTEXT}
    # the total number of shards to allocate
    shards = 10
    shards = ${?SOURCING_SHARDS}
    # the aggregate actor passivation strategy
    passivation {
      # duration since the last received message after which the aggregate actors should shut down (0 - disabled)
      lapsed-since-last-interaction = 5 seconds
      lapsed-since-last-interaction = ${?SOURCING_LAST_INTERACTION_PASSIVATION_TIMEOUT}
      # duration since the aggregate actors' recovery after which they should shut down (0 - disabled)
      lapsed-since-recovery-completed = 0 milliseconds
      lapsed-since-recovery-completed = ${?SOURCING_RECOVERY_PASSIVATION_TIMEOUT}
    }
    retry {
      # possible values are: "never", "once", "constant" and  "exponential"
      strategy = "exponential"
      strategy = ${?SOURCING_RETRY_STRATEGY}
      # the initial delay before retrying that will be multiplied with the 'factor' for each attempt
      # (applicable only for strategy "exponential")
      initial-delay = 100 milliseconds
      initial-delay = ${?SOURCING_RETRY_INITIAL_DELAY}
      # the maximum delay applied to the retrying strategy
      max-delay = 10 minutes
      max-delay = ${?SOURCING_RETRY_MAX_DELAY}
      # maximum number of retries in case of failure (applicable only for strategy "exponential")
      max-retries = 7
      max-retries = ${?SOURCING_RETRY_MAX_RETRIES}
      # the constant increment (applicable only for strategy "constant")
      constant = 500 milliseconds
      constant = ${?SOURCING_RETRY_CONSTANT}
    }
  }


}