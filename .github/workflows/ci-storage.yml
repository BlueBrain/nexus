name: Continuous Integration Storage
on:
  push:
    branches:
      - master
    paths:
      - 'delta/rdf/**'
      - 'storage/**'
      - 'build.sbt'
      - 'project/**'
  pull_request:
    paths:
      - 'delta/rdf/**'
      - 'storage/**'
      - 'build.sbt'
      - 'project/**'
jobs:
  review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
      - uses: actions/checkout@v2
      - uses: coursier/cache-action@v4
      - uses: olafurpg/setup-scala@v5
        with:
          java-version: adopt@1.8-0
      - name: StaticAnalysis
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" clean scalafmtCheck test:scalafmtCheck scalafmtSbtCheck scapegoat
      - name: Tests
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" clean coverage test coverageReport coverageAggregate
      - name: Assembly
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" assembly
  review-permission-fixer:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build ./storage/permissions-fixer --tag=nexus/fixer
      - name: Compile and run tests
        run: docker run nexus/fixer
  publish:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    env:
      CI: true
      BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
      BINTRAY_PASS: ${{ secrets.BINTRAY_PASS }}
    steps:
      - name: Checkout
      - uses: actions/checkout@v2
      - uses: coursier/cache-action@v4
        with:
          path: ~/.cache/coursier
          key: ${{ runner.os }}-coursier-scala-${{ hashFiles('**/*.sbt') }}
          restore-keys: ${{ runner.os }}-coursier-scala-
      - uses: olafurpg/setup-scala@v5
        with:
          java-version: adopt@1.8-0
      - name: PublishToBintray
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" releaseEarly
      - name: PublishToDockerHub
        run: |
          sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" docker:publishLocal
          echo ${{ secrets.DOCKER_PASS }} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin
          docker push bluebrain/nexus-storage:latest
      - name: RecordCoverage
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" clean coverage test coverageReport coverageAggregate
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    env:
      CI: true
      BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
      BINTRAY_PASS: ${{ secrets.BINTRAY_PASS }}
    steps:
      - name: Checkout
      - uses: actions/checkout@v2
      - uses: coursier/cache-action@v4
      - uses: olafurpg/setup-scala@v5
        with:
          java-version: adopt@1.8-0
      - name: SetVersion
        run: echo ::set-env name=VERSION::$(echo ${GITHUB_REF:11})
      - name: PublishToBintray
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" releaseEarly
      - name: PublishToDockerHub
        run: |
          sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" ";set Docker/version := \"${{ env.VERSION }}\"; docker:publishLocal"
          echo ${{ secrets.DOCKER_PASS }} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin
          docker push bluebrain/nexus-storage:${{ env.VERSION }}
      - name: RecordCoverage
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" clean coverage test coverageReport coverageAggregate
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
