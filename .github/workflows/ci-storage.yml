name: Continuous Integration Storage
on:
  push:
    branches:
      - master
    paths:
      - 'delta/kernel/**'
      - 'delta/rdf/**'
      - 'storage/**'
      - 'build.sbt'
      - 'project/**'
  pull_request:
    paths:
      - 'delta/kernel/**'
      - 'delta/rdf/**'
      - 'storage/**'
      - 'build.sbt'
      - 'project/**'
jobs:
  review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Coursier Cache
        uses: coursier/cache-action@v5
      - name: Setup Scala
        uses: olafurpg/setup-scala@v10
        with:
          java-version: adopt@1.8.0-272
      - name: StaticAnalysis
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" clean scalafmtCheck test:scalafmtCheck scalafmtSbtCheck scapegoat
      - name: Tests
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" clean coverage test coverageReport coverageAggregate
      - name: Assembly
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" assembly
  review-permission-fixer:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build ./storage/permissions-fixer --tag=nexus/fixer
      - name: Compile and run tests
        run: docker run nexus/fixer
  publish:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    env:
      CI: true
      BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
      BINTRAY_PASS: ${{ secrets.BINTRAY_PASS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Coursier Cache
        uses: coursier/cache-action@v5
      - name: Setup Scala
        uses: olafurpg/setup-scala@v10
        with:
          java-version: adopt@1.8.0-272
      - name: Publish To Bintray
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" releaseEarly
      - name: Publish To DockerHub
        run: |
          sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" docker:publishLocal
          echo ${{ secrets.DOCKER_PASS }} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin
          docker push bluebrain/nexus-storage:latest
      - name: Record Coverage
        run: sbt -Dsbt.color=always -Dsbt.supershell=false "project storage" clean coverage test coverageReport coverageAggregate
      - name: Report Coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
